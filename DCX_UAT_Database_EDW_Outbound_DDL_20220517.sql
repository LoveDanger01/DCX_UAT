USE [EDW_Outbound]
GO

/****** Object:  Table [salesforce].[Product]    Script Date: 5/17/2022 1:58:29 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Product](
	[IsActive] [bit] NULL,
	[ProductCode] [varchar](255) NULL,
	[Name] [varchar](255) NOT NULL,
	[Product_Type__c] [varchar](1) NULL,
	[External_Id__c] [varchar](10) NOT NULL,
	[Is_Myga__c] [bit] NULL,
	[Created_dt] [datetime2](7) NULL,
	[Modified_dt] [datetime2](7) NULL,
PRIMARY KEY CLUSTERED 
(
	[External_Id__c] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[tmp_sync_name]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[tmp_sync_name](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Name_ID] [int] NOT NULL,
	[FirstName] [varchar](20) NULL,
	[LastName] [varchar](20) NULL,
	[MiddleName] [varchar](10) NULL,
	[Is_Deceased__c] [varchar](1) NULL,
	[Social_Security_Number__c] [varchar](12) NULL,
	[Gender__c] [varchar](1) NULL,
	[Date_of_Birth__c] [datetime2](7) NULL,
	[Tax_Status__c] [varchar](1) NULL,
	[Tax_Witholding_Option__c] [varchar](1) NULL,
 CONSTRAINT [PK__tmp_sync__3214EC275FC11A41] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[tmp_sync_nadrna]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[tmp_sync_nadrna](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Client_Passcode__c] [varchar](20) NULL,
	[Paperless_Annual_Statement__c] [bit] NULL,
	[Paperless_11_Month_Summary__c] [bit] NULL,
	[Name_id] [int] NOT NULL,
 CONSTRAINT [PK__tmp_sync__3214EC273203A96E] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[tmp_sync_first_name_id]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[tmp_sync_first_name_id](
	[Name_ID] [int] NOT NULL,
 CONSTRAINT [PK__tmp_sync__332BBAF28450666E] PRIMARY KEY CLUSTERED 
(
	[Name_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[tmp_sync_email_address_id]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[tmp_sync_email_address_id](
	[Name_ID] [int] NOT NULL,
	[ADDRESS_ID] [int] NOT NULL,
 CONSTRAINT [PK_tmp_sync_top_address_id] PRIMARY KEY CLUSTERED 
(
	[Name_ID] ASC,
	[ADDRESS_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[tmp_AdvisorContactEmailID]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[tmp_AdvisorContactEmailID](
	[Row_ID] [int] IDENTITY(1,1) NOT NULL,
	[MinNameID] [int] NULL,
	[EmailID] [int] NULL,
 CONSTRAINT [PK_AdvisorContactEmailID] PRIMARY KEY CLUSTERED 
(
	[Row_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_AdvisorContactEmailsNameID] UNIQUE NONCLUSTERED 
(
	[MinNameID] ASC,
	[EmailID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[reject_Account_Person]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[reject_Account_Person](
	[Row_ID] [bigint] IDENTITY(1,1) NOT NULL,
	[LifePro_ID__c] [nvarchar](20) NULL,
	[LifePro_Last_Modified_DateTime__c] [nvarchar](30) NULL,
	[Created_dt] [datetime2](7) NULL,
	[Modified_dt] [datetime2](7) NULL,
	[FirstName] [varchar](40) NULL,
	[LastName] [varchar](40) NULL,
	[MiddleName] [varchar](10) NULL,
	[Phone] [varchar](40) NULL,
	[OwnerId] [varchar](20) NULL,
	[RecordTypeId] [varchar](20) NULL,
	[PersonEmail] [varchar](105) NULL,
	[Is_Deceased__c] [bit] NULL,
	[Client_Passcode__c] [varchar](20) NULL,
	[Paperless_Annual_Statement__c] [bit] NULL,
	[Paperless_11_Month_Summary__c] [bit] NULL,
	[Social_Security_Number__c] [varchar](12) NULL,
	[Gender__c] [varchar](1) NULL,
	[Date_of_Birth__c] [datetime2](7) NULL,
	[Tax_Status__c] [varchar](1) NULL,
	[Tax_Witholding_Option__c] [varchar](1) NULL,
	[LifePro_NameID] [int] NULL,
	[Reject_Flag] [smallint] NULL,
	[Reject_Dt] [datetime2](7) NULL,
	[Reject_Reason] [nvarchar](100) NULL,
	[salesforce_id] [nvarchar](20) NULL,
	[Delete_Flag] [bit] NULL,
 CONSTRAINT [PK__reject_A__7C36D05EA7EBEDF4] PRIMARY KEY CLUSTERED 
(
	[Row_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[PhoneNumber]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[PhoneNumber](
	[NameID] [int] NOT NULL,
	[PhoneNumber] [varchar](20) NOT NULL,
	[EFFECTIVE_DATE] [datetime2](7) NULL,
	[ADDRESS_CODE] [varchar](3) NULL,
	[COMPANY_CODE] [varchar](2) NULL,
	[POLICY_NUMBER] [varchar](12) NULL,
	[ADDRESS_ID] [int] NULL,
	[VERSION_ID] [bigint] NULL,
	[CREATED_DT] [datetime2](7) NULL,
	[MODIFIED_DT] [datetime2](7) NULL,
 CONSTRAINT [PK_PhoneNumber] PRIMARY KEY CLUSTERED 
(
	[NameID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Policy]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Policy](
	[RecordTypeId] [varchar](20) NULL,
	[NameInsuredId] [varchar](20) NULL,
	[Name] [varchar](255) NULL,
	[ProductId] [varchar](20) NULL,
	[Issue_Date__c] [datetime2](7) NULL,
	[Status] [varchar](1) NULL,
	[Status_Reason__c] [varchar](2) NULL,
	[ProducerId] [varchar](20) NULL,
	[Product_External_Id__c] [varchar](20) NULL,
	[External_Id__c] [varchar](20) NULL,
	[Sub_Account__c] [varchar](20) NULL,
	[SuitabilityStatus] [varchar](45) NULL,
	[Policy_Holder_Name_Id__c] [varchar](20) NULL,
	[Service_Agent_Name_Id__c] [varchar](20) NULL,
	[Inherited__c] [bit] NULL,
	[Company_Code__c] [varchar](2) NULL,
	[Policy_Code__c] [varchar](1) NULL,
	[Line_of_Business__c] [varchar](1) NULL,
	[Application_Date__c] [datetime2](7) NULL,
	[Application_Received_Date] [datetime2](7) NULL,
	[Effective_Date__c] [datetime2](7) NULL,
	[Terminated_Date__c] [datetime2](7) NULL,
	[Delivery_Receipt_Date__c] [datetime2](7) NULL,
	[Issue_State__c] [varchar](2) NULL,
	[Contract_Year] [int] NULL,
	[Tax_Status__c] [varchar](1) NULL,
	[Contract_Value] [money] NULL,
	[Surrender_Value] [money] NULL,
	[Min_Guaranteed_Surrender_Value] [money] NULL,
	[Out_Of_Surrender_Date__c] [datetime2](7) NULL,
	[Min_Guaranted_Interest_Rate] [decimal](5, 2) NULL,
	[Income_Account_Value] [money] NULL,
	[Death_Benefit_IAV] [money] NULL,
	[Remaining_Penalty_Free_Amount] [money] NULL,
	[Calculated_RMD] [money] NULL,
	[Commission_Option__c] [varchar](1) NULL,
	[Is_RMD_Met] [bit] NULL,
	[FMV_Document_Id] [int] NULL,
	[Is_Setup_on_EFT] [bit] NULL,
	[Is_Estate_Shield_Product__c] [bit] NULL,
	[Payment_Amount] [money] NULL,
	[Payment_Mode] [varchar](2) NULL,
	[Payment_Start_Date] [datetime2](7) NULL,
	[LIBR_Payout_Percentage] [decimal](5, 2) NULL,
	[TOV_Open_Date__c] [datetime2](7) NULL,
	[TOV_Deadline__c] [datetime2](7) NULL,
	[Surrender_Charge] [money] NULL,
	[Bonus_Recapture] [money] NULL,
	[MVA_Amount] [money] NULL,
	[Surrender_Charge_Percent] [decimal](5, 2) NULL,
	[New_Money_Rate] [decimal](5, 2) NULL,
	[Maturity_Date] [datetime2](7) NULL,
	[LIBR_IAV_%] [decimal](5, 2) NULL,
	[LIBR_IAV_Fee] [decimal](5, 2) NULL,
	[LIBR_IAV_Reset_Fee] [decimal](5, 2) NULL,
	[LIBR_Accumulation_Period] [int] NULL,
	[Riders__c] [varchar](100) NULL,
	[Pre_Tefra_Income] [money] NULL,
	[Pre_Tefra_Basis] [money] NULL,
	[Pre_Tefra_Balance] [money] NULL,
	[Post_Tefra_Income] [money] NULL,
	[Post_Tefra_Basis] [money] NULL,
	[Post_Tefra_Balance] [money] NULL,
	[PAC_PlannedPremiumAmount__c] [money] NULL,
	[PAC_PremiumMode__c] [varchar](2) NULL,
	[PAC_PlannedDateOfDebit__c] [varchar](2) NULL,
	[Created_dt] [datetime2](7) NULL,
	[Modified_dt] [datetime2](7) NULL,
	[LifePro_CompanyCode] [varchar](2) NOT NULL,
	[LifePro_PolicyNumber] [varchar](12) NOT NULL,
	[LIBR_Choice__c] [varchar](200) NULL,
	[Estimated_Premium__c] [money] NULL,
	[Issue_Age__c] [int] NULL,
	[Service_Agent_Changed__c] [bit] NULL,
	[BAV_Bonus_Percentage__c] [decimal](16, 2) NULL,
	[Status_Reason_Description__c] [varchar](40) NULL,
	[Block_Indicator__c] [bit] NULL,
	[Payment_Mode__c] [varchar](1) NULL,
	[Period_Certain_Years__c] [smallint] NULL,
	[Payment_Method__c] [varchar](1) NULL,
	[Exclusion_Ratio__c] [decimal](10, 5) NULL,
 CONSTRAINT [PK_PolicyNumberCompanyNumber] PRIMARY KEY CLUSTERED 
(
	[LifePro_CompanyCode] ASC,
	[LifePro_PolicyNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Policy_Document]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Policy_Document](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[RecordTypeID] [varchar](20) NULL,
	[Document_Type__c] [varchar](10) NULL,
	[Description__c] [varchar](100) NULL,
	[Policy__c] [varchar](20) NULL,
	[Policy_External_ID__c] [varchar](20) NULL,
	[Contact__c] [varchar](20) NULL,
	[Product_External_ID__c] [varchar](20) NULL,
	[Product__c] [varchar](20) NULL,
	[External_ID__c] [varchar](20) NULL,
	[Order_Date__c] [datetime] NULL,
	[Received_Date__c] [datetime] NULL,
	[Review_Date__c] [datetime] NULL,
	[Document_Number__c] [varchar](20) NULL,
	[CREATED_DT] [datetime2](7) NULL,
	[MODIFIED_DT] [datetime2](7) NULL,
 CONSTRAINT [PK_Policy_Document] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Policy_Status_Reason]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Policy_Status_Reason](
	[StatusCode] [char](1) NOT NULL,
	[ReasonCode] [char](2) NOT NULL,
	[ReasonCodeDesc] [varchar](40) NULL,
 CONSTRAINT [PK_Policy_Status_Reason] PRIMARY KEY CLUSTERED 
(
	[StatusCode] ASC,
	[ReasonCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Policy_Tax_Document]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Policy_Tax_Document](
	[RecordTypeID] [varchar](20) NULL,
	[Document_Type__c] [varchar](10) NULL,
	[Description__c] [varchar](100) NULL,
	[Policy__c] [varchar](20) NULL,
	[Policy_External_ID__c] [varchar](20) NULL,
	[Contact__c] [varchar](20) NULL,
	[Product_External_ID__c] [varchar](20) NULL,
	[Product__c] [varchar](20) NULL,
	[External_ID__c] [varchar](20) NOT NULL,
	[Order_Date__c] [datetime] NULL,
	[Received_Date__c] [datetime] NULL,
	[Review_Date__c] [datetime] NULL,
	[Document_Number__c] [varchar](20) NULL,
	[Created_dt] [datetime2](7) NULL,
	[Modified_dt] [datetime2](7) NULL,
 CONSTRAINT [PK_Policy_Tax_Document] PRIMARY KEY CLUSTERED 
(
	[External_ID__c] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Sub_Account]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Sub_Account](
	[Name] [varchar](80) NULL,
	[Parent_Account__c] [varchar](20) NULL,
	[Parent_Account_Name_Id__c] [varchar](20) NULL,
	[Name_Id__c] [varchar](20) NULL,
	[LifePro_Last_Modified_DateTime__c] [datetime2](7) NULL,
	[First_Name__c] [varchar](40) NULL,
	[Last_Name__c] [varchar](40) NULL,
	[Middle_Name__c] [varchar](10) NULL,
	[Account_Phone__c] [varchar](40) NULL,
	[Email__c] [varchar](105) NULL,
	[Is_Deceased__c] [bit] NULL,
	[Client_Passcode__c] [varchar](20) NULL,
	[Paperless_Annual_Statement__c] [bit] NULL,
	[Paperless_11_Month_Summary__c] [bit] NULL,
	[Social_Security_Number__c] [varchar](12) NULL,
	[Gender__c] [varchar](1) NULL,
	[Date_of_Birth__c] [datetime2](7) NULL,
	[Tax_Status__c] [varchar](1) NULL,
	[Tax_Witholding_Option__c] [varchar](1) NULL,
	[Created_dt] [datetime2](7) NULL,
	[Modified_dt] [datetime2](7) NULL,
	[LifePro_NameID] [int] NOT NULL,
	[Reject_Flag] [smallint] NULL,
	[Reject_Dt] [datetime2](7) NULL,
	[Reject_Reason] [nvarchar](100) NULL,
	[Delete_Flag] [bit] NULL,
 CONSTRAINT [PK_Sub_Account] PRIMARY KEY CLUSTERED 
(
	[LifePro_NameID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[reject_Account_Institution]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[reject_Account_Institution](
	[Row_ID] [bigint] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](255) NULL,
	[Phone] [varchar](40) NULL,
	[OwnerId] [varchar](20) NULL,
	[RecordTypeId] [varchar](20) NULL,
	[LifePro_Last_Modified_DateTime__c] [nvarchar](30) NULL,
	[Email__c] [varchar](105) NULL,
	[LifePro_ID__c] [bigint] NOT NULL,
	[TIN__c] [varchar](12) NULL,
	[Client_Passcode__c] [varchar](20) NULL,
	[Paperless_Annual_Statement__c] [bit] NULL,
	[Paperless_11_Month_Summary__c] [bit] NULL,
	[Tax_Status__c] [varchar](1) NULL,
	[Tax_Witholding_Option__c] [varchar](1) NULL,
	[Created_dt] [datetime2](7) NULL,
	[Modified_dt] [datetime2](7) NULL,
	[LifePro_NameID] [int] NOT NULL,
	[Reject_Flag] [smallint] NULL,
	[Reject_Dt] [datetime2](7) NULL,
	[Reject_Reason] [nvarchar](100) NULL,
	[salesforce_id] [nvarchar](20) NULL,
	[Delete_Flag] [bit] NULL,
 CONSTRAINT [PK__reject_A__7C36D05E0F24E493] PRIMARY KEY CLUSTERED 
(
	[Row_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[SF_INSURANCEPOLICYPARTICIPANT]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[SF_INSURANCEPOLICYPARTICIPANT](
	[id] [nvarchar](20) NOT NULL,
	[EXTERNAL_ID__C] [nvarchar](40) NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[SF_Account_Address__c]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[SF_Account_Address__c](
	[Id] [nvarchar](18) NULL,
	[RecordTypeId] [nvarchar](18) NULL,
	[CreatedDate] [datetime] NULL,
	[LastModifiedDate] [datetime] NULL,
	[Address_External_Id__c] [nvarchar](20) NULL
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[reject_Account_Business]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[reject_Account_Business](
	[Row_ID] [bigint] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](255) NULL,
	[Phone] [varchar](40) NULL,
	[OwnerId] [varchar](20) NULL,
	[RecordTypeId] [varchar](20) NULL,
	[LifePro_Last_Modified_DateTime__c] [nvarchar](30) NULL,
	[X2017_Activity_Premium__c] [decimal](16, 2) NULL,
	[X2017_Effective_Premium__c] [decimal](16, 2) NULL,
	[X2018_Activity_Premium__c] [decimal](16, 2) NULL,
	[X2018_Effective_Premium__c] [decimal](16, 2) NULL,
	[X2019_Activity_Premium__c] [decimal](16, 2) NULL,
	[X2019_Effective_Premium__c] [decimal](16, 2) NULL,
	[Agent_Number__c] [varchar](20) NULL,
	[Company_Code__c] [varchar](2) NULL,
	[Email__c] [varchar](105) NULL,
	[LifePro_ID__c] [bigint] NOT NULL,
	[Region__c] [varchar](10) NULL,
	[Status__c] [varchar](10) NULL,
	[Status_Date__c] [datetime2](7) NULL,
	[Suitability__c] [bit] NULL,
	[TIN__c] [varchar](12) NULL,
	[Social_Security_Number__c] [varchar](12) NULL,
	[Tax_Status__c] [varchar](1) NULL,
	[Tax_Witholding_Option__c] [varchar](1) NULL,
	[Created_dt] [datetime2](7) NULL,
	[Modified_dt] [datetime2](7) NULL,
	[LifePro_NameID] [int] NOT NULL,
	[Reject_Flag] [smallint] NULL,
	[Reject_Dt] [datetime2](7) NULL,
	[Reject_Reason] [nvarchar](100) NULL,
 CONSTRAINT [PK__reject_A__7C36D05E4D3D0B34] PRIMARY KEY CLUSTERED 
(
	[Row_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[reject_Upline_Detail]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[reject_Upline_Detail](
	[Row_Id] [bigint] IDENTITY(1,1) NOT NULL,
	[External_Id__c] [bigint] NULL,
	[Version_Id__c] [bigint] NULL,
	[Salesforce_Id] [nvarchar](18) NULL,
	[Delete_Flag] [bit] NULL,
	[Created_Dt] [datetime2](7) NULL,
	[Modified_Dt] [datetime2](7) NULL,
	[Agent_Level__c] [varchar](2) NULL,
	[BD_Agent_Percent__c] [decimal](5, 2) NULL,
	[Agent_Number__c] [nvarchar](18) NULL,
	[BD_Commission_Level__c] [varchar](2) NULL,
	[BD_NMO_Percent__c] [decimal](5, 2) NULL,
	[BD_Product_Type_Commissions__c] [varchar](1) NULL,
	[Region__c] [varchar](6) NULL,
	[Start_Date__c] [date] NULL,
	[Stop_Date__c] [date] NULL,
	[BD_Upline_Percent__c] [decimal](10, 2) NULL,
	[Upline__c] [nvarchar](18) NULL,
	[Signing_Agent__c] [nvarchar](18) NULL,
	[Upline_Level__c] [varchar](2) NULL,
	[Company_Code__c] [varchar](2) NULL,
	[Broker_Dealer_Agent_Number__c] [nvarchar](18) NULL,
	[Reject_Flag] [smallint] NULL,
	[Reject_Dt] [datetime2](7) NULL,
	[Reject_Reason] [nvarchar](100) NULL,
 CONSTRAINT [PK_reject_UplineDetail_RowID] PRIMARY KEY CLUSTERED 
(
	[Row_Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[reject_Advisor_Contact]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[reject_Advisor_Contact](
	[Row_ID] [bigint] IDENTITY(1,1) NOT NULL,
	[AccountID] [varchar](18) NULL,
	[BirthDate] [date] NULL,
	[BusinessPhone] [varchar](40) NULL,
	[DoNotCall] [bit] NULL,
	[Email] [nvarchar](105) NULL,
	[HasOptedOutOfEmail] [bit] NULL,
	[HasOptedOutOfFax] [bit] NULL,
	[OwnerID] [int] NULL,
	[FirstName] [varchar](20) NULL,
	[LastName] [varchar](20) NULL,
	[MailingAddress] [varchar](275) NULL,
	[MailingCity] [varchar](24) NULL,
	[MailingCountry] [varchar](30) NULL,
	[MailingState] [varchar](2) NULL,
	[MailingStreet] [nvarchar](105) NULL,
	[MailingPostalCode] [varchar](5) NULL,
	[MiddleName] [varchar](10) NULL,
	[OtherPhone] [varchar](60) NULL,
	[OtherAddress] [varchar](275) NULL,
	[OtherCity] [varchar](24) NULL,
	[OtherCountry] [varchar](30) NULL,
	[OtherState] [varchar](2) NULL,
	[OtherStreet] [varchar](105) NULL,
	[OtherPostalCode] [varchar](5) NULL,
	[RecordType] [varchar](18) NULL,
	[Salutation] [varchar](6) NULL,
	[Suffix] [varchar](6) NULL,
	[LifePro_Last_Modified_DateTime__c] [bigint] NULL,
	[DLRS_2020_Fall_Conference_Premium__c] [decimal](18, 2) NULL,
	[DLRS_2021_Fall_Conference_Premium__c] [decimal](18, 2) NULL,
	[All_Time_Premium__c] [decimal](18, 2) NULL,
	[AML_Training__c] [date] NULL,
	[Total_Production__c] [varchar](70) NULL,
	[DLRS_August_Premium_Total__c] [decimal](18, 2) NULL,
	[Company_Code__c] [varchar](2) NULL,
	[Contact_Record_Type__c] [varchar](40) NULL,
	[First_App_Date__c] [date] NULL,
	[Gender__c] [varchar](1) NULL,
	[Last_App_Date__c] [datetime] NULL,
	[Last_Status_Date__c] [datetime] NULL,
	[Last_Terminated_Date__c] [datetime] NULL,
	[LifePro_ID__c] [nvarchar](15) NOT NULL,
	[LO_Agent__c] [bit] NULL,
	[Name_Format__c] [varchar](1) NULL,
	[Preferred_Name__c] [varchar](50) NULL,
	[Region__c] [varchar](6) NULL,
	[SSN__c] [varchar](9) NOT NULL,
	[State__c] [varchar](20) NULL,
	[Suitability__c] [bit] NULL,
	[Terminated_Amount__c] [decimal](18, 2) NULL,
	[YTD_Activity_Amount__c] [decimal](18, 2) NULL,
	[YTD_Apps_Received__c] [decimal](18, 2) NULL,
	[YTD_Effective_Amount__c] [decimal](18, 2) NULL,
	[DLRS_YTD_FIA_Premium__c] [decimal](18, 2) NULL,
	[YTD_Issue_Amount__c] [decimal](18, 2) NULL,
	[Parent_Name_Id__c] [varchar](20) NULL,
	[Name_Id__c] [varchar](20) NULL,
	[NPN__c] [varchar](10) NULL,
	[CRD__c] [varchar](10) NULL,
	[Created_dt] [datetime2](7) NULL,
	[Modified_dt] [datetime2](7) NULL,
	[Reject_Flag] [smallint] NULL,
	[Reject_Dt] [datetime2](7) NULL,
	[Reject_Reason] [nvarchar](100) NULL,
 CONSTRAINT [PK__reject_A__7C36D05E3379F967] PRIMARY KEY CLUSTERED 
(
	[Row_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Producer]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Producer](
	[ContactID] [nvarchar](18) NULL,
	[Account__c] [nvarchar](18) NULL,
	[Name] [varchar](12) NOT NULL,
	[Type] [nvarchar](1) NULL,
	[Contract_Date__c] [datetime2](7) NULL,
	[Passcode__c] [nvarchar](20) NULL,
	[Signing_Agent__c] [nvarchar](12) NULL,
	[Company_Code__c] [varchar](2) NOT NULL,
	[Region__c] [nvarchar](10) NULL,
	[Regular_Qualifying_Premium__c] [decimal](16, 2) NULL,
	[Fax__c] [nvarchar](40) NULL,
	[Phone__c] [nvarchar](40) NULL,
	[Status] [nvarchar](1) NULL,
	[Start_Date__c] [datetime2](7) NULL,
	[End_Date__c] [datetime2](7) NULL,
	[Name_Id__c] [nvarchar](20) NOT NULL,
	[Account_Name_Id__c] [nvarchar](20) NULL,
	[Contact_Name_Id__c] [nvarchar](20) NULL,
	[Upline_Producer_Number__c] [nvarchar](20) NULL,
	[Debit_Balance__c] [decimal](16, 2) NULL,
	[Status_Change_Reason__c] [nvarchar](60) NULL,
	[Created_dt] [datetime2](7) NULL,
	[Modified_dt] [datetime2](7) NULL,
	[External_Id__c]  AS ((coalesce([Company_Code__c],'')+'-')+coalesce([Name],'')),
	[Status_Reason_Description__c] [nvarchar](255) NULL,
	[Paperless_Annual_Statement__c] [bit] NULL,
	[Paperless_11_Month_Summary__c] [bit] NULL,
 CONSTRAINT [PK_PRODUCER] PRIMARY KEY CLUSTERED 
(
	[Name] ASC,
	[Company_Code__c] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Producer_Address]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Producer_Address](
	[LifePro_Last_Modified_DateTime__c] [varchar](30) NULL,
	[Address_External_Id__c] [varchar](20) NULL,
	[Address__c] [varchar](20) NULL,
	[Type__c] [varchar](10) NULL,
	[Producer_External_Id__c] [varchar](20) NULL,
	[Producer__c] [varchar](25) NULL,
	[Address_Code__c] [varchar](20) NULL,
	[Effective_Date__c] [datetime] NULL,
	[External_ID__c] [varchar](100) NOT NULL,
	[State__c] [varchar](2) NULL,
	[Created_dt] [datetime2](7) NULL,
	[Modified_dt] [datetime2](7) NULL,
	[Delete_Flag] [bit] NULL,
	[Reject_Flag] [smallint] NULL,
	[Reject_Dt] [datetime2](7) NULL,
	[Reject_Reason] [varchar](100) NULL,
 CONSTRAINT [PK_Producer_Address_1] PRIMARY KEY CLUSTERED 
(
	[External_ID__c] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Producer_Policy_Assignment]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Producer_Policy_Assignment](
	[InsurancePolicyId] [nvarchar](18) NULL,
	[ProducerId] [nvarchar](18) NULL,
	[Agent_Name_Id__c] [int] NULL,
	[Type__c] [varchar](2) NULL,
	[Policy_Number__c] [nvarchar](20) NULL,
	[External_Id__c] [bigint] NOT NULL,
	[Agent__c] [varchar](12) NULL,
	[Commission_Percent__c] [decimal](5, 2) NULL,
	[Production_Percent__c] [decimal](5, 2) NULL,
	[Created_dt] [datetime2](7) NULL,
	[Modified_dt] [datetime2](7) NULL,
	[Delete_Flag] [bit] NOT NULL,
 CONSTRAINT [PK__Producer_POLICY_ASSIGNMENT] PRIMARY KEY CLUSTERED 
(
	[External_Id__c] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[reject_Account_BrokerDealer]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[reject_Account_BrokerDealer](
	[Row_ID] [bigint] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](255) NULL,
	[Phone] [varchar](40) NULL,
	[OwnerId] [varchar](20) NULL,
	[RecordTypeId] [varchar](20) NULL,
	[LifePro_Last_Modified_DateTime__c] [nvarchar](30) NULL,
	[X2017_Activity_Premium__c] [decimal](16, 2) NULL,
	[X2017_Effective_Premium__c] [decimal](16, 2) NULL,
	[X2018_Activity_Premium__c] [decimal](16, 2) NULL,
	[X2018_Effective_Premium__c] [decimal](16, 2) NULL,
	[X2019_Activity_Premium__c] [decimal](16, 2) NULL,
	[X2019_Effective_Premium__c] [decimal](16, 2) NULL,
	[Agent_Number__c] [varchar](20) NULL,
	[Company_Code__c] [varchar](2) NULL,
	[Email__c] [varchar](105) NULL,
	[LifePro_ID__c] [bigint] NOT NULL,
	[Region__c] [varchar](10) NULL,
	[Status__c] [varchar](10) NULL,
	[Status_Date__c] [datetime2](7) NULL,
	[Suitability__c] [bit] NULL,
	[TIN__c] [varchar](12) NULL,
	[Social_Security_Number__c] [varchar](12) NULL,
	[Tax_Status__c] [varchar](1) NULL,
	[Tax_Witholding_Option__c] [varchar](1) NULL,
	[Created_dt] [datetime2](7) NULL,
	[Modified_dt] [datetime2](7) NULL,
	[LifePro_NameID] [int] NOT NULL,
	[Reject_Flag] [smallint] NULL,
	[Reject_Dt] [datetime2](7) NULL,
	[Reject_Reason] [nvarchar](100) NULL,
 CONSTRAINT [PK__reject_A__7C36D05E12856B98] PRIMARY KEY CLUSTERED 
(
	[Row_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Producer_Upline]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Producer_Upline](
	[External_Id__c] [nvarchar](40) NOT NULL,
	[Producer_SalesforceID] [nvarchar](18) NOT NULL,
	[Upline__c] [nvarchar](18) NULL,
	[Created_Dt] [datetime2](7) NULL,
	[Modified_Dt] [datetime2](7) NULL,
 CONSTRAINT [PK_Producer_Upline] PRIMARY KEY CLUSTERED 
(
	[External_Id__c] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[reject_Account_NMO]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[reject_Account_NMO](
	[Row_ID] [bigint] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](255) NULL,
	[Phone] [varchar](40) NULL,
	[OwnerId] [varchar](20) NULL,
	[RecordTypeId] [varchar](20) NULL,
	[LifePro_Last_Modified_DateTime__c] [nvarchar](30) NULL,
	[X2017_Activity_Premium__c] [decimal](16, 2) NULL,
	[X2017_Effective_Premium__c] [decimal](16, 2) NULL,
	[X2018_Activity_Premium__c] [decimal](16, 2) NULL,
	[X2018_Effective_Premium__c] [decimal](16, 2) NULL,
	[X2019_Activity_Premium__c] [decimal](16, 2) NULL,
	[X2019_Effective_Premium__c] [decimal](16, 2) NULL,
	[Agent_Number__c] [varchar](20) NULL,
	[Company_Code__c] [varchar](2) NULL,
	[Email__c] [varchar](105) NULL,
	[LifePro_ID__c] [bigint] NOT NULL,
	[Region__c] [varchar](10) NULL,
	[Status__c] [varchar](10) NULL,
	[Status_Date__c] [datetime2](7) NULL,
	[Suitability__c] [bit] NULL,
	[TIN__c] [varchar](12) NULL,
	[Social_Security_Number__c] [varchar](12) NULL,
	[Tax_Status__c] [varchar](1) NULL,
	[Tax_Witholding_Option__c] [varchar](1) NULL,
	[Created_dt] [datetime2](7) NULL,
	[Modified_dt] [datetime2](7) NULL,
	[LifePro_NameID] [int] NOT NULL,
	[Reject_Flag] [smallint] NULL,
	[Reject_Dt] [datetime2](7) NULL,
	[Reject_Reason] [nvarchar](100) NULL,
 CONSTRAINT [PK__reject_A__7C36D05E0B3144B8] PRIMARY KEY CLUSTERED 
(
	[Row_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Upline_Detail]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Upline_Detail](
	[External_Id__c] [bigint] NOT NULL,
	[Version_Id__c] [bigint] NOT NULL,
	[Salesforce_Id] [nvarchar](18) NULL,
	[Delete_Flag] [bit] NOT NULL,
	[Created_Dt] [datetime2](7) NULL,
	[Modified_Dt] [datetime2](7) NULL,
	[Agent_Level__c] [varchar](2) NULL,
	[BD_Agent_Percent__c] [decimal](5, 2) NULL,
	[Agent_Number__c] [nvarchar](18) NULL,
	[BD_Commission_Level__c] [varchar](2) NULL,
	[BD_NMO_Percent__c] [decimal](5, 2) NULL,
	[BD_Product_Type_Commissions__c] [varchar](1) NULL,
	[Region__c] [varchar](6) NULL,
	[Start_Date__c] [date] NULL,
	[Stop_Date__c] [date] NULL,
	[BD_Upline_Percent__c] [decimal](10, 2) NULL,
	[Upline__c] [nvarchar](18) NULL,
	[Signing_Agent__c] [nvarchar](18) NULL,
	[Upline_Level__c] [varchar](2) NULL,
	[Company_Code__c] [varchar](2) NULL,
	[Broker_Dealer_Agent_Number__c] [nvarchar](18) NULL,
	[Reject_Flag] [smallint] NULL,
	[Reject_Dt] [datetime2](7) NULL,
	[Reject_Reason] [nvarchar](100) NULL,
 CONSTRAINT [PK_UplineDetail_ExternalID] PRIMARY KEY CLUSTERED 
(
	[External_Id__c] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[reject_Account_Wholesaler]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[reject_Account_Wholesaler](
	[Row_ID] [bigint] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](255) NULL,
	[Phone] [varchar](40) NULL,
	[OwnerId] [varchar](20) NULL,
	[RecordTypeId] [varchar](20) NULL,
	[LifePro_Last_Modified_DateTime__c] [nvarchar](30) NULL,
	[X2017_Activity_Premium__c] [decimal](16, 2) NULL,
	[X2017_Effective_Premium__c] [decimal](16, 2) NULL,
	[X2018_Activity_Premium__c] [decimal](16, 2) NULL,
	[X2018_Effective_Premium__c] [decimal](16, 2) NULL,
	[X2019_Activity_Premium__c] [decimal](16, 2) NULL,
	[X2019_Effective_Premium__c] [decimal](16, 2) NULL,
	[Agent_Number__c] [varchar](20) NULL,
	[Company_Code__c] [varchar](2) NULL,
	[Contract_Date__c] [datetime2](7) NULL,
	[Email__c] [varchar](105) NULL,
	[LifePro_ID__c] [bigint] NOT NULL,
	[Region__c] [varchar](10) NULL,
	[Status__c] [varchar](10) NULL,
	[Status_Date__c] [datetime2](7) NULL,
	[Suitability__c] [bit] NULL,
	[TIN__c] [varchar](12) NULL,
	[Social_Security_Number__c] [varchar](12) NULL,
	[Tax_Status__c] [varchar](1) NULL,
	[Tax_Witholding_Option__c] [varchar](1) NULL,
	[Created_dt] [datetime2](7) NULL,
	[Modified_dt] [datetime2](7) NULL,
	[LifePro_NameID] [int] NOT NULL,
	[Reject_Flag] [smallint] NULL,
	[Reject_Dt] [datetime2](7) NULL,
	[Reject_Reason] [nvarchar](100) NULL,
 CONSTRAINT [PK__reject_A__7C36D05ED181652F] PRIMARY KEY CLUSTERED 
(
	[Row_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[mapping_Producer]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[mapping_Producer](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[CREATED_DT] [datetime2](7) NULL,
	[MODIFIED_DT] [datetime2](7) NULL,
	[SALESFORCE_ID] [nvarchar](20) NULL,
	[SALESFORCE_DATE] [datetime2](7) NULL,
	[VERSION_ID] [bigint] NULL,
	[MAPPINGCONTACT_SALESFORCEID] [nvarchar](20) NULL,
	[MAPPINGACCOUNT_SALESFORCEID] [nvarchar](20) NULL,
	[AGENT_COMPANYCODE] [nvarchar](2) NULL,
	[TMPPRODUCERBUSYKEY_AGENTNUMBER] [nvarchar](20) NULL,
	[AGENT_STATUSCODE] [nvarchar](1) NULL,
	[HIER_STARTDATE] [datetime2](7) NULL,
	[HIER_ENDDATE] [datetime2](7) NULL,
	[AGENT_NAMEID] [bigint] NULL,
	[PRODUCERRELTATIONSHIP_AGENTSYSDATA] [bigint] NULL,
	[PRODUCERRELATHIONSHIP_HIERSYSDATA] [bigint] NULL,
 CONSTRAINT [PK__mapping___3214EC2770A0691F] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Allocation_Rates]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Allocation_Rates](
	[PLAN_CODE] [nvarchar](10) NOT NULL,
	[RECORD_TYPE] [smallint] NOT NULL,
	[RECORD_VAL] [decimal](10, 5) NULL,
	[RECORD_DESCR] [nvarchar](40) NULL,
 CONSTRAINT [PK__Allocati__970392EC6F8F1066] PRIMARY KEY CLUSTERED 
(
	[PLAN_CODE] ASC,
	[RECORD_TYPE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Allocation]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Allocation](
	[Allocation_External_Id__c]  AS (((([PolicyNumber]+'-')+[CompanyCode])+'-')+[PLAN_CODE]),
	[Fund_Description__c] [varchar](80) NULL,
	[Balance__c] [decimal](16, 2) NULL,
	[Asset_Fee__c] [decimal](16, 2) NULL,
	[Cap__c] [decimal](16, 2) NULL,
	[Participation_Rate__c] [decimal](16, 2) NULL,
	[PT_Rate__c] [decimal](16, 2) NULL,
	[Policy_External_Id__c]  AS (([PolicyNumber]+'-')+[CompanyCode]),
	[Policy__c] [varchar](20) NULL,
	[Fund_External_Id__c] [varchar](20) NOT NULL,
	[Created_dt] [datetime2](7) NULL,
	[Modified_dt] [datetime2](7) NULL,
	[PolicyNumber] [varchar](12) NOT NULL,
	[CompanyCode] [varchar](2) NOT NULL,
	[PLAN_CODE] [varchar](10) NOT NULL,
 CONSTRAINT [PK_Allocation_KEY] PRIMARY KEY CLUSTERED 
(
	[Allocation_External_Id__c] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[AgentYearlyPremiumTotals]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[AgentYearlyPremiumTotals](
	[CompanyCode] [char](2) NOT NULL,
	[AgentNumber] [varchar](12) NOT NULL,
	[ActivityPremium2017] [money] NULL,
	[EffectivePremium2017] [money] NULL,
	[ActivityPremium2018] [money] NULL,
	[EffectivePremium2018] [money] NULL,
	[ActivityPremium2019] [money] NULL,
	[EffectivePremium2019] [money] NULL,
	[ActivityPremium2020] [money] NULL,
	[EffectivePremium2020] [money] NULL,
 CONSTRAINT [PK_AGENTYEARLYPREMIUMTOTALS] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[AgentNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[AGENTAUTHORIZATIONS]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[AGENTAUTHORIZATIONS](
	[ID] [int] NULL,
	[POLICYNUMBER] [varchar](20) NULL,
	[AGENTNAME] [varchar](100) NULL,
	[AUTHORIZATIONDATE] [datetime] NULL,
	[TOV] [int] NULL,
	[IAVRESET] [int] NULL,
	[ADDEDBY] [varchar](10) NULL,
	[PWD] [int] NULL
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Agent_Tax_Document]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Agent_Tax_Document](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[RecordTypeID] [varchar](20) NULL,
	[Document_Type__c] [varchar](10) NULL,
	[Description__c] [varchar](100) NULL,
	[Policy__c] [varchar](20) NULL,
	[Policy_External_ID__c] [varchar](20) NULL,
	[Contact__c] [varchar](20) NULL,
	[Product_External_ID__c] [varchar](20) NULL,
	[Product__c] [varchar](20) NULL,
	[External_ID__c] [varchar](20) NULL,
	[Order_Date__c] [datetime] NULL,
	[Received_Date__c] [datetime] NULL,
	[Review_Date__c] [datetime] NULL,
	[Document_Number__c] [varchar](20) NULL,
	[Agent_Number] [varchar](20) NULL,
	[Company_Code] [varchar](2) NULL,
 CONSTRAINT [PK_Agent_Tax_Document] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Agent_Name]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Agent_Name](
	[NameID] [int] NOT NULL,
	[NameFormat] [char](1) NULL,
	[Prefix] [varchar](6) NULL,
	[BusinessName] [varchar](50) NULL,
	[FirstName] [varchar](20) NULL,
	[MiddleName] [varchar](10) NULL,
	[LastName] [varchar](20) NULL,
	[Suffix] [varchar](6) NULL,
	[PreferredName] [varchar](50) NULL,
	[SocSecLast4] [char](4) NULL,
	[BirthMonth] [char](2) NULL,
	[BirthDay] [char](2) NULL,
	[UniqueNameID] [int] NULL,
	[Gender] [varchar](5) NULL,
	[DateOfBirth] [char](10) NULL
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Agent_Hierarchy]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Agent_Hierarchy](
	[Agent_Number__c] [nvarchar](12) NOT NULL,
	[Upline_Level__c] [nvarchar](2) NOT NULL,
	[Agent_Level__c] [nvarchar](2) NOT NULL,
	[Status__c] [nvarchar](1) NOT NULL,
	[Signing_Agent__c] [nvarchar](18) NULL,
	[External_ID] [int] NOT NULL,
	[External_Id__c]  AS (CONVERT([nvarchar](18),[External_ID],(0))),
	[Upline_External_Id__c] [nvarchar](12) NULL,
	[Start_Date__c] [datetime2](7) NOT NULL,
	[Stop_Date__c] [datetime2](7) NULL,
	[Region__c] [nvarchar](40) NULL,
	[Root_Hierarchy_Id__c] [nvarchar](18) NULL,
	[Upline_Account__c] [nvarchar](18) NULL,
	[Upline_Agent__c] [nvarchar](18) NULL,
	[Created_dt] [datetime2](7) NULL,
	[Modified_dt] [datetime2](7) NULL,
 CONSTRAINT [PK__Agent_Hi__E0D28343C69153D2] PRIMARY KEY CLUSTERED 
(
	[External_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[AGENT_HIER_SF_MAPPING]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[AGENT_HIER_SF_MAPPING](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[AGENT_NUMBER] [varchar](12) NOT NULL,
	[COMPANY_CODE] [varchar](2) NULL,
	[AGENT_LEVEL] [varchar](2) NULL,
	[MARKETING_CODE] [varchar](10) NULL,
	[START_DATE] [datetime2](7) NULL,
	[STOP_DATE] [datetime2](7) NULL,
	[HIERARCHY_AGENT] [varchar](12) NULL,
	[HIERARCHY_AGENT_LEVEL] [varchar](2) NULL,
	[HIERARCHY_MARKET_CODE] [varchar](10) NULL,
	[HIER_AGENT_ID] [numeric](18, 0) NULL,
	[CREATED_DT] [datetime2](7) NULL,
	[MODIFIED_DT] [datetime2](7) NULL,
	[SF_ID] [varchar](18) NULL,
	[SF_DATE] [datetime2](7) NULL,
 CONSTRAINT [PK__AGENT_HI__3214EC27FF9F6056] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Agent_Email]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Agent_Email](
	[NameID] [int] NOT NULL,
	[EmailAddress] [varchar](105) NOT NULL,
	[EmailSource] [varchar](20) NOT NULL,
	[Valid] [bit] NULL
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Agent]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Agent](
	[CompanyCode] [char](2) NOT NULL,
	[AgentNumber] [varchar](12) NOT NULL,
	[NameID] [int] NULL,
	[StatusCode] [char](1) NULL,
	[ReasonCode] [char](2) NULL,
	[StatusDate] [varchar](10) NULL,
	[ContractDate] [varchar](10) NULL,
	[AmlDate] [varchar](10) NULL,
	[AgentPassword] [varchar](10) NULL,
	[SuitabilityProcessingFlag] [char](1) NULL,
	[PhoneNumber] [varchar](10) NULL,
	[FaxNumber] [varchar](10) NULL,
	[AddressID] [int] NULL,
	[AllTimePremium] [money] NULL,
	[AllTImeTerminatedPremium] [money] NULL,
	[FirstAppDate] [varchar](10) NULL,
	[LastAppDate] [varchar](10) NULL,
	[ResidentStateAbbr] [char](2) NULL,
	[HourlyDelta] [bit] NULL,
	[GeoAddressID] [int] NULL
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Advisor_Contact]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Advisor_Contact](
	[AccountID] [varchar](18) NULL,
	[BirthDate] [date] NULL,
	[BusinessPhone] [varchar](40) NULL,
	[DoNotCall] [bit] NULL,
	[Email] [nvarchar](105) NULL,
	[HasOptedOutOfEmail] [bit] NULL,
	[HasOptedOutOfFax] [bit] NULL,
	[OwnerID] [int] NULL,
	[FirstName] [varchar](20) NULL,
	[LastName] [varchar](20) NULL,
	[MailingAddress] [varchar](275) NULL,
	[MailingCity] [varchar](24) NULL,
	[MailingCountry] [varchar](30) NULL,
	[MailingState] [varchar](2) NULL,
	[MailingStreet] [nvarchar](105) NULL,
	[MailingPostalCode] [varchar](5) NULL,
	[MiddleName] [varchar](10) NULL,
	[OtherPhone] [varchar](60) NULL,
	[OtherAddress] [varchar](275) NULL,
	[OtherCity] [varchar](24) NULL,
	[OtherCountry] [varchar](30) NULL,
	[OtherState] [varchar](2) NULL,
	[OtherStreet] [varchar](105) NULL,
	[OtherPostalCode] [varchar](5) NULL,
	[RecordType] [varchar](18) NULL,
	[Salutation] [varchar](6) NULL,
	[Suffix] [varchar](6) NULL,
	[LifePro_Last_Modified_DateTime__c] [bigint] NULL,
	[DLRS_2020_Fall_Conference_Premium__c] [decimal](18, 2) NULL,
	[DLRS_2021_Fall_Conference_Premium__c] [decimal](18, 2) NULL,
	[All_Time_Premium__c] [decimal](18, 2) NULL,
	[AML_Training__c] [date] NULL,
	[Total_Production__c] [varchar](70) NULL,
	[DLRS_August_Premium_Total__c] [decimal](18, 2) NULL,
	[Company_Code__c] [varchar](2) NULL,
	[Contact_Record_Type__c] [varchar](40) NULL,
	[First_App_Date__c] [date] NULL,
	[Gender__c] [varchar](1) NULL,
	[Last_App_Date__c] [datetime] NULL,
	[Last_Status_Date__c] [datetime] NULL,
	[Last_Terminated_Date__c] [datetime] NULL,
	[LifePro_ID__c] [nvarchar](15) NOT NULL,
	[LO_Agent__c] [bit] NULL,
	[Name_Format__c] [varchar](1) NULL,
	[Preferred_Name__c] [varchar](50) NULL,
	[Region__c] [varchar](6) NULL,
	[SSN__c] [varchar](9) NOT NULL,
	[State__c] [varchar](20) NULL,
	[Suitability__c] [bit] NULL,
	[Terminated_Amount__c] [decimal](18, 2) NULL,
	[YTD_Activity_Amount__c] [decimal](18, 2) NULL,
	[YTD_Apps_Received__c] [decimal](18, 2) NULL,
	[YTD_Effective_Amount__c] [decimal](18, 2) NULL,
	[DLRS_YTD_FIA_Premium__c] [decimal](18, 2) NULL,
	[YTD_Issue_Amount__c] [decimal](18, 2) NULL,
	[Parent_Name_Id__c] [varchar](20) NULL,
	[Name_Id__c] [varchar](20) NULL,
	[NPN__c] [varchar](10) NULL,
	[CRD__c] [varchar](10) NULL,
	[Created_dt] [datetime2](7) NULL,
	[Modified_dt] [datetime2](7) NULL,
	[Reject_Flag] [smallint] NULL,
	[Reject_Dt] [datetime2](7) NULL,
	[Reject_Reason] [nvarchar](100) NULL,
 CONSTRAINT [PK_Advisor_Contact] PRIMARY KEY CLUSTERED 
(
	[LifePro_ID__c] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Address]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Address](
	[External_Id__c] [int] NOT NULL,
	[Address1__c] [varchar](35) NULL,
	[Address2__c] [varchar](35) NULL,
	[Address3__c] [varchar](35) NULL,
	[City__c] [varchar](24) NULL,
	[Country__c] [varchar](30) NULL,
	[State__c] [varchar](2) NULL,
	[Zip__c] [varchar](9) NULL,
	[ForeignAddressFlag__c] [bit] NULL,
	[VersionID] [bigint] NULL,
	[Delete_Flag] [bit] NULL,
	[Salesforce_ID] [nvarchar](18) NULL,
 CONSTRAINT [PK_Address_ExtID] PRIMARY KEY CLUSTERED 
(
	[External_Id__c] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Account_Wholesaler]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Account_Wholesaler](
	[Name] [varchar](255) NULL,
	[Phone] [varchar](40) NULL,
	[OwnerId] [varchar](20) NULL,
	[RecordTypeId] [varchar](20) NULL,
	[LifePro_Last_Modified_DateTime__c] [nvarchar](30) NULL,
	[X2017_Activity_Premium__c] [decimal](16, 2) NULL,
	[X2017_Effective_Premium__c] [decimal](16, 2) NULL,
	[X2018_Activity_Premium__c] [decimal](16, 2) NULL,
	[X2018_Effective_Premium__c] [decimal](16, 2) NULL,
	[X2019_Activity_Premium__c] [decimal](16, 2) NULL,
	[X2019_Effective_Premium__c] [decimal](16, 2) NULL,
	[Agent_Number__c] [varchar](20) NULL,
	[Company_Code__c] [varchar](2) NULL,
	[Contract_Date__c] [datetime2](7) NULL,
	[Email__c] [varchar](105) NULL,
	[LifePro_ID__c] [bigint] NOT NULL,
	[Region__c] [varchar](10) NULL,
	[Status__c] [varchar](10) NULL,
	[Status_Date__c] [datetime2](7) NULL,
	[Suitability__c] [bit] NULL,
	[TIN__c] [varchar](12) NULL,
	[Social_Security_Number__c] [varchar](12) NULL,
	[Tax_Status__c] [varchar](1) NULL,
	[Tax_Witholding_Option__c] [varchar](1) NULL,
	[Created_dt] [datetime2](7) NULL,
	[Modified_dt] [datetime2](7) NULL,
	[LifePro_NameID] [int] NOT NULL,
	[Reject_Flag] [smallint] NULL,
	[Reject_Dt] [datetime2](7) NULL,
	[Reject_Reason] [nvarchar](100) NULL,
 CONSTRAINT [PK__Account___D67BAA5B4B227ADA] PRIMARY KEY CLUSTERED 
(
	[LifePro_ID__c] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[mapping_Upline_Detail]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[mapping_Upline_Detail](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[CREATED_DT] [datetime2](7) NULL,
	[MODIFIED_DT] [datetime2](7) NULL,
	[SALESFORCE_ID] [nvarchar](18) NULL,
	[SALESFORCE_DT] [bigint] NULL,
	[SALESFORCE_ACTION] [nvarchar](30) NULL,
	[DELETE_FLAG] [bit] NULL,
	[HIER_COMPANYCODE] [varchar](2) NULL,
	[HIER_AGENTNUMBER] [varchar](12) NULL,
	[HIER_MARKETINGCODE] [varchar](10) NULL,
	[HIER_AGENTLEVEL] [varchar](2) NULL,
	[HIER_STOPDT] [date] NULL,
	[HIER_STARTDT] [date] NULL,
	[HIER_VERSIONID] [bigint] NULL,
	[EXTNHN_POLICYNUM] [varchar](12) NULL,
	[EXTNHN_BENEFITSEQ] [smallint] NULL,
	[EXTNHN_FILEEXTN] [varchar](4) NULL,
	[EXTNHN_SUBTYPERECORD] [varchar](2) NULL,
	[EXTNHN_DATE] [int] NULL,
	[EXTNHN_TIME] [int] NULL,
	[EXTNHN_CODERID] [varchar](4) NULL,
	[EXTNHN_SEQUENCE] [smallint] NULL,
	[EXTNHN_VERSIONID] [bigint] NULL,
	[LIFEPRO_VERSIONID]  AS (case when [HIER_VERSIONID]>=[EXTNHN_VERSIONID] then [HIER_VERSIONID] else [EXTNHN_VERSIONID] end),
	[VERSION_ID]  AS (CONVERT([bigint],left(CONVERT([varchar](100),case when [HIER_VERSIONID]>=[EXTNHN_VERSIONID] then [HIER_VERSIONID] else [EXTNHN_VERSIONID] end,(0)),(13)),(0))),
 CONSTRAINT [PK__mapping_UplineDetail_ID] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Account_Person]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Account_Person](
	[LifePro_ID__c] [nvarchar](20) NOT NULL,
	[LifePro_Last_Modified_DateTime__c] [nvarchar](30) NULL,
	[Created_dt] [datetime2](7) NULL,
	[Modified_dt] [datetime2](7) NULL,
	[FirstName] [varchar](40) NULL,
	[LastName] [varchar](40) NULL,
	[MiddleName] [varchar](10) NULL,
	[Phone] [varchar](40) NULL,
	[OwnerId] [varchar](20) NULL,
	[RecordTypeId] [varchar](20) NULL,
	[PersonEmail] [varchar](105) NULL,
	[Is_Deceased__c] [bit] NULL,
	[Client_Passcode__c] [varchar](20) NULL,
	[Paperless_Annual_Statement__c] [bit] NULL,
	[Paperless_11_Month_Summary__c] [bit] NULL,
	[Social_Security_Number__c] [varchar](12) NULL,
	[Gender__c] [varchar](1) NULL,
	[Date_of_Birth__c] [datetime2](7) NULL,
	[Tax_Status__c] [varchar](1) NULL,
	[Tax_Witholding_Option__c] [varchar](1) NULL,
	[LifePro_NameID] [int] NOT NULL,
	[Reject_Flag] [smallint] NULL,
	[Reject_Dt] [datetime2](7) NULL,
	[Reject_Reason] [nvarchar](100) NULL,
	[Delete_Flag] [bit] NULL,
	[Salesforce_ID] [nvarchar](20) NULL,
 CONSTRAINT [PK__Account___D67BAA5B1A12183C] PRIMARY KEY CLUSTERED 
(
	[LifePro_ID__c] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Account_NMO]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Account_NMO](
	[Name] [varchar](255) NULL,
	[Phone] [varchar](40) NULL,
	[OwnerId] [varchar](20) NULL,
	[RecordTypeId] [varchar](20) NULL,
	[LifePro_Last_Modified_DateTime__c] [nvarchar](30) NULL,
	[X2017_Activity_Premium__c] [decimal](16, 2) NULL,
	[X2017_Effective_Premium__c] [decimal](16, 2) NULL,
	[X2018_Activity_Premium__c] [decimal](16, 2) NULL,
	[X2018_Effective_Premium__c] [decimal](16, 2) NULL,
	[X2019_Activity_Premium__c] [decimal](16, 2) NULL,
	[X2019_Effective_Premium__c] [decimal](16, 2) NULL,
	[Agent_Number__c] [varchar](20) NULL,
	[Company_Code__c] [varchar](2) NULL,
	[Email__c] [varchar](105) NULL,
	[LifePro_ID__c] [bigint] NOT NULL,
	[Region__c] [varchar](10) NULL,
	[Status__c] [varchar](10) NULL,
	[Status_Date__c] [datetime2](7) NULL,
	[Suitability__c] [bit] NULL,
	[TIN__c] [varchar](12) NULL,
	[Social_Security_Number__c] [varchar](12) NULL,
	[Tax_Status__c] [varchar](1) NULL,
	[Tax_Witholding_Option__c] [varchar](1) NULL,
	[Created_dt] [datetime2](7) NULL,
	[Modified_dt] [datetime2](7) NULL,
	[LifePro_NameID] [int] NOT NULL,
	[Reject_Flag] [smallint] NULL,
	[Reject_Dt] [datetime2](7) NULL,
	[Reject_Reason] [nvarchar](100) NULL,
	[Delete_Flag] [bit] NULL,
 CONSTRAINT [PK__Account___D67BAA5B3B4DF981] PRIMARY KEY CLUSTERED 
(
	[LifePro_ID__c] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Account_Institution]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Account_Institution](
	[Name] [varchar](255) NULL,
	[Phone] [varchar](40) NULL,
	[OwnerId] [varchar](20) NULL,
	[RecordTypeId] [varchar](20) NULL,
	[LifePro_Last_Modified_DateTime__c] [nvarchar](30) NULL,
	[Email__c] [varchar](105) NULL,
	[LifePro_ID__c] [bigint] NOT NULL,
	[TIN__c] [varchar](12) NULL,
	[Client_Passcode__c] [varchar](20) NULL,
	[Paperless_Annual_Statement__c] [bit] NULL,
	[Paperless_11_Month_Summary__c] [bit] NULL,
	[Tax_Status__c] [varchar](1) NULL,
	[Tax_Witholding_Option__c] [varchar](1) NULL,
	[Created_dt] [datetime2](7) NULL,
	[Modified_dt] [datetime2](7) NULL,
	[LifePro_NameID] [int] NOT NULL,
	[Reject_Flag] [smallint] NULL,
	[Reject_Dt] [datetime2](7) NULL,
	[Reject_Reason] [nvarchar](100) NULL,
	[Delete_Flag] [bit] NULL,
	[Salesforce_ID] [nvarchar](20) NULL,
 CONSTRAINT [PK__Account___D67BAA5B5AE875E3] PRIMARY KEY CLUSTERED 
(
	[LifePro_ID__c] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Account_Delete]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Account_Delete](
	[SALESFORCE_ID] [nvarchar](20) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[SALESFORCE_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Account_Business]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Account_Business](
	[Name] [varchar](255) NULL,
	[Phone] [varchar](40) NULL,
	[OwnerId] [varchar](20) NULL,
	[RecordTypeId] [varchar](20) NULL,
	[LifePro_Last_Modified_DateTime__c] [nvarchar](30) NULL,
	[X2017_Activity_Premium__c] [decimal](16, 2) NULL,
	[X2017_Effective_Premium__c] [decimal](16, 2) NULL,
	[X2018_Activity_Premium__c] [decimal](16, 2) NULL,
	[X2018_Effective_Premium__c] [decimal](16, 2) NULL,
	[X2019_Activity_Premium__c] [decimal](16, 2) NULL,
	[X2019_Effective_Premium__c] [decimal](16, 2) NULL,
	[Agent_Number__c] [varchar](20) NULL,
	[Company_Code__c] [varchar](2) NULL,
	[Email__c] [varchar](105) NULL,
	[LifePro_ID__c] [bigint] NOT NULL,
	[Region__c] [varchar](10) NULL,
	[Status__c] [varchar](10) NULL,
	[Status_Date__c] [datetime2](7) NULL,
	[Suitability__c] [bit] NULL,
	[TIN__c] [varchar](12) NULL,
	[Social_Security_Number__c] [varchar](12) NULL,
	[Tax_Status__c] [varchar](1) NULL,
	[Tax_Witholding_Option__c] [varchar](1) NULL,
	[Created_dt] [datetime2](7) NULL,
	[Modified_dt] [datetime2](7) NULL,
	[LifePro_NameID] [int] NOT NULL,
	[Reject_Flag] [smallint] NULL,
	[Reject_Dt] [datetime2](7) NULL,
	[Reject_Reason] [nvarchar](100) NULL,
	[Delete_Flag] [bit] NULL,
 CONSTRAINT [PK__Account___D67BAA5BC4C32345] PRIMARY KEY CLUSTERED 
(
	[LifePro_ID__c] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Account_BrokerDealer]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Account_BrokerDealer](
	[Name] [varchar](255) NULL,
	[Phone] [varchar](40) NULL,
	[OwnerId] [varchar](20) NULL,
	[RecordTypeId] [varchar](20) NULL,
	[LifePro_Last_Modified_DateTime__c] [nvarchar](30) NULL,
	[X2017_Activity_Premium__c] [decimal](16, 2) NULL,
	[X2017_Effective_Premium__c] [decimal](16, 2) NULL,
	[X2018_Activity_Premium__c] [decimal](16, 2) NULL,
	[X2018_Effective_Premium__c] [decimal](16, 2) NULL,
	[X2019_Activity_Premium__c] [decimal](16, 2) NULL,
	[X2019_Effective_Premium__c] [decimal](16, 2) NULL,
	[Agent_Number__c] [varchar](20) NULL,
	[Company_Code__c] [varchar](2) NULL,
	[Email__c] [varchar](105) NULL,
	[LifePro_ID__c] [bigint] NOT NULL,
	[Region__c] [varchar](10) NULL,
	[Status__c] [varchar](10) NULL,
	[Status_Date__c] [datetime2](7) NULL,
	[Suitability__c] [bit] NULL,
	[TIN__c] [varchar](12) NULL,
	[Social_Security_Number__c] [varchar](12) NULL,
	[Tax_Status__c] [varchar](1) NULL,
	[Tax_Witholding_Option__c] [varchar](1) NULL,
	[Created_dt] [datetime2](7) NULL,
	[Modified_dt] [datetime2](7) NULL,
	[LifePro_NameID] [int] NOT NULL,
	[Reject_Flag] [smallint] NULL,
	[Reject_Dt] [datetime2](7) NULL,
	[Reject_Reason] [nvarchar](100) NULL,
	[Delete_Flag] [bit] NULL,
 CONSTRAINT [PK__Account___D67BAA5B24B5CF39] PRIMARY KEY CLUSTERED 
(
	[LifePro_ID__c] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Account_Address_Sub_Account]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Account_Address_Sub_Account](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[RecordTypeId] [varchar](20) NULL,
	[Address_External_Id__c] [varchar](20) NULL,
	[Address__c] [varchar](20) NULL,
	[Type__c] [varchar](1) NULL,
	[Policy_External_Id__c] [varchar](20) NULL,
	[Policy__c] [varchar](20) NULL,
	[Address_Code__c] [varchar](3) NULL,
	[Recurring_From_Month__c] [int] NULL,
	[Recurring_From_Day__c] [int] NULL,
	[Recurring_To_Month__c] [int] NULL,
	[Recurring_To_Day__c] [int] NULL,
	[Phone__c] [varchar](20) NULL,
	[Fax__c] [varchar](20) NULL,
	[Sub_Account__c] [varchar](20) NULL,
	[Sub_Account_Name_Id__c] [varchar](20) NULL,
	[LifePro_Last_Modified_DateTime__c] [varchar](30) NOT NULL,
	[Effective_Date__c] [datetime2](7) NULL,
	[Account_Address_External_Id] [varchar](100) NOT NULL,
	[Created_dt] [datetime2](7) NULL,
	[Modified_dt] [datetime2](7) NULL,
	[Account__c] [varchar](20) NULL,
	[Delete_Flag] [bit] NOT NULL,
 CONSTRAINT [PK_Address_Account_Sub_Account] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[FK]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[FK](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[IDFK] [bigint] NOT NULL
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Hierarchy]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Hierarchy](
	[CompanyCode] [char](2) NOT NULL,
	[AgentNumber] [varchar](12) NOT NULL,
	[AgentLevel] [char](2) NOT NULL,
	[StopDate] [varchar](10) NULL,
	[StartDate] [varchar](10) NULL,
	[Region] [varchar](6) NULL,
	[HierAgent] [varchar](12) NULL,
	[HierAgentLevel] [char](2) NULL,
	[SigningAgent] [varchar](12) NULL,
	[SalesRegion] [char](2) NULL
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Account_Address]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Account_Address](
	[Account_Address_External_Id] [varchar](100) NOT NULL,
	[LifePro_Last_Modified_DateTime__c] [varchar](30) NOT NULL,
	[Created_dt] [datetime2](7) NULL,
	[Modified_dt] [datetime2](7) NULL,
	[RecordTypeID] [varchar](20) NULL,
	[Account_Name_Id__c] [varchar](20) NULL,
	[Account__c] [varchar](20) NOT NULL,
	[Address_External_Id__c] [varchar](20) NULL,
	[Address__c] [varchar](20) NULL,
	[Type__c] [varchar](1) NULL,
	[Policy_External_Id__c] [varchar](50) NULL,
	[Policy__c] [varchar](20) NULL,
	[Address_Code__c] [varchar](3) NULL,
	[Recurring_From_Month__c] [int] NULL,
	[Recurring_From_Day__c] [int] NULL,
	[Recurring_To_Month__c] [int] NULL,
	[Recurring_To_Day__c] [int] NULL,
	[Phone__c] [varchar](20) NULL,
	[Fax__c] [varchar](20) NULL,
	[Sub_Account__c] [varchar](20) NULL,
	[Sub_Account_Name_Id__c] [varchar](20) NULL,
	[Effective_Date__c] [datetime] NULL,
	[Contract] [varchar](20) NULL,
	[CompanyCode] [varchar](2) NULL,
	[Reject_Flag] [smallint] NULL,
	[Reject_Dt] [datetime2](7) NULL,
	[Reject_Reason] [nvarchar](100) NULL,
	[Delete_Flag] [bit] NOT NULL,
 CONSTRAINT [PK__Account___ABC07E619A9D86F6] PRIMARY KEY CLUSTERED 
(
	[Account_Address_External_Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[LOOKUP_ACCOUNT]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[LOOKUP_ACCOUNT](
	[ID] [nvarchar](18) NULL,
	[TYPE] [nvarchar](255) NULL,
	[RECORDTYPEID] [nvarchar](18) NULL,
	[PARENTID] [nvarchar](18) NULL,
	[SITE] [nvarchar](80) NULL,
	[CREATEDDATE] [datetime] NULL,
	[LASTMODIFIEDDATE] [datetime] NULL,
	[SYSTEMMODSTAMP] [datetime] NULL,
	[ISPARTNER] [int] NULL,
	[ISCUSTOMERPORTAL] [int] NULL,
	[CHANNELPROGRAMNAME] [nvarchar](255) NULL,
	[CHANNELPROGRAMLEVELNAME] [nvarchar](255) NULL,
	[AGENCY_DBA__C] [nvarchar](255) NULL,
	[AGENT_NUMBER__C] [nvarchar](20) NULL,
	[ACTIVE_JOINT_OWNER_CONTRACTS__C] [decimal](18, 0) NULL,
	[ACTIVE_NON_JOINT_OWNER_CONTRACTS__C] [decimal](18, 0) NULL,
	[CLIENT_PASSCODE__C] [nvarchar](20) NULL,
	[COMPANY_CODE__C] [nvarchar](2) NULL,
	[IS_RECORD_CREATED_BY_SYSTEM_USER__C] [int] NULL,
	[E_O_CARRIER__C] [nvarchar](255) NULL,
	[HAS_PAPERLESS_SETTING_DATE__C] [nvarchar](1300) NULL,
	[LAST_PAPERLESS_SETTING_CHANGES__C] [datetime] NULL,
	[LAST_PAPERLESS_SETTING_NOTIFICATION_AGE__C] [decimal](18, 0) NULL,
	[LIFEPRO_ID__C] [nvarchar](20) NULL,
	[NAME_ID__C] [nvarchar](20) NULL,
	[LIFEPRO_SUPPORTED_RECORD__C] [int] NULL,
	[HAS_JOINT_OWNER__C] [decimal](18, 0) NULL,
	[SSN_LAST_4_DIGITS__C] [nvarchar](1300) NULL,
	[TIN_LAST_4_DIGITS__C] [nvarchar](1300) NULL,
	[PRODUCER__C] [nvarchar](18) NULL,
	[REGION__C] [nvarchar](10) NULL,
	[SIGNING_AGENT__C] [nvarchar](18) NULL,
	[SOCIAL_SECURITY_NUMBER__C] [nvarchar](12) NULL,
	[STATES__C] [nvarchar](255) NULL,
	[STATUS_DATE__C] [datetime] NULL,
	[STATUS__C] [nvarchar](10) NULL,
	[TIN__C] [nvarchar](12) NULL,
	[NUMBER_OF_AE_CONTRACTS__C] [decimal](18, 0) NULL,
	[NUMBER_OF_AE_OF_NY_CONTRACTS__C] [decimal](18, 0) NULL,
	[NUMBER_OF_EL_CONTRACTS__C] [decimal](18, 0) NULL,
	[AGENT_LEVEL__PC] [decimal](4, 0) NULL,
	[BD_COUNT__PC] [decimal](3, 0) NULL,
	[BPS__PC] [decimal](6, 0) NULL,
	[CHOICE_LOYALTY_BPS__PC] [decimal](6, 0) NULL,
	[COUNT_OF_ACTIVE_PRODUCERS__PC] [decimal](4, 0) NULL,
	[COUNT_OF_PENDING_PRODUCERS__PC] [decimal](4, 0) NULL,
	[COUNT_OF_SERVICE_PRODUCERS__PC] [decimal](4, 0) NULL,
	[COUNT_OF_TERMINATED_PRODUCERS__PC] [decimal](4, 0) NULL,
	[LO_AGENT_PRODUCER__PC] [int] NULL,
	[LO_CONTACT__PC] [int] NULL,
	[LIFEPRO_LAST_MODIFIED_DATETIME__PC] [nvarchar](30) NULL,
	[NPN__PC] [nvarchar](8) NULL,
	[QUALIFYING_PREMIUM_FORMULA__PC] [nvarchar](1300) NULL,
	[QUALIFYING_PREMIUM__PC] [decimal](18, 2) NULL,
	[STATE_NEW__PC] [nvarchar](1300) NULL,
	[STATUS_PRODUCERS__PC] [nvarchar](1300) NULL,
	[WANTS_COPY_OF_BIG_REPORT__PC] [int] NULL,
	[IS_RECORD_CREATED_BY_SYSTEM_USER__PC] [int] NULL,
	[LIFEPRO_SUPPORTED_RECORD__PC] [int] NULL,
	[PASSCODE_ALERT__PC] [nvarchar](1300) NULL,
	[SSN_TIN_LAST_4_DIGITS__PC] [nvarchar](1300) NULL
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[LOOKUP_CONTACT]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[LOOKUP_CONTACT](
	[ID] [nvarchar](18) NULL,
	[CREATEDDATE] [datetime] NULL,
	[LASTMODIFIEDDATE] [datetime] NULL,
	[SYSTEMMODSTAMP] [datetime] NULL,
	[AGENT_LEVEL__C] [decimal](4, 0) NULL,
	[BD_COUNT__C] [decimal](3, 0) NULL,
	[BPS__C] [decimal](6, 0) NULL,
	[CHOICE_LOYALTY_BPS__C] [decimal](6, 0) NULL,
	[COUNT_OF_ACTIVE_PRODUCERS__C] [decimal](4, 0) NULL,
	[COUNT_OF_PENDING_PRODUCERS__C] [decimal](4, 0) NULL,
	[COUNT_OF_SERVICE_PRODUCERS__C] [decimal](4, 0) NULL,
	[COUNT_OF_TERMINATED_PRODUCERS__C] [decimal](4, 0) NULL,
	[LO_AGENT_PRODUCER__C] [int] NULL,
	[LO_CONTACT__C] [int] NULL,
	[LIFEPRO_ID__C] [nvarchar](15) NULL,
	[LIFEPRO_LAST_MODIFIED_DATETIME__C] [nvarchar](30) NULL,
	[NPN__C] [nvarchar](8) NULL,
	[NAME_ID__C] [nvarchar](20) NULL,
	[QUALIFYING_PREMIUM_FORMULA__C] [nvarchar](1300) NULL,
	[QUALIFYING_PREMIUM__C] [decimal](18, 2) NULL,
	[STATE_NEW__C] [nvarchar](1300) NULL,
	[STATUS_PRODUCERS__C] [nvarchar](1300) NULL,
	[WANTS_COPY_OF_BIG_REPORT__C] [int] NULL,
	[IS_RECORD_CREATED_BY_SYSTEM_USER__C] [int] NULL,
	[LIFEPRO_SUPPORTED_RECORD__C] [int] NULL,
	[PASSCODE_ALERT__C] [nvarchar](1300) NULL,
	[SSN_TIN_LAST_4_DIGITS__C] [nvarchar](1300) NULL
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Insurance_Policy_Authorization]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Insurance_Policy_Authorization](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[RecordTypeId] [varchar](20) NULL,
	[InsurancePolicyId] [varchar](20) NULL,
	[Role__c] [varchar](2) NULL,
	[Policy_Number__c] [varchar](20) NULL,
	[Authorization_Date__c] [datetime2](7) NULL,
	[Relationship__c] [varchar](50) NULL,
	[Authorized_Person_Name__c] [varchar](80) NULL,
	[External_Id__c] [varchar](40) NOT NULL,
	[Created_dt] [datetime2](7) NULL,
	[Modified_dt] [datetime2](7) NULL,
 CONSTRAINT [PK__Insurance_Policy_Authorization] PRIMARY KEY CLUSTERED 
(
	[External_Id__c] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[mapping_Contact]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[mapping_Contact](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[CREATED_DT] [datetime2](7) NULL,
	[MODIFIED_DT] [datetime2](7) NULL,
	[SALESFORCE_ID] [nvarchar](18) NULL,
	[SALESFORCE_DT] [bigint] NULL,
	[ADDRESS_EMAILADDRESSID] [int] NULL,
	[ADDRESS_VERSIONID] [bigint] NULL,
	[AGENTEXPANSION03_AGENTNUMBER] [varchar](12) NULL,
	[AGENTEXPANSION03_COMPANYCODE] [varchar](2) NULL,
	[AGENTEXPANSION03_SEQUENCE] [smallint] NULL,
	[AGENTEXPANSION03_VERSIONID] [bigint] NULL,
	[AGENTEXPANSION10_AGENTNUMBER] [varchar](12) NULL,
	[AGENTEXPANSION10_COMPANYCODE] [varchar](2) NULL,
	[AGENTEXPANSION10_SEQUENCE] [smallint] NULL,
	[AGENTEXPANSION10_VERSIONID] [bigint] NULL,
	[AGENTRECORD_AGENTNUMBER] [varchar](12) NULL,
	[AGENTRECORD_COMPANY_CODE] [varchar](2) NULL,
	[AGENTRECORD_VERSIONID] [bigint] NULL,
	[EXTENSIONRECORDAGTT_AGENTNUMBER] [varchar](12) NULL,
	[EXTENSIONRECORDAGTT_FILEEXTENSION] [varchar](4) NULL,
	[EXTENSIONRECORDAGTT_SUBTYPERECORD] [varchar](2) NULL,
	[EXTENSIONRECORDAGTT_VERSIONID] [bigint] NULL,
	[EXTENSIONRECORDNADR_FILEEXTENSION] [varchar](4) NULL,
	[EXTENSIONRECORDNADR_NAMEID] [int] NULL,
	[EXTENSIONRECORDNADR_SUBTYPERECORD] [varchar](2) NULL,
	[EXTENSIONRECORDNADR_VERSIONID] [bigint] NULL,
	[NAMELINK_ADDRESSCODE] [varchar](3) NULL,
	[NAMELINK_ADDRESSID] [int] NULL,
	[NAMELINK_COMPANYCODE] [varchar](2) NULL,
	[NAMELINK_EFFETIVEDATE] [datetime2](7) NULL,
	[NAMELINK_NAMEID] [int] NULL,
	[NAMELINK_POLICYNUMBER] [varchar](12) NULL,
	[NAMELINK_VERSIONID] [bigint] NULL,
	[NAMERECORD_NAMEID] [int] NULL,
	[NAMERECORD_SSN] [varchar](9) NOT NULL,
	[NAMERECORD_VERSIONID] [bigint] NULL,
	[RECORDTYPEID] [nvarchar](18) NULL,
	[VERSIONID]  AS (case when coalesce([NAMERECORD_VERSIONID],(0))>coalesce([AGENTEXPANSION03_VERSIONID],(0)) AND coalesce([NAMERECORD_VERSIONID],(0))>coalesce([AGENTEXPANSION10_VERSIONID],(0)) AND coalesce([NAMERECORD_VERSIONID],(0))>coalesce([AGENTRECORD_VERSIONID],(0)) AND coalesce([NAMERECORD_VERSIONID],(0))>coalesce([EXTENSIONRECORDAGTT_VERSIONID],(0)) AND coalesce([NAMERECORD_VERSIONID],(0))>coalesce([EXTENSIONRECORDNADR_VERSIONID],(0)) AND coalesce([NAMERECORD_VERSIONID],(0))>coalesce([NAMELINK_VERSIONID],(0)) AND coalesce([NAMERECORD_VERSIONID],(0))>coalesce([ADDRESS_VERSIONID],(0)) then coalesce([NAMERECORD_VERSIONID],(0)) when coalesce([ADDRESS_VERSIONID],(0))>coalesce([AGENTEXPANSION03_VERSIONID],(0)) AND coalesce([ADDRESS_VERSIONID],(0))>coalesce([AGENTEXPANSION10_VERSIONID],(0)) AND coalesce([ADDRESS_VERSIONID],(0))>coalesce([AGENTRECORD_VERSIONID],(0)) AND coalesce([ADDRESS_VERSIONID],(0))>coalesce([EXTENSIONRECORDAGTT_VERSIONID],(0)) AND coalesce([ADDRESS_VERSIONID],(0))>coalesce([EXTENSIONRECORDNADR_VERSIONID],(0)) AND coalesce([ADDRESS_VERSIONID],(0))>coalesce([NAMELINK_VERSIONID],(0)) AND coalesce([ADDRESS_VERSIONID],(0))>coalesce([NAMERECORD_VERSIONID],(0)) then coalesce([ADDRESS_VERSIONID],(0)) when coalesce([AGENTEXPANSION03_VERSIONID],(0))>coalesce([NAMERECORD_VERSIONID],(0)) AND coalesce([AGENTEXPANSION03_VERSIONID],(0))>coalesce([AGENTEXPANSION10_VERSIONID],(0)) AND coalesce([AGENTEXPANSION03_VERSIONID],(0))>coalesce([AGENTRECORD_VERSIONID],(0)) AND coalesce([AGENTEXPANSION03_VERSIONID],(0))>coalesce([EXTENSIONRECORDAGTT_VERSIONID],(0)) AND coalesce([AGENTEXPANSION03_VERSIONID],(0))>coalesce([EXTENSIONRECORDNADR_VERSIONID],(0)) AND coalesce([AGENTEXPANSION03_VERSIONID],(0))>coalesce([NAMELINK_VERSIONID],(0)) AND coalesce([AGENTEXPANSION03_VERSIONID],(0))>coalesce([ADDRESS_VERSIONID],(0)) then coalesce([AGENTEXPANSION03_VERSIONID],(0)) when coalesce([AGENTEXPANSION10_VERSIONID],(0))>coalesce([NAMERECORD_VERSIONID],(0)) AND coalesce([AGENTEXPANSION10_VERSIONID],(0))>coalesce([AGENTEXPANSION03_VERSIONID],(0)) AND coalesce([AGENTEXPANSION10_VERSIONID],(0))>coalesce([AGENTRECORD_VERSIONID],(0)) AND coalesce([AGENTEXPANSION10_VERSIONID],(0))>coalesce([EXTENSIONRECORDAGTT_VERSIONID],(0)) AND coalesce([AGENTEXPANSION10_VERSIONID],(0))>coalesce([EXTENSIONRECORDNADR_VERSIONID],(0)) AND coalesce([AGENTEXPANSION10_VERSIONID],(0))>coalesce([NAMELINK_VERSIONID],(0)) AND coalesce([AGENTEXPANSION10_VERSIONID],(0))>coalesce([ADDRESS_VERSIONID],(0)) then coalesce([AGENTEXPANSION10_VERSIONID],(0)) when coalesce([AGENTRECORD_VERSIONID],(0))>coalesce([NAMERECORD_VERSIONID],(0)) AND coalesce([AGENTRECORD_VERSIONID],(0))>coalesce([AGENTEXPANSION03_VERSIONID],(0)) AND coalesce([AGENTRECORD_VERSIONID],(0))>coalesce([AGENTEXPANSION10_VERSIONID],(0)) AND coalesce([AGENTRECORD_VERSIONID],(0))>coalesce([EXTENSIONRECORDAGTT_VERSIONID],(0)) AND coalesce([AGENTRECORD_VERSIONID],(0))>coalesce([EXTENSIONRECORDNADR_VERSIONID],(0)) AND coalesce([AGENTRECORD_VERSIONID],(0))>coalesce([NAMELINK_VERSIONID],(0)) AND coalesce([AGENTRECORD_VERSIONID],(0))>coalesce([ADDRESS_VERSIONID],(0)) then coalesce([AGENTRECORD_VERSIONID],(0)) when coalesce([EXTENSIONRECORDAGTT_VERSIONID],(0))>coalesce([NAMERECORD_VERSIONID],(0)) AND coalesce([EXTENSIONRECORDAGTT_VERSIONID],(0))>coalesce([AGENTEXPANSION03_VERSIONID],(0)) AND coalesce([EXTENSIONRECORDAGTT_VERSIONID],(0))>coalesce([AGENTEXPANSION10_VERSIONID],(0)) AND coalesce([EXTENSIONRECORDAGTT_VERSIONID],(0))>coalesce([AGENTRECORD_VERSIONID],(0)) AND coalesce([EXTENSIONRECORDAGTT_VERSIONID],(0))>coalesce([EXTENSIONRECORDNADR_VERSIONID],(0)) AND coalesce([EXTENSIONRECORDAGTT_VERSIONID],(0))>coalesce([NAMELINK_VERSIONID],(0)) AND coalesce([EXTENSIONRECORDAGTT_VERSIONID],(0))>coalesce([ADDRESS_VERSIONID],(0)) then coalesce([EXTENSIONRECORDAGTT_VERSIONID],(0)) when coalesce([EXTENSIONRECORDNADR_VERSIONID],(0))>coalesce([NAMERECORD_VERSIONID],(0)) AND coalesce([EXTENSIONRECORDNADR_VERSIONID],(0))>coalesce([AGENTEXPANSION03_VERSIONID],(0)) AND coalesce([EXTENSIONRECORDNADR_VERSIONID],(0))>coalesce([AGENTEXPANSION10_VERSIONID],(0)) AND coalesce([EXTENSIONRECORDNADR_VERSIONID],(0))>coalesce([AGENTRECORD_VERSIONID],(0)) AND coalesce([EXTENSIONRECORDNADR_VERSIONID],(0))>coalesce([EXTENSIONRECORDAGTT_VERSIONID],(0)) AND coalesce([EXTENSIONRECORDNADR_VERSIONID],(0))>coalesce([NAMELINK_VERSIONID],(0)) AND coalesce([EXTENSIONRECORDNADR_VERSIONID],(0))>coalesce([ADDRESS_VERSIONID],(0)) then coalesce([EXTENSIONRECORDNADR_VERSIONID],(0)) when coalesce([NAMELINK_VERSIONID],(0))>coalesce([NAMERECORD_VERSIONID],(0)) AND coalesce([NAMELINK_VERSIONID],(0))>coalesce([AGENTEXPANSION03_VERSIONID],(0)) AND coalesce([NAMELINK_VERSIONID],(0))>coalesce([AGENTEXPANSION10_VERSIONID],(0)) AND coalesce([NAMELINK_VERSIONID],(0))>coalesce([AGENTRECORD_VERSIONID],(0)) AND coalesce([NAMELINK_VERSIONID],(0))>coalesce([EXTENSIONRECORDAGTT_VERSIONID],(0)) AND coalesce([NAMELINK_VERSIONID],(0))>coalesce([EXTENSIONRECORDNADR_VERSIONID],(0)) AND coalesce([NAMELINK_VERSIONID],(0))>coalesce([ADDRESS_VERSIONID],(0)) then coalesce([NAMELINK_VERSIONID],(0)) else coalesce([ADDRESS_VERSIONID],(0)) end),
 CONSTRAINT [PK__mapping___3214EC2701421AE8] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[mapping_Account]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[mapping_Account](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[CREATED_DT] [datetime2](7) NULL,
	[MODIFIED_DT] [datetime2](7) NULL,
	[SALESFORCE_ID] [nvarchar](20) NULL,
	[NAMERECORD_NAMEID] [int] NULL,
	[NAMERECORD_VERSIONID] [bigint] NULL,
	[EXTENSIONRECORDNADR_FILEEXTENSION] [varchar](4) NULL,
	[EXTENSIONRECORDNADR_SUBTYPERECORD] [varchar](2) NULL,
	[EXTENSIONRECORDNADR_NAMEID] [int] NULL,
	[EXTENSIONRECORDNADR_VERSIONID] [bigint] NULL,
	[AGENTRECORD_COMPANYCODE] [varchar](2) NULL,
	[AGENTRECORD_AGENTNUMBER] [varchar](12) NULL,
	[AGENTRECORD_VERSIONID] [bigint] NULL,
	[AGENTEXPANSION03_COMPANYCODE] [varchar](2) NULL,
	[AGENTEXPANSION03_AGENTNUMBER] [varchar](12) NULL,
	[AGENTEXPANSION03_SEQUENCE] [tinyint] NULL,
	[AGENTEXPANSION03_VERSIONID] [bigint] NULL,
	[AGENTEXPANSION10_COMPANYCODE] [varchar](2) NULL,
	[AGENTEXPANSION10_AGENTNUMBER] [varchar](12) NULL,
	[AGENTEXPANSION10_SEQUENCE] [tinyint] NULL,
	[AGENTEXPANSION10_VERSIONID] [bigint] NULL,
	[SALESFORCE_DT] [bigint] NULL,
	[NAMERECORD_SSN] [varchar](9) NULL,
	[RECORDTYPEID] [nvarchar](18) NULL,
	[ADDR_EMAIL_ADDRESSID] [int] NULL,
	[ADDR_EMAIL_VERSIONID] [bigint] NULL,
	[NALK_EMAIL_ADDRESSID] [int] NULL,
	[NALK_EMAIL_EFFECTIVEDATE] [datetime2](7) NULL,
	[NALK_EMAIL_ADDRESSCODE] [varchar](3) NULL,
	[NALK_EMAIL_COMPANYCODE] [varchar](2) NULL,
	[NALK_EMAIL_POLICYNUMBER] [varchar](12) NULL,
	[NALK_EMAIL_VERSIONID] [bigint] NULL,
	[NALK_PHONE_NAMEID] [int] NULL,
	[NALK_PHONE_ADDRESSID] [int] NULL,
	[NALK_PHONE_EFFECTIVEDATE] [datetime2](7) NULL,
	[NALK_PHONE_ADDRESSCODE] [varchar](3) NULL,
	[NALK_PHONE_COMPANYCODE] [varchar](2) NULL,
	[NALK_PHONE_POLICYNUMBER] [varchar](12) NULL,
	[NALK_PHONE_VERSIONID] [bigint] NULL,
	[HIER_COMPANYCODE] [varchar](2) NULL,
	[HIER_AGENTNUMBER] [varchar](12) NULL,
	[HIER_MARKETINGCODE] [varchar](10) NULL,
	[HIER_AGENTLEVEL] [varchar](2) NULL,
	[HIER_STOPDT] [datetime2](7) NULL,
	[HIER_VERSIONID] [bigint] NULL,
	[DELETE_FLAG] [bit] NULL,
	[RECORDTYPE_DESCR]  AS (case [RECORDTYPEID] when '0125e000000WqlsAAC' then 'IndustriesInstitution' when '0125e000000WqltAAC' then 'IndustriesHousehold' when '0125e000000WqluAAC' then 'IndustriesBusiness' when '0125e000000WqlvAAC' then 'PersonAccount' when '0125e000000WqlwAAC' then 'IndustriesIndividual' when '0127h000000Yz4sAAC' then 'Bank' when '0127h000000Yz4tAAC' then 'Broker_Dealer' when '0127h000000Yz4uAAC' then 'NMO' when '0127h000000Yz4vAAC' then 'Vendor' when '0127h000000Yz4wAAC' then 'Wholesaler'  end),
	[SALESFORCE_ACTION] [nvarchar](30) NULL,
	[LIFEPRO_VERSIONID]  AS (case when [NAMERECORD_VERSIONID]>=[EXTENSIONRECORDNADR_VERSIONID] AND [NAMERECORD_VERSIONID]>=[AGENTRECORD_VERSIONID] AND [NAMERECORD_VERSIONID]>=[AGENTEXPANSION03_VERSIONID] AND [NAMERECORD_VERSIONID]>=[AGENTEXPANSION10_VERSIONID] AND [NAMERECORD_VERSIONID]>=[ADDR_EMAIL_VERSIONID] AND [NAMERECORD_VERSIONID]>=[NALK_EMAIL_VERSIONID] AND [NAMERECORD_VERSIONID]>=[NALK_PHONE_VERSIONID] AND [NAMERECORD_VERSIONID]>=[HIER_VERSIONID] then [NAMERECORD_VERSIONID] when [EXTENSIONRECORDNADR_VERSIONID]>=[NAMERECORD_VERSIONID] AND [EXTENSIONRECORDNADR_VERSIONID]>=[AGENTRECORD_VERSIONID] AND [EXTENSIONRECORDNADR_VERSIONID]>=[AGENTEXPANSION03_VERSIONID] AND [EXTENSIONRECORDNADR_VERSIONID]>=[AGENTEXPANSION10_VERSIONID] AND [EXTENSIONRECORDNADR_VERSIONID]>=[ADDR_EMAIL_VERSIONID] AND [EXTENSIONRECORDNADR_VERSIONID]>=[NALK_EMAIL_VERSIONID] AND [EXTENSIONRECORDNADR_VERSIONID]>=[NALK_PHONE_VERSIONID] AND [EXTENSIONRECORDNADR_VERSIONID]>=[HIER_VERSIONID] then [EXTENSIONRECORDNADR_VERSIONID] when [AGENTRECORD_VERSIONID]>=[NAMERECORD_VERSIONID] AND [AGENTRECORD_VERSIONID]>=[EXTENSIONRECORDNADR_VERSIONID] AND [AGENTRECORD_VERSIONID]>=[AGENTEXPANSION03_VERSIONID] AND [AGENTRECORD_VERSIONID]>=[AGENTEXPANSION10_VERSIONID] AND [AGENTRECORD_VERSIONID]>=[ADDR_EMAIL_VERSIONID] AND [AGENTRECORD_VERSIONID]>=[NALK_EMAIL_VERSIONID] AND [AGENTRECORD_VERSIONID]>=[NALK_PHONE_VERSIONID] AND [AGENTRECORD_VERSIONID]>=[HIER_VERSIONID] then [AGENTRECORD_VERSIONID] when [AGENTEXPANSION03_VERSIONID]>=[NAMERECORD_VERSIONID] AND [AGENTEXPANSION03_VERSIONID]>=[EXTENSIONRECORDNADR_VERSIONID] AND [AGENTEXPANSION03_VERSIONID]>=[AGENTRECORD_VERSIONID] AND [AGENTEXPANSION03_VERSIONID]>=[AGENTEXPANSION10_VERSIONID] AND [AGENTEXPANSION03_VERSIONID]>=[ADDR_EMAIL_VERSIONID] AND [AGENTEXPANSION03_VERSIONID]>=[NALK_EMAIL_VERSIONID] AND [AGENTEXPANSION03_VERSIONID]>=[NALK_PHONE_VERSIONID] AND [AGENTEXPANSION03_VERSIONID]>=[HIER_VERSIONID] then [AGENTEXPANSION03_VERSIONID] when [AGENTEXPANSION10_VERSIONID]>=[NAMERECORD_VERSIONID] AND [AGENTEXPANSION10_VERSIONID]>=[EXTENSIONRECORDNADR_VERSIONID] AND [AGENTEXPANSION10_VERSIONID]>=[AGENTRECORD_VERSIONID] AND [AGENTEXPANSION10_VERSIONID]>=[AGENTEXPANSION03_VERSIONID] AND [AGENTEXPANSION10_VERSIONID]>=[ADDR_EMAIL_VERSIONID] AND [AGENTEXPANSION10_VERSIONID]>=[NALK_EMAIL_VERSIONID] AND [AGENTEXPANSION10_VERSIONID]>=[NALK_PHONE_VERSIONID] AND [AGENTEXPANSION10_VERSIONID]>=[HIER_VERSIONID] then [AGENTEXPANSION10_VERSIONID] when [ADDR_EMAIL_VERSIONID]>=[NAMERECORD_VERSIONID] AND [ADDR_EMAIL_VERSIONID]>=[EXTENSIONRECORDNADR_VERSIONID] AND [ADDR_EMAIL_VERSIONID]>=[AGENTRECORD_VERSIONID] AND [ADDR_EMAIL_VERSIONID]>=[AGENTEXPANSION03_VERSIONID] AND [ADDR_EMAIL_VERSIONID]>=[AGENTEXPANSION10_VERSIONID] AND [ADDR_EMAIL_VERSIONID]>=[NALK_EMAIL_VERSIONID] AND [ADDR_EMAIL_VERSIONID]>=[NALK_PHONE_VERSIONID] AND [ADDR_EMAIL_VERSIONID]>=[HIER_VERSIONID] then [ADDR_EMAIL_VERSIONID] when [NALK_EMAIL_VERSIONID]>=[NAMERECORD_VERSIONID] AND [NALK_EMAIL_VERSIONID]>=[EXTENSIONRECORDNADR_VERSIONID] AND [NALK_EMAIL_VERSIONID]>=[AGENTRECORD_VERSIONID] AND [NALK_EMAIL_VERSIONID]>=[AGENTEXPANSION03_VERSIONID] AND [NALK_EMAIL_VERSIONID]>=[AGENTEXPANSION10_VERSIONID] AND [NALK_EMAIL_VERSIONID]>=[ADDR_EMAIL_VERSIONID] AND [NALK_EMAIL_VERSIONID]>=[NALK_PHONE_VERSIONID] AND [NALK_EMAIL_VERSIONID]>=[HIER_VERSIONID] then [NALK_EMAIL_VERSIONID] when [NALK_PHONE_VERSIONID]>=[NAMERECORD_VERSIONID] AND [NALK_PHONE_VERSIONID]>=[EXTENSIONRECORDNADR_VERSIONID] AND [NALK_PHONE_VERSIONID]>=[AGENTRECORD_VERSIONID] AND [NALK_PHONE_VERSIONID]>=[AGENTEXPANSION03_VERSIONID] AND [NALK_PHONE_VERSIONID]>=[AGENTEXPANSION10_VERSIONID] AND [NALK_PHONE_VERSIONID]>=[ADDR_EMAIL_VERSIONID] AND [NALK_PHONE_VERSIONID]>=[NALK_EMAIL_VERSIONID] AND [NALK_PHONE_VERSIONID]>=[HIER_VERSIONID] then [NALK_PHONE_VERSIONID] when [HIER_VERSIONID]>=[NAMERECORD_VERSIONID] AND [HIER_VERSIONID]>=[EXTENSIONRECORDNADR_VERSIONID] AND [HIER_VERSIONID]>=[AGENTRECORD_VERSIONID] AND [HIER_VERSIONID]>=[AGENTEXPANSION03_VERSIONID] AND [HIER_VERSIONID]>=[AGENTEXPANSION10_VERSIONID] AND [HIER_VERSIONID]>=[ADDR_EMAIL_VERSIONID] AND [HIER_VERSIONID]>=[NALK_EMAIL_VERSIONID] AND [HIER_VERSIONID]>=[NALK_PHONE_VERSIONID] then [HIER_VERSIONID]  end),
	[VERSIONID]  AS (CONVERT([bigint],left(CONVERT([varchar](19),case when [NAMERECORD_VERSIONID]>=[EXTENSIONRECORDNADR_VERSIONID] AND [NAMERECORD_VERSIONID]>=[AGENTRECORD_VERSIONID] AND [NAMERECORD_VERSIONID]>=[AGENTEXPANSION03_VERSIONID] AND [NAMERECORD_VERSIONID]>=[AGENTEXPANSION10_VERSIONID] AND [NAMERECORD_VERSIONID]>=[ADDR_EMAIL_VERSIONID] AND [NAMERECORD_VERSIONID]>=[NALK_EMAIL_VERSIONID] AND [NAMERECORD_VERSIONID]>=[NALK_PHONE_VERSIONID] AND [NAMERECORD_VERSIONID]>=[HIER_VERSIONID] then [NAMERECORD_VERSIONID] when [EXTENSIONRECORDNADR_VERSIONID]>=[NAMERECORD_VERSIONID] AND [EXTENSIONRECORDNADR_VERSIONID]>=[AGENTRECORD_VERSIONID] AND [EXTENSIONRECORDNADR_VERSIONID]>=[AGENTEXPANSION03_VERSIONID] AND [EXTENSIONRECORDNADR_VERSIONID]>=[AGENTEXPANSION10_VERSIONID] AND [EXTENSIONRECORDNADR_VERSIONID]>=[ADDR_EMAIL_VERSIONID] AND [EXTENSIONRECORDNADR_VERSIONID]>=[NALK_EMAIL_VERSIONID] AND [EXTENSIONRECORDNADR_VERSIONID]>=[NALK_PHONE_VERSIONID] AND [EXTENSIONRECORDNADR_VERSIONID]>=[HIER_VERSIONID] then [EXTENSIONRECORDNADR_VERSIONID] when [AGENTRECORD_VERSIONID]>=[NAMERECORD_VERSIONID] AND [AGENTRECORD_VERSIONID]>=[EXTENSIONRECORDNADR_VERSIONID] AND [AGENTRECORD_VERSIONID]>=[AGENTEXPANSION03_VERSIONID] AND [AGENTRECORD_VERSIONID]>=[AGENTEXPANSION10_VERSIONID] AND [AGENTRECORD_VERSIONID]>=[ADDR_EMAIL_VERSIONID] AND [AGENTRECORD_VERSIONID]>=[NALK_EMAIL_VERSIONID] AND [AGENTRECORD_VERSIONID]>=[NALK_PHONE_VERSIONID] AND [AGENTRECORD_VERSIONID]>=[HIER_VERSIONID] then [AGENTRECORD_VERSIONID] when [AGENTEXPANSION03_VERSIONID]>=[NAMERECORD_VERSIONID] AND [AGENTEXPANSION03_VERSIONID]>=[EXTENSIONRECORDNADR_VERSIONID] AND [AGENTEXPANSION03_VERSIONID]>=[AGENTRECORD_VERSIONID] AND [AGENTEXPANSION03_VERSIONID]>=[AGENTEXPANSION10_VERSIONID] AND [AGENTEXPANSION03_VERSIONID]>=[ADDR_EMAIL_VERSIONID] AND [AGENTEXPANSION03_VERSIONID]>=[NALK_EMAIL_VERSIONID] AND [AGENTEXPANSION03_VERSIONID]>=[NALK_PHONE_VERSIONID] AND [AGENTEXPANSION03_VERSIONID]>=[HIER_VERSIONID] then [AGENTEXPANSION03_VERSIONID] when [AGENTEXPANSION10_VERSIONID]>=[NAMERECORD_VERSIONID] AND [AGENTEXPANSION10_VERSIONID]>=[EXTENSIONRECORDNADR_VERSIONID] AND [AGENTEXPANSION10_VERSIONID]>=[AGENTRECORD_VERSIONID] AND [AGENTEXPANSION10_VERSIONID]>=[AGENTEXPANSION03_VERSIONID] AND [AGENTEXPANSION10_VERSIONID]>=[ADDR_EMAIL_VERSIONID] AND [AGENTEXPANSION10_VERSIONID]>=[NALK_EMAIL_VERSIONID] AND [AGENTEXPANSION10_VERSIONID]>=[NALK_PHONE_VERSIONID] AND [AGENTEXPANSION10_VERSIONID]>=[HIER_VERSIONID] then [AGENTEXPANSION10_VERSIONID] when [ADDR_EMAIL_VERSIONID]>=[NAMERECORD_VERSIONID] AND [ADDR_EMAIL_VERSIONID]>=[EXTENSIONRECORDNADR_VERSIONID] AND [ADDR_EMAIL_VERSIONID]>=[AGENTRECORD_VERSIONID] AND [ADDR_EMAIL_VERSIONID]>=[AGENTEXPANSION03_VERSIONID] AND [ADDR_EMAIL_VERSIONID]>=[AGENTEXPANSION10_VERSIONID] AND [ADDR_EMAIL_VERSIONID]>=[NALK_EMAIL_VERSIONID] AND [ADDR_EMAIL_VERSIONID]>=[NALK_PHONE_VERSIONID] AND [ADDR_EMAIL_VERSIONID]>=[HIER_VERSIONID] then [ADDR_EMAIL_VERSIONID] when [NALK_EMAIL_VERSIONID]>=[NAMERECORD_VERSIONID] AND [NALK_EMAIL_VERSIONID]>=[EXTENSIONRECORDNADR_VERSIONID] AND [NALK_EMAIL_VERSIONID]>=[AGENTRECORD_VERSIONID] AND [NALK_EMAIL_VERSIONID]>=[AGENTEXPANSION03_VERSIONID] AND [NALK_EMAIL_VERSIONID]>=[AGENTEXPANSION10_VERSIONID] AND [NALK_EMAIL_VERSIONID]>=[ADDR_EMAIL_VERSIONID] AND [NALK_EMAIL_VERSIONID]>=[NALK_PHONE_VERSIONID] AND [NALK_EMAIL_VERSIONID]>=[HIER_VERSIONID] then [NALK_EMAIL_VERSIONID] when [NALK_PHONE_VERSIONID]>=[NAMERECORD_VERSIONID] AND [NALK_PHONE_VERSIONID]>=[EXTENSIONRECORDNADR_VERSIONID] AND [NALK_PHONE_VERSIONID]>=[AGENTRECORD_VERSIONID] AND [NALK_PHONE_VERSIONID]>=[AGENTEXPANSION03_VERSIONID] AND [NALK_PHONE_VERSIONID]>=[AGENTEXPANSION10_VERSIONID] AND [NALK_PHONE_VERSIONID]>=[ADDR_EMAIL_VERSIONID] AND [NALK_PHONE_VERSIONID]>=[NALK_EMAIL_VERSIONID] AND [NALK_PHONE_VERSIONID]>=[HIER_VERSIONID] then [NALK_PHONE_VERSIONID] when [HIER_VERSIONID]>=[NAMERECORD_VERSIONID] AND [HIER_VERSIONID]>=[EXTENSIONRECORDNADR_VERSIONID] AND [HIER_VERSIONID]>=[AGENTRECORD_VERSIONID] AND [HIER_VERSIONID]>=[AGENTEXPANSION03_VERSIONID] AND [HIER_VERSIONID]>=[AGENTEXPANSION10_VERSIONID] AND [HIER_VERSIONID]>=[ADDR_EMAIL_VERSIONID] AND [HIER_VERSIONID]>=[NALK_EMAIL_VERSIONID] AND [HIER_VERSIONID]>=[NALK_PHONE_VERSIONID] then [HIER_VERSIONID]  end),(13)))),
 CONSTRAINT [PK__mapping___3214EC27434A44C9] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[Insurance_Policy_Participant]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[Insurance_Policy_Participant](
	[External_Id__c] [bigint] NOT NULL,
	[RecordTypeId] [nvarchar](18) NULL,
	[CompanyCode] [varchar](2) NULL,
	[PolicyNumber] [varchar](12) NULL,
	[InsurancePolicyId] [nvarchar](18) NULL,
	[Beneficiary_Share__c] [varchar](40) NULL,
	[PrimaryParticipantAccountId] [varchar](20) NULL,
	[PrimaryParticipantContactId] [varchar](20) NULL,
	[Role__c] [varchar](2) NULL,
	[Beneficiary_Type__c] [varchar](2) NULL,
	[Policy_Number__c]  AS (([PolicyNumber]+'-')+[CompanyCode]),
	[Primary_Participant_Name_Id__c] [varchar](20) NULL,
	[Benefit_Sequence__c] [smallint] NULL,
	[Created_dt] [datetime2](7) NULL,
	[Modified_dt] [datetime2](7) NULL,
	[Primary_Participant_SubAccount_Id] [varchar](20) NULL,
	[Name__c] [varchar](255) NULL,
	[First_Name__c] [varchar](40) NULL,
	[Last_Name__c] [varchar](40) NULL,
	[Middle_Name__c] [varchar](10) NULL,
	[DOB__c] [datetime2](7) NULL,
	[Gender__c] [varchar](1) NULL,
	[SSN__c] [varchar](12) NULL,
	[Phone__c] [varchar](40) NULL,
	[Email__c] [varchar](105) NULL,
	[Deceased__c] [bit] NULL,
	[TIN__c] [varchar](12) NULL,
	[Address1__c] [varchar](50) NULL,
	[Address2__c] [varchar](50) NULL,
	[Address3__c] [varchar](50) NULL,
	[City__c] [varchar](24) NULL,
	[Country__c] [varchar](30) NULL,
	[State__c] [varchar](2) NULL,
	[Zip__c] [varchar](10) NULL,
	[ForeignAddressFlag__c] [bit] NULL,
	[Delete_Flag] [bit] NOT NULL,
	[Reject_Flag] [smallint] NULL,
	[Reject_Dt] [datetime2](7) NULL,
	[Reject_Reason] [nvarchar](100) NULL,
 CONSTRAINT [PK_Insurance_Policy_Participant] PRIMARY KEY CLUSTERED 
(
	[External_Id__c] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[LOOKUP_USER]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[LOOKUP_USER](
	[ID] [nvarchar](18) NOT NULL,
	[USERNAME] [nvarchar](80) NULL,
	[LASTNAME] [nvarchar](80) NULL,
	[FIRSTNAME] [nvarchar](40) NULL,
	[CREATEDDATE] [datetime] NULL,
	[LASTMODIFIEDDATE] [datetime] NULL,
	[EMAIL] [nvarchar](128) NULL,
 CONSTRAINT [PK_LookUP_USER] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[LOOKUP_GROUP]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[LOOKUP_GROUP](
	[ID] [nvarchar](18) NULL,
	[NAME] [nvarchar](40) NULL,
	[DEVELOPERNAME] [nvarchar](80) NULL,
	[RELATEDID] [nvarchar](18) NULL,
	[TYPE] [nvarchar](40) NULL,
	[EMAIL] [nvarchar](255) NULL,
	[QUEUEROUTINGCONFIGID] [nvarchar](18) NULL,
	[OWNERID] [nvarchar](18) NULL,
	[DOESSENDEMAILTOMEMBERS] [int] NULL,
	[DOESINCLUDEBOSSES] [int] NULL,
	[CREATEDDATE] [datetime] NULL,
	[CREATEDBYID] [nvarchar](18) NULL,
	[LASTMODIFIEDDATE] [datetime] NULL,
	[LASTMODIFIEDBYID] [nvarchar](18) NULL,
	[SYSTEMMODSTAMP] [datetime] NULL
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[LOOKUP_RECORDTYPE]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[LOOKUP_RECORDTYPE](
	[ID] [nvarchar](18) NULL,
	[NAME] [nvarchar](80) NULL,
	[DEVELOPERNAME] [nvarchar](80) NULL,
	[NAMESPACEPREFIX] [nvarchar](15) NULL,
	[DESCRIPTION] [nvarchar](255) NULL,
	[BUSINESSPROCESSID] [nvarchar](18) NULL,
	[SOBJECTTYPE] [nvarchar](40) NULL,
	[ISACTIVE] [int] NULL,
	[ISPERSONTYPE] [int] NULL,
	[CREATEDBYID] [nvarchar](18) NULL,
	[CREATEDDATE] [datetime] NULL,
	[LASTMODIFIEDBYID] [nvarchar](18) NULL,
	[LASTMODIFIEDDATE] [datetime] NULL,
	[SYSTEMMODSTAMP] [datetime] NULL
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[LOOKUP_SUB_ACCOUNT__C]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[LOOKUP_SUB_ACCOUNT__C](
	[ID] [nvarchar](18) NOT NULL,
	[NAME] [nvarchar](80) NULL,
	[CREATEDDATE] [datetime] NULL,
	[LASTMODIFIEDDATE] [datetime] NULL,
	[PARENT_ACCOUNT__C] [nvarchar](18) NULL,
	[NAME_ID__C] [nvarchar](20) NULL,
 CONSTRAINT [PK_SUBACCOUNT_C_ID] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[LOOKUP_Upline_Detail]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[LOOKUP_Upline_Detail](
	[Id] [nvarchar](18) NULL,
	[OwnerId] [nvarchar](18) NULL,
	[IsDeleted] [int] NULL,
	[Name] [nvarchar](80) NULL,
	[CreatedDate] [datetime] NULL,
	[CreatedById] [nvarchar](18) NULL,
	[LastModifiedDate] [datetime] NULL,
	[LastModifiedById] [nvarchar](18) NULL,
	[SystemModstamp] [datetime] NULL,
	[LastViewedDate] [datetime] NULL,
	[LastReferencedDate] [datetime] NULL,
	[Agent_Level__c] [nvarchar](2) NULL,
	[Agent_Number__c] [nvarchar](18) NULL,
	[BD_Agent_Percent__c] [decimal](5, 2) NULL,
	[BD_Commission_Level__c] [nvarchar](2) NULL,
	[BD_NMO_Percent__c] [decimal](5, 2) NULL,
	[BD_Product_Type__c] [nvarchar](255) NULL,
	[BD_Upline_Percent__c] [decimal](5, 2) NULL,
	[Broker_Dealer_Agent_Number__c] [nvarchar](18) NULL,
	[Company_Code__c] [nvarchar](255) NULL,
	[Region_Code__c] [nvarchar](6) NULL,
	[Signing_Agent__c] [nvarchar](18) NULL,
	[Start_Date__c] [datetime] NULL,
	[Stop_Date__c] [datetime] NULL,
	[Upline_Level__c] [nvarchar](2) NULL,
	[Upline__c] [nvarchar](18) NULL,
	[External_Id__c] [nvarchar](40) NULL,
	[Version_Id__c] [nvarchar](20) NULL
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[LOOKUP_ADDRESS__C]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[LOOKUP_ADDRESS__C](
	[ID] [nvarchar](18) NOT NULL,
	[CREATEDDATE] [datetime] NULL,
	[LASTMODIFIEDDATE] [datetime] NULL,
	[EXTERNAL_ID__C] [int] NULL,
	[LIFEPRO_LAST_MODIFIED_DATETIME__C] [nvarchar](30) NULL,
 CONSTRAINT [PK_ID] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[LOOKUP_INSURANCEPOLICY]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[LOOKUP_INSURANCEPOLICY](
	[ID] [nvarchar](18) NOT NULL,
	[NAME] [nvarchar](255) NULL,
	[RECORDTYPEID] [nvarchar](18) NULL,
	[CREATEDDATE] [datetime] NULL,
	[LASTMODIFIEDDATE] [datetime] NULL,
	[PRODUCTID] [nvarchar](18) NULL,
	[PRODUCERID] [nvarchar](18) NULL,
	[COMPANY_CODE__C] [nvarchar](2) NULL,
	[EXTERNAL_ID__C] [nvarchar](20) NULL,
 CONSTRAINT [PK_LookUPINSURANCEPOLICY] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[LOOKUP_PRODUCT2]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[LOOKUP_PRODUCT2](
	[ID] [nvarchar](18) NOT NULL,
	[NAME] [nvarchar](255) NULL,
	[PRODUCTCODE] [nvarchar](255) NULL,
	[CREATEDDATE] [datetime] NULL,
	[LASTMODIFIEDDATE] [datetime] NULL,
 CONSTRAINT [PK_LookProduct_ID] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[LOOKUP_PRODUCER_20211219]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[LOOKUP_PRODUCER_20211219](
	[ID] [nvarchar](18) NULL,
	[NAME] [nvarchar](255) NULL,
	[CREATEDDATE] [datetime] NULL,
	[LASTMODIFIEDDATE] [datetime] NULL,
	[SYSTEMMODSTAMP] [datetime] NULL,
	[ACCOUNT_NAME_ID__C] [nvarchar](20) NULL,
	[AGENT_LEVEL__C] [nvarchar](10) NULL,
	[AGENT_NUMBER_ADVISOR__C] [nvarchar](1300) NULL,
	[BROKER_DEALER_COUNT__C] [decimal](3, 0) NULL,
	[COMPANY_CODE__C] [nvarchar](2) NULL,
	[CONTACT_NAME_ID__C] [nvarchar](20) NULL,
	[END_DATE__C] [datetime] NULL,
	[FIRST_APP_DATE__C] [datetime] NULL,
	[FIRST_APPLICATION_DATE__C] [datetime] NULL,
	[LAST_APP_DATE__C] [datetime] NULL,
	[NAME_ID__C] [nvarchar](20) NULL,
	[STATUS_INDICATOR__C] [nvarchar](1300) NULL,
	[TOTAL_PENDING_APPS__C] [decimal](5, 0) NULL,
	[UPLINE_PRODUCER_NUMBER__C] [nvarchar](20) NULL,
	[EXTERNAL_ID__C] [nvarchar](40) NULL,
	[STATUS_REASON_DESCRIPTION__C] [nvarchar](255) NULL,
	[STATUS_REASON__C] [nvarchar](2) NULL,
	[PASSCODE_ALERT__C] [nvarchar](1300) NULL
) ON [PRIMARY]
GO

/****** Object:  Table [salesforce].[LOOKUP_PRODUCER]    Script Date: 5/17/2022 1:58:30 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [salesforce].[LOOKUP_PRODUCER](
	[ID] [nvarchar](18) NOT NULL,
	[NAME] [varchar](20) NULL,
	[NAME_ID__C] [nvarchar](20) NULL,
	[EXTERNAL_ID__C] [nvarchar](40) NULL,
	[COMPANY_CODE__C] [nvarchar](2) NULL,
	[CREATEDDATE] [datetime] NULL,
	[LASTMODIFIEDDATE] [datetime] NULL,
	[ACCOUNT_NAME_ID__C] [nvarchar](20) NULL,
	[CONTACT_NAME_ID__C] [nvarchar](20) NULL,
	[SYSTEMMODSTAMP] [datetime] NULL,
	[AGENT_LEVEL__C] [nvarchar](10) NULL,
	[AGENT_NUMBER_ADVISOR__C] [nvarchar](1300) NULL,
	[BROKER_DEALER_COUNT__C] [decimal](3, 0) NULL,
	[END_DATE__C] [datetime] NULL,
	[FIRST_APP_DATE__C] [datetime] NULL,
	[FIRST_APPLICATION_DATE__C] [datetime] NULL,
	[LAST_APP_DATE__C] [datetime] NULL,
	[STATUS_INDICATOR__C] [nvarchar](1300) NULL,
	[TOTAL_PENDING_APPS__C] [decimal](5, 0) NULL,
	[UPLINE_PRODUCER_NUMBER__C] [nvarchar](20) NULL,
	[STATUS_REASON_DESCRIPTION__C] [nvarchar](255) NULL,
	[STATUS_REASON__C] [nvarchar](2) NULL,
	[PASSCODE_ALERT__C] [nvarchar](1300) NULL,
 CONSTRAINT [PK_LookProcedure_ID] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [salesforce].[PhoneNumber] ADD  DEFAULT ((0)) FOR [VERSION_ID]
GO

ALTER TABLE [salesforce].[Sub_Account] ADD  CONSTRAINT [df_SubAccount_RejectFlag]  DEFAULT ((0)) FOR [Reject_Flag]
GO

ALTER TABLE [salesforce].[Sub_Account] ADD  CONSTRAINT [df_SubAccount_DeleteFlag]  DEFAULT ((0)) FOR [Delete_Flag]
GO

ALTER TABLE [salesforce].[Producer_Address] ADD  CONSTRAINT [DF__Producer___Delet__2C2BD434]  DEFAULT ((0)) FOR [Delete_Flag]
GO

ALTER TABLE [salesforce].[Producer_Policy_Assignment] ADD  CONSTRAINT [DF__Producer___Delet__15E78D5A]  DEFAULT ((0)) FOR [Delete_Flag]
GO

ALTER TABLE [salesforce].[Upline_Detail] ADD  CONSTRAINT [def_DeleteFlag_UplineDetail]  DEFAULT ((0)) FOR [Delete_Flag]
GO

ALTER TABLE [salesforce].[Upline_Detail] ADD  CONSTRAINT [df_RejectFlag_UplineDetail]  DEFAULT ((0)) FOR [Reject_Flag]
GO

ALTER TABLE [salesforce].[Advisor_Contact] ADD  CONSTRAINT [def_Reject_Flag_AdvContact]  DEFAULT ((0)) FOR [Reject_Flag]
GO

ALTER TABLE [salesforce].[Address] ADD  CONSTRAINT [df_Address_DeleteFlag]  DEFAULT ((0)) FOR [Delete_Flag]
GO

ALTER TABLE [salesforce].[Account_Wholesaler] ADD  CONSTRAINT [def5_Reject_Flag]  DEFAULT ((0)) FOR [Reject_Flag]
GO

ALTER TABLE [salesforce].[mapping_Upline_Detail] ADD  CONSTRAINT [df_DeleteFlag_mpgHier]  DEFAULT ((0)) FOR [DELETE_FLAG]
GO

ALTER TABLE [salesforce].[mapping_Upline_Detail] ADD  CONSTRAINT [df_VersionID_HIER_mpgHier]  DEFAULT ((0)) FOR [HIER_VERSIONID]
GO

ALTER TABLE [salesforce].[mapping_Upline_Detail] ADD  CONSTRAINT [df_VersionID_HIERHN_mpgHier]  DEFAULT ((0)) FOR [EXTNHN_VERSIONID]
GO

ALTER TABLE [salesforce].[Account_Person] ADD  CONSTRAINT [def_Reject_Flag]  DEFAULT ((0)) FOR [Reject_Flag]
GO

ALTER TABLE [salesforce].[Account_Person] ADD  CONSTRAINT [DF__Account_P__Delet__0141762F]  DEFAULT ((0)) FOR [Delete_Flag]
GO

ALTER TABLE [salesforce].[Account_NMO] ADD  CONSTRAINT [def1_Reject_Flag]  DEFAULT ((0)) FOR [Reject_Flag]
GO

ALTER TABLE [salesforce].[Account_NMO] ADD  CONSTRAINT [DF__Account_N__Delet__580A5672]  DEFAULT ((0)) FOR [Delete_Flag]
GO

ALTER TABLE [salesforce].[Account_Institution] ADD  CONSTRAINT [def3_Reject_Flag]  DEFAULT ((0)) FOR [Reject_Flag]
GO

ALTER TABLE [salesforce].[Account_Institution] ADD  CONSTRAINT [DF__Account_I__Delet__09D6BC30]  DEFAULT ((0)) FOR [Delete_Flag]
GO

ALTER TABLE [salesforce].[Account_Business] ADD  CONSTRAINT [def2_Reject_Flag]  DEFAULT ((0)) FOR [Reject_Flag]
GO

ALTER TABLE [salesforce].[Account_Business] ADD  CONSTRAINT [DF__Account_B__Delet__65645190]  DEFAULT ((0)) FOR [Delete_Flag]
GO

ALTER TABLE [salesforce].[Account_BrokerDealer] ADD  CONSTRAINT [def4_Reject_Flag]  DEFAULT ((0)) FOR [Reject_Flag]
GO

ALTER TABLE [salesforce].[Account_BrokerDealer] ADD  CONSTRAINT [DF__Account_B__Delet__56220E00]  DEFAULT ((0)) FOR [Delete_Flag]
GO

ALTER TABLE [salesforce].[Account_Address_Sub_Account] ADD  CONSTRAINT [DF__Account_A__LifeP__342C1D58]  DEFAULT (getdate()) FOR [LifePro_Last_Modified_DateTime__c]
GO

ALTER TABLE [salesforce].[Account_Address_Sub_Account] ADD  CONSTRAINT [DF_Account_Address_Sub_Account_Delete_Flag]  DEFAULT ((0)) FOR [Delete_Flag]
GO

ALTER TABLE [salesforce].[Account_Address] ADD  CONSTRAINT [DF__Account_A__Rejec__5CC41E97]  DEFAULT ((0)) FOR [Reject_Flag]
GO

ALTER TABLE [salesforce].[Account_Address] ADD  CONSTRAINT [DF_Account_Address_Delete_Flag]  DEFAULT ((0)) FOR [Delete_Flag]
GO

ALTER TABLE [salesforce].[mapping_Account] ADD  CONSTRAINT [df_VersionID_Namerecord]  DEFAULT ((0)) FOR [NAMERECORD_VERSIONID]
GO

ALTER TABLE [salesforce].[mapping_Account] ADD  CONSTRAINT [df_VersionID_ExtRecordNadrna]  DEFAULT ((0)) FOR [EXTENSIONRECORDNADR_VERSIONID]
GO

ALTER TABLE [salesforce].[mapping_Account] ADD  CONSTRAINT [df_VersionID_AgentRecord]  DEFAULT ((0)) FOR [AGENTRECORD_VERSIONID]
GO

ALTER TABLE [salesforce].[mapping_Account] ADD  CONSTRAINT [df_VersionID_AgentExp03]  DEFAULT ((0)) FOR [AGENTEXPANSION03_VERSIONID]
GO

ALTER TABLE [salesforce].[mapping_Account] ADD  CONSTRAINT [df_VersionID_AgentExp10]  DEFAULT ((0)) FOR [AGENTEXPANSION10_VERSIONID]
GO

ALTER TABLE [salesforce].[mapping_Account] ADD  CONSTRAINT [df_VersionID_AddrEmail]  DEFAULT ((0)) FOR [ADDR_EMAIL_VERSIONID]
GO

ALTER TABLE [salesforce].[mapping_Account] ADD  CONSTRAINT [df_VersionID_NalkEmail]  DEFAULT ((0)) FOR [NALK_EMAIL_VERSIONID]
GO

ALTER TABLE [salesforce].[mapping_Account] ADD  CONSTRAINT [df_VersionID_NalkPhone]  DEFAULT ((0)) FOR [NALK_PHONE_VERSIONID]
GO

ALTER TABLE [salesforce].[mapping_Account] ADD  CONSTRAINT [df_VersionID_Hier]  DEFAULT ((0)) FOR [HIER_VERSIONID]
GO

ALTER TABLE [salesforce].[mapping_Account] ADD  CONSTRAINT [df_DeleteFlag]  DEFAULT ((0)) FOR [DELETE_FLAG]
GO

ALTER TABLE [salesforce].[Insurance_Policy_Participant] ADD  CONSTRAINT [DF_Insurance_Policy_Participant_Delete_Flag]  DEFAULT ((0)) FOR [Delete_Flag]
GO

ALTER TABLE [salesforce].[Insurance_Policy_Participant] ADD  CONSTRAINT [df_Insurance_Policy_Participant_RejectFlag]  DEFAULT ((0)) FOR [Reject_Flag]
GO

ALTER TABLE [salesforce].[FK]  WITH CHECK ADD  CONSTRAINT [Truncate_mapping_Account] FOREIGN KEY([IDFK])
REFERENCES [salesforce].[mapping_Account] ([ID])
GO

ALTER TABLE [salesforce].[FK] CHECK CONSTRAINT [Truncate_mapping_Account]
GO

ALTER TABLE [salesforce].[FK]  WITH CHECK ADD  CONSTRAINT [Truncate_mapping_Contact] FOREIGN KEY([IDFK])
REFERENCES [salesforce].[mapping_Contact] ([ID])
GO

ALTER TABLE [salesforce].[FK] CHECK CONSTRAINT [Truncate_mapping_Contact]
GO


--Temp + maintenance tables
USE [EDW_Outbound]
GO

/****** Object:  Table [work].[tmp_AdvisorContact_Bus_Key]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_AdvisorContact_Bus_Key](
	[SSN] [nvarchar](9) NOT NULL,
	[NAMERECORD_NAMEID] [int] NOT NULL,
	[AGENTRECORD_NAMEID] [int] NOT NULL,
	[AGENTRECORD_AGENT_NUMBER] [nvarchar](12) NOT NULL,
	[AGENTRECORD_COMPANY_CODE] [nvarchar](2) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[SSN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_PhoneNumber_NAMEID]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_PhoneNumber_NAMEID](
	[NAME_ID] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[NAME_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_PhoneNumber_Delta]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_PhoneNumber_Delta](
	[Row_ID] [bigint] IDENTITY(1,1) NOT NULL,
	[NAME_ID] [int] NOT NULL,
	[PHONE_NUMBER] [bigint] NULL,
	[EFFECTIVE_DATE] [datetime2](7) NULL,
	[ADDRESS_CODE] [varchar](3) NULL,
	[COMPANY_CODE] [varchar](2) NULL,
	[POLICY_NUMBER] [varchar](12) NULL,
	[ADDRESS_ID] [int] NULL,
	[VERSION_ID] [bigint] NULL,
PRIMARY KEY CLUSTERED 
(
	[NAME_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_ContactNameId_Name]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_ContactNameId_Name](
	[Name_ID] [int] NOT NULL,
	[SSN] [varchar](9) NOT NULL,
 CONSTRAINT [PK_tmp_ContactNameId_Name_NAMEID_SSN] PRIMARY KEY CLUSTERED 
(
	[Name_ID] ASC,
	[SSN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Allocation_Bus_Keys_bu]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Allocation_Bus_Keys_bu](
	[COMPANY_CODE] [varchar](2) NOT NULL,
	[POLICY_NUMBER] [varchar](12) NOT NULL,
	[FV_FUND_CODE] [varchar](10) NOT NULL
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Allocation_Bus_Keys]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Allocation_Bus_Keys](
	[COMPANY_CODE] [varchar](2) NOT NULL,
	[POLICY_NUMBER] [varchar](12) NOT NULL,
	[FV_FUND_CODE] [varchar](10) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[COMPANY_CODE] ASC,
	[POLICY_NUMBER] ASC,
	[FV_FUND_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_AdvisorContactSuitabilityTraining]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_AdvisorContactSuitabilityTraining](
	[SOC_SEC_NUMBER] [int] NOT NULL,
	[ROW_ID] [int] NULL
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_advisorContactNameRecord]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_advisorContactNameRecord](
	[SSN] [varchar](9) NOT NULL,
	[LATEST_NAMEID] [int] NOT NULL,
	[BIRTHDATE] [date] NULL,
	[FIRSTNAME] [nvarchar](20) NULL,
	[LASTNAME] [nvarchar](20) NULL,
	[MIDDLENAME] [nvarchar](10) NULL,
	[SALUTATION] [nvarchar](6) NULL,
	[SUFFIX] [nvarchar](6) NULL,
	[GENDER] [nvarchar](1) NULL,
	[NAME_FORMAT] [nvarchar](1) NULL,
	[VERSION_ID] [bigint] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[SSN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Account_WH_EmailAddressIds_NALK]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Account_WH_EmailAddressIds_NALK](
	[NAME_ID] [int] NOT NULL,
	[ADDRESS_ID] [int] NULL,
	[EFFECTIVE_DATE] [datetime2](7) NULL,
	[EMAIL] [nvarchar](105) NULL,
	[NALK_VERSIONID] [bigint] NULL,
	[ADDR_VERSIONID] [bigint] NULL,
PRIMARY KEY CLUSTERED 
(
	[NAME_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_advisorContactNalkRecord]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_advisorContactNalkRecord](
	[SSN] [varchar](9) NOT NULL,
	[ADDRESS_ID] [int] NOT NULL,
	[ADDRESS_TYPE] [varchar](1) NOT NULL,
	[ADDRESS_CODE] [varchar](3) NULL,
	[NAME_ID] [int] NULL,
	[EFFECTIVE_DATE] [datetime2](7) NULL,
	[COMPANY_CODE] [varchar](2) NULL,
	[POLICY_NUMBER] [varchar](12) NULL,
	[BLOCK_IND] [varchar](1) NULL,
	[PHONE_NUMBER] [bigint] NULL,
	[VERSION_ID] [bigint] NULL,
 CONSTRAINT [PK_advisorContactNalkRecord_SSN_ADDRESS_ID] PRIMARY KEY CLUSTERED 
(
	[SSN] ASC,
	[ADDRESS_TYPE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Policy_Authorization_Bus_Keys]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Policy_Authorization_Bus_Keys](
	[ID] [int] NOT NULL,
 CONSTRAINT [TMP_POLICY_AUTHORIZATION] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_AdvisorContactNADRNARecord]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_AdvisorContactNADRNARecord](
	[SSN] [varchar](9) NOT NULL,
	[FILE_EXTENTION] [varchar](4) NULL,
	[SUB_TYPE_RECORD] [nvarchar](2) NULL,
	[NAME_ID] [int] NULL,
	[VERSION_ID] [bigint] NOT NULL,
	[PERFERRED_NAME] [nvarchar](50) NULL,
	[NPN_NUM] [nvarchar](10) NULL,
	[CRD_NUM] [varchar](10) NULL,
PRIMARY KEY CLUSTERED 
(
	[SSN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_AdvisorContactDeltas]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_AdvisorContactDeltas](
	[SSN] [nvarchar](9) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[SSN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Account_Wholesaler_Bus_Keys]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Account_Wholesaler_Bus_Keys](
	[Name_ID] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[Name_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_AdvisorContactAppDt]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_AdvisorContactAppDt](
	[SSN] [varchar](9) NOT NULL,
	[FIRST_APP_DT] [date] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[SSN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_AdvisorContactAddress]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_AdvisorContactAddress](
	[SSN] [varchar](9) NOT NULL,
	[MailingAddress] [nvarchar](275) NULL,
	[MailingCity] [nvarchar](24) NULL,
	[MailingCountry] [nvarchar](30) NULL,
	[MailingState] [nvarchar](2) NULL,
	[MailingStreet] [nvarchar](107) NULL,
	[MailingPostalCode] [nvarchar](5) NULL,
	[Address_Code] [nvarchar](3) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[SSN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_AdvisorContactAcnt]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_AdvisorContactAcnt](
	[SSN] [varchar](9) NOT NULL,
	[ACCOUNT_SALESFORCE_ID] [nvarchar](18) NULL,
	[REGION_CODE] [nvarchar](6) NULL,
	[BUS_UPLINE_NAME_ID] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[SSN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_AdvisorContactHierarchy]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_AdvisorContactHierarchy](
	[NAME_ID] [int] NOT NULL,
	[NAME_IND] [nvarchar](1) NULL,
	[UPLINE_ID] [int] NULL,
	[UPLINE_IND] [nvarchar](1) NULL,
	[TOPUPLINE_ID] [int] NULL,
	[TOPUPLINE_IND] [nvarchar](1) NULL,
PRIMARY KEY CLUSTERED 
(
	[NAME_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_AdvisorContactEmail]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_AdvisorContactEmail](
	[SSN] [varchar](9) NOT NULL,
	[Email] [nvarchar](105) NULL,
PRIMARY KEY CLUSTERED 
(
	[SSN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Producer_NADRNA]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Producer_NADRNA](
	[NAME_ID] [int] NOT NULL,
	[EXTENSIONRECORDNADR_FILEEXTENSION] [varchar](4) NULL,
	[EXTENSIONRECORDNADR_SUBTYPERECORD] [varchar](2) NULL,
	[EXTENSIONRECORDNADR_VERSIONID] [bigint] NULL,
	[Paperless_Annual_Statement__c] [bit] NULL,
	[Paperless_11_Month_Summary__c] [bit] NULL,
 CONSTRAINT [PK__tmp_Prod__7033E92DBCADFD68] PRIMARY KEY CLUSTERED 
(
	[NAME_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Policy_Participant_Address]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Policy_Participant_Address](
	[Name_ID] [int] NOT NULL,
	[Address1] [varchar](50) NULL,
	[Address2] [varchar](50) NULL,
	[Address3] [varchar](50) NULL,
	[City] [varchar](24) NULL,
	[Country] [varchar](30) NULL,
	[State] [varchar](2) NULL,
	[Zip] [varchar](10) NULL,
	[ForeignAddressFlag] [bit] NULL,
 CONSTRAINT [PK__tmp_Poli__332BBAF2A4317C6E] PRIMARY KEY CLUSTERED 
(
	[Name_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_UplineDetail_BD]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_UplineDetail_BD](
	[Agent_Number] [varchar](12) NOT NULL,
	[Company_Code] [varchar](2) NOT NULL,
	[Stop_Dt] [date] NULL,
	[Start_Dt] [date] NOT NULL,
	[BD_Agent_Percent__c] [decimal](5, 2) NULL,
	[BD_Commission_Level__c] [varchar](2) NULL,
	[BD_NMO_Percent__c] [decimal](5, 2) NULL,
	[BD_Product_Type_Commissions__c] [varchar](1) NOT NULL,
	[BD_Upline_Percent__c] [decimal](10, 2) NULL,
	[Broker_Dealer_Agent_Number__c] [varchar](12) NULL,
	[EXTNHN_BENEFITSEQ] [smallint] NULL,
	[EXTNHN_FILEEXTN] [varchar](4) NULL,
	[EXTNHN_SUBTYPERECORD] [varchar](2) NULL,
	[EXTNHN_DATE] [int] NULL,
	[EXTNHN_TIME] [int] NULL,
	[EXTNHN_CODERID] [varchar](4) NULL,
	[EXTNHN_SEQUENCE] [smallint] NULL,
	[EXTNHN_VERSIONID] [bigint] NOT NULL
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Sub_Account_EmailAddressIds_NALK]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Sub_Account_EmailAddressIds_NALK](
	[NAME_ID] [int] NOT NULL,
	[ADDRESS_ID] [int] NULL,
	[EFFECTIVE_DATE] [datetime2](7) NULL,
	[EMAIL] [nvarchar](105) NULL,
PRIMARY KEY CLUSTERED 
(
	[NAME_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Sub_Account_Bus_Keys]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Sub_Account_Bus_Keys](
	[Name_ID] [int] NOT NULL,
 CONSTRAINT [PK__tmp_Sub___332BBAF2998E85FF] PRIMARY KEY CLUSTERED 
(
	[Name_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_sf_Contact_Name_ID_Name]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_sf_Contact_Name_ID_Name](
	[SSN] [nvarchar](9) NOT NULL,
	[LAST_NAMEID] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[SSN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_sf_Contact_Name_ID_Agnt]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_sf_Contact_Name_ID_Agnt](
	[SSN] [nvarchar](9) NOT NULL,
	[AGENT_NAMEID] [int] NOT NULL,
	[AGENT_NUMBER] [nvarchar](12) NOT NULL,
	[COMPANY_CODE] [nvarchar](2) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[SSN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Producer_Upline_Hierarchy]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Producer_Upline_Hierarchy](
	[CompanyCode_AgentNumber] [varchar](15) NOT NULL,
	[CompanyCode_HierarchyAgentNumber] [varchar](15) NOT NULL,
 CONSTRAINT [PK_tmp_producer_upline_hierarchy] PRIMARY KEY CLUSTERED 
(
	[CompanyCode_AgentNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Producer_Upline_Agents]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Producer_Upline_Agents](
	[CompanyCode_AgentNumber] [varchar](15) NOT NULL,
 CONSTRAINT [PK_tmp_producer_upline_agents] PRIMARY KEY CLUSTERED 
(
	[CompanyCode_AgentNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Producer_Relationship]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Producer_Relationship](
	[AGENT_ID] [bigint] NOT NULL,
	[UPLINE_ID] [bigint] NULL,
	[ROOT_ID] [bigint] NULL,
	[Agent_Number] [varchar](12) NULL,
 CONSTRAINT [PK__tmp_Prod__0BB8E2B1047B4A65] PRIMARY KEY CLUSTERED 
(
	[AGENT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Producer_Policy_Assignment_Policies]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Producer_Policy_Assignment_Policies](
	[POLICY_NUMBER] [varchar](20) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[POLICY_NUMBER] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Producer_Policy_Assignment_Bus_Keys]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Producer_Policy_Assignment_Bus_Keys](
	[POLICYNUMBER] [varchar](20) NOT NULL,
 CONSTRAINT [PK__tmp_Prod__D75FBFA6B64BBD7D] PRIMARY KEY CLUSTERED 
(
	[POLICYNUMBER] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Producer_Policy_Assignment_AGNT_COMM]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Producer_Policy_Assignment_AGNT_COMM](
	[POLICY_NUMBER] [varchar](20) NOT NULL,
	[COMPANY_CODE] [varchar](2) NOT NULL,
	[AGENT_NUM] [varchar](12) NOT NULL,
	[COMM_PCNT] [decimal](5, 2) NULL,
	[PROD_PCNT] [decimal](5, 2) NULL,
 CONSTRAINT [PK__tmp_Prod__75EE38EA94FBCA02] PRIMARY KEY CLUSTERED 
(
	[POLICY_NUMBER] ASC,
	[COMPANY_CODE] ASC,
	[AGENT_NUM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Account_Person_NADRNA]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Account_Person_NADRNA](
	[NAME_ID] [int] NOT NULL,
	[EXTENSIONRECORDNADR_FILEEXTENSION] [varchar](4) NULL,
	[EXTENSIONRECORDNADR_SUBTYPERECORD] [varchar](2) NULL,
	[EXTENSIONRECORDNADR_VERSIONID] [bigint] NULL,
	[Client_Passcode__c] [varchar](20) NULL,
	[Paperless_Annual_Statement__c] [bit] NULL,
	[Paperless_11_Month_Summary__c] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[NAME_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Producer_HIER]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Producer_HIER](
	[Agent_Number] [varchar](12) NOT NULL,
	[Company_code] [varchar](2) NOT NULL,
	[REGION_CODE] [varchar](6) NULL,
	[SA_AGENT] [varchar](12) NULL,
	[START_DATE] [datetime2](7) NULL,
	[STOP_DATE] [datetime2](7) NULL,
 CONSTRAINT [PK_tmp_producer_HIER] PRIMARY KEY CLUSTERED 
(
	[Agent_Number] ASC,
	[Company_code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Producer_Bus_Key]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Producer_Bus_Key](
	[Agent_Number] [varchar](12) NOT NULL,
	[Company_code] [varchar](2) NOT NULL,
 CONSTRAINT [PK_tmp_producer_bus_key] PRIMARY KEY CLUSTERED 
(
	[Agent_Number] ASC,
	[Company_code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Policy_Riders]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Policy_Riders](
	[COMPANY_CODE] [varchar](2) NULL,
	[POLICY_NUMBER] [varchar](12) NULL,
	[RIDERS] [varchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Policy_Plan_Codes]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Policy_Plan_Codes](
	[COMPANY_CODE] [varchar](2) NULL,
	[POLICY_NUMBER] [varchar](12) NULL,
	[BENEFIT_SEQ] [smallint] NULL,
	[PLAN_CODE] [varchar](10) NULL
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Policy_Participant_Name_Bus_Keys]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Policy_Participant_Name_Bus_Keys](
	[Name_ID] [int] NOT NULL,
 CONSTRAINT [PK__tmp_Poli__332BBAF2C0035E4D] PRIMARY KEY CLUSTERED 
(
	[Name_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Policy_Participant_EmailAddressIds_NALK]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Policy_Participant_EmailAddressIds_NALK](
	[NAME_ID] [int] NOT NULL,
	[ADDRESS_ID] [int] NULL,
	[EFFECTIVE_DATE] [datetime2](7) NULL,
	[EMAIL] [nvarchar](105) NULL,
PRIMARY KEY CLUSTERED 
(
	[NAME_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Policy_Participant_EmailAddressIds]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Policy_Participant_EmailAddressIds](
	[Name_ID] [int] NOT NULL,
	[Address_ID] [int] NOT NULL,
 CONSTRAINT [PK__tmp_Poli__332BBAF2A9C0DC79] PRIMARY KEY CLUSTERED 
(
	[Name_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Policy_Participant_Email]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Policy_Participant_Email](
	[Name_ID] [int] NOT NULL,
	[Email] [varchar](105) NULL,
 CONSTRAINT [PK__tmp_Poli__332BBAF25E9980B5] PRIMARY KEY CLUSTERED 
(
	[Name_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Policy_Participant_Bus_Keys]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Policy_Participant_Bus_Keys](
	[COMPANY_CODE] [varchar](2) NOT NULL,
	[POLICY_NUMBER] [varchar](12) NOT NULL,
	[NAME_ID] [int] NOT NULL,
	[BENEFIT_SEQ_NUMBER] [smallint] NOT NULL,
	[RELATE_CODE] [varchar](2) NOT NULL,
	[DELETE_FLAG] [bit] NOT NULL,
	[SYSDATA] [bigint] NOT NULL,
 CONSTRAINT [TMP_POLICY_PARTICIPANT] PRIMARY KEY CLUSTERED 
(
	[SYSDATA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Policy_Participant_Bene_Percent]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Policy_Participant_Bene_Percent](
	[COMPANY_CODE] [varchar](2) NOT NULL,
	[POLICY_NUMBER] [varchar](12) NOT NULL,
	[BP_NAME_ID] [int] NOT NULL,
	[BENEFIT_SEQ] [smallint] NOT NULL,
	[BP_BENE_CODE] [varchar](2) NOT NULL,
	[BP_BENE_PCT] [varchar](6) NOT NULL,
 CONSTRAINT [POLICY_PARTICIPANT_BENE_PERCENT] PRIMARY KEY CLUSTERED 
(
	[COMPANY_CODE] ASC,
	[POLICY_NUMBER] ASC,
	[BP_NAME_ID] ASC,
	[BENEFIT_SEQ] ASC,
	[BP_BENE_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Policy_Participant_AddressIds]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Policy_Participant_AddressIds](
	[Name_ID] [int] NOT NULL,
	[Address_ID] [int] NOT NULL,
 CONSTRAINT [PK__tmp_Poli__332BBAF239ECE2A7] PRIMARY KEY CLUSTERED 
(
	[Name_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Policy_Bus_Keys]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Policy_Bus_Keys](
	[CompanyCode] [varchar](2) NOT NULL,
	[PolicyNumber] [varchar](12) NOT NULL,
 CONSTRAINT [PK__tmp_Poli__65CDB35F33E48CA8] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[PolicyNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Account_Person_EmailAddressIds_NALK]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Account_Person_EmailAddressIds_NALK](
	[NAME_ID] [int] NOT NULL,
	[ADDRESS_ID] [int] NULL,
	[EFFECTIVE_DATE] [datetime2](7) NULL,
	[EMAIL] [varchar](105) NULL,
	[NALK_ADDRESS_CODE] [varchar](3) NULL,
	[NALK_COMPANY_CODE] [varchar](2) NULL,
	[NALK_POLICY_NUMBER] [varchar](12) NULL,
	[NALK_VERSION_ID] [bigint] NULL,
	[ADDR_VERSION_ID] [bigint] NULL,
PRIMARY KEY CLUSTERED 
(
	[NAME_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Account_BD_Bus_Keys]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Account_BD_Bus_Keys](
	[Name_ID] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[Name_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Account_NMO_HIER]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Account_NMO_HIER](
	[HIER_COMPANYCODE] [varchar](2) NOT NULL,
	[HIER_AGENTNUMBER] [varchar](12) NOT NULL,
	[HIER_MARKETINGCODE] [varchar](10) NULL,
	[HIER_AGENTLEVEL] [varchar](2) NULL,
	[HIER_STOPDT] [datetime2](7) NULL,
	[HIER_VERSIONID] [bigint] NULL,
	[AGNT_VERSIONID] [bigint] NULL,
	[NAME_ID] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[NAME_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[stage_sf_Account_Address_Sub_name_addr_id]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[stage_sf_Account_Address_Sub_name_addr_id](
	[minnameid] [int] NULL,
	[maxaddrid] [int] NULL
) ON [PRIMARY]
GO

/****** Object:  Table [work].[stage_sf_Account_Address_Sub_nalk_id]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[stage_sf_Account_Address_Sub_nalk_id](
	[addrid] [int] NULL,
	[maxsysdata] [bigint] NULL
) ON [PRIMARY]
GO

/****** Object:  Table [work].[stage_sf_Account_Address_Sub_min_name_id]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[stage_sf_Account_Address_Sub_min_name_id](
	[soc_sec_number] [int] NULL,
	[minnameid] [int] NULL
) ON [PRIMARY]
GO

/****** Object:  Table [work].[stage_sf_Account_Address_Sub_addr_id]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[stage_sf_Account_Address_Sub_addr_id](
	[soc_sec_number] [int] NULL,
	[maxaddrid] [int] NULL
) ON [PRIMARY]
GO

/****** Object:  Table [work].[stage_sf_Account_Address_name_id]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[stage_sf_Account_Address_name_id](
	[minnameid] [int] NULL
) ON [PRIMARY]
GO

/****** Object:  Table [work].[stage_sf_Account_Address_name_addr_id]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[stage_sf_Account_Address_name_addr_id](
	[minnameid] [int] NULL,
	[maxaddrid] [int] NULL
) ON [PRIMARY]
GO

/****** Object:  Table [work].[stage_sf_Account_Address_nalk_id]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[stage_sf_Account_Address_nalk_id](
	[addrid] [int] NULL,
	[maxsysdata] [bigint] NULL
) ON [PRIMARY]
GO

/****** Object:  Table [work].[stage_sf_Account_Address_min_name_id]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[stage_sf_Account_Address_min_name_id](
	[soc_sec_number] [int] NULL,
	[minnameid] [int] NULL
) ON [PRIMARY]
GO

/****** Object:  Table [work].[stage_sf_Account_Address_addr_id]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[stage_sf_Account_Address_addr_id](
	[soc_sec_number] [int] NULL,
	[maxaddrid] [int] NULL
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Account_Person_Bus_Keys]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Account_Person_Bus_Keys](
	[Name_ID] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[Name_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[stage_sf_Account_BrokerDealer_first_name_id]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[stage_sf_Account_BrokerDealer_first_name_id](
	[Name_ID] [int] NOT NULL,
	[Company_Code] [varchar](2) NOT NULL,
	[Agent_Number] [varchar](20) NOT NULL,
	[Version_ID] [bigint] NOT NULL,
 CONSTRAINT [PK_stage_sf_Account_BrokerDealer_first_name_id] PRIMARY KEY CLUSTERED 
(
	[Name_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[stage_sf_Account_Address_Sub_name_id]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[stage_sf_Account_Address_Sub_name_id](
	[minnameid] [int] NULL
) ON [PRIMARY]
GO

/****** Object:  Table [work].[stage_sf_Account_Institution_first_name_id]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[stage_sf_Account_Institution_first_name_id](
	[Name_ID] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[Name_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Account_NMO_EmailAddressIds_NALK]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Account_NMO_EmailAddressIds_NALK](
	[NAME_ID] [int] NOT NULL,
	[ADDRESS_ID] [int] NULL,
	[EFFECTIVE_DATE] [datetime2](7) NULL,
	[EMAIL] [nvarchar](105) NULL,
	[NALK_EMAIL_ADDRESSCODE] [varchar](3) NULL,
	[NALK_EMAIL_COMPANYCODE] [varchar](2) NULL,
	[NALK_EMAIL_POLICYNUMBER] [varchar](12) NULL,
	[NALK_EMAIL_VERSIONID] [bigint] NULL,
	[ADDR_EMAIL_VERSIONID] [bigint] NULL,
PRIMARY KEY CLUSTERED 
(
	[NAME_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Account_NMO_Bus_Keys]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Account_NMO_Bus_Keys](
	[Name_ID] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[Name_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Account_Institution_NADRNA]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Account_Institution_NADRNA](
	[EXTENSIONRECORDNADR_NAMEID] [int] NOT NULL,
	[EXTENSIONRECORDNADR_FILEEXTENSION] [varchar](4) NULL,
	[EXTENSIONRECORDNADR_SUBTYPERECORD] [varchar](2) NULL,
	[EXTENSIONRECORDNADR_VERSIONID] [bigint] NULL,
	[Client_Passcode__c] [varchar](20) NULL,
	[Paperless_Annual_Statement__c] [bit] NULL,
	[Paperless_11_Month_Summary__c] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[EXTENSIONRECORDNADR_NAMEID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Account_Institution_EmailAddressIds_NALK]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Account_Institution_EmailAddressIds_NALK](
	[NAME_ID] [int] NOT NULL,
	[ADDRESS_ID] [int] NULL,
	[EFFECTIVE_DATE] [datetime2](7) NULL,
	[EMAIL] [varchar](105) NULL,
	[NALK_ADDRESS_CODE] [varchar](3) NULL,
	[NALK_COMPANY_CODE] [varchar](2) NULL,
	[NALK_POLICY_NUMBER] [varchar](12) NULL,
	[NALK_VERSION_ID] [bigint] NULL,
	[ADDR_VERSION_ID] [bigint] NULL,
PRIMARY KEY CLUSTERED 
(
	[NAME_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Account_Institution_Bus_Keys]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Account_Institution_Bus_Keys](
	[Name_ID] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[Name_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Account_Business_NADRNA]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Account_Business_NADRNA](
	[EXTENSIONRECORDNADR_NAMEID] [int] NOT NULL,
	[EXTENSIONRECORDNADR_FILEEXTENSION] [varchar](4) NULL,
	[EXTENSIONRECORDNADR_SUBTYPERECORD] [varchar](2) NULL,
	[EXTENSIONRECORDNADR_VERSIONID] [bigint] NULL,
PRIMARY KEY CLUSTERED 
(
	[EXTENSIONRECORDNADR_NAMEID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Account_Business_HIER]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Account_Business_HIER](
	[HIER_COMPANYCODE] [varchar](2) NOT NULL,
	[HIER_AGENTNUMBER] [varchar](12) NOT NULL,
	[HIER_MARKETINGCODE] [varchar](10) NULL,
	[HIER_AGENTLEVEL] [varchar](2) NULL,
	[HIER_STOPDT] [datetime2](7) NULL,
	[HIER_VERSIONID] [bigint] NULL,
	[AGNT_VERSIONID] [bigint] NULL,
	[NAME_ID] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[NAME_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Account_Business_EmailAddressIds_NALK]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Account_Business_EmailAddressIds_NALK](
	[NAME_ID] [int] NOT NULL,
	[ADDRESS_ID] [int] NULL,
	[EFFECTIVE_DATE] [datetime2](7) NULL,
	[EMAIL] [nvarchar](105) NULL,
	[NALK_EMAIL_ADDRESSCODE] [varchar](3) NULL,
	[NALK_EMAIL_COMPANYCODE] [varchar](2) NULL,
	[NALK_EMAIL_POLICYNUMBER] [varchar](12) NULL,
	[NALK_EMAIL_VERSIONID] [bigint] NULL,
	[ADDR_EMAIL_VERSIONID] [bigint] NULL,
PRIMARY KEY CLUSTERED 
(
	[NAME_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Account_Business_Bus_Keys]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Account_Business_Bus_Keys](
	[Name_ID] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[Name_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[stage_sf_Account_Business_first_name_id]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[stage_sf_Account_Business_first_name_id](
	[Name_ID] [int] NOT NULL,
	[Company_Code] [varchar](2) NOT NULL,
	[Agent_Number] [varchar](20) NOT NULL,
	[Version_ID] [bigint] NOT NULL,
 CONSTRAINT [PK_stage_sf_Account_Business_first_name_id] PRIMARY KEY CLUSTERED 
(
	[Name_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Account_BD_EmailAddressIds_NALK]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Account_BD_EmailAddressIds_NALK](
	[NAME_ID] [int] NOT NULL,
	[ADDRESS_ID] [int] NULL,
	[EFFECTIVE_DATE] [datetime2](7) NULL,
	[EMAIL] [nvarchar](105) NULL,
	[NALK_EMAIL_ADDRESSCODE] [varchar](3) NULL,
	[NALK_EMAIL_COMPANYCODE] [varchar](2) NULL,
	[NALK_EMAIL_POLICYNUMBER] [varchar](12) NULL,
	[NALK_EMAIL_VERSIONID] [bigint] NULL,
	[ADDR_EMAIL_VERSIONID] [bigint] NULL,
PRIMARY KEY CLUSTERED 
(
	[NAME_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Account_BD_HIER]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Account_BD_HIER](
	[HIER_COMPANYCODE] [varchar](2) NOT NULL,
	[HIER_AGENTNUMBER] [varchar](12) NOT NULL,
	[HIER_MARKETINGCODE] [varchar](10) NULL,
	[HIER_AGENTLEVEL] [varchar](2) NULL,
	[HIER_STOPDT] [datetime2](7) NULL,
	[HIER_VERSIONID] [bigint] NULL,
	[AGNT_VERSIONID] [bigint] NULL,
	[NAME_ID] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[NAME_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[stage_sf_Subaccount_name_id]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[stage_sf_Subaccount_name_id](
	[SubAccount_Name_ID] [int] NOT NULL,
	[ParentAccount_Name_ID] [int] NOT NULL,
 CONSTRAINT [PK__stage_sf__5391B7D6D35F59EA] PRIMARY KEY CLUSTERED 
(
	[SubAccount_Name_ID] ASC,
	[ParentAccount_Name_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[stage_sf_Producer_Policy_Assignment_Bus_Keys]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[stage_sf_Producer_Policy_Assignment_Bus_Keys](
	[SysData] [bigint] NOT NULL,
	[POLICY_NUMBER] [varchar](20) NOT NULL,
	[COMPANY_CODE] [varchar](2) NOT NULL,
	[NAME_ID] [int] NOT NULL,
	[RELATE_CODE] [varchar](2) NOT NULL,
	[AGENT_NUMBER] [varchar](12) NOT NULL,
	[DELETE_FLAG] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[SysData] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[stage_sf_Producer_Bus_Key]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[stage_sf_Producer_Bus_Key](
	[Agent_Number] [varchar](12) NOT NULL,
	[Company_code] [varchar](2) NOT NULL,
	[SSN] [varchar](9) NOT NULL,
	[NAME_ID] [int] NOT NULL,
 CONSTRAINT [PK_stage_sf_Producer_Bus_Key] PRIMARY KEY CLUSTERED 
(
	[Agent_Number] ASC,
	[Company_code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[stage_sf_Producer_Address_min_name_id]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[stage_sf_Producer_Address_min_name_id](
	[minnameid] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[minnameid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[stage_sf_Producer_Address_addr_id]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[stage_sf_Producer_Address_addr_id](
	[name_id] [int] NOT NULL,
	[addr_id] [int] NOT NULL
) ON [PRIMARY]
GO

/****** Object:  Table [work].[stage_sf_first_name_id]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[stage_sf_first_name_id](
	[Name_ID] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[Name_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[stage_sf_Contact_Name_ID]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[stage_sf_Contact_Name_ID](
	[SSN] [nvarchar](9) NOT NULL,
	[LAST_NAMEID] [int] NOT NULL,
	[AGENT_NAMEID] [int] NOT NULL,
	[AGENT_NUMBER] [nvarchar](12) NOT NULL,
	[AGENT_COMPANY_CODE] [nvarchar](2) NOT NULL,
	[VERSION_ID] [bigint] NULL,
 CONSTRAINT [PK__stage_sf__CA1E8E3DD2A39FBC] PRIMARY KEY CLUSTERED 
(
	[SSN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[stage_sf_AdvisorContactHierarchy]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[stage_sf_AdvisorContactHierarchy](
	[NAME_ID] [int] NOT NULL,
	[REGION_CODE] [varchar](6) NULL,
	[NAME_IND] [nvarchar](1) NULL,
	[UPLINE_ID] [int] NULL,
	[UPLINE_IND] [nvarchar](1) NULL,
	[TOPUPLINE_ID] [int] NULL,
	[TOPUPLINE_IND] [nvarchar](1) NULL,
 CONSTRAINT [PK__stage_sf__7033E92D2D857F6C] PRIMARY KEY CLUSTERED 
(
	[NAME_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[stage_sf_Account_NMO_first_name_id]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[stage_sf_Account_NMO_first_name_id](
	[Name_ID] [int] NOT NULL,
	[Company_Code] [varchar](2) NOT NULL,
	[Agent_Number] [varchar](20) NOT NULL,
	[Version_ID] [bigint] NOT NULL,
 CONSTRAINT [PK_stage_sf_Account_NMO_first_name_id] PRIMARY KEY CLUSTERED 
(
	[Name_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[tmp_Account_Address_Sub_Account_Bus_Keys]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[tmp_Account_Address_Sub_Account_Bus_Keys](
	[Row_ID] [bigint] NOT NULL,
 CONSTRAINT [TMP_Account_Address_Sub_Account] PRIMARY KEY CLUSTERED 
(
	[Row_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [work].[stage_sf_Account_Wholesaler_first_name_id]    Script Date: 5/17/2022 2:03:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [work].[stage_sf_Account_Wholesaler_first_name_id](
	[Name_ID] [int] NOT NULL,
	[Company_Code] [varchar](2) NOT NULL,
	[Agent_Number] [varchar](20) NOT NULL,
	[Version_ID] [bigint] NOT NULL,
	[Hier_Version_ID] [bigint] NOT NULL,
 CONSTRAINT [PK_stage_sf_Account_Wholesaler_first_name_id] PRIMARY KEY CLUSTERED 
(
	[Name_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [work].[stage_sf_Contact_Name_ID] ADD  CONSTRAINT [DF__stage_sf___VERSI__572B40D2]  DEFAULT ((0)) FOR [VERSION_ID]
GO


--Stored procs:
USE [EDW_Outbound]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Upline_Detail]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Upline_Detail]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Agent_Tax_Document]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Truncate_Agent_Tax_Document]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Sub_Account]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Sub_Account]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Account_Institution]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Truncate_Account_Institution]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Account_Person]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Truncate_Account_Person]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Account_Wholesaler]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Truncate_Account_Wholesaler]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Address]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Truncate_Address]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Advisor_Contact]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Truncate_Advisor_Contact]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Allcoation]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Truncate_Allcoation]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Producer]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Truncate_Producer]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Allocation]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Truncate_Allocation]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Allocoation]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Truncate_Allocoation]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Insurance_Policy_Authorization]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Truncate_Insurance_Policy_Authorization]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Insurance_Policy_Participant]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Truncate_Insurance_Policy_Participant]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Insurance_Policy_Transaction]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Truncate_Insurance_Policy_Transaction]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Policy]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Truncate_Policy]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Policy_Document]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Truncate_Policy_Document]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Account_BrokerDealer]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Truncate_Account_BrokerDealer]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Account_Address_Sub_Account]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Truncate_Account_Address_Sub_Account]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Account_Address]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Truncate_Account_Address]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Insert_Sub_Account_Initial]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Insert_Sub_Account_Initial]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Delete_Insurance_Policy_Participant]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Delete_Insurance_Policy_Participant]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Get_IDs_Account]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Get_IDs_Account]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Get_IDs_Contact]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Get_IDs_Contact]
GO

/****** Object:  StoredProcedure [salesforce].[usp_insert_Account_Address_Initial]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_insert_Account_Address_Initial]
GO

/****** Object:  StoredProcedure [salesforce].[usp_insert_Account_Address_Sub_Account_Initial]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_insert_Account_Address_Sub_Account_Initial]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Insert_Account_BrokerDealer_Initial]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Insert_Account_BrokerDealer_Initial]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Insert_Account_Business_Initial]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Insert_Account_Business_Initial]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Insert_Account_Institution_Initial]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Insert_Account_Institution_Initial]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Insert_Account_NMO_Initial]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Insert_Account_NMO_Initial]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Insert_Account_Person_Initial]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Insert_Account_Person_Initial]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Insert_Account_Wholesaler_Initial]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Insert_Account_Wholesaler_Initial]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Insert_Address_Initial]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Insert_Address_Initial]
GO

/****** Object:  StoredProcedure [salesforce].[usp_insert_Advisor_Contact_Initial]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_insert_Advisor_Contact_Initial]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Insert_Hierarchy]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Insert_Hierarchy]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Insert_Product_Initial]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Insert_Product_Initial]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Policy_Tax_Document]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Truncate_Policy_Tax_Document]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Account_Business]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Truncate_Account_Business]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Producer_Address]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Truncate_Producer_Address]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Agent_Tax_Documents]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Agent_Tax_Documents]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Allocation_Rates]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Allocation_Rates]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Contact_Name_ID]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Contact_Name_ID]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Insurance_Policy_Authorization]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Insurance_Policy_Authorization]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Insurance_Policy_Participant]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Insurance_Policy_Participant]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_PhoneNumber]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_PhoneNumber]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Policy]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Policy]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Policy_Documents]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Policy_Documents]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Policy_Documents_Full_Test]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Policy_Documents_Full_Test]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Policy_Tax_Documents]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Policy_Tax_Documents]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Producer]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Producer]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Producer_20220218]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Producer_20220218]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Producer_Address]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Producer_Address]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Producer_Policy_Assignment]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Producer_Policy_Assignment]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Producer_Upline]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Producer_Upline]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Producer_Policy_Assignment]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Truncate_Producer_Policy_Assignment]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Allocation]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Allocation]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Product]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Product]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Agent_Hierarchy]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Agent_Hierarchy]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Account_Address1]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Account_Address1]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Advisor_Contact_V2]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Advisor_Contact_V2]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Producer_Upline]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Truncate_Producer_Upline]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Product]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Truncate_Product]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Sub_Account]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Truncate_Sub_Account]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Upline_Detail]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Truncate_Upline_Detail]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Account_Address]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Account_Address]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Account_Address_Sub_Account]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Account_Address_Sub_Account]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Account_NMO]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Truncate_Account_NMO]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Account_BrokerDealer]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Account_BrokerDealer]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Advisor_Contact]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Advisor_Contact]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Account_Institution]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Account_Institution]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Account_NMO]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Account_NMO]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Account_Person]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Account_Person]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Account_Wholesaler]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Account_Wholesaler]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Address]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Address]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Account_Business]    Script Date: 5/17/2022 2:04:37 PM ******/
DROP PROCEDURE [salesforce].[usp_Upsert_Account_Business]
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Account_Business]    Script Date: 5/17/2022 2:04:37 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
select object_name(process_id),*, DATEDIFF(MINUTE, start_dt, stop_dt) from edw_audit..process_log 
WHERE object_name(process_id) ='usp_Upsert_Account_Business'
AND start_dt >=CAST(CURRENT_TIMESTAMP AS DATE);
*/

CREATE           PROCEDURE  [salesforce].[usp_Upsert_Account_Business]  
    
AS  
BEGIN;  
-- =============================================  
/*
VERSIONING: a.b.c - where a - major version (breaks compatibility) - b - minor version (additions) - c - bug fixes   
 */  
 
 -- Author:    Jason Rippel  
 -- CreationDate:   2021-06-28  
 -- Version:    0.1.0  
 -- Description:   Refresh Account Business table for synchronization with SalesForce   
 -- Change Log:     
  -- Modified By:  Anastasia Vogelaar  
 -- Modified Date:  9/2/2021  
 -- Version:   0.1.3  
 -- Description:  Added check to only include accounts that were not uploaded with other acount types  
    
 -- Modified By:  Anastasia Vogelaar  
 -- Modified Date:  09/07/2021  
 -- Version:   0.1.4  
 -- Description:  Replaced Drop Table with Truncate  
  
 -- Modified By:  Anastasia Vogelaar  
 -- Modified Date:  09/10/2021  
 -- Version:   0.1.5  
 -- Description:  Added email check  
  
 -- Modified By:  Harish Kola  
 -- Modified Date:  11/10/2021  
 -- Version:   0.2.0  
 -- Description:  Included Audit logging,Mapping table merge and updated Rejection code   

 -- Modified By:	Anastasia Vogelaar    
 -- Modified Date:  12/18/2021 
 -- Version:		0.2.1    
 -- Description:	Added email check for char(39)

 -- Modified By:	Anastasia Vogelaar    
 -- Modified Date:  12/19/2021 
 -- Version:		0.2.2    
 -- Description:	Fixed mapping table loader - Version ID was not populated
 
 -- Modified By:	Anastasia Vogelaar    
 -- Modified Date:  12/19/2021 
 -- Version:		0.2.3    
 -- Description:	Fixed mapping table loader - there was name format selection criteria causing hundreds of thousands records to come in instead of expected 28K

  -- Modified By:	Anastasia Vogelaar    
 -- Modified Date:  12/20/2021 
 -- Version:		0.2.4    
 -- Description:	Added record type check

 -- Modified By:	Anastasia Vogelaar    
 -- Modified Date:  12/20/2021 
 -- Version:		0.2.5    
 -- Description:	Replaced merge with update/insert - only update if recordtypeid matches, only insert if NAME ID is new

 -- Modified By:	Anastasia Vogelaar    
 -- Modified Date:  01/01/2022
 -- Version:		0.2.6    
 -- Description:	Adapted code to account for NULL Version IDs in Production

  -- Modified By:	Anastasia Vogelaar    
 -- Modified Date:  01/13/2022
 -- Version:		0.2.6    
 -- Description:	Fixed the issue that generates duplicates (AGNT reference instead of CURR_VW)

 -- Modified By:	Jason Rippel    
 -- Modified Date:	2022-01-20
 -- Version:		0.2.7  
 -- Description:	Updated NADRNA CTE to Temp table for performance

 -- Modified By:	Jason Rippel    
 -- Modified Date:	2022-01-24
 -- Version:		0.2.8  
 -- Description:	Updated EmailAddressIds CTE to Temp table for performance

 -- Modified By:	Anastasia Vogelaar   
 -- Modified Date:	2022-02-01
 -- Version:		0.2.9 
 -- Description:	Removed Nadrna reference

 -- Modified By:	Steve Tangeman    
 -- Modified Date:	3/2/2022
 -- Version:		0.2.10
 -- Description:	Commented out version ID check for now

 -- Modified By:	Darin Baarda
 -- Modified Date:	3/17/2022
 -- Version:		0.2.11
 -- Description:	Changed how emails are picked up

 -- Modified By:	Anastasia Vogelaar
 -- Modified Date:	4/12/2022
 -- Version:		0.2.9
 -- Description:	Added Phone check

 -- Modified By:	Anastasia Vogelaar
 -- Modified Date:	04/29/2022
 -- Version:		0.3.0
 -- Description:	Added all business keys to the mapping, changed delta checks to views (to include deleted records)

 -- Full reload:  
--DECLARE @SETTING_NAME_NAME  NVARCHAR(50) = 'SYNC_ACCOUNT_Business_NAME_CURR_VW';  
--DECLARE @SETTING_NAME_HIER  NVARCHAR(50) = 'SYNC_ACCOUNT_BUSINESS_HEIR_CURR_VW';  
--DECLARE @SETTING_NAME_AGNT       NVARCHAR(50) = 'SYNC_ACCOUNT_BUSINESS_AGNT_CURR_VW';  
--DECLARE @SETTING_NAME_NALK  NVARCHAR(50) = 'SYNC_ACCOUNT_Business_NALK_CURR_VW';  
--DECLARE @SETTING_NAME_ADDR  NVARCHAR(50) = 'SYNC_ACCOUNT_Business_ADDR_CURR_VW';  
--DECLARE @SETTING_NAME_AEXP_03  NVARCHAR(50) = 'SYNC_ACCOUNT_BUSINESS_AEXP_03_CURR_VW';  
--DECLARE @SETTING_NAME_AEXP_10  NVARCHAR(50) = 'SYNC_ACCOUNT_BUSINESS_AEXP_10_CURR_VW';
--DECLARE @SETTING_NAME_PHONE	NVARCHAR(50) = 'SYNC_ACCOUNT_BUSINESS_PHONE';
--DECLARE @SETTING_MODULE   NVARCHAR(50) = 'SF_SYNC';  
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_NAME AND SETTING_MODULE = @SETTING_MODULE;  
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_HIER AND SETTING_MODULE = @SETTING_MODULE;  
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_AGNT AND SETTING_MODULE = @SETTING_MODULE;  
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_NALK AND SETTING_MODULE = @SETTING_MODULE;  
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_ADDR AND SETTING_MODULE = @SETTING_MODULE;  
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_AEXP_03 AND SETTING_MODULE = @SETTING_MODULE;  
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_AEXP_10 AND SETTING_MODULE = @SETTING_MODULE; 
--UPDATE SETTINGS SET SETTING_VALUE = '1/1/1753' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_PHONE AND SETTING_MODULE = @SETTING_MODULE;
-- =============================================  
  
SET NOCOUNT ON;  
DECLARE @SETTING_NAME_NAME		NVARCHAR(50) = 'SYNC_ACCOUNT_BUSINESS_NAME_CURR_VW';  
DECLARE @SETTING_NAME_HIER		NVARCHAR(50) = 'SYNC_ACCOUNT_BUSINESS_HEIR_CURR_VW';  
DECLARE @SETTING_NAME_AGNT		NVARCHAR(50) = 'SYNC_ACCOUNT_BUSINESS_AGNT_CURR_VW';  
DECLARE @SETTING_NAME_NALK		NVARCHAR(50) = 'SYNC_ACCOUNT_BUSINESS_NALK_CURR_VW';  
DECLARE @SETTING_NAME_ADDR		NVARCHAR(50) = 'SYNC_ACCOUNT_BUSINESS_ADDR_CURR_VW';  
DECLARE @SETTING_NAME_AEXP_03	NVARCHAR(50) = 'SYNC_ACCOUNT_BUSINESS_AEXP_03_CURR_VW';  
DECLARE @SETTING_NAME_AEXP_10	NVARCHAR(50) = 'SYNC_ACCOUNT_BUSINESS_AEXP_10_CURR_VW';  
DECLARE @SETTING_NAME_PHONE		NVARCHAR(50) = 'SYNC_ACCOUNT_BUSINESS_PHONE';
DECLARE @SETTING_MODULE			NVARCHAR(50) = 'SF_SYNC';  
DECLARE @START_VAL_NAME			BIGINT;  
DECLARE @START_VAL_HIER			BIGINT;  
DECLARE @START_VAL_AGNT			BIGINT;  
DECLARE @START_VAL_NALK			BIGINT;
DECLARE @START_VAL_ADDR			BIGINT; 
DECLARE @START_VAL_AEXP_10		BIGINT;
DECLARE @START_VAL_AEXP_03		BIGINT;
DECLARE @START_VAL_PHONE		DATETIME2;
DECLARE @END_VAL_NAME			BIGINT;  
DECLARE @END_VAL_HIER			BIGINT;  
DECLARE @END_VAL_AGNT			BIGINT;  
DECLARE @END_VAL_NALK			BIGINT;  
DECLARE @END_VAL_ADDR			BIGINT;  
DECLARE @END_VAL_AEXP_10		BIGINT;  
DECLARE @END_VAL_AEXP_03		BIGINT;  
DECLARE @END_VAL_PHONE			DATETIME2;
DECLARE @RecordTypeID			nVARCHAR(18);  
DECLARE @LOGID_START			INT;  --Used for the first log id  
DECLARE @LOGID					INT;  --Used for intermediate log ids  
DECLARE @ROWS					INT;  --Used for logging row counts  
  
 
BEGIN TRY  
IF NOT EXISTS(SELECT 1 FROM EDW_Audit.[dbo].[Delta_Settings] WHERE SETTING_NAME = @SETTING_NAME_PHONE AND SETTING_MODULE = @SETTING_MODULE)
	BEGIN;
	INSERT EDW_Audit.[dbo].[Delta_Settings] (Setting_Value, Setting_Module, Setting_Name) VALUES ('1/1/1753', @SETTING_MODULE, @SETTING_NAME_PHONE);
	END;
--Logging  
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountBusiness:Stat/End Indicator');  
SELECT @LOGID_START = @@IDENTITY;  
  
--Do not do anything if there are pending records from Salesforce  
IF NOT EXISTS(SELECT 1 FROM [salesforce].[mapping_Account] WHERE [NAMERECORD_NAMEID] IS NULL)
	BEGIN;

IF (1=1)  
 BEGIN;  
--Retrieve record type by api name  
SELECT @RecordTypeID	= [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE DEVELOPERNAME = 'IndustriesBusiness' AND SOBJECTTYPE = 'Account';
--Retrieve delta criteria
SELECT @START_VAL_NAME	= CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_NAME AND Setting_Module = @SETTING_MODULE;  
SELECT @END_VAL_NAME	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[NAME_BusKey_Vw];  
SELECT @START_VAL_HIER  = CAST(SETTING_VALUE as INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_HIER AND Setting_Module = @SETTING_MODULE;  
SELECT @END_VAL_HIER	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[HIER_Vw];  
SELECT @START_VAL_AGNT  = CAST(SETTING_VALUE as INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_AGNT AND Setting_Module = @SETTING_MODULE;  
SELECT @END_VAL_AGNT	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[AGNT_Vw];  
SELECT @START_VAL_NALK	= CAST(SETTING_VALUE as INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_NALK AND Setting_Module = @SETTING_MODULE; 
SELECT @END_VAL_NALK	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[NALK_BusKey_Vw];
SELECT @START_VAL_ADDR	= CAST(SETTING_VALUE as INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_ADDR AND Setting_Module = @SETTING_MODULE;  
SELECT @END_VAL_ADDR	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[ADDR_Vw]; 
SELECT @START_VAL_AEXP_03  = CAST(SETTING_VALUE as INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_AEXP_03 AND Setting_Module = @SETTING_MODULE;  
SELECT @END_VAL_AEXP_03	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[AEXP_03_Vw];  
SELECT @START_VAL_AEXP_10   = CAST(SETTING_VALUE as INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_AEXP_10 AND Setting_Module = @SETTING_MODULE;  
SELECT @END_VAL_AEXP_10 = MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[AEXP_10_Vw]; 
SELECT @START_VAL_PHONE = CAST([SETTING_VALUE] AS DATETIME2) FROM EDW_Audit.[dbo].[Delta_Settings] WHERE [Setting_Name]= @SETTING_NAME_PHONE AND [Setting_Module]= @SETTING_MODULE;
SELECT @END_VAL_PHONE	= MAX(COALESCE([MODIFIED_DT], [CREATED_DT],'1/1/1753')) FROM [salesforce].[PhoneNumber];   
    
/* START: Create temporary tables.*/  
IF (1=1)  
	BEGIN;  
	--Name Ids - this table will contain all changed business keys for all dependencies  
	IF OBJECT_ID (N'work.tmp_Account_Business_Bus_Keys', N'U') IS NOT NULL  
		BEGIN;  
		TRUNCATE TABLE [work].[tmp_Account_Business_Bus_Keys];  
		END;  
	ELSE  
	BEGIN;  
	CREATE TABLE [work].[tmp_Account_Business_Bus_Keys]  
		([Name_ID] INT NOT NULL PRIMARY KEY CLUSTERED);  
	END;
  
 	IF OBJECT_ID (N'work.tmp_Account_Business_EmailAddressIds_NALK', N'U') IS NOT NULL
	   BEGIN;
	        TRUNCATE TABLE [work].[tmp_Account_Business_EmailAddressIds_NALK];
	   END;
	ELSE
	   BEGIN;
			CREATE	TABLE   [work].[tmp_Account_Business_EmailAddressIds_NALK]
			( NAME_ID int NOT NULL PRIMARY KEY CLUSTERED
			, ADDRESS_ID int NULL
			, EFFECTIVE_DATE datetime2(7) NULL
			, EMAIL nvarchar(105) NULL
			, [NALK_EMAIL_ADDRESSCODE] varchar(3) NULL
			, [NALK_EMAIL_COMPANYCODE] VARCHAR(2) NULL
			, [NALK_EMAIL_POLICYNUMBER] VARCHAR(12) NULL
			, [NALK_EMAIL_VERSIONID] BIGINT NULL
			, [ADDR_EMAIL_VERSIONID] BIGINT NULL);
	   END;
	IF OBJECT_ID (N'work.tmp_Account_Business_HIER', N'U') IS NULL
	BEGIN;
	CREATE	TABLE  [EDW_Outbound].[work].[tmp_Account_Business_HIER]
		([HIER_COMPANYCODE] VARCHAR(2) NOT NULL
		, [HIER_AGENTNUMBER] VARCHAR(12) NOT NULL
		, [HIER_MARKETINGCODE] VARCHAR(10) NULL
		, [HIER_AGENTLEVEL] VARCHAR(2) NULL
		, [HIER_STOPDT] DATETIME2 NULL
		, [HIER_VERSIONID] BIGINT NULL
		, [AGNT_VERSIONID] BIGINT NULL
		, [NAME_ID] INT NOT NULL PRIMARY KEY CLUSTERED
		);
	END;
 END;  
/* END: Create temporary tables.*/  
  
/* START: Refresh name IDs for specific Business.*/  
IF (1=1)  
 BEGIN;  
  
   --Refresh NameIDs in scope  
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountBusiness:Update Name IDs HIER');          
	sELECT @LOGID = @@IDENTITY; 
	--This Merge statement will insert new NAME_IDs from the source subselect to target table  
	--and delete the rows from the target table if they are no longer part of the source subselect  
  ;WITH BusinessAgents_Hier AS
	(SELECT ROW_NUMBER() OVER (PARTITION BY AGNT.[NAME_ID] ORDER BY COALESCE(HIER.[STOP_DATE],'12/31/9999') DESC) AS RN
			, HIER.[COMPANY_CODE]
			, HIER.[AGENT_NUMBER]
			, HIER.[MARKETING_CODE]
			, HIER.[AGENT_LEVEL]
			, HIER.[STOP_DATE]
			, HIER.[VERSION_ID]
			, AGNT.[NAME_ID]
			, AGNT.VERSION_ID AS AGNT_VERSIONID
		FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] AS HIER
			INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGNT ON
				AGNT.AGENT_NUMBER = HIER.AGENT_NUMBER
				AND AGNT.COMPANY_CODE = HIER.COMPANY_CODE
		WHERE ((AGNT.Row_ID > @START_VAL_AGNT AND AGNT.Row_ID <= @END_VAL_AGNT)
			OR 
			(HIER.Row_ID > @START_VAL_HIER AND HIER.Row_ID <= @END_VAL_HIER))
			AND NOT EXISTS (SELECT 1 FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] AS SRC
							WHERE SRC.AGENT_NUMBER = AGNT.AGENT_NUMBER
								AND SRC.COMPANY_CODE = SRC.COMPANY_CODE
								AND (
									(SRC.COMPANY_CODE = '01' AND SRC.REGION_CODE = 'BD')
									OR (SRC.COMPANY_CODE = '09' AND SRC.REGION_CODE = 'RAYJAY' AND SRC.SALES_REGION = 'SE')
									OR (SRC.COMPANY_CODE = '09' AND SRC.SALES_REGION = 'BD'  AND SRC.REGION_CODE <> 'WHOLE' )
									OR (SRC.COMPANY_CODE = '06' AND SRC.SALES_REGION = 'BD'  AND SRC.REGION_CODE <> 'WHOLE' )
									OR (SRC.REPORT_DESC = 'NMO' AND CAST(SRC.AGENT_LEVEL AS int) >= 90 )
									OR (SRC.REGION_CODE = 'WHOLE')
									)
							)
		)
	UPDATE DEST
	SET [HIER_COMPANYCODE]	= SRC.[COMPANY_CODE]
		, [DEST].[HIER_AGENTNUMBER] = SRC.AGENT_NUMBER
		, DEST.HIER_MARKETINGCODE = SRC.MARKETING_CODE
		, DEST.HIER_AGENTLEVEL = SRC.AGENT_LEVEL
		, DEST.HIER_STOPDT = SRC.STOP_DATE
		, DEST.HIER_VERSIONID = SRC.VERSION_ID
		, DEST.AGNT_VERSIONID = SRC.AGNT_VERSIONID
	FROM [work].[tmp_Account_Business_HIER] AS DEST 
		INNER JOIN BusinessAgents_Hier AS SRC ON
			SRC.NAME_ID = DEST.NAME_ID
			AND SRC.RN = 1;
		
	SELECT @ROWS = @@ROWCOUNT;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID; 

	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountBusiness:Insert Name IDs HIER');          
	SELECT @LOGID = @@IDENTITY; 
	
	WITH BusinessAgents_Hier AS
	(SELECT ROW_NUMBER() OVER (PARTITION BY AGNT.[NAME_ID] ORDER BY COALESCE(HIER.[STOP_DATE],'12/31/9999') DESC) AS RN
			, HIER.[COMPANY_CODE]
			, HIER.[AGENT_NUMBER]
			, HIER.[MARKETING_CODE]
			, HIER.[AGENT_LEVEL]
			, HIER.[STOP_DATE]
			, HIER.[VERSION_ID]
			, AGNT.[NAME_ID]
			, AGNT.VERSION_ID AS AGNT_VERSIONID
		FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] AS HIER
			INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGNT ON
				AGNT.AGENT_NUMBER = HIER.AGENT_NUMBER
				AND AGNT.COMPANY_CODE = HIER.COMPANY_CODE
		WHERE NOT EXISTS 
			(SELECT 1 FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] AS SRC
			WHERE SRC.AGENT_NUMBER = AGNT.AGENT_NUMBER
				AND SRC.COMPANY_CODE = SRC.COMPANY_CODE
				AND (
					(SRC.COMPANY_CODE = '01' AND SRC.REGION_CODE = 'BD')
					OR (SRC.COMPANY_CODE = '09' AND SRC.REGION_CODE = 'RAYJAY' AND SRC.SALES_REGION = 'SE')
					OR (SRC.COMPANY_CODE = '09' AND SRC.SALES_REGION = 'BD'  AND SRC.REGION_CODE <> 'WHOLE' )
					OR (SRC.COMPANY_CODE = '06' AND SRC.SALES_REGION = 'BD'  AND SRC.REGION_CODE <> 'WHOLE' )
					OR (SRC.REPORT_DESC = 'NMO' AND CAST(SRC.AGENT_LEVEL AS int) >= 90 )
					OR (SRC.REGION_CODE = 'WHOLE')
					)
			)
			AND ((AGNT.Row_ID > @START_VAL_AGNT AND AGNT.Row_ID <= @END_VAL_AGNT)
				OR 
				(HIER.Row_ID > @START_VAL_HIER AND HIER.Row_ID <= @END_VAL_HIER))
	)
	INSERT [EDW_Outbound].[work].[tmp_Account_Business_HIER]
		([HIER_COMPANYCODE]
		, [HIER_AGENTNUMBER]
		, [HIER_MARKETINGCODE]
		, [HIER_AGENTLEVEL]
		, [HIER_STOPDT]
		, [HIER_VERSIONID]
		, [NAME_ID]
		, [AGNT_VERSIONID]
		)
	SELECT BusinessAgents_Hier.COMPANY_CODE
		, BusinessAgents_Hier.AGENT_NUMBER
		, BusinessAgents_Hier.MARKETING_CODE
		, BusinessAgents_Hier.AGENT_LEVEL
		, BusinessAgents_Hier.STOP_DATE
		, BusinessAgents_Hier.VERSION_ID
		, BusinessAgents_Hier.NAME_ID
		, BusinessAgents_Hier.AGNT_VERSIONID
	FROM BusinessAgents_Hier 
	WHERE RN = 1
		AND NOT EXISTS (SELECT 1 FROM [EDW_Outbound].[work].[tmp_Account_Business_HIER] AS HIER 
			WHERE HIER.NAME_ID = BusinessAgents_Hier.NAME_ID);

				
	SELECT @ROWS = @@ROWCOUNT;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID; 

	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountBusiness:Insert Name IDs All');          
	SELECT @LOGID = @@IDENTITY; 	
	
	INSERT [work].[stage_sf_Account_Business_first_name_id]
		([Name_ID]
		, [Company_Code]
		, [Agent_Number]
		, [Version_ID])
	SELECT [NAME_ID]
		, [HIER_COMPANYCODE]
		, [HIER_AGENTNUMBER]
		, [HIER_VERSIONID]
	FROM [EDW_Outbound].[work].[tmp_Account_Business_HIER] AS SRC
	WHERE  NOT EXISTS (SELECT 1 FROM [work].[tmp_Account_Business_HIER] AS DEST WHERE DEST.NAME_ID = SRC.NAME_ID)
		AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_brokerdealer_first_name_id] AS BS WHERE BS.[NAME_ID] = SRC.[NAME_ID]) --not in broker dealer accnt  
		AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_Institution_first_name_id] AS INST WHERE INST.[NAME_ID]= SRC.[NAME_ID]) --not in institution  
		AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_NMO_first_name_id] AS NMO WHERE NMO.[NAME_ID] =  SRC.[NAME_ID]) --not in nmo  
		AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_Wholesaler_first_name_id] AS WS WHERE WS.[NAME_ID] =  SRC.[NAME_ID]) --not in wholesaler  
		AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_first_name_id] AS PRS WHERE PRS.[NAME_ID] = SRC.[NAME_ID]);--not in account person  
     
  
  --Logging  
  SELECT @ROWS = @@ROWCOUNT;  
  UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;  
  
  
 END;  
/* END: Refresh name IDs for specific Business.*/  
  
/* START: Populate temporary tables.*/  
IF (1=1)  
 BEGIN;  
  
 INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountBusiness:Get new and changed records');  
  SELECT @LOGID = @@IDENTITY;  
  
 --Pick all new or changed Name Ids from NAME_Curr_Vw  
 IF @START_VAL_NAME < @END_VAL_NAME  
  BEGIN;  
  INSERT [work].[tmp_Account_Business_Bus_Keys]  
	([Name_ID])  
  SELECT NAME_BUSKEY.[NAME_ID] AS [Name_ID]  
  FROM  [EDW_DataLake].[lifepro_v].[NAME_BusKey_Vw] AS NAME_BUSKEY  
  WHERE EXISTS(SELECT 1 FROM [work].[stage_sf_Account_Business_first_name_id] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = NAME_BUSKEY.NAME_ID) -- Only Name IDs in scope  
   AND NAME_BUSKEY.Row_ID > @START_VAL_NAME                       -- Only changed records  
   AND NAME_BUSKEY.Row_ID <= @END_VAL_NAME;  
  END;  
  
 --Pick all new or changed Name Ids from HIER_CURR_Vw and AGNT_Curr_Vw  
 IF (@START_VAL_HIER < @END_VAL_HIER ) OR (@START_VAL_AGNT < @END_VAL_AGNT)
  BEGIN;  
  INSERT  [work].[tmp_Account_Business_Bus_Keys]  
    ([Name_ID])  
  SELECT  AGNT.[Name_id]  
  FROM [EDW_DataLake].[lifepro_v].[HIER_Vw] AS HIER   
	LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Vw] AS AGNT  
		ON HIER.COMPANY_CODE = AGNT.COMPANY_CODE  
		AND HIER.AGENT_NUMBER = AGNT.AGENT_NUMBER  
  WHERE NOT EXISTS(SELECT 1 FROM [work].[tmp_Account_Business_Bus_Keys] AS DEST WHERE DEST.[NAME_ID] = AGNT.[NAME_ID])  
    AND EXISTS(SELECT 1 FROM [work].[stage_sf_Account_Business_first_name_id] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = AGNT.NAME_ID)  
    AND   ((HIER.[Row_id] > @START_VAL_HIER  
			AND HIER.[Row_id] <=@END_VAL_HIER)
			OR
			(AGNT.Row_ID>@START_VAL_AGNT
			AND AGNT.Row_ID <= @END_VAL_AGNT)
			)
  GROUP BY AGNT.[Name_id];  
  END;  
  --Pick all new or changed Name Ids from AEXP_10_Curr_Vw  
 IF @START_VAL_AEXP_10 < @END_VAL_AEXP_10  
  BEGIN;  
  
  INSERT [work].[tmp_Account_Business_Bus_Keys]  
    ([Name_ID])  
  SELECT  AGNT.[Name_id]  
  FROM [EDW_DataLake].[lifepro_v].[AEXP_10_Vw] AS AEXP_10   
    INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Vw] AS AGNT  
		ON AEXP_10.COMPANY_CODE = AGNT.COMPANY_CODE  
		AND AEXP_10.AGENT_NUMBER = AGNT.AGENT_NUMBER  
  WHERE NOT EXISTS(SELECT 1 FROM [work].[tmp_Account_Business_Bus_Keys] AS DEST WHERE DEST.[NAME_ID] = AGNT.[NAME_ID])  
    AND EXISTS(SELECT 1 FROM [work].[stage_sf_Account_Business_first_name_id] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = AGNT.NAME_ID)  
    AND (AEXP_10.[Row_id] > @START_VAL_AEXP_10 AND AEXP_10.[Row_id] <= @END_VAL_AEXP_10)  
  GROUP BY AGNT.[Name_id];  
  
  END;  

 --Pick all new or changed Name Ids from AEXP_03_Curr_Vw  
 IF @START_VAL_AEXP_03 < @END_VAL_AEXP_03  
  BEGIN;  
  
  INSERT [work].[tmp_Account_Business_Bus_Keys]  
    ([Name_ID])  
  SELECT  AGNT.[Name_id]  
  FROM [EDW_DataLake].[lifepro_v].[AEXP_03_Vw] AS AEXP_03   
    INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Vw] AS AGNT  
     ON AEXP_03.COMPANY_CODE = AGNT.COMPANY_CODE  
     AND AEXP_03.AGENT_NUMBER = AGNT.AGENT_NUMBER  
  WHERE NOT EXISTS(SELECT 1 FROM [work].[tmp_Account_Business_Bus_Keys] AS DEST WHERE DEST.[NAME_ID] = AGNT.[NAME_ID])  
    AND EXISTS(SELECT 1 FROM [work].[stage_sf_Account_Business_first_name_id] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = AGNT.NAME_ID)  
    AND (AEXP_03.[Row_id] > @START_VAL_AEXP_03 AND AEXP_03.[Row_id] <= @END_VAL_AEXP_03)  
  GROUP BY AGNT.[Name_id];  
  
  END; 
  --Pick all new or changed Phone numbers
  IF @START_VAL_PHONE < @END_VAL_PHONE
	BEGIN;
	INSERT [work].[tmp_Account_Business_Bus_Keys]          
		([Name_ID])          
	SELECT	SRC.NameID
	FROM	[salesforce].[PhoneNumber] AS SRC
	WHERE	COALESCE(SRC.MODIFIED_DT, SRC.CREATED_DT)>@START_VAL_PHONE
			AND COALESCE (SRC.MODIFIED_DT, SRC.CREATED_DT,'1/1/1753') <= @END_VAL_PHONE
			AND NOT EXISTS(SELECT 1 FROM [work].[tmp_Account_Business_Bus_Keys]  AS DEST WHERE DEST.Name_ID = SRC.NameID);
	END;
 --Pick all new or changed Email addresses  
 
 IF (@START_VAL_NALK<@END_VAL_NALK  ) OR (@START_VAL_ADDR < @END_VAL_ADDR)
  BEGIN;  
  INSERT [work].[tmp_Account_Business_Bus_Keys]  
    ([Name_ID])  
  SELECT  NALK.[Name_id]  
  FROM [EDW_DataLake].[lifepro_v].[NALK_Vw] AS NALK   
    LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[ADDR_Vw] AS ADDR ON  
     ADDR.[ADDRESS_ID] = NALK.ADDRESS_ID  
  WHERE NALK.[Address_type] = 'E'  
    AND NOT EXISTS(SELECT 1 FROM [work].[tmp_Account_Business_Bus_Keys] AS DEST WHERE DEST.[NAME_ID] = NALK.[NAME_ID])  
    AND EXISTS(SELECT 1 FROM [work].[stage_sf_Account_Business_first_name_id] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = NALK.NAME_ID)  
    AND   
     ((NALK.[Row_id] > @START_VAL_NALK  
     AND NALK.[Row_id] <=@END_VAL_NALK)  
     OR  
     (ADDR.[Row_id] > @START_VAL_ADDR  
     AND ADDR.[Row_ID] <= @END_VAL_ADDR))  
  GROUP BY NALK.[Name_id];  
    
  END;  
  --Get Row Count   
  SELECT @Rows = SUM(st.row_count) FROM    sys.dm_db_partition_stats st WHERE  object_name(object_id) = 'tmp_Account_Business_Bus_Keys' AND OBJECT_SCHEMA_NAME(OBJECT_ID) = 'work' AND (index_id < 2);  
  UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;  

  INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountBusiness:Retrieve emails');    
  SELECT @LOGID = @@IDENTITY;    
	 ;WITH EmailList AS
		(SELECT ROW_NUMBER() OVER (PARTITION BY NALK.NAME_ID ORDER BY COALESCE(NALK.EFFECTIVE_DATE, '1/1/1753') DESC) AS RN
		, NALK.NAME_ID
			, NALK.ADDRESS_ID
			, NALK.EFFECTIVE_DATE
			, LEFT(RTRIM(ADDR.ADDR_LINE_1) + RTRIM(ADDR.ADDR_LINE_2) + RTRIM(ADDR.ADDR_LINE_3) + ';', CHARINDEX(';', RTRIM(ADDR.ADDR_LINE_1) + RTRIM(ADDR.ADDR_LINE_2) + RTRIM(ADDR.ADDR_LINE_3) + ';') - 1) AS EMAIL
			, NALK.ADDRESS_CODE
			, NALK.COMPANY_CODE
			, NALK.POLICY_NUMBER
			, NALK.VERSION_ID
			, ADDR.VERSION_ID AS ADDR_EMAIL_VERSIONID
		FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] NALK 
			INNER JOIN [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw] AS ADDR ON 
				NALK.ADDRESS_ID = ADDR.ADDRESS_ID 
			INNER JOIN [work].[tmp_Account_Business_Bus_Keys]   AS BUSKEY ON
				BUSKEY.Name_ID = NALK.NAME_ID
		WHERE ADDRESS_TYPE = 'E'
			AND ADDRESS_CODE = 'BUS')
	  INSERT INTO [work].[tmp_Account_Business_EmailAddressIds_NALK]
			   ( NAME_ID
			, ADDRESS_ID
			, EFFECTIVE_DATE
			, EMAIL
			, [NALK_EMAIL_ADDRESSCODE]
			, [NALK_EMAIL_COMPANYCODE]
			, [NALK_EMAIL_POLICYNUMBER]
			, [NALK_EMAIL_VERSIONID]
			, [ADDR_EMAIL_VERSIONID])
	  SELECT   NAME_ID
			, ADDRESS_ID	 
			, EFFECTIVE_DATE				
			, EMAIL	
			, EmailList.ADDRESS_CODE
			, EmailList.COMPANY_CODE
			, EmailList.POLICY_NUMBER
			, EmailList.VERSION_ID
			, EmailList.ADDR_EMAIL_VERSIONID
	  FROM EmailList
	  WHERE RN = 1;		
	SELECT @ROWS = @@ROWCOUNT;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;  


 END;  
/* END: Populate temporary tables.*/  
  
 /* START: Refresh mapping table*/  
 IF (1=1)  
  BEGIN;  
  INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountBusiness:Update Mappings');    
  SELECT @LOGID = @@IDENTITY;    
  
	
	UPDATE DEST
	SET [MODIFIED_DT]							= CURRENT_TIMESTAMP          
      , [NAMERECORD_VERSIONID]					= COALESCE(NAME_BUSKEY_VW.[VERSION_ID] ,0)
	  , [EXTENSIONRECORDNADR_VERSIONID]			= 0
      , [AGENTRECORD_COMPANYCODE]				= AGENT.COMPANY_CODE          
      , [AGENTRECORD_AGENTNUMBER]				= AGENT.AGENT_NUMBER        
      , [AGENTRECORD_VERSIONID]					= COALESCE(AGENT.VERSION_ID,0)
      , [AGENTEXPANSION03_COMPANYCODE]			= AEXP03.COMPANY_CODE          
      , [AGENTEXPANSION03_AGENTNUMBER]			= AEXP03.AGENT_NUMBER          
      , [AGENTEXPANSION03_SEQUENCE]				= AEXP03.[SEQUENCE]          
      , [AGENTEXPANSION03_VERSIONID]			= 0        
      , [AGENTEXPANSION10_COMPANYCODE]			= AEXP10.COMPANY_CODE          
      , [AGENTEXPANSION10_AGENTNUMBER]			= AEXP10.AGENT_NUMBER         
      , [AGENTEXPANSION10_SEQUENCE]				= AEXP10.[SEQUENCE]         
      , [AGENTEXPANSION10_VERSIONID]			= COALESCE(AEXP10.VERSION_ID,0)
	  , [NAMERECORD_SSN]						= NAME_BUSKEY_VW.[BUSINESS_TAX_CODE]
	  , [ADDR_EMAIL_ADDRESSID]					= EMAIL.[ADDRESS_ID]
	  , [ADDR_EMAIL_VERSIONID]					= COALESCE(EMAIL.[ADDR_EMAIL_VERSIONID],0)
	  , [NALK_EMAIL_ADDRESSID]					= EMAIL.[ADDRESS_ID]
	  , [NALK_EMAIL_EFFECTIVEDATE]				= EMAIL.[EFFECTIVE_DATE]
	  , [NALK_EMAIL_COMPANYCODE]				= EMAIL.[NALK_EMAIL_COMPANYCODE]
	  , [NALK_EMAIL_ADDRESSCODE]				= EMAIL.[NALK_EMAIL_ADDRESSCODE]
	  , [NALK_EMAIL_POLICYNUMBER]				= EMAIL.[NALK_EMAIL_POLICYNUMBER]
	  , [NALK_EMAIL_VERSIONID]					= COALESCE(EMAIL.[NALK_EMAIL_VERSIONID],0)
	  , [NALK_PHONE_NAMEID]						= PHONE.[NameID]
	  , [NALK_PHONE_ADDRESSID]					= PHONE.[ADDRESS_ID]
	  , [NALK_PHONE_ADDRESSCODE]				= PHONE.[ADDRESS_CODE]
	  , [NALK_PHONE_EFFECTIVEDATE]				= PHONE.[EFFECTIVE_DATE]
	  , [NALK_PHONE_COMPANYCODE]				= PHONE.[COMPANY_CODE]
	  , [NALK_PHONE_POLICYNUMBER]				= phone.[POLICY_NUMBER]
	  , [NALK_PHONE_VERSIONID]					= COALESCE(PHONE.[VERSION_ID],0)
	  , [HIER_COMPANYCODE]						= HIER.HIER_COMPANYCODE		
	  , [HIER_AGENTNUMBER]						= HIER.HIER_AGENTNUMBER
	  , [HIER_MARKETINGCODE]					= HIER.HIER_MARKETINGCODE
	  , [HIER_AGENTLEVEL]						= HIER.HIER_AGENTLEVEL
	  , [HIER_STOPDT]							= HIER.HIER_STOPDT
	  , [HIER_VERSIONID]						= COALESCE(HIER.HIER_VERSIONID,0)
	  , [DELETE_FLAG]							= CASE NAME_BUSKEY_VW.[DXType] WHEN 'D' THEN 1 ELSE 0 END
	FROM	[salesforce].[mapping_Account] AS DEST
		INNER JOIN [work].[tmp_Account_Business_Bus_Keys] AS TMP ON
			tmp.Name_ID = DEST.NAMERECORD_NAMEID
			AND DEST.RECORDTYPEID = @RecordTypeID
		INNER JOIN [work].[stage_sf_Account_Business_first_name_id] AS BUSKEY ON
			TMP.Name_ID = BUSKEY.Name_ID 
	    INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_BUSKEY_Vw] AS NAME_BUSKEY_VW ON  
			NAME_BUSKEY_VW.[NAME_ID] = TMP.[Name_ID]  
		INNER JOIN EDW_DataLake.lifepro_V.AGNT_Curr_Vw AS AGENT ON  
			AGENT.NAME_ID = BUSKEY.Name_ID   
			AND AGENT.COMPANY_CODE = BUSKEY.Company_Code
			AND AGENT.AGENT_NUMBER = BUSKEY.Agent_Number
		LEFT OUTER JOIN [work].[tmp_Account_Business_HIER] AS HIER ON
			HIER.NAME_ID = TMP.Name_ID
		LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_10_Curr_Vw] AEXP10 ON  
			AEXP10.AGENT_NUMBER = BUSKEY.AGENT_NUMBER  
			AND AEXP10.COMPANY_CODE = BUSKEY.COMPANY_CODE
		LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_03_Curr_Vw] AEXP03 ON  
			AEXP03.AGENT_NUMBER = AGENT.AGENT_NUMBER  
			AND AEXP03.COMPANY_CODE = BUSKEY.COMPANY_CODE
		LEFT OUTER JOIN [salesforce].[PhoneNumber] AS PHONE ON
			PHONE.NameID = TMP.Name_ID
		LEFT OUTER JOIN [work].[tmp_Account_Business_EmailAddressIds_NALK] AS EMAIL ON
			EMAIL.[NAME_ID] = TMP.[Name_ID]
	WHERE NAME_BUSKEY_VW.NAME_FORMAT_CODE = 'B';
	
	SELECT @ROWS = @@ROWCOUNT;    
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;    
	
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountBusiness:Insert Mappings');    
	SELECT @LOGID = @@IDENTITY;    	

	INSERT [salesforce].[mapping_Account]
		([CREATED_DT]          
		, [NAMERECORD_NAMEID]          
		, [NAMERECORD_VERSIONID]          
		, [EXTENSIONRECORDNADR_VERSIONID]          
		, [AGENTRECORD_COMPANYCODE]          
		, [AGENTRECORD_AGENTNUMBER]          
		, [AGENTRECORD_VERSIONID]          
		, [AGENTEXPANSION03_COMPANYCODE]          
		, [AGENTEXPANSION03_AGENTNUMBER]          
		, [AGENTEXPANSION03_SEQUENCE]          
		, [AGENTEXPANSION03_VERSIONID]          
		, [AGENTEXPANSION10_COMPANYCODE]          
		, [AGENTEXPANSION10_AGENTNUMBER]          
		, [AGENTEXPANSION10_SEQUENCE]          
		, [AGENTEXPANSION10_VERSIONID]
		, [NAMERECORD_SSN]
		, [RECORDTYPEID]
		, [ADDR_EMAIL_ADDRESSID]
		, [ADDR_EMAIL_VERSIONID]
		, [NALK_EMAIL_ADDRESSID]
		, [NALK_EMAIL_EFFECTIVEDATE]
		, [NALK_EMAIL_COMPANYCODE]	
		, [NALK_EMAIL_ADDRESSCODE]	
		, [NALK_EMAIL_POLICYNUMBER]	
		, [NALK_EMAIL_VERSIONID]	
		, [NALK_PHONE_NAMEID]		
		, [NALK_PHONE_ADDRESSID]
		, [NALK_PHONE_EFFECTIVEDATE]
		, [NALK_PHONE_ADDRESSCODE]
		, [NALK_PHONE_COMPANYCODE]	
		, [NALK_PHONE_POLICYNUMBER]	
		, [NALK_PHONE_VERSIONID]	
		, [HIER_COMPANYCODE]		
		, [HIER_AGENTNUMBER]		
		, [HIER_MARKETINGCODE]		
		, [HIER_AGENTLEVEL]			
		, [HIER_STOPDT]				
		, [HIER_VERSIONID]	
		, [DELETE_FLAG]
		)    
	SELECT 
		CURRENT_TIMESTAMP          
		, NAME_BUSKEY_VW.NAME_ID
		, COALESCE(NAME_BUSKEY_VW.[VERSION_ID],0)      
		, 0
		, AGENT.COMPANY_CODE          
		, AGENT.AGENT_NUMBER        
		, COALESCE(AGENT.VERSION_ID,0)          
		, AEXP03.COMPANY_CODE          
		, AEXP03.AGENT_NUMBER          
		, AEXP03.[SEQUENCE]          
		, 0
		, AEXP10.COMPANY_CODE          
		, AEXP10.AGENT_NUMBER         
		, AEXP10.[SEQUENCE]         
		, COALESCE(AEXP10.VERSION_ID,0)
		, NAME_BUSKEY_VW.[BUSINESS_TAX_CODE]
		, @RecordTypeID
		, EMAIL.[ADDRESS_ID]
		, COALESCE(EMAIL.[ADDR_EMAIL_VERSIONID],0)
		, EMAIL.[ADDRESS_ID]
		, EMAIL.[EFFECTIVE_DATE]
		, EMAIL.[NALK_EMAIL_COMPANYCODE]
		, EMAIL.[NALK_EMAIL_ADDRESSCODE]
		, EMAIL.[NALK_EMAIL_POLICYNUMBER]
		, COALESCE(EMAIL.[NALK_EMAIL_VERSIONID],0)
		, PHONE.[NameID]
		, PHONE.[ADDRESS_ID]
		, PHONE.[EFFECTIVE_DATE]
		, PHONE.[ADDRESS_CODE]
		, PHONE.[COMPANY_CODE]
		, phone.[POLICY_NUMBER]
		, COALESCE(PHONE.[VERSION_ID],0)
		, HIER.HIER_COMPANYCODE		
		, HIER.HIER_AGENTNUMBER
		, HIER.HIER_MARKETINGCODE
		, HIER.HIER_AGENTLEVEL
		, HIER.HIER_STOPDT
		, COALESCE(HIER.HIER_VERSIONID,0)
		, CASE NAME_BUSKEY_VW.[DXType] WHEN 'D' THEN 1 ELSE 0 END
	FROM [work].[tmp_Account_Business_Bus_Keys] AS TMP 
		INNER JOIN [work].[stage_sf_Account_Business_first_name_id] AS BUSKEY ON
			TMP.Name_ID = BUSKEY.Name_ID 
	    INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_BUSKEY_Vw] AS NAME_BUSKEY_VW ON  
			NAME_BUSKEY_VW.[NAME_ID] = TMP.[Name_ID]  
		INNER JOIN EDW_DataLake.lifepro_V.AGNT_Curr_Vw AS AGENT ON  
			AGENT.NAME_ID = BUSKEY.Name_ID   
			AND AGENT.COMPANY_CODE = BUSKEY.Company_Code
			AND AGENT.AGENT_NUMBER = BUSKEY.Agent_Number
		LEFT OUTER JOIN [work].[tmp_Account_Business_HIER] AS HIER ON
			HIER.NAME_ID = TMP.Name_ID
		LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_10_Curr_Vw] AEXP10 ON  
			AEXP10.AGENT_NUMBER = BUSKEY.AGENT_NUMBER  
			AND AEXP10.COMPANY_CODE = BUSKEY.COMPANY_CODE
		LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_03_Curr_Vw] AEXP03 ON  
			AEXP03.AGENT_NUMBER = AGENT.AGENT_NUMBER  
			AND AEXP03.COMPANY_CODE = BUSKEY.COMPANY_CODE
		LEFT OUTER JOIN [salesforce].[PhoneNumber] AS PHONE ON
			PHONE.NameID = TMP.Name_ID
		LEFT OUTER JOIN [work].[tmp_Account_Business_EmailAddressIds_NALK] AS EMAIL ON
			EMAIL.[NAME_ID] = TMP.[Name_ID]
	WHERE NAME_BUSKEY_VW.NAME_FORMAT_CODE = 'B'
		AND NOT EXISTS (SELECT 1 FROM salesforce.mapping_Account AS DEST WHERE DEST.NAMERECORD_NAMEID = TMP.Name_ID);
	

	SELECT @ROWS = @@ROWCOUNT;    
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;    

 
  END;   
 /* END: Refresh mapping table*/  
  
  
/* START: Populate staging table.*/  
IF (1=1)  
 BEGIN;  
  
 INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountBusiness:Update Staging');  
 SELECT @LOGID = @@IDENTITY;  
  


	UPDATE	DEST
	SET		[Name]									= CASE WHEN NAME_VW.NAME_FORMAT_CODE = 'I'
														THEN TRIM(INDIVIDUAL_FIRST) + IIF(LEN(TRIM(INDIVIDUAL_FIRST)) > 0, ' ', '') + TRIM(INDIVIDUAL_MIDDLE) + IIF(LEN(TRIM(INDIVIDUAL_MIDDLE)) > 0, ' ', '') + TRIM(INDIVIDUAL_LAST)
														ELSE TRIM(BUSINESS_NAME)
													  END
			,[Phone]								= phone.PhoneNumber
			,[OwnerId]								= ''
			,[RecordTypeId]							= @RecordTypeID
			,[LifePro_Last_Modified_DateTime__c]	=  Mapping.VERSIONID
			,[X2017_Activity_Premium__c]			= premium.ActivityPremium2017
			,[X2017_Effective_Premium__c]			= premium.EffectivePremium2017
			,[X2018_Activity_Premium__c]			= premium.ActivityPremium2018
			,[X2018_Effective_Premium__c]			= premium.EffectivePremium2018
			,[X2019_Activity_Premium__c]			= premium.ActivityPremium2019
			,[X2019_Effective_Premium__c]			= premium.EffectivePremium2019
			,[Agent_Number__c]						= agnt.AGENT_NUMBER
			,[Company_Code__c]						= agnt.COMPANY_CODE
			,[Email__c]								= EmailAddressIds.EMAIL
			,[LifePro_ID__c]						= cast(mapping.ID as varchar(20))
			,[Region__c]							= regions.REGION_CODE
			,[Status__c]							= agnt.STATUS_CODE
			,[Status_Date__c]						= agnt.STATUS_DATE
			,[Suitability__c]						= CASE TRIM(suitability.SUITABILITY_FLAG)
														WHEN 'Y' THEN 1
														ELSE 0
													  END
			,[TIN__c]								= CASE WHEN NAME_VW.NAME_FORMAT_CODE = 'B'
														THEN STUFF(RIGHT('000000000' + TRIM(NAME_VW.BUSINESS_TAX_CODE), 9), 3, 0, '-')
														ELSE ''
													  END
			,[Social_Security_Number__c]			= CASE WHEN NAME_VW.NAME_FORMAT_CODE = 'I'
														THEN STUFF(STUFF(RIGHT('000000000' + CONVERT(varchar(11), NAME_VW.SOC_SEC_NUMBER), 9), 4, 0, '-'), 7, 0, '-')
														ELSE ''
													  END
			,[Tax_Status__c]						= NAME_VW.TAX_STATUS
			,[Tax_Witholding_Option__c]				= NAME_VW.TAX_WITHHOLDING_FLAG
			,[Modified_dt]							= CURRENT_TIMESTAMP
			,[LifePro_NameID]						= Mapping.[NAMERECORD_NAMEID]  
            ,[Delete_Flag]							= mapping.DELETE_FLAG                                                     
	FROM	[salesforce].[Account_Business]  AS DEST
	inner join [work].[tmp_Account_Business_Bus_Keys] AS TMP  ON
         		DEST.[LifePro_NameID] = TMP.[NAME_ID]
   INNER JOIN [salesforce].[mapping_Account] AS MAPPING ON 
		MAPPING.NAMERECORD_NAMEID = TMP.Name_ID
		AND MAPPING.RECORDTYPEID = @RecordTypeID
   INNER JOIN [work].[stage_sf_Account_Business_first_name_id] SRC  
    ON TMP.Name_ID = SRC.Name_ID  
   INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_BUSKEY_Vw] AS NAME_VW ON  
    NAME_VW.[Name_ID] = TMP.[Name_ID]  
   INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] agnt  
    ON SRC.Company_Code = agnt.COMPANY_CODE
	AND  SRC.NAME_ID = agnt.Name_ID
    AND SRC.Agent_Number = agnt.AGENT_NUMBER  
   LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_10_Curr_Vw] regions  
    ON agnt.COMPANY_CODE = regions.COMPANY_CODE  
    AND agnt.AGENT_NUMBER = regions.AGENT_NUMBER  
   LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_03_Curr_Vw] suitability  
    ON agnt.COMPANY_CODE = suitability.COMPANY_CODE  
    AND agnt.AGENT_NUMBER = suitability.AGENT_NUMBER  
   LEFT OUTER JOIN [EDW_Outbound].[salesforce].[AgentYearlyPremiumTotals] premium  
    ON agnt.COMPANY_CODE = premium.CompanyCode  
    AND agnt.AGENT_NUMBER = premium.AgentNumber 
   LEFT OUTER JOIN [work].[tmp_Account_Business_EmailAddressIds_NALK] AS EmailAddressIds ON
	EmailAddressIds.[Name_id] = TMP.[Name_id]
    LEFT OUTER JOIN [EDW_Outbound].[salesforce].[PhoneNumber] AS phone ON  
    phone.[Nameid] = TMP.[NAME_ID]                        
   WHERE NAME_VW.NAME_FORMAT_CODE = 'B' 
	AND (Mapping.VERSIONID >= COALESCE(Mapping.SALESFORCE_DT,0) 
	OR mapping.salesforce_dt IS NULL);
    SELECT @ROWS = @@ROWCOUNT;  
  UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;  

  INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountBusiness:Insert Staging');  
 SELECT @LOGID = @@IDENTITY;  
	
	INSERT INTO [salesforce].[Account_Business]
           ([Name]
           ,[Phone]
           ,[OwnerId]
           ,[RecordTypeId]
           ,[LifePro_Last_Modified_DateTime__c]
           ,[X2017_Activity_Premium__c]
           ,[X2017_Effective_Premium__c]
           ,[X2018_Activity_Premium__c]
           ,[X2018_Effective_Premium__c]
           ,[X2019_Activity_Premium__c]
           ,[X2019_Effective_Premium__c]
           ,[Agent_Number__c]
           ,[Company_Code__c]
           ,[Email__c]
           ,[LifePro_ID__c]
           ,[Region__c]
           ,[Status__c]
           ,[Status_Date__c]
           ,[Suitability__c]
           ,[TIN__c]
           ,[Social_Security_Number__c]
           ,[Tax_Status__c]
           ,[Tax_Witholding_Option__c]
           ,[Created_dt]
           ,[LifePro_NameID]
		   , [Delete_Flag])
	SELECT 
       CASE	WHEN NAME_VW.NAME_FORMAT_CODE = 'I'  
			THEN TRIM(INDIVIDUAL_FIRST) + IIF(LEN(TRIM(INDIVIDUAL_FIRST)) > 0, ' ', '') + TRIM(INDIVIDUAL_MIDDLE) + IIF(LEN(TRIM(INDIVIDUAL_MIDDLE)) > 0, ' ', '') + TRIM(INDIVIDUAL_LAST)  
		ELSE TRIM(BUSINESS_NAME)                                                                          
		END AS Name,  
        phone.PhoneNumber,  
		'' AS OwnerId,  
		@RecordTypeID AS RecordTypeId,  
		mapping.VERSIONID AS [LifePro_Last_Modified_DateTime__c], ----NAME_VW.DXTimestamp  
		premium.ActivityPremium2017 AS [X2017_Activity_Premium__c],  
		premium.EffectivePremium2017 AS X2017_Effective_Premium__c,  
		premium.ActivityPremium2018 AS X2018_Activity_Premium__c,  
		premium.EffectivePremium2018 AS X2018_Effective_Premium__c,  
		premium.ActivityPremium2019 AS X2019_Activity_Premium__c,  
		premium.EffectivePremium2019 AS X2019_Effective_Premium__c,  
		agnt.AGENT_NUMBER AS Agent_Number__c,  
		agnt.COMPANY_CODE AS Company_Code__c,  
		EmailAddressIds.EMAIL AS Email__c,  
		cast(mapping.ID as varchar(20)) AS LifePro_ID__c,  
		regions.REGION_CODE AS Region__c,  
		agnt.STATUS_CODE AS Status__c,  
		agnt.STATUS_DATE AS Status_Date__c,  
		CASE TRIM(suitability.SUITABILITY_FLAG)  
			WHEN 'Y' THEN 1  
			ELSE 0  
		END AS Suitability__c,  
		CASE WHEN NAME_VW.NAME_FORMAT_CODE = 'B'  
			THEN STUFF(RIGHT('000000000' + TRIM(NAME_VW.BUSINESS_TAX_CODE), 9), 3, 0, '-')  
			ELSE ''  
		END AS TIN__c,  
		CASE WHEN NAME_VW.NAME_FORMAT_CODE = 'I'  
			THEN STUFF(STUFF(RIGHT('000000000' + CONVERT(varchar(11), NAME_VW.SOC_SEC_NUMBER), 9), 4, 0, '-'), 7, 0, '-')  
			ELSE ''  
		END AS Social_Security_Number__c,  
		NAME_VW.TAX_STATUS AS Tax_Status__c,  
		NAME_VW.TAX_WITHHOLDING_FLAG AS Tax_Witholding_Option__c,  
		CURRENT_TIMESTAMP AS Created_dt,  
		Mapping.[NAMERECORD_NAMEID] AS LifePro_NameID ,
		mapping.Delete_Flag

                                                                
	  FROM [work].[tmp_Account_Business_Bus_Keys] AS TMP  
   INNER JOIN [salesforce].[mapping_Account] AS MAPPING ON 
		MAPPING.NAMERECORD_NAMEID = TMP.Name_ID
		AND MAPPING.RECORDTYPEID = @RecordTypeID
   INNER JOIN [work].[stage_sf_Account_Business_first_name_id] SRC  
    ON TMP.Name_ID = SRC.Name_ID  
   INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_BUSKEY_Vw] AS NAME_VW ON  
    NAME_VW.[Name_ID] = TMP.[Name_ID]  
   INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] agnt  
    ON SRC.Company_Code = agnt.COMPANY_CODE  
	AND  SRC.NAME_ID = agnt.Name_ID
    AND SRC.Agent_Number = agnt.AGENT_NUMBER  
     LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_10_Curr_Vw] regions  
    ON agnt.COMPANY_CODE = regions.COMPANY_CODE  
    AND agnt.AGENT_NUMBER = regions.AGENT_NUMBER  
   LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_03_Curr_Vw] suitability  
    ON agnt.COMPANY_CODE = suitability.COMPANY_CODE  
    AND agnt.AGENT_NUMBER = suitability.AGENT_NUMBER  
   LEFT OUTER JOIN [EDW_Outbound].[salesforce].[AgentYearlyPremiumTotals] premium  
    ON agnt.COMPANY_CODE = premium.CompanyCode  
    AND agnt.AGENT_NUMBER = premium.AgentNumber  
   LEFT OUTER JOIN [work].[tmp_Account_Business_EmailAddressIds_NALK] AS EmailAddressIds ON
	EmailAddressIds.[Name_id] = TMP.[Name_id]
    LEFT OUTER JOIN [EDW_Outbound].[salesforce].[PhoneNumber] AS phone ON  
    phone.[Nameid] = TMP.[NAME_ID]                        
   WHERE NAME_VW.NAME_FORMAT_CODE = 'B' 
	AND NOT EXISTS(SELECT 1 FROM [salesforce].[Account_Business] AS DEST 
		WHERE DEST.lifepro_id__c = Mapping.ID);
    SELECT @ROWS = @@ROWCOUNT;  
  UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
 
 
  
 END;  
/* END: Populate staging table.*/  
/* START: Add invalid email check */  
IF (1=1)  
 BEGIN;  
  
 INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountBusiness:Reject emails');  
 SELECT @LOGID = @@IDENTITY;  
  
  ;WITH INVALID_EMAILS AS  
  (SELECT [Email__c] AS [Account_Business]  
   , [Reject_Flag]  
   , [Reject_Dt]  
   , [Reject_Reason]  
  FROM [salesforce].[Account_Business]  
  WHERE ([Email__c] = ''   
   OR [Email__c] LIKE '% %'   
   OR [Email__c] LIKE ('%["(),:;<>\]%')   
   OR SUBSTRING([Email__c] ,CHARINDEX('@',[Email__c]),LEN([Email__c])) LIKE ('%[!#$%&*+/=?^`_{|]%')   
   OR (LEFT([Email__c],1) LIKE ('[-_.+]') OR RIGHT([Email__c],1) LIKE ('[-_.+]'))                                                                                 
   OR ([Email__c] LIKE '%[%' OR [Email__c] LIKE '%]%')   
   OR [Email__c] LIKE '%@%@%'   
   OR [Email__c] NOT LIKE '_%@_%._%'   
   OR [Email__c] LIKE '%..%'  
   OR [Email__c] LIKE '%-.%'  
   OR [Email__c] LIKE '%.@%'   
   OR [Email__c] LIKE '%@.%'   
   OR [Email__c] LIKE '%@%.-%'   
   OR [Email__c] LIKE '%@%-.%'   
   OR [Email__c] LIKE '%@-%'  
   OR CHARINDEX(CHAR(39),[Email__c] )=1 
   OR CHARINDEX(' ',LTRIM(RTRIM([Email__c]))) > 0)  
   AND COALESCE([Reject_Flag],0)=0)  
  
 UPDATE INVALID_EMAILS SET [Account_Business] = NULL  
   , [Reject_Flag] = 1  
   , [Reject_Dt] = CURRENT_TIMESTAMP  
   , [Reject_Reason]='Invalid Email:'+ LEFT(COALESCE([Account_Business],''),85);  
  
  
 SELECT @ROWS = @@ROWCOUNT;  
 UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;  
  
 END;  
/* END: Add invalid email check */  
/* START: Update delta settings.*/  
IF (1=1)  
 BEGIN;  
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_HIER AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_HIER AND Setting_Module = @SETTING_MODULE;  
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_AGNT AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_AGNT AND Setting_Module = @SETTING_MODULE;  
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_NALK AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_NALK AND Setting_Module = @SETTING_MODULE;  
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_NAME AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_NAME AND Setting_Module = @SETTING_MODULE;  
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_ADDR AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_ADDR AND Setting_Module = @SETTING_MODULE;  
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_AEXP_10 AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_AEXP_10 AND Setting_Module = @SETTING_MODULE;  
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_AEXP_03 AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_AEXP_03 AND Setting_Module = @SETTING_MODULE;  
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET SETTING_VALUE = CAST(@END_VAL_PHONE AS NVARCHAR(150)) WHERE Setting_Name = @SETTING_NAME_PHONE AND Setting_Module = @SETTING_MODULE;
 END;  
  
END;  
END;
--Logging  
UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;     
     
END TRY  
BEGIN CATCH  
             
DECLARE @ERROR_MSG          NVARCHAR(2000);  
DECLARE @ERROR_SEVERITY     INT;  
DECLARE @ERROR_STATE        INT;  
   
SET @ERROR_MSG              = ERROR_MESSAGE();  
SET @ERROR_SEVERITY         = ERROR_SEVERITY();  
SET @ERROR_STATE            = ERROR_STATE();  
  
--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountBusiness:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;

  
RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);  
  
END CATCH;  
  
END;  
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Address]    Script Date: 5/17/2022 2:04:38 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE   PROCEDURE [salesforce].[usp_Upsert_Address]

as
-- =============================================
-- Author:          Darin Baarda
-- Create date:		08/12/2021
-- Description:     Insert address records to the staging table for salesforce
-- =============================================
-- Last Run Date : 08/12/2021
-- Last Run Exec : exec salesforce.usp_Upsert_Address
-- Run Stats: 00:00:13 3,356,527 records
-- =============================================
-- Maintenance 
-- =============================================
-- CX-2481			08/21/2021 Darin Baarda 
-- New Stored Procedure
-- Change Log:
-- Date:		2021-10-28
-- Version:		0.1.1
-- Author:		Anastasia Vogelaar
-- Description:	Fixed address line 1 length, added Update logic, added VersionID

-- Modified By:		Steve Tangeman
-- Modified Date:	12/30/2021
-- Version:			0.1.2
-- Description:		Updated to exclude e-mail address records based on address type.

-- Modified By:		Steve Tangeman
-- Modified Date:	3/10/2022
-- Version:			0.1.3
-- Description:		Replaced Street_Name__c with Address1__c, Address2__c, and Address3__c.

-- Modified By:		Anastasia Vogelaar
-- Modified Date:	4/7/2022
-- Version:			0.2.0
-- Description:		Added delete flag, changed data source to ADDR_BUSKEY view, and added logging
-- =============================================

/*

update edw_audit..[Delta_Settings] set Setting_Value = cast(0 as varchar(20)) where setting_name = 'SYNC_ADDRESS' and setting_module = 'SF_SYNC';

truncate table salesforce.address
exec salesforce.usp_Upsert_Address

*/

BEGIN
SET NOCOUNT ON;

BEGIN TRY
DECLARE @ROWS						INT;		--Used for logging row counts
DECLARE @LOGID_START				INT;		--Used for the first log id
DECLARE	@LOGID						INT;		--Used for intermediate log ids
DECLARE @SETTING_ADDRESS			NVARCHAR(50) = 'SYNC_ADDRESS';
DECLARE @SETTING_MODULE				NVARCHAR(50) = 'SF_SYNC';
DECLARE @START_VAL					BIGINT;	   
DECLARE @END_VAL					BIGINT;

--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Address:Start/End Indicator');
SELECT @LOGID_START = @@IDENTITY;

--Insert Delta Settings variable
IF NOT EXISTS(SELECT 1 FROM [EDW_Audit].[dbo].[Delta_Settings]   WHERE Setting_Name = @SETTING_ADDRESS AND Setting_Module = @SETTING_MODULE)
BEGIN
	INSERT INTO [EDW_Audit].[dbo].[Delta_Settings] (Setting_Name, Setting_Module, Setting_Value) VALUES (@SETTING_ADDRESS, @SETTING_MODULE, CAST('0' AS VARCHAR(20)));
END;

--Assign delta variables
SELECT @START_VAL	= CAST(SETTING_VALUE AS BIGint) FROM [EDW_Audit].[dbo].[Delta_Settings]   WHERE Setting_Name = @SETTING_ADDRESS AND Setting_Module = @SETTING_MODULE;
SELECT @END_VAL		= MAX(ROW_ID) FROM [EDW_DataLake].[lifepro_v].[ADDR_BUSKEY_VW];

--If there are any new records, perform the tasks below:
IF (@START_VAL < @END_VAL)
	BEGIN;
	/* START: Update existing records*/
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Address:Update staging');
	SELECT @LOGID = @@IDENTITY;
	IF (1=1)
		BEGIN;
		UPDATE DEST
		SET	[Address1__c]							= RTRIM(SRC.[ADDR_LINE_1])
			, [Address2__c]							= RTRIM(SRC.[ADDR_LINE_2])
			, [Address3__c]							= RTRIM(SRC.[ADDR_LINE_3])
			, [City__c]								= RTRIM(SRC.[CITY])
			, [Country__c]							= RTRIM(SRC.[COUNTRY])
			, [State__c]							= RTRIM(SRC.[STATE])
			, [Zip__c]								= RTRIM(SRC.[ZIP])
			, [ForeignAddressFlag__c]				= CASE WHEN COALESCE(RTRIM(SRC.[FOREIGN_ADDR_FLAG]),'')='Y' THEN 1 ELSE 0 END
			, [VersionID]							= COALESCE(SRC.[VERSION_ID],0)
			, [Delete_Flag]							= CASE SRC.DXType WHEN 'D' THEN 1 ELSE 0 END 
			, [Salesforce_ID]						= lkp.[ID]
		FROM [salesforce].[Address] AS DEST 
			INNER JOIN [EDW_DataLake].[lifepro_v].[ADDR_BUSKEY_VW] AS SRC ON
				SRC.[ADDRESS_ID] = DEST.[External_Id__c]
			LEFT OUTER JOIN [salesforce].[LOOKUP_ADDRESS__C] AS LKP ON 
				LKP.[EXTERNAL_ID__C] = SRC.[ADDRESS_ID]
		WHERE SRC.Row_ID > @START_VAL
			AND SRC.Row_ID <= @END_VAL;
		SELECT @ROWS = @@ROWCOUNT;
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;
		END;
	/* END: Update existing records*/
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Address:Insert staging');
	SELECT @LOGID = @@IDENTITY;
	/* START: Insert new records*/
	IF (1=1)
		BEGIN;
		INSERT	[salesforce].[Address]
			([External_Id__c]
			, [Address1__c]
			, [Address2__c]
			, [Address3__c]
			, [City__c]
			, [Country__c]
			, [State__c]
			, [Zip__c]
			, [ForeignAddressFlag__c]
			, [VersionID]
			, [Delete_Flag]
			, [Salesforce_ID])
		SELECT	DISTINCT SRC.[ADDRESS_ID]
			, RTRIM(SRC.[ADDR_LINE_1])
			, RTRIM(SRC.[ADDR_LINE_2])
			, RTRIM(SRC.[ADDR_LINE_3])
			, RTRIM(SRC.[CITY])
			, RTRIM(SRC.[COUNTRY])
			, RTRIM(SRC.[STATE])
			, RTRIM(SRC.[ZIP])
			, CASE WHEN COALESCE(RTRIM(SRC.[FOREIGN_ADDR_FLAG]),'')='Y' THEN 1 ELSE 0 END
			, COALESCE(SRC.[VERSION_ID],0)
			, CASE SRC.DXType WHEN 'D' THEN 1 ELSE 0 END 
			, lkp.[ID]
		FROM [EDW_DataLake].[lifepro_v].[ADDR_BUSKEY_VW] AS SRC
			LEFT OUTER JOIN [salesforce].[LOOKUP_ADDRESS__C] AS LKP ON
				LKP.[EXTERNAL_ID__C] = SRC.[ADDRESS_ID]
		WHERE EXISTS (SELECT 1 FROM [EDW_DataLake].[lifepro_v].[NALK_BusKey_Vw] AS NALK WHERE NALK.[ADDRESS_ID] = SRC.[ADDRESS_ID] AND COALESCE(NALK.[ADDRESS_TYPE],'')<>'E')
			AND SRC.[Row_ID]>@START_VAL
			AND SRC.[Row_ID]<=@END_VAL
			AND NOT EXISTS(SELECT 1 FROM [salesforce].[Address] AS DEST WHERE DEST.[External_Id__c] = SRC.[ADDRESS_ID]);
		SELECT @ROWS = @@ROWCOUNT;
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;
		END;
	/* END: Insert new records*/
	
	UPDATE [EDW_Audit].[dbo].[Delta_Settings] set Setting_Value = CAST(@END_VAL as varchar(20)) WHERE Setting_Name = @SETTING_ADDRESS AND Setting_Module = @SETTING_MODULE 
	END;
--Update log
UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID_START;

END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();

--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Address:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;


RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END

GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Account_Wholesaler]    Script Date: 5/17/2022 2:04:38 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


  
  
CREATE      PROCEDURE [salesforce].[usp_Upsert_Account_Wholesaler]  
  
AS  
BEGIN;  
-- =============================================  
  
 -- Author:    Steve Tangeman  
 -- CreationDate:   2021-06-28  
 -- Version:    0.1.0  
 -- Description:   Refresh Account Wholesaler Dealer table for synchronization with SalesForce   
 -- Change Log:     
  
 -- Modified By:  Anastasia Vogelaar  
 -- Modified Date:  9/2/2021  
 -- Version:   0.1.3  
 -- Description:  Added check to only include accounts that were not uploaded with other acount types  
  
 -- Modified By:  Anastasia Vogelaar  
 -- Modified Date:  09/07/2021  
 -- Version:   0.1.4  
 -- Description:  Replaced Drop Table with Truncate  
  
 -- Modified By:  Anastasia Vogelaar  
 -- Modified Date:  09/10/2021  
 -- Version:   0.1.5  
 -- Description:  Added email check  
  
  -- Modified By:  Harish Kola  
 -- Modified Date:  11/17/2021  
 -- Version:   0.2.0
 -- Description:  Included Audit logging,Mapping table merge and updated Rejection code   
 
 -- Modified By:	Anastasia Vogelaar    
 -- Modified Date:  12/18/2021 
 -- Version:		0.2.1    
 -- Description:	Added email check for char(39)

 -- Modified By:	Anastasia Vogelaar    
 -- Modified Date:  12/18/2021 
 -- Version:		0.2.2    
 -- Description:	Modified mapping logic - Wholesaler does not use NADRNA

 -- Modified By:	Anastasia Vogelaar    
 -- Modified Date:  12/20/2021 
 -- Version:		0.2.3    
 -- Description:	Added record type check

 -- Modified By:	Anastasia Vogelaar    
 -- Modified Date:  12/31/2021 
 -- Version:		0.2.4    
 -- Description:	Some version IDs in Production are not populated, cuasing errors, reset to 0

 -- Modified By:	Darin Baarda    
 -- Modified Date:  03/17/2022 
 -- Version:		0.2.5
 -- Description:	Fix how email address are being retrieved

 -- Modified By:	Anastasia Vogelaar
 -- Modified Date:	4/12/2022
 -- Version:		0.2.9
 -- Description:	Added Phone check

 -- Modified By:		Anastasia Vogelaar    
 -- Modified Date:		04/21/2022
 -- Version:			0.3.2    
 -- Description:		Enabled version id check for full refreshes

 -- Modified By:		Darin Baarda
 -- Modified Date:		04/29/2022
 -- Version:			0.3.3
 -- Description:		added version for hier, nalk, addr
 --						changed merge statement to an update/insert

 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		05/03/2022
 -- Version:			0.3.4
 -- Description:		added additional mapping fields for email

-- Full reload:  
--DECLARE @SETTING_NAME_HIER   NVARCHAR(50) = 'SYNC_ACCOUNT_WHOLESALER_HIER_CURR_VW';  
--DECLARE @SETTING_NAME_AGNT   NVARCHAR(50) = 'SYNC_ACCOUNT_WHOLESALER_AGNT_CURR_VW';  
--DECLARE @SETTING_NAME_NALK   NVARCHAR(50) = 'SYNC_ACCOUNT_WHOLESALER_NALK_CURR_VW';  
--DECLARE @SETTING_NAME_NAME   NVARCHAR(50) = 'SYNC_ACCOUNT_WHOLESALER_NAME_CURR_VW';  
--DECLARE @SETTING_NAME_ADDR   NVARCHAR(50) = 'SYNC_ACCOUNT_WHOLESALER_ADDR_CURR_VW';  
--DECLARE @SETTING_NAME_AEXP_10   NVARCHAR(50) = 'SYNC_ACCOUNT_WHOLESALER_AEXP_10_CURR_VW'  
--DECLARE @SETTING_NAME_AEXP_03   NVARCHAR(50) = 'SYNC_ACCOUNT_WHOLESALER_AEXP_03_CURR_VW'  
--DECLARE @SETTING_NAME_PHONE	NVARCHAR(50) = 'SYNC_ACCOUNT_WHOLESALER_PHONE';
--DECLARE @SETTING_MODULE    NVARCHAR(50) = 'SF_SYNC';  
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_HIER AND SETTING_MODULE = @SETTING_MODULE;  
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_AGNT AND SETTING_MODULE = @SETTING_MODULE;  
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_NALK AND SETTING_MODULE = @SETTING_MODULE;  
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_NAME AND SETTING_MODULE = @SETTING_MODULE;  
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_ADDR AND SETTING_MODULE = @SETTING_MODULE;  
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_AEXP_10 AND SETTING_MODULE = @SETTING_MODULE;  
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_AEXP_03 AND SETTING_MODULE = @SETTING_MODULE; 
--UPDATE SETTINGS SET SETTING_VALUE = '1/1/1753' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_PHONE AND SETTING_MODULE = @SETTING_MODULE;
-- =============================================  
  
SET NOCOUNT ON;  
DECLARE @SETTING_NAME_HIER   NVARCHAR(50) = 'SYNC_ACCOUNT_WHOLESALER_HIER_CURR_VW';  
DECLARE @SETTING_NAME_AGNT   NVARCHAR(50) = 'SYNC_ACCOUNT_WHOLESALER_AGNT_CURR_VW';  
DECLARE @SETTING_NAME_NALK   NVARCHAR(50) = 'SYNC_ACCOUNT_WHOLESALER_NALK_CURR_VW';  
DECLARE @SETTING_NAME_NAME   NVARCHAR(50) = 'SYNC_ACCOUNT_WHOLESALER_NAME_CURR_VW';  
DECLARE @SETTING_NAME_ADDR   NVARCHAR(50) = 'SYNC_ACCOUNT_WHOLESALER_ADDR_CURR_VW';  
DECLARE @SETTING_NAME_AEXP_10  NVARCHAR(50) = 'SYNC_ACCOUNT_WHOLESALER_AEXP_10_CURR_VW'  ;
DECLARE @SETTING_NAME_AEXP_03  NVARCHAR(50) = 'SYNC_ACCOUNT_WHOLESALER_AEXP_03_CURR_VW';  
DECLARE @SETTING_NAME_PHONE	NVARCHAR(50) = 'SYNC_ACCOUNT_WHOLESALER_PHONE';
DECLARE @SETTING_MODULE    NVARCHAR(50) = 'SF_SYNC';  
DECLARE @START_VAL     BIGINT;  
DECLARE @START_VAL_ADDR    BIGINT;  
DECLARE @END_VAL_HIER    BIGINT;  
DECLARE @END_VAL_AGNT    BIGINT;  
DECLARE @START_VAL_HIER    BIGINT;  
DECLARE @START_VAL_AGNT    BIGINT;  
DECLARE @END_VAL_NALK    BIGINT;  
DECLARE @END_VAL_NAME    BIGINT;  
DECLARE @END_VAL_ADDR    BIGINT;  
DECLARE @END_VAL_AEXP_10   BIGINT;  
DECLARE @END_VAL_AEXP_03   BIGINT;
DECLARE @START_VAL_AEXP_10  BIGINT;
DECLARE @START_VAL_AEXP_03  BIGINT;
DECLARE @START_VAL_PHONE		DATETIME2;
DECLARE @END_VAL_PHONE			DATETIME2;  
DECLARE @RecordTypeID    Nvarchar(18);  

DECLARE @LOGID_START    INT;  --Used for the first log id  
DECLARE @LOGID      INT;  --Used for intermediate log ids  
DECLARE @ROWS      INT;  --Used for logging row counts  
  
BEGIN TRY  
IF NOT EXISTS(SELECT 1 FROM EDW_Audit.[dbo].[Delta_Settings] WHERE SETTING_NAME = @SETTING_NAME_PHONE AND SETTING_MODULE = @SETTING_MODULE)
	BEGIN;
	INSERT EDW_Audit.[dbo].[Delta_Settings] (Setting_Value, Setting_Module, Setting_Name) VALUES ('1/1/1753', @SETTING_MODULE, @SETTING_NAME_PHONE);
	END;  
--Logging  
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account_Wholesalers:Stat/End Indicator');  
SELECT @LOGID_START = @@IDENTITY;  
  
SELECT @RecordTypeID = [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE DEVELOPERNAME= 'Wholesaler' AND SOBJECTTYPE = 'Account';  
SELECT @START_VAL_PHONE = CAST([SETTING_VALUE] AS DATETIME2) FROM EDW_Audit.[dbo].[Delta_Settings] WHERE [Setting_Name]= @SETTING_NAME_PHONE AND [Setting_Module]= @SETTING_MODULE;
SELECT @END_VAL_PHONE	= MAX(COALESCE([MODIFIED_DT], [CREATED_DT],'1/1/1753')) FROM [salesforce].[PhoneNumber];     
  
  
/* START: Create temporary tables.*/  
IF (1=1)  
 BEGIN;  
 --Name Ids - this table will contain all changed business keys for all dependencies  
	IF OBJECT_ID (N'work.tmp_Account_Wholesaler_Bus_Keys', N'U') IS NOT NULL  
		BEGIN;  
			TRUNCATE TABLE [work].[tmp_Account_Wholesaler_Bus_Keys];  
		END;  
	ELSE  
		BEGIN;  
			CREATE TABLE [work].[tmp_Account_Wholesaler_Bus_Keys]  
			([Name_ID]     INT NOT NULL PRIMARY KEY CLUSTERED);  
	END; 

	IF OBJECT_ID (N'work.tmp_Account_WH_EmailAddressIds_NALK', N'U') IS NOT NULL
	   BEGIN;
	        TRUNCATE TABLE [work].[tmp_Account_WH_EmailAddressIds_NALK];
	   END;
	ELSE
	   BEGIN;
		CREATE	TABLE [work].[tmp_Account_WH_EmailAddressIds_NALK]
		( NAME_ID int NOT NULL PRIMARY KEY CLUSTERED
		, ADDRESS_ID int NULL
		, EFFECTIVE_DATE datetime2(7) NULL
		, EMAIL nvarchar(105) NULL
		, NALK_VERSIONID BIGINT NULL
		, [ADDR_VERSIONID] [bigint] NULL);
	   END;

 END;  
/* END: Create temporary tables.*/  
/* START: Populate Temporary tablees */
IF (1=1)
	BEGIN
	  ;WITH EmailList AS
	  (SELECT ROW_NUMBER() OVER (PARTITION BY NALK.NAME_ID ORDER BY COALESCE(NALK.EFFECTIVE_DATE, '1/1/0001') DESC) AS RN
		 , NALK.NAME_ID
		 , NALK.ADDRESS_ID
		 , NALK.EFFECTIVE_DATE
		 , LEFT(RTRIM(ADDR.ADDR_LINE_1) + RTRIM(ADDR.ADDR_LINE_2) + RTRIM(ADDR.ADDR_LINE_3) + ';', CHARINDEX(';', RTRIM(ADDR.ADDR_LINE_1) + RTRIM(ADDR.ADDR_LINE_2) + RTRIM(ADDR.ADDR_LINE_3) + ';') - 1) AS EMAIL
		 , NALK.VERSION_ID AS NALK_VERSIONID
		 , ADDR.VERSION_ID AS ADDR_VERSIONID
	  FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] NALK 
	  INNER JOIN [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw] AS ADDR ON 
				  NALK.ADDRESS_ID = ADDR.ADDRESS_ID 
	  WHERE ADDRESS_TYPE = 'E'
		AND ADDRESS_CODE = 'BUS'
		)
	  INSERT INTO [work].[tmp_Account_WH_EmailAddressIds_NALK]
			   ( NAME_ID
			   , ADDRESS_ID
			   , EFFECTIVE_DATE
			   , EMAIL
			   , NALK_VERSIONID
			   , ADDR_VERSIONID)
	  SELECT  NAME_ID
			, ADDRESS_ID	 
			, EFFECTIVE_DATE				
			, EMAIL	
			, NALK_VERSIONID
			, ADDR_VERSIONID
	  FROM EmailList
	  WHERE RN = 1;		
	END
/* End Populate temp tables */
/* START: Refresh name IDs for specific Company and Agent Number.*/  
IF (1=1)  
 BEGIN;  
    --Refresh NameIDs in scope  
  INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account_Wholesalers:Refresh Name IDs');  
  SELECT @LOGID = @@IDENTITY;  
  
     --This Merge statement will insert new NAME_IDs from the source subselect to target table  
  --and delete the rows from the target table if they are no longer part of the source subselect
  -- BROKE into two different functions for speed 
		;WITH DEDUP AS
			(SELECT ROW_NUMBER() OVER (PARTITION BY AGNT.[NAME_ID] ORDER BY COALESCE(HIER.[STOP_DATE],'12/31/9999') DESC) AS RN
				, AGnt.AGENT_NUMBER
				, AGNT.COMPANY_CODE
				, AGNT.NAME_ID
				, AGNT.VERSION_ID AS VERSIONID
				, HIER.VERSION_ID AS HIER_VERSIONID
			FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] AS HIER
				INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGNT ON
					AGNT.AGENT_NUMBER = HIER.AGENT_NUMBER
					AND AGNT.COMPANY_CODE = HIER.COMPANY_CODE
			WHERE (
					   REGION_CODE = 'WHOLE'  
				)
			)
		UPDATE DEST
		SET Name_ID				= DEDUP.NAME_ID
			, [COMPANY_CODE]	= DEDUP.COMPANY_CODE
			, AGENT_NUMBER		= DEDUP.AGENT_NUMBER
			, Version_ID		= DEDUP.VERSIONID
			, Hier_Version_ID	= DEDUP.HIER_VERSIONID
		FROM  [EDW_Outbound].[work].[stage_sf_Account_Wholesaler_first_name_id] AS DEST 
			INNER JOIN DEDUP ON
				DEST.NAME_ID = DEDUP.NAME_ID
		WHERE DEDUP.RN = 1;

		;WITH DEDUP AS
			(SELECT ROW_NUMBER() OVER (PARTITION BY AGNT.[NAME_ID] ORDER BY COALESCE(HIER.[STOP_DATE],'12/31/9999') DESC) AS RN
				, AGnt.AGENT_NUMBER
				, AGNT.COMPANY_CODE
				, AGNT.NAME_ID
				, AGNT.VERSION_ID AS VERSIONID
				, HIER.VERSION_ID AS HIER_VERSIONID
			FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] AS HIER
				INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGNT ON
					AGNT.AGENT_NUMBER = HIER.AGENT_NUMBER
					AND AGNT.COMPANY_CODE = HIER.COMPANY_CODE
			WHERE (
					   REGION_CODE = 'WHOLE'  
				)
			)
			INSERT INTO [work].[stage_sf_Account_Wholesaler_first_name_id]
				(
				Name_ID
				, [Company_Code]
				, [Agent_Number]
				, [Version_ID]
				, [Hier_Version_ID]
			)  
		   SELECT DEDUP.NAME_ID
			, DEDUP.COMPANY_CODE
			, DEDUP.AGENT_NUMBER
			, DEDUP.VERSIONID
			, DEDUP.HIER_VERSIONID
			FROM DEDUP
		   WHERE RN = 1  
			AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_Business_first_name_id] AS BS WHERE BS.[NAME_ID] = DEDUP.[NAME_ID]) --not in business accnt  
			AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_brokerdealer_first_name_id] AS Bd WHERE Bd.[NAME_ID] = DEDUP.[NAME_ID]) --not in broker dealer accnt  
			AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_Institution_first_name_id] AS INST WHERE INST.[NAME_ID]= DEDUP.[NAME_ID]) --not in institution  
			AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_NMO_first_name_id] AS NMO WHERE NMO.[NAME_ID] =  DEDUP.[NAME_ID]) --not in nmo  
			AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_first_name_id] AS PRS WHERE PRS.[NAME_ID] = DEDUP.[NAME_ID]) --not in account person  
			AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_Wholesaler_first_name_id] AS DEST WHERE DEST.Name_ID = DEDUP.NAME_ID)


  --Logging  
  SELECT @ROWS = @@ROWCOUNT;  
  UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;  
 END;  
/* END: Refresh name IDs for specific Company and Agent Number.*/  
  
/* START: Populate temporary tables.*/  
IF (1=1)  
 BEGIN;  
  
   
 INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account_WholeSalers:Get new and changed records');  
 SELECT @LOGID = @@IDENTITY;  
  
 --Pick all new or changed Name Ids from NAME_Curr_Vw  
 SELECT @START_VAL = CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_NAME AND Setting_Module = @SETTING_MODULE;  
 SELECT @END_VAL_NAME = MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[NAME_BusKey_Vw];  
 
 IF @START_VAL < @END_VAL_NAME  
  BEGIN;
  --New name records
  INSERT [work].[tmp_Account_Wholesaler_Bus_Keys]  
   ([Name_ID])  
  SELECT   
     NAME_CURR.[NAME_ID] AS [Name_ID]  
  FROM  [EDW_DataLake].[lifepro_v].[NAME_BusKey_Vw] AS NAME_CURR  
  WHERE EXISTS(SELECT 1 FROM [work].[stage_sf_Account_Wholesaler_first_name_id] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = NAME_CURR.NAME_ID) -- Only Name IDs in scope  
   AND NAME_CURR.Row_ID > @START_VAL                       -- Only changed records  
   AND NAME_CURR.Row_ID <= @END_VAL_NAME;  
  END;  
  

  --Pick all new or changed Name Ids from HIER_Curr_Vw and AGNT_Curr_Vw  
 SELECT @START_VAL_HIER  = CAST(SETTING_VALUE as INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_HIER AND Setting_Module = @SETTING_MODULE;  
 SELECT @END_VAL_HIER = MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[HIER_Vw];  
  
 SELECT @START_VAL_AGNT  = CAST(SETTING_VALUE as INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_AGNT AND Setting_Module = @SETTING_MODULE;  
 SELECT @END_VAL_AGNT = MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[AGNT_Vw];  

 IF @START_VAL_HIER < @END_VAL_HIER 
  BEGIN;  
  
  --New hierarchy records
  INSERT [work].[tmp_Account_Wholesaler_Bus_Keys]  
    ([Name_ID]) 
	SELECT AGNT.[Name_ID] 
	FROM [EDW_DataLake].[lifepro_v].[HIER_Vw] AS HIER
		INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Vw] AS AGNT ON
			AGNT.COMPANY_CODE = HIER.COMPANY_CODE
			AND AGNT.AGENT_NUMBER = HIER.AGENT_NUMBER
	WHERE EXISTS (SELECT 1 FROM [work].[stage_sf_Account_Wholesaler_first_name_id] AS WS_NAME_ID WHERE WS_NAME_ID.Name_ID = AGNT.NAME_ID)
		AND NOT EXISTS (SELECT 1 FROM [work].[tmp_Account_Wholesaler_Bus_Keys] DEST WHERE DEST.NAME_ID = AGNT.NAME_ID)
		AND HIER.[Row_id] > @START_VAL_HIER  
		AND HIER.[Row_id] <=@END_VAL_HIER
	GROUP BY AGNT.[Name_ID];
	END;

IF @START_VAL_AGNT < @END_VAL_AGNT  
	BEGIN;
	--New agent records
	INSERT [work].[tmp_Account_Wholesaler_Bus_Keys]  
		([Name_ID]) 
    SELECT [Name_ID] FROM [EDW_DataLake].[lifepro_v].[AGNT_Vw] AS AGENT
    WHERE EXISTS (SELECT 1 FROM [work].[stage_sf_Account_Wholesaler_first_name_id] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = AGENT.NAME_ID)
		AND NOT EXISTS (SELECT 1 FROM [work].[tmp_Account_Wholesaler_Bus_Keys] DEST WHERE DEST.NAME_ID = AGENT.NAME_ID)
        AND AGENT.[Row_id] > @START_VAL_AGNT  
		AND AGENT.[Row_id] <=@END_VAL_AGNT
     GROUP BY AGENT.[Name_ID]; 
  
  END;  
  
    --Pick all new or changed Name Ids from AEXP_10_Curr_Vw  
 SELECT @START_VAL_AEXP_10   = CAST(SETTING_VALUE as INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_AEXP_10 AND Setting_Module = @SETTING_MODULE;  
 SELECT @END_VAL_AEXP_10 = MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[AEXP_10_Vw];  
   
IF @START_VAL_AEXP_10 < @END_VAL_AEXP_10  
  BEGIN;  
  --New exp-10 records
  INSERT [work].[tmp_Account_Wholesaler_Bus_Keys]  
    ([Name_ID]) 
    SELECT AGNT.[Name_ID] 
	FROM [EDW_DataLake].[lifepro_v].[AEXP_10_Vw] AS AEXP10
		LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Vw] AS AGNT
					ON AEXP10.COMPANY_CODE = AGNT.COMPANY_CODE
					AND AEXP10.AGENT_NUMBER = AGNT.AGENT_NUMBER
		WHERE EXISTS (SELECT 1 FROM [work].[stage_sf_Account_Wholesaler_first_name_id] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = AGNT.NAME_ID)
			AND NOT EXISTS (SELECT 1 FROM [work].[tmp_Account_Wholesaler_Bus_Keys] DEST WHERE DEST.NAME_ID = AGNT.NAME_ID)
			AND AEXP10.[Row_id] > @START_VAL_AEXP_10  
			AND AEXP10.[Row_id] <=@END_VAL_AEXP_10
         GROUP BY  AGNT.[Name_ID]; 
  END;  

  SELECT @START_VAL_AEXP_03  = CAST(SETTING_VALUE as INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_AEXP_03 AND Setting_Module = @SETTING_MODULE;  
SELECT @END_VAL_AEXP_03 = MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[AEXP_03_Vw];  
 
  IF @START_VAL_AEXP_03 < @END_VAL_AEXP_03 
  BEGIN;  
  --New exp-03 records
  INSERT [work].[tmp_Account_Wholesaler_Bus_Keys]  
    ([Name_ID]) 
  SELECT AGNT.[Name_ID] 
  FROM [EDW_DataLake].[lifepro_v].[AEXP_03_Vw] AS AEXP03
		LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Vw] AS AGNT
			ON AEXP03.COMPANY_CODE = AGNT.COMPANY_CODE
			AND AEXP03.AGENT_NUMBER = AGNT.AGENT_NUMBER
  WHERE EXISTS (SELECT 1 FROM [work].[stage_sf_Account_Wholesaler_first_name_id] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = AGNT.NAME_ID)
		AND NOT EXISTS (SELECT 1 FROM [work].[tmp_Account_Wholesaler_Bus_Keys] DEST WHERE DEST.NAME_ID = AGNT.NAME_ID)
        AND AEXP03.[Row_id] > @START_VAL_AEXP_03  
		AND AEXP03.[Row_id] <=@END_VAL_AEXP_03
  GROUP BY AGNT.[Name_ID]; 
  END;  
  --New or changed phones
  IF @START_VAL_PHONE < @END_VAL_PHONE
	BEGIN;
	INSERT [work].[tmp_Account_Wholesaler_Bus_Keys]  
		([Name_ID])
	SELECT	SRC.NameID
	FROM	[salesforce].[PhoneNumber] AS SRC
	WHERE	COALESCE(SRC.MODIFIED_DT, SRC.CREATED_DT)>@START_VAL_PHONE
			AND COALESCE (SRC.MODIFIED_DT, SRC.CREATED_DT,'1/1/1753') <= @END_VAL_PHONE
			AND NOT EXISTS(SELECT 1 FROM [work].[tmp_Account_Wholesaler_Bus_Keys]  AS DEST WHERE DEST.Name_ID = SRC.NameID);
	END;
	
	--Pick all new or changed Email addresses  
 SELECT @START_VAL  = CAST(SETTING_VALUE as INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_NALK AND Setting_Module = @SETTING_MODULE;  
 SELECT @START_VAL_ADDR = CAST(SETTING_VALUE as INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_ADDR AND Setting_Module = @SETTING_MODULE;  
 SELECT @END_VAL_NALK = MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[NALK_Vw];  
 SELECT @END_VAL_ADDR = MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[ADDR_Vw];  

 IF @START_VAL<@END_VAL_NALK  
  BEGIN;
  --New NALK records and Address records (for changed email addresses)
  INSERT [work].[tmp_Account_Wholesaler_Bus_Keys]  
    ([Name_ID])  
  SELECT NALK.[Name_id]  
  FROM [EDW_DataLake].[lifepro_v].[NALK_Vw] AS NALK   
    LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[ADDR_Vw] AS ADDR ON  
     ADDR.[ADDRESS_ID] = NALK.ADDRESS_ID  
  WHERE NALK.[Address_type] = 'E'  
    AND NOT EXISTS(SELECT 1 FROM [work].[tmp_Account_Wholesaler_Bus_Keys] AS DEST WHERE DEST.[NAME_ID] = NALK.[NAME_ID])  
    AND EXISTS(SELECT 1 FROM [work].[stage_sf_Account_Wholesaler_first_name_id] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = NALK.NAME_ID)  
    AND   
     ((NALK.[Row_id] > @START_VAL  
     AND NALK.[Row_id] <=@END_VAL_NALK)  
     OR  
     (ADDR.[Row_id] > @START_VAL_ADDR  
     AND ADDR.[Row_ID] <= @END_VAL_ADDR))  
  GROUP BY NALK.[Name_id];  
    
  END;  
  
  --Get Row Count   
  SELECT @Rows = SUM(st.row_count) FROM    sys.dm_db_partition_stats st WHERE  object_name(object_id) = 'tmp_Account_Wholesaler_Bus_Keys' AND OBJECT_SCHEMA_NAME(OBJECT_ID) = 'work' AND (index_id < 2);  
  UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;  
   
 END;  
/* END: Populate temporary tables.*/  
  
 /* START: Refresh mapping table*/  
 IF (1=1)  
  BEGIN;  
  INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account_Wholesalers:Update Mappings');  
  SELECT @LOGID = @@IDENTITY;  
  
	UPDATE	DEST
	SET		[MODIFIED_DT]						= CURRENT_TIMESTAMP  
		  , [NAMERECORD_VERSIONID]				= COALESCE(NAME_CURR_VW.[VERSION_ID],0)
		  , [EXTENSIONRECORDNADR_VERSIONID]		= 0
		  , [AGENTRECORD_COMPANYCODE]			= AGENT.COMPANY_CODE
		  , [AGENTRECORD_AGENTNUMBER]			= AGENT.AGENT_NUMBER
		  , [AGENTRECORD_VERSIONID]				= COALESCE(AGENT.VERSION_ID,0)
		  , [AGENTEXPANSION03_COMPANYCODE]		= AEXP03.COMPANY_CODE
		  , [AGENTEXPANSION03_AGENTNUMBER]		= AEXP03.AGENT_NUMBER
		  , [AGENTEXPANSION03_SEQUENCE]			= AEXP03.[SEQUENCE]
		  , [DEST].[AGENTEXPANSION03_VERSIONID] = 0
		  , [AGENTEXPANSION10_COMPANYCODE]		= AEXP10.COMPANY_CODE
		  , [AGENTEXPANSION10_AGENTNUMBER]		= AEXP10.AGENT_NUMBER
		  , [AGENTEXPANSION10_SEQUENCE]			= AEXP10.[SEQUENCE]
		  , [AGENTEXPANSION10_VERSIONID]		= COALESCE(AEXP10.VERSION_ID,0)
		  , [NAMERECORD_SSN]					= NAME_CURR_VW.[BUSINESS_TAX_CODE]
		  , [NALK_PHONE_NAMEID]					= NALK.NAME_ID
		  , [NALK_PHONE_ADDRESSID]				= PHONE.[ADDRESS_ID]
		  , [NALK_PHONE_EFFECTIVEDATE]			= PHONE.[EFFECTIVE_DATE]
		  , [NALK_PHONE_ADDRESSCODE]			= PHONE.[ADDRESS_CODE]
		  , [NALK_PHONE_COMPANYCODE]			= PHONE.[COMPANY_CODE]
		  , [NALK_PHONE_POLICYNUMBER]			= PHONE.[POLICY_NUMBER]
		  , [NALK_PHONE_VERSIONID]				= COALESCE(PHONE.VERSION_ID,0)
		  --, [HIER_COMPANYCODE]					
		  --, [HIER_AGENTNUMBER]
		  --, [HIER_MARKETINGCODE]
		  --, [HIER_AGENTLEVEL]
		  --, [HIER_STOPDT]
		  , [HIER_VERSIONID]						= COALESCE(BUSKEY.Hier_Version_ID,0)
		  , [NALK_EMAIL_VERSIONID]					= COALESCE(NALK.NALK_VersionID,0)
		  , [ADDR_EMAIL_VERSIONID]					= COALESCE(NALK.ADDR_VersionID,0)
		  , [ADDR_EMAIL_ADDRESSID]					= Nalk.ADDRESS_ID
		  , [DELETE_FLAG]							= CASE WHEN NAME_CURR_VW.DXType = 'D' THEN 1 ELSE 0 end
	FROM	[salesforce].[mapping_Account] AS DEST 
		INNER JOIN [work].[tmp_Account_Wholesaler_Bus_Keys] AS TMP  ON
			TMP.Name_ID = DEST.NAMERECORD_NAMEID
			AND DEST.RECORDTYPEID = @RecordTypeID
		INNER JOIN [work].[stage_sf_Account_Wholesaler_first_name_id] AS BUSKEY ON
			TMP.Name_ID = BUSKEY.Name_ID 
		INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NAME_CURR_VW ON  
			NAME_CURR_VW.[NAME_ID] = TMP.[Name_ID]  
		INNER JOIN EDW_DataLake.lifepro_v.AGNT_Curr_Vw AS AGENT ON  
			 AGENT.NAME_ID = BUSKEY.Name_ID   
			 AND AGENT.COMPANY_CODE = BUSKEY.Company_Code
			 AND AGENT.AGENT_NUMBER = BUSKEY.Agent_Number
		INNER JOIN [EDW_DataLake].[lifepro_v].[AEXP_10_Curr_Vw] AEXP10 ON  
		 AEXP10.AGENT_NUMBER = BUSKEY.AGENT_NUMBER  
		 AND AEXP10.COMPANY_CODE = BUSKEY.COMPANY_CODE
		INNER JOIN [EDW_DataLake].[lifepro_v].[AEXP_03_Curr_Vw] AEXP03 ON  
		 AEXP03.AGENT_NUMBER = AGENT.AGENT_NUMBER  
		 AND AEXP03.COMPANY_CODE = BUSKEY.COMPANY_CODE
		LEFT OUTER JOIN [salesforce].[PhoneNumber] AS PHONE ON
			PHONE.NameID = TMP.Name_ID
		LEFT OUTER JOIN [work].[tmp_Account_WH_EmailAddressIds_NALK] as NALK ON
			DEST.NAMERECORD_NAMEID = NALK.NAME_ID;

	SELECT @ROWS = @@ROWCOUNT;    
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;    
	
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account_Wholesalers:Insert Mappings');    
	SELECT @LOGID = @@IDENTITY;   
	
	INSERT	[salesforce].[mapping_Account]
		 ([CREATED_DT]  
		, [NAMERECORD_NAMEID]  
		, [NAMERECORD_VERSIONID] 
		, [EXTENSIONRECORDNADR_VERSIONID]
		, [AGENTRECORD_COMPANYCODE]  
		, [AGENTRECORD_AGENTNUMBER]  
		, [AGENTRECORD_VERSIONID]  
		, [AGENTEXPANSION03_COMPANYCODE]  
		, [AGENTEXPANSION03_AGENTNUMBER]  
		, [AGENTEXPANSION03_SEQUENCE] 
		, [AGENTEXPANSION03_VERSIONID]
		, [AGENTEXPANSION10_COMPANYCODE]  
		, [AGENTEXPANSION10_AGENTNUMBER]  
		, [AGENTEXPANSION10_SEQUENCE]  
		, [AGENTEXPANSION10_VERSIONID]
		, [NAMERECORD_SSN]
		, [RECORDTYPEID]
		, [NALK_PHONE_NAMEID]
		, [NALK_PHONE_ADDRESSID]
		, [NALK_PHONE_EFFECTIVEDATE]
		, [NALK_PHONE_ADDRESSCODE]
		, [NALK_PHONE_COMPANYCODE]
		, [NALK_PHONE_POLICYNUMBER]
		, [NALK_PHONE_VERSIONID]
		, [HIER_VERSIONID]
		, [NALK_EMAIL_VERSIONID]
		, [NALK_EMAIL_ADDRESSID]
		, [NALK_EMAIL_EFFECTIVEDATE]
		, [NALK_EMAIL_ADDRESSCODE]
		, [NALK_EMAIL_COMPANYCODE]
		, [NALK_EMAIL_POLICYNUMBER]
		, [ADDR_Email_VersionID]
		, [DELETE_FLAG]
		)  
	SELECT CURRENT_TIMESTAMP  
		  , NAME_CURR_VW.NAME_ID
		  , COALESCE(NAME_CURR_VW.[VERSION_ID],0)
		  , 0
		  , AGENT.COMPANY_CODE
		  , AGENT.AGENT_NUMBER
		  , COALESCE(AGENT.VERSION_ID,0)
		  , AEXP03.COMPANY_CODE
		  , AEXP03.AGENT_NUMBER
		  , AEXP03.[SEQUENCE]
		  , 0
		  , AEXP10.COMPANY_CODE
		  , AEXP10.AGENT_NUMBER
		  , AEXP10.[SEQUENCE]
		  , COALESCE(AEXP10.VERSION_ID,0)
		  , NAME_CURR_VW.[BUSINESS_TAX_CODE]
		  , @RecordTypeID
		  , [NALK_PHONE_NAMEID]						= PHONE.[NameID]
		 , [NALK_EMAIL_ADDRESSID]					= PHONE.[ADDRESS_ID]
		 , [NALK_PHONE_EFFECTIVEDATE]				= PHONE.[EFFECTIVE_DATE]
		 , [NALK_PHONE_ADDRESSCODE]					= PHONE.[ADDRESS_CODE]
		 , [NALK_PHONE_COMPANYCODE]					= PHONE.[COMPANY_CODE]
		 , [NALK_PHONE_POLICYNUMBER]				= PHONE.[POLICY_NUMBER]
		 , [NALK_PHONE_VERSIONID]					= COALESCE(PHONE.VERSION_ID,0)
		 , [HIER_VERSIONID]							= COALESCE([BUSKEY].Hier_Version_ID,0)
		 , [NALK_EMAIL_VERSIONID]					= COALESCE(NALK.NALK_VERSIONID,0)
		 , nalk.ADDRESS_ID
		 , nalk.EFFECTIVE_DATE
		 , null
		 , NULL
		 , null
		 , [ADDR_EMAIL_VERSIONID]					= COALESCE(NALK.ADDR_VERSIONID,0)
		 , CASE WHEN NAME_CURR_VW.DXType = 'D' THEN 1 ELSE 0 end
	FROM [work].[tmp_Account_Wholesaler_Bus_Keys] AS TMP   
	INNER JOIN [work].[stage_sf_Account_Wholesaler_first_name_id] AS BUSKEY ON
		TMP.Name_ID = BUSKEY.Name_ID 
    INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NAME_CURR_VW ON  
		NAME_CURR_VW.[NAME_ID] = TMP.[Name_ID]  
    INNER JOIN EDW_DataLake.lifepro_v.AGNT_Curr_Vw AS AGENT ON  
		 AGENT.NAME_ID = BUSKEY.Name_ID   
		 AND AGENT.COMPANY_CODE = BUSKEY.Company_Code
		 AND AGENT.AGENT_NUMBER = BUSKEY.Agent_Number
    INNER JOIN [EDW_DataLake].[lifepro_v].[AEXP_10_Curr_Vw] AEXP10 ON  
     AEXP10.AGENT_NUMBER = BUSKEY.AGENT_NUMBER  
	 AND AEXP10.COMPANY_CODE = BUSKEY.COMPANY_CODE
    INNER JOIN [EDW_DataLake].[lifepro_v].[AEXP_03_Curr_Vw] AEXP03 ON  
     AEXP03.AGENT_NUMBER = AGENT.AGENT_NUMBER  
	 AND AEXP03.COMPANY_CODE = BUSKEY.COMPANY_CODE
	LEFT OUTER JOIN [salesforce].[PhoneNumber] AS PHONE ON
			PHONE.NameID = TMP.Name_ID
	LEFT OUTER JOIN [work].[tmp_Account_WH_EmailAddressIds_NALK] as NALK ON
			TMP.Name_ID = NALK.NAME_ID
	WHERE NOT EXISTS(SELECT 1 FROM [salesforce].[mapping_Account] AS DEST WHERE DEST.NAMERECORD_NAMEID = TMP.Name_ID);
  
  SELECT @ROWS = @@ROWCOUNT;  
  UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;  
  END;   
 /* END: Refresh mapping table*/  

/* START: Populate staging table.*/  
IF (1=1)  
 BEGIN;  
  
 INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account_Wholesalers:Update Staging');  
 SELECT @LOGID = @@IDENTITY;  
  
 --If previous execution was successful, this table will be empty. 
 	--If previous execution was successful, this table will be empty.
	UPDATE	DEST
	SET		[Name]									= CASE WHEN NAME_VW.NAME_FORMAT_CODE = 'I'
														THEN TRIM(INDIVIDUAL_FIRST) + IIF(LEN(TRIM(INDIVIDUAL_FIRST)) > 0, ' ', '') + TRIM(INDIVIDUAL_MIDDLE) + IIF(LEN(TRIM(INDIVIDUAL_MIDDLE)) > 0, ' ', '') + TRIM(INDIVIDUAL_LAST)
														ELSE TRIM(BUSINESS_NAME)
													  END
			,[Phone]								= phone.PhoneNumber
			,[OwnerId]								= ''
			--,[RecordTypeId]							= @RecordTypeID
			,[LifePro_Last_Modified_DateTime__c]	= mapping.VERSIONID
			,[X2017_Activity_Premium__c]			= premium.ActivityPremium2017
			,[X2017_Effective_Premium__c]			= premium.EffectivePremium2017
			,[X2018_Activity_Premium__c]			= premium.ActivityPremium2018
			,[X2018_Effective_Premium__c]			= premium.EffectivePremium2018
			,[X2019_Activity_Premium__c]			= premium.ActivityPremium2019
			,[X2019_Effective_Premium__c]			= premium.EffectivePremium2019
			,[Agent_Number__c]						= agnt.AGENT_NUMBER
			,[Company_Code__c]						= agnt.COMPANY_CODE
			,[Email__c]								= EmailAddressIds.EMAIL
			,[LifePro_ID__c]						= cast(mapping.ID as varchar(20))
			,[Region__c]							= regions.REGION_CODE
			,[Status__c]							= agnt.STATUS_CODE
			,[Status_Date__c]						= agnt.STATUS_DATE
			,[Suitability__c]						= CASE TRIM(suitability.SUITABILITY_FLAG)
														WHEN 'Y' THEN 1
														ELSE 0
													  END
			,[TIN__c]								= CASE WHEN NAME_VW.NAME_FORMAT_CODE = 'B'
														THEN STUFF(RIGHT('000000000' + TRIM(NAME_VW.BUSINESS_TAX_CODE), 9), 3, 0, '-')
														ELSE ''
													  END
			,[Social_Security_Number__c]			= CASE WHEN NAME_VW.NAME_FORMAT_CODE = 'I'
														THEN STUFF(STUFF(RIGHT('000000000' + CONVERT(varchar(11), NAME_VW.SOC_SEC_NUMBER), 9), 4, 0, '-'), 7, 0, '-')
														ELSE ''
													  END
			,[Tax_Status__c]						= NAME_VW.TAX_STATUS
			,[Tax_Witholding_Option__c]				= NAME_VW.TAX_WITHHOLDING_FLAG
			,[Modified_dt]							= CURRENT_TIMESTAMP
			,[LifePro_NameID]						=     Mapping.[NAMERECORD_NAMEID]  
	FROM	[salesforce].[Account_Wholesaler] AS DEST 
	INNER JOIN [work].[tmp_Account_Wholesaler_Bus_Keys] AS TMP ON
		DEST.[LifePro_NameID] = TMP.[NAME_ID]
	INNER JOIN [salesforce].[mapping_Account] AS MAPPING ON 
		 MAPPING.NAMERECORD_NAMEID = TMP.Name_ID
		 AND MAPPING.RECORDTYPEID = @RecordTypeID
	INNER JOIN [work].[stage_sf_Account_Wholesaler_first_name_id] SRC
		ON TMP.Name_ID = SRC.Name_ID
	INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NAME_VW ON
		NAME_VW.[Name_ID] = TMP.[Name_ID]
	INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] agnt
		ON SRC.Company_Code = agnt.COMPANY_CODE
		AND SRC.Agent_Number = agnt.AGENT_NUMBER
	LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_10_Curr_Vw] regions
		ON agnt.COMPANY_CODE = regions.COMPANY_CODE
		AND agnt.AGENT_NUMBER = regions.AGENT_NUMBER
	LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_03_Curr_Vw] suitability
		ON agnt.COMPANY_CODE = suitability.COMPANY_CODE
		AND agnt.AGENT_NUMBER = suitability.AGENT_NUMBER
	LEFT OUTER JOIN [EDW_Outbound].[salesforce].[AgentYearlyPremiumTotals] premium
		ON agnt.COMPANY_CODE = premium.CompanyCode
		AND agnt.AGENT_NUMBER = premium.AgentNumber
	LEFT OUTER JOIN [work].[tmp_Account_WH_EmailAddressIds_NALK] AS EmailAddressIds ON
		EmailAddressIds.[Name_id] = TMP.[Name_id]
	--LEFT OUTER JOIN EmailAddressIds ON
	--	EmailAddressIds.[Name_id] = TMP.[Name_id]
	--LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw] AS EMAIL_ADDR ON
	--	EMAIL_ADDR.ADDRESS_ID = EMAILADDRESSIDS.[EMAIL_ADDRESS_ID]
	LEFT OUTER JOIN [EDW_Outbound].[salesforce].[PhoneNumber] AS phone ON
		phone.[Nameid] = TMP.[NAME_ID]  
	WHERE   Mapping.VERSIONID >= COALESCE(Mapping.SALESFORCE_DT,0)
		OR mapping.salesforce_dt IS NULL;
	SELECT @ROWS = @@ROWCOUNT;  
	
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;  
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account_Wholesalers:Insert Staging');  
	SELECT @LOGID = @@IDENTITY;  
	
	--Insert all delta records into the staging table	
	INSERT INTO [salesforce].[Account_Wholesaler]
           ([Name]
           ,[Phone]
           ,[OwnerId]
           ,[RecordTypeId]
           ,[LifePro_Last_Modified_DateTime__c]
           ,[X2017_Activity_Premium__c]
           ,[X2017_Effective_Premium__c]
           ,[X2018_Activity_Premium__c]
           ,[X2018_Effective_Premium__c]
           ,[X2019_Activity_Premium__c]
           ,[X2019_Effective_Premium__c]
           ,[Agent_Number__c]
           ,[Company_Code__c]
           ,[Email__c]
           ,[LifePro_ID__c]
           ,[Region__c]
           ,[Status__c]
           ,[Status_Date__c]
           ,[Suitability__c]
           ,[TIN__c]
           ,[Social_Security_Number__c]
           ,[Tax_Status__c]
           ,[Tax_Witholding_Option__c]
           ,[Created_dt]
           ,[LifePro_NameID])
	SELECT
		CASE WHEN NAME_VW.NAME_FORMAT_CODE = 'I'
			THEN TRIM(INDIVIDUAL_FIRST) + IIF(LEN(TRIM(INDIVIDUAL_FIRST)) > 0, ' ', '') + TRIM(INDIVIDUAL_MIDDLE) + IIF(LEN(TRIM(INDIVIDUAL_MIDDLE)) > 0, ' ', '') + TRIM(INDIVIDUAL_LAST)
			ELSE TRIM(BUSINESS_NAME)
		END AS Name,
		phone.PhoneNumber,
		'' AS OwnerId,
		@RecordTypeID AS RecordTypeId,
		Mapping.VERSIONID,
		premium.ActivityPremium2017 AS X2017_Activity_Premium__c,
		premium.EffectivePremium2017 AS X2017_Effective_Premium__c,
		premium.ActivityPremium2018 AS X2018_Activity_Premium__c,
		premium.EffectivePremium2018 AS X2018_Effective_Premium__c,
		premium.ActivityPremium2019 AS X2019_Activity_Premium__c,
		premium.EffectivePremium2019 AS X2019_Effective_Premium__c,
		agnt.AGENT_NUMBER AS Agent_Number__c,
		agnt.COMPANY_CODE AS Company_Code__c,
		EmailAddressIds.EMAIL AS Email__c,
		cast(mapping.ID as varchar(20)) AS LifePro_ID__c,
		regions.REGION_CODE AS Region__c,
		agnt.STATUS_CODE AS Status__c,
		agnt.STATUS_DATE AS Status_Date__c,
		CASE TRIM(suitability.SUITABILITY_FLAG)
			WHEN 'Y' THEN 1
			ELSE 0
		END AS Suitability__c,
		CASE WHEN NAME_VW.NAME_FORMAT_CODE = 'B'
			THEN STUFF(RIGHT('000000000' + TRIM(NAME_VW.BUSINESS_TAX_CODE), 9), 3, 0, '-')
			ELSE ''
		END AS TIN__c,
		CASE WHEN NAME_VW.NAME_FORMAT_CODE = 'I'
			THEN STUFF(STUFF(RIGHT('000000000' + CONVERT(varchar(11), NAME_VW.SOC_SEC_NUMBER), 9), 4, 0, '-'), 7, 0, '-')
			ELSE ''
		END AS Social_Security_Number__c,
		NAME_VW.TAX_STATUS AS Tax_Status__c,
		NAME_VW.TAX_WITHHOLDING_FLAG AS Tax_Witholding_Option__c,
		CURRENT_TIMESTAMP AS Created_dt,
		Mapping.[NAMERECORD_NAMEID]   AS LifePro_NameID
	FROM [work].[tmp_Account_Wholesaler_Bus_Keys] AS TMP
   INNER JOIN [salesforce].[mapping_Account] AS MAPPING ON 
		MAPPING.NAMERECORD_NAMEID = TMP.Name_ID
		AND MAPPING.RECORDTYPEID = @RecordTypeID
	INNER JOIN [work].[stage_sf_Account_Wholesaler_first_name_id] SRC
		ON TMP.Name_ID = SRC.Name_ID
	INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NAME_VW ON
		NAME_VW.[Name_ID] = TMP.[Name_ID]
	INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] agnt
		ON SRC.Company_Code = agnt.COMPANY_CODE
		AND SRC.Agent_Number = agnt.AGENT_NUMBER
	LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_10_Curr_Vw] regions
		ON agnt.COMPANY_CODE = regions.COMPANY_CODE
		AND agnt.AGENT_NUMBER = regions.AGENT_NUMBER
	LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_03_Curr_Vw] suitability
		ON agnt.COMPANY_CODE = suitability.COMPANY_CODE
		AND agnt.AGENT_NUMBER = suitability.AGENT_NUMBER
	LEFT OUTER JOIN [EDW_Outbound].[salesforce].[AgentYearlyPremiumTotals] premium
		ON agnt.COMPANY_CODE = premium.CompanyCode
		AND agnt.AGENT_NUMBER = premium.AgentNumber
	LEFT OUTER JOIN [work].[tmp_Account_WH_EmailAddressIds_NALK] AS EmailAddressIds ON
		EmailAddressIds.[Name_id] = TMP.[Name_id]	  
	--LEFT OUTER JOIN EmailAddressIds ON
	--	EmailAddressIds.[Name_id] = TMP.[Name_id]
	--LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw] AS EMAIL_ADDR ON
	--	EMAIL_ADDR.ADDRESS_ID = EMAILADDRESSIDS.[EMAIL_ADDRESS_ID]
	LEFT OUTER JOIN [EDW_Outbound].[salesforce].[PhoneNumber] AS phone ON
		phone.[Nameid] = TMP.[NAME_ID] 
	WHERE (Mapping.VERSIONID >= COALESCE(Mapping.SALESFORCE_DT,0) 	
		OR mapping.salesforce_dt IS NULL)
	and NOT EXISTS(SELECT 1 FROM [salesforce].[Account_Wholesaler] AS DEST WHERE DEST.Lifepro_Id__C = Mapping.ID);
	 SELECT @ROWS = @@ROWCOUNT;  
	
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;  

  
 END;  
/* END: Populate staging table.*/  
/* START: Add invalid email check */  
IF (1=1)  
 BEGIN;  
  
   
 INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account_Wholesalers:Reject emails');  
 SELECT @LOGID = @@IDENTITY;  
  
  
 ;WITH INVALID_EMAILS AS  
 (SELECT [Email__c] AS [Account_Wholesaler]  
   , [Reject_Flag]  
   , [Reject_Dt]  
   , [Reject_Reason]  
 FROM [salesforce].[Account_Wholesaler]  
 WHERE ([Email__c] = ''   
   OR [Email__c] LIKE '% %'   
   OR [Email__c] LIKE ('%["(),:;<>\]%')   
   OR SUBSTRING([Email__c] ,CHARINDEX('@',[Email__c]),LEN([Email__c])) LIKE ('%[!#$%&*+/=?^`_{|]%')   
   OR (LEFT([Email__c],1) LIKE ('[-_.+]') OR RIGHT([Email__c],1) LIKE ('[-_.+]'))                                                                                 
   OR ([Email__c] LIKE '%[%' OR [Email__c] LIKE '%]%')   
   OR [Email__c] LIKE '%@%@%'   
   OR [Email__c] NOT LIKE '_%@_%._%'   
   OR [Email__c] LIKE '%..%'  
   OR [Email__c] LIKE '%-.%'  
   OR [Email__c] LIKE '%.@%'   
   OR [Email__c] LIKE '%@.%'   
   OR [Email__c] LIKE '%@%.-%'   
   OR [Email__c] LIKE '%@%-.%'   
   OR [Email__c] LIKE '%@-%'  
   OR CHARINDEX(CHAR(39),[Email__c] )=1
   OR CHARINDEX(' ',LTRIM(RTRIM([Email__c]))) > 0)  
   AND COALESCE([Reject_Flag],0)=0)  
  
 UPDATE INVALID_EMAILS SET [Account_Wholesaler] = NULL  
  , [Reject_Flag] = 1  
   , [Reject_Dt] = CURRENT_TIMESTAMP  
   , [Reject_Reason]='Invalid Email:'+ LEFT(COALESCE([Account_Wholesaler],''),85);  
  
   
 SELECT @ROWS = @@ROWCOUNT;  
 UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;  
   
 END;  
/* END: Add invalid email check */  
/* START: Update delta settings.*/  
IF (1=1)  
 BEGIN;  
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_HIER AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_HIER AND Setting_Module = @SETTING_MODULE;  
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_AGNT AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_AGNT AND Setting_Module = @SETTING_MODULE;  
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_NALK AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_NALK AND Setting_Module = @SETTING_MODULE;  
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_NAME AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_NAME AND Setting_Module = @SETTING_MODULE;  
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_ADDR AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_ADDR AND Setting_Module = @SETTING_MODULE;  
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_AEXP_10 AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_AEXP_10 AND Setting_Module = @SETTING_MODULE;  
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_AEXP_03 AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_AEXP_03 AND Setting_Module = @SETTING_MODULE; 
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET SETTING_VALUE = CAST(@END_VAL_PHONE AS NVARCHAR(150)) WHERE Setting_Name = @SETTING_NAME_PHONE AND Setting_Module = @SETTING_MODULE;
 END;  
  
  
  --Logging  
 UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;    
     
END TRY  
BEGIN CATCH  
             
DECLARE @ERROR_MSG          NVARCHAR(2000);  
DECLARE @ERROR_SEVERITY     INT;  
DECLARE @ERROR_STATE        INT;  
   
SET @ERROR_MSG              = ERROR_MESSAGE();  
SET @ERROR_SEVERITY         = ERROR_SEVERITY();  
SET @ERROR_STATE            = ERROR_STATE();  

--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account_Wholesalers:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;            
       
  
RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);  
  
END CATCH;  
  
END;  
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Account_Person]    Script Date: 5/17/2022 2:04:38 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
select object_name(process_id),*, DATEDIFF(MINUTE, start_dt, stop_dt) from edw_audit..process_log 
WHERE object_name(process_id) ='usp_Upsert_Account_Person'
AND start_dt >=CAST(CURRENT_TIMESTAMP AS DATE);
*/
CREATE           PROCEDURE  [salesforce].[usp_Upsert_Account_Person]

AS
BEGIN;
-- =============================================

 -- Author: 			Anastasia Vogelaar
 -- CreationDate: 		2021-06-18
 -- Version: 			0.1.1
 -- Description: 		Prototype - refresh Account Person  table for synchronization with SalesForce 

 -- Change Log: 		
 -- Modified By:		Steve Tangeman
 -- Modified Date:		8/9/2021
 -- Version:			0.1.2
 -- Description:		Handled owners who have a zero for SSN

 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		9/2/2021
 -- Version:			0.1.3
 -- Description:		Added check to only include accounts that were not uploaded with other acount types

 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		09/07/2021
 -- Version:			0.1.2
 -- Description:		Replaced Drop Table with Truncate

 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		09/10/2021
 -- Version:			0.1.3
 -- Description:		Added email check

 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		10/25/2021
 -- Version:			0.2.0
 -- Description:		Added support for bi-directional logic:
 --						1. Populate mapping table
 --						2. Mask LifePro IDs
 --						3. Add logging
 --						BUSINES KEY: NAME_ID
 --						SALESFORCE EXTERNAL ID: LifePro_ID__c
 
 -- Modified By:		Anastasia Vogelaar    
 -- Modified Date:		12/20/2021 
 -- Version:			0.2.1    
 -- Description:		Added record type check

 -- Modified By:		Anastasia Vogelaar    
 -- Modified Date:		2022-01-01
 -- Version:			0.2.2    
 -- Description:		Added Birthday Check, Reject Reason Check, Last Name check

 -- Modified By:		Jason Rippel    
 -- Modified Date:		2022-01-19
 -- Version:			0.2.3    
 -- Description:		Updated NADRNA CTE to Temp table for performance

 -- Modified By:		Jason Rippel    
 -- Modified Date:		2022-01-24
 -- Version:			0.2.4    
 -- Description:		Updated EmailAddressIds CTE to Temp table for performance

 -- Modified By:		Jason Rippel    
 -- Modified Date:		2022-01-31
 -- Version:			0.2.5   
 -- Description:		Updated Logic for First and Last Name

 -- Modified By:		Anastasia Vogelaar    
 -- Modified Date:		03/02/2022
 -- Version:			0.2.6    
 -- Description:		Temporary removed Version ID check

 -- Modified By:		Darin Baarda    
 -- Modified Date:		03/17/2022
 -- Version:			0.2.7    
 -- Description:		Changed how emails are picked up

 -- Modified By:		Anastasia Vogelaar    
 -- Modified Date:		03/30/2022
 -- Version:			0.3.0    
 -- Description:		Added version check back, modified logic for the mapping table, CX-4484

 -- Modified By:		Anastasia Vogelaar    
 -- Modified Date:		04/01/2022
 -- Version:			0.3.1    
 -- Description:		Added Salesforce_ID where available

 -- Modified By:		Anastasia Vogelaar    
 -- Modified Date:		04/21/2022
 -- Version:			0.3.2    
 -- Description:		Enabled version id check for full refreshes

 -- Modified By:		Anastasia Vogelaar    
 -- Modified Date:		05/02/2022
 -- Version:			0.3.3    
 -- Description:		Added check for changes triggered by deletions

 -- Full reload:
 --INSERT [EDW_Audit].[dbo].[Delta_Settings] (Setting_Name, Setting_Module, Setting_Value) VALUES ('SYNC_ACCOUNT_PERSON_NAME_BUSKEY_VW','SF_SYNC','0');
 --INSERT [EDW_Audit].[dbo].[Delta_Settings] (Setting_Name, Setting_Module, Setting_Value) VALUES ('SYNC_ACCOUNT_PERSON_PHONENUM','SF_SYNC','1/1/1753');
 --DELETE [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = 'SYNC_ACCOUNT_PERSON_NAME_CURR_VW' AND Setting_Module='SF_SYNC';
 
 --UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME LIKE 'SYNC_ACCOUNT_PERSON_%' AND Setting_Module ='SF_SYNC' and setting_name<>'SYNC_ACCOUNT_PERSON_PHONENUM';
 --UPDATE SETTINGS SET SETTING_VALUE = '1/1/1753' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME = 'SYNC_ACCOUNT_PERSON_PHONENUM';

/*  **DEPOLOYMENT SCRIPTS**
TRUNCATE TABLE [salesforce].[Account_Person]; 
alter table [salesforce].[mapping_Account] add [RECORDTYPE_DESCR] AS 
	CASE [RECORDTYPEID] 
		WHEN '0125e000000OaHiAAK' THEN 'Bank'
WHEN '0125e000000OaHjAAK' THEN 'Broker_Dealer'
WHEN '0125e000000OaHkAAK' THEN 'NMO'
WHEN '0125e000000OaHlAAK' THEN 'Vendor'
WHEN '0125e000000OaHmAAK' THEN 'Wholesaler'
WHEN '0125e000000WqlsAAC' THEN 'IndustriesInstitution'
WHEN '0125e000000WqltAAC' THEN 'IndustriesHousehold'
WHEN '0125e000000WqluAAC' THEN 'IndustriesBusiness'
WHEN '0125e000000WqlvAAC' THEN 'PersonAccount'
WHEN '0125e000000WqlwAAC' THEN 'IndustriesIndividual' END
SELECT 'WHEN ' + CHAR(39) + ID + CHAR(39) + ' THEN ' + CHAR(39) + DEVELOPERNAME + CHAR(39)  FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE  SOBJECTTYPE = 'Account'
SELECT * FROM EDW_AUDIT.DBO.DELTA_SETTINGS WHERE SETTING_NAME LIKE 'SYNC_ACCOUNT_PER%'
DROP TABLE IF EXISTS [work].[tmp_Account_Person_EmailAddressIds_NALK];
DROP TABLE IF EXISTS [work].[tmp_Account_Person_NADRNA];
ALTER TABLE [salesforce].[Account_Person] ADD Delete_Flag bit null default 0;
UPDATE [salesforce].[mapping_Account] SET [SALESFORCE_DT] = NULL WHERE RECORDTYPE_DESCR = 'PersonAccount'
*/

-- =============================================

SET NOCOUNT ON;
DECLARE @SETTING_NAME_NAME			NVARCHAR(50) = 'SYNC_ACCOUNT_PERSON_NAME_BUSKEY_VW';
DECLARE @SETTING_NAME_EXTN_NADRNA	NVARCHAR(50) = 'SYNC_ACCOUNT_PERSON_EXT_NADRNA_CURR_VW';
DECLARE @SETTING_NAME_NALK			NVARCHAR(50) = 'SYNC_ACCOUNT_PERSON_NALK_CURR_VW';
DECLARE	@SETTING_NAME_ADDR			NVARCHAR(50) = 'SYNC_ACCOUNT_PERSON_ADDR_CURR_VW';
DECLARE @SETTING_NAME_PHONENUM		NVARCHAR(50) = 'SYNC_ACCOUNT_PERSON_PHONENUM'
DECLARE @SETTING_MODULE				NVARCHAR(50) = 'SF_SYNC';
DECLARE @STARTVAL_NAME				BIGINT;
DECLARE @STARTVAL_NADRNA			BIGINT;
DECLARE @STARTVAL_NALK				BIGINT;
DECLARE @STARTVAL_ADDR				BIGINT;
DECLARE @STARTVAL_PHONE				DATETIME2;
DECLARE @ENDVAL_NAME				BIGINT;
DECLARE @ENDVAL_NADRNA				BIGINT;
DECLARE @ENDVAL_NALK				BIGINT;
DECLARE @ENDVAL_ADDR				BIGINT;
DECLARE @ENDVAL_PHONE				DATETIME2;
DECLARE @RecordTypeID				NVARCHAR(18);
DECLARE @ROWS						INT;		--Used for logging row counts
DECLARE @LOGID_START				INT;		--Used for the first log id
DECLARE	@LOGID						INT;		--Used for intermediate log ids

--	DROP TABLE IF EXISTS [work].[tmp_Account_Person_Bus_Keys];
BEGIN TRY
--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountPerson:Stat/End Indicator');
SELECT @LOGID_START = @@IDENTITY;

--Do not do anything if there are pending records from Salesforce
IF NOT EXISTS(SELECT 1 FROM [salesforce].[mapping_Account] WHERE [NAMERECORD_NAMEID] IS NULL)
	BEGIN;
	--Retrieve record type by api name
	SELECT	@RecordTypeID =   [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE [DEVELOPERNAME] = 'PersonAccount' AND SOBJECTTYPE = 'Account';
	--Retrieve deltas
	SELECT @STARTVAL_NAME	= CAST([Setting_Value] AS BIGINT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_NAME_NAME;
	SELECT @STARTVAL_NADRNA	= CAST([Setting_Value] AS BIGINT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_NAME_EXTN_NADRNA;
	SELECT @STARTVAL_NALK	= CAST([Setting_Value] AS BIGINT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_NAME_NALK;
	SELECT @STARTVAL_ADDR	= CAST([Setting_Value] AS BIGINT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_NAME_ADDR;
	SELECT @STARTVAL_PHONE	= CAST([Setting_Value] AS datetime2) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_NAME_PHONENUM;
	SELECT @ENDVAL_NAME		= MAX([ROW_ID]) FROM [EDW_DataLake].[lifepro_v].[NAME_BusKey_Vw];
	SELECT @ENDVAL_NADRNA	= MAX([ROW_ID]) FROM [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Vw];
	SELECT @ENDVAL_NALK		= MAX([ROW_ID]) FROM [EDW_DataLake].[lifepro_v].[NALK_Vw];		
	SELECT @ENDVAL_ADDR		= MAX([ROW_ID]) FROM [EDW_DataLake].[lifepro_v].[ADDR_Vw];		
	SELECT @ENDVAL_PHONE	= MAX(COALESCE([MODIFIED_DT],[CREATED_DT])) FROM [salesforce].[PhoneNumber];	
	


	/* START: Create temporary tables.*/
	IF (1=1)
		BEGIN;
		--Name Ids - this table will contain all changed business keys for all dependencies
		IF OBJECT_ID (N'work.tmp_Account_Person_Bus_Keys', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [work].[tmp_Account_Person_Bus_Keys];
			END;
		ELSE
			BEGIN;
			CREATE	TABLE [work].[tmp_Account_Person_Bus_Keys]
				([Name_ID]					INT NOT NULL PRIMARY KEY CLUSTERED);
			END;

		IF OBJECT_ID (N'work.tmp_Account_Person_NADRNA', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [work].[tmp_Account_Person_NADRNA];
			END;
		ELSE
			BEGIN;
			CREATE	TABLE [work].[tmp_Account_Person_NADRNA]
				( NAME_ID int not null primary key
				, [EXTENSIONRECORDNADR_FILEEXTENSION] varchar(4) NULL
				, [EXTENSIONRECORDNADR_SUBTYPERECORD] varchar(2) NULL
				, [EXTENSIONRECORDNADR_VERSIONID] BIGINT NULL
				, Client_Passcode__c varchar(20) NULL
				, Paperless_Annual_Statement__c bit NULL
				, Paperless_11_Month_Summary__c bit NULL);
		    END;
			
		IF OBJECT_ID (N'work.tmp_Account_Person_EmailAddressIds_NALK', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [work].[tmp_Account_Person_EmailAddressIds_NALK];
			END;
		ELSE
			BEGIN;
			CREATE	TABLE [work].[tmp_Account_Person_EmailAddressIds_NALK]
			( NAME_ID int NOT NULL PRIMARY KEY CLUSTERED
			, ADDRESS_ID int NULL
			, EFFECTIVE_DATE datetime2(7) NULL
			, EMAIL varchar(105) NULL
			, NALK_ADDRESS_CODE VARCHAR(3) NULL
			, NALK_COMPANY_CODE VARCHAR(2) NULL
			, NALK_POLICY_NUMBER VARCHAR(12) NULL
			, NALK_VERSION_ID BIGINT NULL
			, ADDR_VERSION_ID BIGINT NULL);
		    END;

		END;
	/* END: Create temporary tables.*/

	/* START: Refresh name IDs for specific Relate Code and Name Format Code.*/
	IF (1=1)
		BEGIN;

		--Refresh NameIDs in scope
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountPerson:Refresh Name IDs');
		SELECT @LOGID = @@IDENTITY;

		--This will insert new NAME_IDs to the account person list
		;WITH PRS AS
		(SELECT MIN(NAME_CURR.NAME_ID) AS NAME_ID
			FROM	[EDW_DataLake].[lifepro_v].[RELA_Curr_Vw] AS RELA_CURR
					INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_BusKey_Vw] AS NAME_CURR ON
						RELA_CURR.NAME_ID = NAME_CURR.NAME_ID
			WHERE	RELA_CURR.RELATE_CODE IN ('PO', 'O1')
					AND NAME_CURR.NAME_FORMAT_CODE = 'I'
					AND NAME_CURR.SOC_SEC_NUMBER <> 0
			GROUP BY NAME_CURR.SOC_SEC_NUMBER
			UNION
			SELECT	NAME_CURR.NAME_ID
			FROM	[EDW_DataLake].[lifepro_v].[RELA_Curr_Vw] AS RELA_CURR
					INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_BusKey_Vw] AS NAME_CURR ON
						RELA_CURR.NAME_ID = NAME_CURR.NAME_ID
			WHERE	RELA_CURR.RELATE_CODE IN ('PO', 'O1')
					AND NAME_CURR.NAME_FORMAT_CODE = 'I'
					AND NAME_CURR.SOC_SEC_NUMBER = 0
			GROUP BY  NAME_CURR.NAME_ID)
		INSERT [work].[stage_sf_first_name_id]
			([Name_ID])
		SELECT Name_ID
		FROM PRS
		WHERE NOT EXISTS(SELECT 1 FROM [work].[stage_sf_first_name_id] DEST WHERE DEST.[Name_ID] = PRS.[NAME_ID])							--only insert new name ids
			AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_Business_first_name_id] AS BS WHERE BS.[NAME_ID] = PRS.[NAME_ID])		--not in business accnt
			AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_brokerdealer_first_name_id] AS BS WHERE BS.[NAME_ID] = PRS.[NAME_ID])	--not in broker dealer accnt
			AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_Institution_first_name_id] AS INST WHERE INST.[NAME_ID]= PRS.[NAME_ID])	--not in institution
			AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_NMO_first_name_id] AS NMO WHERE NMO.[NAME_ID] =  PRS.[NAME_ID])			--not in nmo
			AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_Wholesaler_first_name_id] AS WS WHERE WS.[NAME_ID] =  PRS.[NAME_ID]);	--not in wholesaler
		--Logging
		SELECT @ROWS = @@ROWCOUNT;
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
		END;
	/* END: Refresh name IDs for specific Relate Code and Name Format Code.*/

	/* START: Populate temporary tables.*/
	IF (1=1)
		BEGIN;
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountPerson:Get new and changed records');
		SELECT @LOGID = @@IDENTITY;
	
		--Name record
		IF @STARTVAL_NAME < @ENDVAL_NAME
			BEGIN;
			INSERT [work].[tmp_Account_Person_Bus_Keys]
				([Name_ID])
			SELECT src.[NAME_ID]
			FROM	[EDW_DataLake].[lifepro_v].[NAME_Vw]	AS src
			WHERE	EXISTS(SELECT 1 FROM [work].[stage_sf_first_name_id] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = src.NAME_ID)	-- Only Name IDs in scope
				AND src.Row_ID >	@STARTVAL_NAME																						-- Only changed records
				AND src.Row_ID <=	@ENDVAL_NAME
			GROUP BY NAME_ID;
			END;

		--Pick all new or changed Name Ids from EXTN_NADRNA_Curr_Vw
		IF @STARTVAL_NADRNA < @ENDVAL_NADRNA
			BEGIN;
			WITH LAST_NANDRA (RN, NAME_ID, ROW_ID)
				AS
				(SELECT ROW_NUMBER() OVER (PARTITION BY SRC.NAME_ID ORDER BY SRC.[DATE] DESC, SRC.[TIME] DESC)	AS RN --THIS WILL GIVE US ORDER OF THE DATE AND TIME RECORD FOR EACH NAME_ID
					, SRC.NAME_ID
					, SRC.ROW_ID
				FROM [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Vw] AS SRC
				WHERE EXISTS (SELECT 1 FROM [work].[stage_sf_first_name_id] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = SRC.NAME_ID) --Only records in scope
				)
			INSERT	 [work].[tmp_Account_Person_Bus_Keys]
					([Name_ID])
			SELECT  LAST_NANDRA.NAME_ID
			FROM LAST_NANDRA
			WHERE	RN = 1											--Only last available record for last Name ID
				AND NOT EXISTS(SELECT 1 FROM  [work].[tmp_Account_Person_Bus_Keys] AS DEST WHERE DEST.[Name_id] = LAST_NANDRA.[Name_ID])	--Exclude name IDs that are already in the table
				AND (LAST_NANDRA.[Row_ID] > @STARTVAL_NADRNA
					AND LAST_NANDRA.[Row_ID] <=@ENDVAL_NADRNA)		--Only changed or new records
			END;
		--Pick all new or changed Email addresses
		IF (@STARTVAL_ADDR<@ENDVAL_ADDR) OR (@STARTVAL_NALK <@ENDVAL_NALK)
			BEGIN;
			INSERT	[work].[tmp_Account_Person_Bus_Keys]
					([Name_ID])
			SELECT	NALK.[Name_id]
			FROM	[EDW_DataLake].[lifepro_v].[NALK_Vw] AS NALK 
					LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[ADDR_Vw] AS ADDR ON
						ADDR.[ADDRESS_ID] = NALK.ADDRESS_ID
			WHERE	NOT EXISTS(SELECT 1 FROM [work].[tmp_Account_Person_Bus_Keys] AS DEST WHERE DEST.[NAME_ID] = NALK.[NAME_ID])
					AND EXISTS(SELECT 1 FROM [work].[stage_sf_first_name_id] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = NALK.NAME_ID)
					AND 
						((NALK.[Row_id] > @STARTVAL_NALK
						AND NALK.[Row_id] <=@ENDVAL_NALK)
						OR
						(ADDR.[Row_id] > @STARTVAL_ADDR
						AND ADDR.[Row_ID] <= @ENDVAL_ADDR))
			GROUP BY NALK.[Name_id];
		
			END;
		--Pick all name id-s that had phone numbers changed
		IF @STARTVAL_PHONE < @ENDVAL_PHONE
			BEGIN;
			INSERT	[work].[tmp_Account_Person_Bus_Keys]
					([Name_ID])
			SELECT	[NameID]
			FROM	[salesforce].[PhoneNumber] AS SRC
			WHERE	NOT EXISTS (SELECT 1 FROM [work].[tmp_Account_Person_Bus_Keys] AS DEST WHERE DEST.Name_ID = SRC.NameID)
				AND EXISTS (SELECT 1 FROM  [work].[stage_sf_first_name_id] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = SRC.NameID)
				AND COALESCE(SRC.[MODIFIED_DT], SRC.[CREATED_DT]) > @STARTVAL_PHONE
				AND COALESCE(SRC.[MODIFIED_DT], SRC.[CREATED_DT]) <=@ENDVAL_PHONE;
			END;

		
		--Populate Extension records from NADRNA
	   	WITH NADRNA AS
		(SELECT ROW_NUMBER() OVER (PARTITION BY EXTN_NADRNA.NAME_ID ORDER BY EXTN_NADRNA.[DATE] DESC, EXTN_NADRNA.[TIME] DESC)	AS RN --THIS WILL GIVE US ORDER OF THE DATE AND TIME RECORD FOR EACH NAME_ID
				,EXTN_NADRNA.[NAME_ID]			AS	[EXTENSIONRECORDNADR_NAMEID]
				,EXTN_NADRNA.[FILE_EXTENTION]	AS  [EXTENSIONRECORDNADR_FILEEXTENSION]
				,EXTN_NADRNA.[SUB_TYPE_RECORD]	AS  [EXTENSIONRECORDNADR_SUBTYPERECORD]
				,EXTN_NADRNA.[VERSION_ID]		AS	[EXTENSIONRECORDNADR_VERSIONID]
				, ISNULL(TRIM(EXTN_NADRNA.NADR_PASSWORD) + TRIM(EXTN_NADRNA.NADR_PASSWORD2), '')	AS Client_Passcode__c
				, CASE TRIM(EXTN_NADRNA.PPRLESS_ANN_STMT) WHEN 'Y' THEN 1 ELSE 0 END		AS Paperless_Annual_Statement__c
				, CASE TRIM(EXTN_NADRNA.PPRLESS_11_MONTH) WHEN 'Y' THEN 1 ELSE 0 END		AS Paperless_11_Month_Summary__c
		FROM [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Curr_Vw] AS EXTN_NADRNA
		WHERE EXISTS (SELECT 1 FROM [work].[tmp_Account_Person_Bus_Keys] AS TMP WHERE TMP.Name_ID = EXTN_NADRNA.[NAME_ID])
		)

		INSERT INTO [work].[tmp_Account_Person_NADRNA]
		 (   NAME_ID
		   , [EXTENSIONRECORDNADR_FILEEXTENSION]
		   , [EXTENSIONRECORDNADR_SUBTYPERECORD]
		   , [EXTENSIONRECORDNADR_VERSIONID]
		   , [Client_Passcode__c]
		   , [Paperless_Annual_Statement__c]
		   , [Paperless_11_Month_Summary__c])

		SELECT  [EXTENSIONRECORDNADR_NAMEID]
		       ,[EXTENSIONRECORDNADR_FILEEXTENSION]	 
			   ,[EXTENSIONRECORDNADR_SUBTYPERECORD]				
			   ,[EXTENSIONRECORDNADR_VERSIONID]	
			   ,Client_Passcode__c
			   ,Paperless_Annual_Statement__c
			   ,Paperless_11_Month_Summary__c
		FROM NADRNA
		WHERE RN = 1;

		--Retrieve emails
		;WITH EmailList AS
		(SELECT ROW_NUMBER() OVER (PARTITION BY NALK.NAME_ID ORDER BY COALESCE(NALK.EFFECTIVE_DATE, '1/1/1753') DESC) AS RN
			, NALK.NAME_ID
			, NALK.ADDRESS_ID
			, NALK.EFFECTIVE_DATE
			, LEFT(RTRIM(ADDR.ADDR_LINE_1) + RTRIM(ADDR.ADDR_LINE_2) + RTRIM(ADDR.ADDR_LINE_3) + ';', CHARINDEX(';', RTRIM(ADDR.ADDR_LINE_1) + RTRIM(ADDR.ADDR_LINE_2) + RTRIM(ADDR.ADDR_LINE_3) + ';') - 1) AS EMAIL
			, NALK.ADDRESS_CODE
			, NALK.COMPANY_CODE
			, NALK.POLICY_NUMBER
			, NALK.VERSION_ID AS NALK_VERSION_ID
			, ADDR.VERSION_ID AS ADDR_VERSION_ID
		FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] NALK 
		INNER JOIN [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw] AS ADDR ON 
					NALK.ADDRESS_ID = ADDR.ADDRESS_ID 
		WHERE ADDRESS_TYPE = 'E'
			AND EXISTS (SELECT 1 FROM [work].[tmp_Account_Person_Bus_Keys] AS TMP WHERE TMP.[Name_ID]= NALK.[NAME_ID])
		--AND ADDRESS_CODE = 'BUS'
		)
		INSERT INTO [work].[tmp_Account_Person_EmailAddressIds_NALK]
				( NAME_ID
				, ADDRESS_ID
				, EFFECTIVE_DATE
				, EMAIL
				, NALK_ADDRESS_CODE
				, NALK_COMPANY_CODE
				, NALK_POLICY_NUMBER
				, NALK_VERSION_ID
				, ADDR_VERSION_ID
				)

		SELECT  EmailList.NAME_ID
			, EmailList.ADDRESS_ID	 
			, EmailList.EFFECTIVE_DATE				
			, EmailList.EMAIL	
			, EmailList.ADDRESS_CODE
			, EmailList.COMPANY_CODE
			, EmailList.POLICY_NUMBER
			, EmailList.NALK_VERSION_ID
			, EmailList.ADDR_VERSION_ID
		FROM EmailList
		WHERE RN = 1;	

		----Get Row Count 
		SELECT @Rows = SUM(st.row_count) FROM    sys.dm_db_partition_stats st WHERE  object_name(object_id) = 'tmp_Account_Person_Bus_Keys' AND OBJECT_SCHEMA_NAME(OBJECT_ID) = 'work' AND (index_id < 2);
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
		END;
	/* END: Populate temporary tables.*/
	/* START: Refresh mapping table*/
	IF (1=1)
		BEGIN;
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountPerson:Update Mappings');
		SELECT @LOGID = @@IDENTITY;

		UPDATE DEST
		SET	[MODIFIED_DT]							= CURRENT_TIMESTAMP
			, [NAMERECORD_VERSIONID]				= COALESCE(NAME_VW.[VERSION_ID],0)
			, [EXTENSIONRECORDNADR_FILEEXTENSION]	= NADRNA.[EXTENSIONRECORDNADR_FILEEXTENSION]
			, [EXTENSIONRECORDNADR_SUBTYPERECORD]	= NADRNA.[EXTENSIONRECORDNADR_SUBTYPERECORD]
			, [EXTENSIONRECORDNADR_NAMEID]			= NADRNA.[NAME_ID]
			, [EXTENSIONRECORDNADR_VERSIONID]		= COALESCE(NADRNA.[EXTENSIONRECORDNADR_VERSIONID],0)
			, [NAMERECORD_SSN]						= NAME_VW.[BUSINESS_TAX_CODE]
			, [ADDR_EMAIL_ADDRESSID]				= EMAIL.[ADDRESS_ID]
			, [ADDR_EMAIL_VERSIONID]				= COALESCE(EMAIL.[ADDR_VERSION_ID],0)
			, [NALK_EMAIL_ADDRESSID]				= EMAIL.ADDRESS_ID
			, [NALK_EMAIL_EFFECTIVEDATE]			= EMAIL.EFFECTIVE_DATE
			, [NALK_EMAIL_ADDRESSCODE]				= EMAIL.NALK_ADDRESS_CODE
			, [NALK_EMAIL_COMPANYCODE]				= EMAIL.NALK_COMPANY_CODE
			, [NALK_EMAIL_POLICYNUMBER]				= EMAIL.NALK_POLICY_NUMBER
			, [NALK_EMAIL_VERSIONID]				= COALESCE(EMAIL.[NALK_VERSION_ID],0)
			, [NALK_PHONE_NAMEID]					= PHONE.[NameID]
			, [NALK_PHONE_ADDRESSID]				= PHONE.[ADDRESS_ID]
			, [NALK_PHONE_EFFECTIVEDATE]			= PHONE.[EFFECTIVE_DATE]
			, [NALK_PHONE_ADDRESSCODE]				= PHONE.[ADDRESS_CODE]
			, [NALK_PHONE_COMPANYCODE]				= PHONE.[COMPANY_CODE]
			, [NALK_PHONE_POLICYNUMBER]				= PHONE.[POLICY_NUMBER]
			, [NALK_PHONE_VERSIONID]				= COALESCE(PHONE.[VERSION_ID],0)
			, [DELETE_FLAG]							= CASE NAME_VW.[DXType] WHEN 'D' THEN 1 ELSE 0 END
		FROM [salesforce].[mapping_Account] AS DEST 
			INNER JOIN [work].[tmp_Account_Person_Bus_Keys] AS TMP ON
				TMP.Name_ID = DEST.NAMERECORD_NAMEID
				AND DEST.RECORDTYPEID = @RecordTypeID
			INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_BUSKEY_Vw] AS NAME_VW ON
				NAME_VW.[NAME_ID] = TMP.[Name_ID]
			LEFT OUTER JOIN [work].[tmp_Account_Person_NADRNA] AS NADRNA ON
			    NADRNA.[NAME_ID] = TMP.[Name_ID]
			LEFT OUTER JOIN [work].[tmp_Account_Person_EmailAddressIds_NALK] AS EMAIL ON
				EMAIL.NAME_ID = TMP.[NAME_ID]
			LEFT OUTER JOIN [salesforce].[PhoneNumber] AS PHONE ON
				PHONE.[NameID] = TMP.Name_ID;
		
		SELECT @ROWS = @@ROWCOUNT;    
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;    
	
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountPerson:Insert Mappings');    
		SELECT @LOGID = @@IDENTITY;  
	
	
		INSERT [salesforce].[mapping_Account]
			([CREATED_DT]
			, [NAMERECORD_NAMEID]
			, [NAMERECORD_VERSIONID]
			, [EXTENSIONRECORDNADR_FILEEXTENSION]
			, [EXTENSIONRECORDNADR_SUBTYPERECORD]
			, [EXTENSIONRECORDNADR_NAMEID]
			, [EXTENSIONRECORDNADR_VERSIONID]
			, [NAMERECORD_SSN]
			, [RECORDTYPEID]
			, [ADDR_EMAIL_ADDRESSID]
			, [ADDR_EMAIL_VERSIONID]
			, [NALK_EMAIL_ADDRESSID]
			, [NALK_EMAIL_EFFECTIVEDATE]
			, [NALK_EMAIL_ADDRESSCODE]
			, [NALK_EMAIL_COMPANYCODE]
			, [NALK_EMAIL_POLICYNUMBER]
			, [NALK_EMAIL_VERSIONID]
			, [NALK_PHONE_NAMEID]
			, [NALK_PHONE_ADDRESSID]
			, [NALK_PHONE_EFFECTIVEDATE]
			, [NALK_PHONE_ADDRESSCODE]
			, [NALK_PHONE_COMPANYCODE]
			, [NALK_PHONE_POLICYNUMBER]
			, [NALK_PHONE_VERSIONID]
			, [DELETE_FLAG])
		SELECT
			CURRENT_TIMESTAMP
			,[NAMERECORD_NAMEID]					= NAME_VW.[NAME_ID]
			, [NAMERECORD_VERSIONID]				= COALESCE(NAME_VW.[VERSION_ID],0)
			, [EXTENSIONRECORDNADR_FILEEXTENSION]	= NADRNA.[EXTENSIONRECORDNADR_FILEEXTENSION]
			, [EXTENSIONRECORDNADR_SUBTYPERECORD]	= NADRNA.[EXTENSIONRECORDNADR_SUBTYPERECORD]
			, [EXTENSIONRECORDNADR_NAMEID]			= NADRNA.[NAME_ID]
			, [EXTENSIONRECORDNADR_VERSIONID]		= COALESCE(NADRNA.[EXTENSIONRECORDNADR_VERSIONID],0)
			, [NAMERECORD_SSN]						= NAME_VW.[BUSINESS_TAX_CODE]
			, [RECORDTYPEID]						= @RecordTypeID
			, [ADDR_EMAIL_ADDRESSID]				= EMAIL.[ADDRESS_ID]
			, [ADDR_EMAIL_VERSIONID]				= COALESCE(EMAIL.[ADDR_VERSION_ID],0)
			, [NALK_EMAIL_ADDRESSID]				= EMAIL.ADDRESS_ID
			, [NALK_EMAIL_EFFECTIVEDATE]			= EMAIL.EFFECTIVE_DATE
			, [NALK_EMAIL_ADDRESSCODE]				= EMAIL.NALK_ADDRESS_CODE
			, [NALK_EMAIL_COMPANYCODE]				= EMAIL.NALK_COMPANY_CODE
			, [NALK_EMAIL_POLICYNUMBER]				= EMAIL.NALK_POLICY_NUMBER
			, [NALK_EMAIL_VERSIONID]				= COALESCE(EMAIL.[NALK_VERSION_ID],0)
			, [NALK_PHONE_NAMEID]					= PHONE.[NameID]
			, [NALK_PHONE_ADDRESSID]				= PHONE.[ADDRESS_ID]
			, [NALK_PHONE_EFFECTIVEDATE]			= PHONE.[EFFECTIVE_DATE]
			, [NALK_PHONE_ADDRESSCODE]				= PHONE.[ADDRESS_CODE]
			, [NALK_PHONE_COMPANYCODE]				= PHONE.[COMPANY_CODE]
			, [NALK_PHONE_POLICYNUMBER]				= PHONE.[POLICY_NUMBER]
			, [NALK_PHONE_VERSIONID]				= COALESCE(PHONE.[VERSION_ID],0)
			, [DELETE_FLAG]							= CASE NAME_VW.[DXType] WHEN 'D' THEN 1 ELSE 0 END
		FROM [work].[tmp_Account_Person_Bus_Keys] AS TMP 
			INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_BUSKEY_Vw] AS NAME_VW ON
				NAME_VW.[NAME_ID] = TMP.[Name_ID]
			LEFT OUTER JOIN [work].[tmp_Account_Person_NADRNA] AS NADRNA ON
				NADRNA.[NAME_ID] = TMP.[Name_ID]
			LEFT OUTER JOIN [work].[tmp_Account_Person_EmailAddressIds_NALK] AS EMAIL ON
					EMAIL.NAME_ID = TMP.[NAME_ID]
				LEFT OUTER JOIN [salesforce].[PhoneNumber] AS PHONE ON
					PHONE.[NameID] = TMP.Name_ID
		WHERE NOT EXISTS(SELECT 1 FROM [salesforce].[mapping_Account] AS DEST WHERE DEST.NAMERECORD_NAMEID = TMP.Name_ID);
		SELECT @ROWS = @@ROWCOUNT;
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
		END; 
	/* END: Refresh mapping table*/
	/* START: Refresh staging table*/
	IF (1=1)
		BEGIN;
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountPerson:Update staging');
		SELECT @LOGID = @@IDENTITY;
		--If previous execution was successful, this table will be empty.
		
		UPDATE	DEST
		SET		[FirstName]								= CASE WHEN COALESCE(TRIM(NAME_VW.INDIVIDUAL_LAST),'') = '' AND COALESCE(TRIM(NAME_VW.INDIVIDUAL_FIRST),'') <> '' THEN ''
		                                                       ELSE TRIM(NAME_VW.INDIVIDUAL_FIRST) 
														  END
				, [LastName]							= CASE WHEN COALESCE(TRIM(NAME_VW.INDIVIDUAL_LAST),'') = '' AND COALESCE(TRIM(NAME_VW.INDIVIDUAL_FIRST),'') <> '' THEN TRIM(NAME_VW.INDIVIDUAL_FIRST)
															   ELSE TRIM(NAME_VW.INDIVIDUAL_LAST)
														  END
				, [OwnerId]								= ''
				, [MiddleName]							= TRIM(NAME_VW.INDIVIDUAL_MIDDLE)
				, [Phone]								= phone.PhoneNumber
				, [PersonEmail]							= EmailAddressIds.EMAIL
				, [LifePro_Last_Modified_DateTime__c]	= MPG.[VERSIONID]
				, [Is_Deceased__c]						= CASE TRIM(NAME_VW.DECEASED_FLAG) WHEN 'Y' THEN 1 ELSE 0 END
				, [Client_Passcode__c]					= nadrna.Client_Passcode__c
				, [Paperless_Annual_Statement__c]		= nadrna.Paperless_Annual_Statement__c
				, [Paperless_11_Month_Summary__c]		= nadrna.Paperless_11_Month_Summary__c
				, [Social_Security_Number__c]			= STUFF(STUFF(RIGHT('000000000' + CONVERT(varchar(11), NAME_VW.SOC_SEC_NUMBER), 9), 4, 0, '-'), 7, 0, '-')
				, [Gender__c]							= NAME_VW.SEX_CODE
				, [Date_of_Birth__c]					= CASE WHEN NAME_VW.DATE_OF_BIRTH < '1/1/1753' OR NAME_VW.DATE_OF_BIRTH >'12/31/4000' THEN NULL ELSE NAME_VW.DATE_OF_BIRTH END
				, [Tax_Status__c]						= NAME_VW.TAX_STATUS
				, [Tax_Witholding_Option__c]			= NAME_VW.TAX_WITHHOLDING_FLAG
				, [Modified_dt]							= CURRENT_TIMESTAMP
				, [LifePro_NameID]						= NAME_VW.NAME_ID
				, [Reject_Flag]							= CASE WHEN  COALESCE(TRIM(NAME_VW.INDIVIDUAL_LAST),'') = '' AND COALESCE(TRIM(NAME_VW.INDIVIDUAL_FIRST),'') <> '' THEN 1							--Empty last name
				                                            WHEN COALESCE(TRIM(NAME_VW.INDIVIDUAL_LAST),'') = '' AND COALESCE(TRIM(NAME_VW.INDIVIDUAL_FIRST),'') = '' THEN 2  --Empty First and Last Name
															WHEN NAME_VW.DATE_OF_BIRTH < '1/1/1753' OR NAME_VW.DATE_OF_BIRTH >'12/31/4000' THEN 1	--Date is out of range
															ELSE 0
															END
				, [Reject_Dt]							= CASE WHEN  COALESCE(TRIM(NAME_VW.INDIVIDUAL_LAST),'') = '' AND COALESCE(TRIM(NAME_VW.INDIVIDUAL_FIRST),'') <> '' THEN CURRENT_TIMESTAMP			--Empty last name
				                                            WHEN COALESCE(TRIM(NAME_VW.INDIVIDUAL_LAST),'') = '' AND COALESCE(TRIM(NAME_VW.INDIVIDUAL_FIRST),'') = '' THEN CURRENT_TIMESTAMP  --Empty First and Last Name
															WHEN NAME_VW.DATE_OF_BIRTH < '1/1/1753' OR NAME_VW.DATE_OF_BIRTH >'12/31/4000' THEN CURRENT_TIMESTAMP	--Date is out of range
															ELSE NULL
															END
				, [Reject_Reason]						=CASE WHEN  COALESCE(TRIM(NAME_VW.INDIVIDUAL_LAST),'') = '' AND COALESCE(TRIM(NAME_VW.INDIVIDUAL_FIRST),'') <> '' THEN 'Last name is not available' --Empty last name
				                                            WHEN COALESCE(TRIM(NAME_VW.INDIVIDUAL_LAST),'') = '' AND COALESCE(TRIM(NAME_VW.INDIVIDUAL_FIRST),'') = '' THEN 'First and Last name not available'  --Empty First and Last Name
															WHEN NAME_VW.DATE_OF_BIRTH < '1/1/1753' OR NAME_VW.DATE_OF_BIRTH >'12/31/4000' THEN 'Invalid date of birth'	--Date is out of range
															ELSE NULL
															END
				, [Delete_Flag]							= MPG.[DELETE_FLAG]
				, [Salesforce_ID]						= MPG.[SALESFORCE_ID]
		FROM	[salesforce].[Account_Person] AS DEST 
				INNER JOIN [work].[tmp_Account_Person_Bus_Keys] AS TMP ON
					DEST.[LifePro_NameID] = TMP.[NAME_ID]
				INNER JOIN [salesforce].[mapping_Account] AS MPG ON
					MPG.[ID] = CAST(DEST.[LifePro_ID__c] AS  BIGINT)
					AND MPG.RECORDTYPEID = @RecordTypeID
				INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_BusKey_Vw] AS NAME_VW ON
					NAME_VW.[Name_ID] = TMP.[Name_ID]
				LEFT OUTER JOIN [work].[tmp_Account_Person_EmailAddressIds_NALK] AS EmailAddressIds ON
				    EmailAddressIds.[Name_id] = TMP.[Name_id]
				LEFT OUTER JOIN [EDW_Outbound].[salesforce].[PhoneNumber] AS phone ON
					phone.[Nameid] = TMP.[NAME_ID]
		        LEFT OUTER JOIN [work].[tmp_Account_Person_NADRNA] AS NADRNA ON
			        NADRNA.[NAME_ID] = TMP.[Name_ID]
		WHERE (MPG.VERSIONID >= COALESCE(MPG.SALESFORCE_DT,0)
				OR MPG.salesforce_dt IS NULL);
			
			
		SELECT @ROWS = @@ROWCOUNT;
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountPerson:Insert staging');
		SELECT @LOGID = @@IDENTITY;
		--Insert all delta records into the staging table	
		
		INSERT	[salesforce].[Account_Person]	
			( [LifePro_ID__c]
			, [LifePro_Last_Modified_DateTime__c]
			, [Created_dt]
			, [FirstName]
			, [LastName]
			, [MiddleName]
			, [Phone]
			, [OwnerId]
			, [RecordTypeId]
			, [PersonEmail]
			, [Is_Deceased__c]
			, [Client_Passcode__c]
			, [Paperless_Annual_Statement__c]
			, [Paperless_11_Month_Summary__c]
			, [Social_Security_Number__c]
			, [Gender__c]
			, [Date_of_Birth__c]
			, [Tax_Status__c]
			, [Tax_Witholding_Option__c]
			, [LifePro_NameID]
			, [Reject_Flag]
			, [Reject_Dt]
			, [Reject_Reason]
			, [Delete_Flag]
			, [Salesforce_ID])
		SELECT CAST(MPG.[ID] AS NVARCHAR(20))
				, MPG.[VERSIONID]
				, CURRENT_TIMESTAMP
				, [FirstName]							= CASE WHEN COALESCE(TRIM(NAME_VW.INDIVIDUAL_LAST),'') = '' AND COALESCE(TRIM(NAME_VW.INDIVIDUAL_FIRST),'') <> '' THEN ''
		                                                       ELSE TRIM(NAME_VW.INDIVIDUAL_FIRST) 
														  END
				, [LastName]							= CASE WHEN COALESCE(TRIM(NAME_VW.INDIVIDUAL_LAST),'') = '' AND COALESCE(TRIM(NAME_VW.INDIVIDUAL_FIRST),'') <> '' THEN TRIM(NAME_VW.INDIVIDUAL_FIRST)
															   ELSE TRIM(NAME_VW.INDIVIDUAL_LAST) 
														  END
				, [MiddleName]							= TRIM(NAME_VW.INDIVIDUAL_MIDDLE)
				, [Phone]								= phone.PhoneNumber
				, [OwnerId]								= ''
				, [RecordTypeId]						= @RecordTypeID
				, [PersonEmail]							= EmailAddressIds.EMAIL
				, [Is_Deceased__c]						= CASE TRIM(NAME_VW.DECEASED_FLAG) WHEN 'Y' THEN 1 ELSE 0 END
				, [Client_Passcode__c]					= nadrna.Client_Passcode__c
				, [Paperless_Annual_Statement__c]		= nadrna.Paperless_Annual_Statement__c
				, [Paperless_11_Month_Summary__c]		= nadrna.Paperless_11_Month_Summary__c
				, [Social_Security_Number__c]			= CASE WHEN TRIM(NAME_VW.[BUSINESS_TAX_CODE])='0' THEN '0' 
																ELSE CONCAT(SUBSTRING(NAME_VW.[BUSINESS_TAX_CODE],1,3),'-',
																	SUBSTRING(NAME_VW.[BUSINESS_TAX_CODE],4,2),'-',
																	SUBSTRING(NAME_VW.[BUSINESS_TAX_CODE],6,4)) --UNLINE SSN, BUS TAX CODE HAS THE FULL STRING
														END
				, [Gender__c]							= NAME_VW.SEX_CODE
				, [Date_of_Birth__c]					= CASE WHEN NAME_VW.DATE_OF_BIRTH < '1/1/1753' OR NAME_VW.DATE_OF_BIRTH >'12/31/4000' THEN NULL ELSE NAME_VW.DATE_OF_BIRTH END
				, [Tax_Status__c]						= NAME_VW.TAX_STATUS
				, [Tax_Witholding_Option__c]			= NAME_VW.TAX_WITHHOLDING_FLAG
				, [LifePro_NameID]						= NAME_VW.NAME_ID
				, [Reject_Flag]							= CASE WHEN  COALESCE(TRIM(NAME_VW.INDIVIDUAL_LAST),'') = '' AND COALESCE(TRIM(NAME_VW.INDIVIDUAL_FIRST),'') <> '' THEN 1  --Empty last name
				                                            WHEN COALESCE(TRIM(NAME_VW.INDIVIDUAL_LAST),'') = '' AND COALESCE(TRIM(NAME_VW.INDIVIDUAL_FIRST),'') = '' THEN 2  --Empty First and Last Name
															WHEN NAME_VW.DATE_OF_BIRTH < '1/1/1753' OR NAME_VW.DATE_OF_BIRTH >'12/31/4000' THEN 1	--Date is out of range
															ELSE 0
															END
				, [Reject_Dt]							= CASE WHEN  COALESCE(TRIM(NAME_VW.INDIVIDUAL_LAST),'') = '' AND COALESCE(TRIM(NAME_VW.INDIVIDUAL_FIRST),'') <> '' THEN CURRENT_TIMESTAMP	--Empty last name
				                                            WHEN COALESCE(TRIM(NAME_VW.INDIVIDUAL_LAST),'') = '' AND COALESCE(TRIM(NAME_VW.INDIVIDUAL_FIRST),'') = '' THEN CURRENT_TIMESTAMP  --Empty First and Last Name
															WHEN NAME_VW.DATE_OF_BIRTH < '1/1/1753' OR NAME_VW.DATE_OF_BIRTH >'12/31/4000' THEN CURRENT_TIMESTAMP	--Date is out of range
															ELSE NULL
															END
				, [Reject_Reason]						=CASE WHEN  COALESCE(TRIM(NAME_VW.INDIVIDUAL_LAST),'') = '' AND COALESCE(TRIM(NAME_VW.INDIVIDUAL_FIRST),'') <> '' THEN 'Last name is not available' --Empty last name
				                                            WHEN COALESCE(TRIM(NAME_VW.INDIVIDUAL_LAST),'') = '' AND COALESCE(TRIM(NAME_VW.INDIVIDUAL_FIRST),'') = '' THEN 'First and Last name not available'  --Empty First and Last Name
															WHEN NAME_VW.DATE_OF_BIRTH < '1/1/1753' OR NAME_VW.DATE_OF_BIRTH >'12/31/4000' THEN 'Invalid date of birth'	--Date is out of range
															ELSE NULL
															END
				, [Delete_Flag]							= MPG.[DELETE_FLAG]
				, [Salesforce_ID]						= MPG.[SALESFORCE_ID]
		FROM	[work].[tmp_Account_Person_Bus_Keys] AS TMP 
				INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_BusKey_Vw] AS NAME_VW ON
					NAME_VW.[Name_ID] = TMP.[Name_ID]
				INNER JOIN [salesforce].[mapping_Account] AS MPG ON
					MPG.[NAMERECORD_NAMEID] = TMP.[Name_ID]
					AND MPG.RECORDTYPEID = @RecordTypeID
				LEFT OUTER JOIN [work].[tmp_Account_Person_EmailAddressIds_NALK] AS EmailAddressIds ON
				    EmailAddressIds.[Name_id] = TMP.[Name_id]
				LEFT OUTER JOIN [EDW_Outbound].[salesforce].[PhoneNumber] AS phone ON
					phone.[Nameid] = TMP.[NAME_ID]  
				LEFT OUTER JOIN [work].[tmp_Account_Person_NADRNA] AS NADRNA ON
			        NADRNA.[NAME_ID] = TMP.[Name_ID]
		WHERE	NOT EXISTS(SELECT 1 FROM [salesforce].[Account_Person] AS DEST WHERE DEST.[LifePro_ID__c] = CAST(MPG.[ID] AS NVARCHAR(20)))
				AND  (MPG.VERSIONID >= COALESCE(MPG.SALESFORCE_DT,0)
					OR MPG.salesforce_dt IS NULL);
				
		SELECT @ROWS = @@ROWCOUNT;
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
		END; 
	/* END: Populate staging table.*/
	/* START: Add invalid email check */
	IF (1=1)
		BEGIN;
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountPerson:Reject emails');
		SELECT @LOGID = @@IDENTITY;
		;WITH INVALID_EMAILS AS
		(SELECT [PersonEmail] AS [PersonEmail]
			, [Reject_Flag]
			, [Reject_Dt]
			, [Reject_Reason]
		FROM	[salesforce].[Account_Person]
		WHERE	([PersonEmail] = '' 
			OR [PersonEmail] like '% %' 
			OR [PersonEmail] like ('%["(),:;<>\]%') 
			OR substring([PersonEmail] ,charindex('@',[PersonEmail]),len([PersonEmail])) like ('%[!#$%&*+/=?^`_{|]%') 
			OR (left([PersonEmail],1) like ('[-_.+]') or right([PersonEmail],1) like ('[-_.+]'))                                                                               
			OR ([PersonEmail] like '%[%' or [PersonEmail] like '%]%') 
			OR [PersonEmail] LIKE '%@%@%' 
			OR [PersonEmail] NOT LIKE '_%@_%._%' 
			OR [PersonEmail] LIKE '%..%'
			OR [PersonEmail] LIKE '%-.%'
			OR [PersonEmail] LIKE '%.@%' 
			OR [PersonEmail] LIKE '%@.%' 
			OR [PersonEmail] LIKE '%@%.-%' 
			OR [PersonEmail] LIKE '%@%-.%' 
			OR [PersonEmail] LIKE '%@-%' 
			OR CHARINDEX(CHAR(39),[PersonEmail] )=1
			OR CHARINDEX(' ',LTRIM(RTRIM([PersonEmail]))) > 0))
		UPDATE INVALID_EMAILS SET [PersonEmail] = NULL
			, [Reject_Flag] = 1
			, [Reject_Dt] = CURRENT_TIMESTAMP
			, [Reject_Reason]='Invalid Email:'+ LEFT(COALESCE([PersonEmail],''),85);
		SELECT @ROWS = @@ROWCOUNT;
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
		END;
	/* END: Add invalid email check */


	
	/* START: Update delta settings.*/
	IF (1=1)
		BEGIN;
		UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@ENDVAL_NAME AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_NAME AND Setting_Module = @SETTING_MODULE;
		UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@ENDVAL_NADRNA AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_EXTN_NADRNA AND Setting_Module = @SETTING_MODULE;
		UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@ENDVAL_NALK AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_NALK AND Setting_Module = @SETTING_MODULE;
		UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@ENDVAL_ADDR AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_ADDR AND Setting_Module = @SETTING_MODULE;
		UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@ENDVAL_PHONE AS NVARCHAR(150)) WHERE Setting_Name = @SETTING_NAME_PHONENUM AND Setting_Module = @SETTING_MODULE;
		END;
	END;
--Logging
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;   

END TRY
BEGIN CATCH

DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();
--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountPerson:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;

RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Account_NMO]    Script Date: 5/17/2022 2:04:38 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
select object_name(process_id),*, DATEDIFF(MINUTE, start_dt, stop_dt) from edw_audit..process_log 
WHERE object_name(process_id) ='usp_Upsert_Account_NMO'
AND start_dt >=CAST(CURRENT_TIMESTAMP AS DATE);
*/

          
CREATE     PROCEDURE  [salesforce].[usp_Upsert_Account_NMO]          
          
AS          
BEGIN;       
      
      
      
-- =============================================          
 /*
VERSIONING: a.b.c - where a - major version (breaks compatibility) - b - minor version (additions) - c - bug fixes   
 */  
 
 -- Author:    Steve Tangeman          
 -- CreationDate:   2021-06-28          
 -- Version:    0.1.1          
 -- Description:   Refresh Account NMO table for synchronization with SalesForce           
 -- Change Log:   2021-08-25 - Anastasia Vogelaar - added check for matching account person NAME-IDs          
          
 -- Modified By:  Anastasia Vogelaar          
 -- Modified Date:  9/2/2021          
 -- Version:   0.1.3          
 -- Description:  Added check to only include accounts that were not uploaded with other acount types          
          
 -- Modified By:  Anastasia Vogelaar          
 -- Modified Date:  09/07/2021          
 -- Version:   0.1.4          
 -- Description:  Replaced Drop Table with Truncate          
          
 -- Modified By:  Anastasia Vogelaar          
 -- Modified Date:  09/10/2021          
 -- Version:   0.1.5          
 -- Description:  Added email check          
          
 -- Modified By:  Steve Tangeman          
 -- Modified Date:  11/09/2021          
 -- Version:   0.1.6          
 -- Description:  Updated LifePro_Last_Modified_DateTime__c to use version ID          
          
  -- Modified By:  Harish Kola          
 -- Modified Date:  11/15/2021          
 -- Version:   0.2.0          
 -- Description:  Included Audit logging,Mapping table merge and updated Rejection code           
 
 -- Modified By:	Anastasia Vogelaar    
 -- Modified Date:  12/18/2021 
 -- Version:		0.2.1    
 -- Description:	Added email check for char(39) 

 -- Modified By:	Anastasia Vogelaar    
 -- Modified Date:  12/18/2021 
 -- Version:		0.2.2    
 -- Description:	Changed mapping joins - expansions should not be mandatory, 
 --					is not used by NMO
 
 -- Modified By:	Anastasia Vogelaar    
 -- Modified Date:  12/20/2021 
 -- Version:		0.2.3    
 -- Description:	Added record type check

 -- Modified By:	Anastasia Vogelaar    
 -- Modified Date:  01/01/2022
 -- Version:		0.2.6    
 -- Description:	Adapted code to account for NULL Version IDs in Production

 -- Modified By:	Anastasia Vogelaar    
 -- Modified Date:  03/02/2022
 -- Version:		0.2.7    
 -- Description:	Temporary removed Version ID check

 -- Modified By:	Jason Rippel    
 -- Modified Date:	3/14/2022
 -- Version:		0.2.8
 -- Description:	Updated Email address to Address Code = Business and Address Type = Email and Highest Effective Date
  
 -- Modified By:	Anastasia Vogelaar
 -- Modified Date:	04/07/2022
 -- Version:		0.2.8
 -- Description:	Added Phone Number check, replaced merge statemet with Insert, 
 --					added delta checks against views (instead of current views)

 -- Full reload:          
--DECLARE @SETTING_NAME_HIER   NVARCHAR(50) = 'SYNC_ACCOUNT_NMO_HIER_CURR_VW';          
--DECLARE @SETTING_NAME_AGNT   NVARCHAR(50) = 'SYNC_ACCOUNT_NMO_AGNT_CURR_VW';          
--DECLARE @SETTING_NAME_NALK   NVARCHAR(50) = 'SYNC_ACCOUNT_NMO_NALK_CURR_VW';          
--DECLARE @SETTING_NAME_NAME   NVARCHAR(50) = 'SYNC_ACCOUNT_NMO_NAME_CURR_VW';          
--DECLARE @SETTING_NAME_ADDR   NVARCHAR(50) = 'SYNC_ACCOUNT_NMO_ADDR_CURR_VW';          
--DECLARE @SETTING_NAME_AEXP_10   NVARCHAR(50) = 'SYNC_ACCOUNT_NMO_AEXP_10_CURR_VW'          
--DECLARE @SETTING_NAME_AEXP_03   NVARCHAR(50) = 'SYNC_ACCOUNT_NMO_AEXP_03_CURR_VW' 
--DECLARE @SETTING_NAME_PHONE	NVARCHAR(50) = 'SYNC_ACCOUNT_NMO_PHONE';
--DECLARE @SETTING_MODULE    NVARCHAR(50) = 'SF_SYNC';          
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_HIER AND SETTING_MODULE = @SETTING_MODULE;          
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_AGNT AND SETTING_MODULE = @SETTING_MODULE;          
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_NALK AND SETTING_MODULE = @SETTING_MODULE;          
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_NAME AND SETTING_MODULE = @SETTING_MODULE;          
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_ADDR AND SETTING_MODULE = @SETTING_MODULE;          
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_AEXP_10 AND SETTING_MODULE = @SETTING_MODULE;          
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_AEXP_03 AND SETTING_MODULE = @SETTING_MODULE;          
--UPDATE SETTINGS SET SETTING_VALUE = '1/1/1753' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_PHONE AND SETTING_MODULE = @SETTING_MODULE;   
-- =============================================          
          
SET NOCOUNT ON;          
DECLARE @SETTING_NAME_HIER		NVARCHAR(50) = 'SYNC_ACCOUNT_NMO_HIER_CURR_VW';          
DECLARE @SETTING_NAME_AGNT		NVARCHAR(50) = 'SYNC_ACCOUNT_NMO_AGNT_CURR_VW';          
DECLARE @SETTING_NAME_NALK		NVARCHAR(50) = 'SYNC_ACCOUNT_NMO_NALK_CURR_VW';          
DECLARE @SETTING_NAME_NAME		NVARCHAR(50) = 'SYNC_ACCOUNT_NMO_NAME_CURR_VW';          
DECLARE @SETTING_NAME_ADDR		NVARCHAR(50) = 'SYNC_ACCOUNT_NMO_ADDR_CURR_VW';          
DECLARE @SETTING_NAME_AEXP_10	NVARCHAR(50) = 'SYNC_ACCOUNT_NMO_AEXP_10_CURR_VW'          
DECLARE @SETTING_NAME_AEXP_03	NVARCHAR(50) = 'SYNC_ACCOUNT_NMO_AEXP_03_CURR_VW'
DECLARE @SETTING_NAME_PHONE		NVARCHAR(50) = 'SYNC_ACCOUNT_NMO_PHONE';
DECLARE @SETTING_MODULE			NVARCHAR(50) = 'SF_SYNC';          
DECLARE @START_VAL_HIER			BIGINT;    
DECLARE @START_VAL_AGNT			BIGINT;
DECLARE @START_VAL_NALK			BIGINT;
DECLARE @START_VAL_NAME			BIGINT; 
DECLARE @START_VAL_ADDR			BIGINT;  
DECLARE @START_VAL_AEXP_10		BIGINT;
DECLARE @START_VAL_AEXP_03		BIGINT;
DECLARE @START_VAL_PHONE		DATETIME2;
DECLARE @END_VAL_HIER			BIGINT;          
DECLARE @END_VAL_AGNT			BIGINT;          
DECLARE @END_VAL_NALK			BIGINT;
DECLARE @END_VAL_NAME			BIGINT;
DECLARE @END_VAL_ADDR			BIGINT;
DECLARE @END_VAL_AEXP_10		BIGINT;          
DECLARE @END_VAL_AEXP_03		BIGINT;          
DECLARE @END_VAL_PHONE			DATETIME2;
DECLARE @RecordTypeID			NVARCHAR(20);          
DECLARE @LOGID_START			INT;  --Used for the first log id          
DECLARE @LOGID					INT;  --Used for intermediate log ids          
DECLARE @ROWS					INT;  --Used for logging row counts          
          
          
BEGIN TRY    
IF NOT EXISTS(SELECT 1 FROM EDW_Audit.[dbo].[Delta_Settings] WHERE SETTING_NAME = @SETTING_NAME_PHONE AND SETTING_MODULE = @SETTING_MODULE)
	BEGIN;
	INSERT EDW_Audit.[dbo].[Delta_Settings] (Setting_Value, Setting_Module, Setting_Name) VALUES ('1/1/1753', @SETTING_MODULE, @SETTING_NAME_PHONE);
	END;
--Logging      
   
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account_NMO:Stat/End Indicator');  
IF NOT EXISTS(SELECT 1 FROM [salesforce].[mapping_Account] WHERE [NAMERECORD_NAMEID] IS NULL)
SELECT @LOGID_START		= @@IDENTITY;          
	BEGIN;
SELECT @RecordTypeID	= [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE DEVELOPERNAME = 'NMO' AND SOBJECTTYPE = 'Account';      
SELECT @START_VAL_HIER	= CAST(SETTING_VALUE as INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_HIER AND Setting_Module = @SETTING_MODULE;          
SELECT @END_VAL_HIER	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[HIER_Vw];          
SELECT @START_VAL_AGNT  = CAST(SETTING_VALUE as INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_AGNT AND Setting_Module = @SETTING_MODULE;          
SELECT @END_VAL_AGNT	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[AGNT_Vw];  
SELECT @START_VAL_NALK  = CAST(SETTING_VALUE as INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_NALK AND Setting_Module = @SETTING_MODULE;                    
SELECT @END_VAL_NALK	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[NALK_Vw];          
SELECT @START_VAL_NAME	= CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_NAME AND Setting_Module = @SETTING_MODULE;          
SELECT @END_VAL_NAME	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[NAME_BusKey_Vw];  
SELECT @START_VAL_ADDR	= CAST(SETTING_VALUE as INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_ADDR AND Setting_Module = @SETTING_MODULE;          
SELECT @END_VAL_ADDR	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[ADDR_Vw];  
SELECT @START_VAL_AEXP_10   = CAST(SETTING_VALUE as INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_AEXP_10 AND Setting_Module = @SETTING_MODULE;  
SELECT @END_VAL_AEXP_10 = MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[AEXP_10_Vw]; 
SELECT @START_VAL_AEXP_03  = CAST(SETTING_VALUE as INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_AEXP_03 AND Setting_Module = @SETTING_MODULE;  
SELECT @END_VAL_AEXP_03 = MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[AEXP_03_Vw];  
SELECT @START_VAL_PHONE = CAST([SETTING_VALUE] AS DATETIME2) FROM EDW_Audit.[dbo].[Delta_Settings] WHERE [Setting_Name]= @SETTING_NAME_PHONE AND [Setting_Module]= @SETTING_MODULE;
SELECT @END_VAL_PHONE	= MAX(COALESCE([MODIFIED_DT], [CREATED_DT],'1/1/1753')) FROM [salesforce].[PhoneNumber];   

        

   
/* START: Create temporary tables.*/          
IF (1=1)          
BEGIN;          
--Name Ids - this table will contain all changed business keys for all dependencies          
IF OBJECT_ID (N'work.tmp_Account_NMO_Bus_Keys', N'U') IS NOT NULL          
	BEGIN;          
	TRUNCATE TABLE [work].[tmp_Account_NMO_Bus_Keys];          
	END;          
	ELSE          
	BEGIN;          
	CREATE TABLE [work].[tmp_Account_NMO_Bus_Keys]          
		([Name_ID]     INT NOT NULL PRIMARY KEY CLUSTERED);          
	END;
 
--Email addresses for NAME Ids
IF OBJECT_ID (N'work.tmp_Account_NMO_EmailAddressIds_NALK', N'U') IS NOT NULL
	BEGIN;
	TRUNCATE TABLE [EDW_Outbound].[work].[tmp_Account_NMO_EmailAddressIds_NALK];
	END;
	ELSE
	BEGIN;
	CREATE	TABLE [EDW_Outbound].[work].[tmp_Account_NMO_EmailAddressIds_NALK]
		( NAME_ID int NOT NULL PRIMARY KEY CLUSTERED
		, ADDRESS_ID int NULL
		, EFFECTIVE_DATE datetime2(7) NULL
		, EMAIL nvarchar(105) NULL
		, [NALK_EMAIL_ADDRESSCODE] varchar(3) NULL
		, [NALK_EMAIL_COMPANYCODE] VARCHAR(2) NULL
		, [NALK_EMAIL_POLICYNUMBER] VARCHAR(12) NULL
		, [NALK_EMAIL_VERSIONID] BIGINT NULL
		, [ADDR_EMAIL_VERSIONID] BIGINT NULL);
	END;
--Latest hierarchy record  
IF OBJECT_ID (N'work.tmp_Account_NMO_HIER', N'U') IS NULL
	BEGIN;
	CREATE	TABLE  [EDW_Outbound].[work].[tmp_Account_NMO_HIER]
		([HIER_COMPANYCODE] VARCHAR(2) NOT NULL
		, [HIER_AGENTNUMBER] VARCHAR(12) NOT NULL
		, [HIER_MARKETINGCODE] VARCHAR(10) NULL
		, [HIER_AGENTLEVEL] VARCHAR(2) NULL
		, [HIER_STOPDT] DATETIME2 NULL
		, [HIER_VERSIONID] BIGINT NULL
		, [AGNT_VERSIONID] BIGINT NULL
		, [NAME_ID] INT NOT NULL PRIMARY KEY CLUSTERED
		);
	END;
END;          
/* END: Create temporary tables.*/          
          
/* START: Refresh name IDs in scope.*/          
IF (1=1)          
	BEGIN;          
	--Refresh NameIDs in scope          
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account_NMO:Update Name IDs HIER');          
	SELECT @LOGID = @@IDENTITY; 

	;WITH NMOAgentNumbers AS
		(SELECT ROW_NUMBER() OVER (PARTITION BY AGNT.[NAME_ID] ORDER BY COALESCE(HIER.[STOP_DATE],'12/31/9999') DESC) AS RN
			, HIER.[COMPANY_CODE]
			, HIER.[AGENT_NUMBER]
			, HIER.[MARKETING_CODE]
			, HIER.[AGENT_LEVEL]
			, HIER.[STOP_DATE]
			, HIER.[VERSION_ID]
			, AGNT.[NAME_ID]
			, AGNT.VERSION_ID AS AGNT_VERSIONID
		FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] AS HIER
			INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGNT ON
				AGNT.AGENT_NUMBER = HIER.AGENT_NUMBER
				AND AGNT.COMPANY_CODE = HIER.COMPANY_CODE
		WHERE HIER.REPORT_DESC = 'NMO'
			AND CAST(HIER.AGENT_LEVEL AS int) >= 90
			AND ((HIER.ROW_ID> @START_VAL_HIER
				AND HIER.ROW_ID<= @END_VAL_HIER)
				OR 
				(AGNT.Row_ID>@START_VAL_AGNT
				AND AGNT.Row_ID<=@END_VAL_AGNT)
				)
		)
	UPDATE DEST
	SET [HIER_COMPANYCODE]		= NMOAgentNumbers.COMPANY_CODE
		, [HIER_AGENTNUMBER]	= NMOAgentNumbers.AGENT_NUMBER
		, [HIER_MARKETINGCODE]	= NMOAgentNumbers.MARKETING_CODE
		, [HIER_AGENTLEVEL]		= NMOAgentNumbers.AGENT_LEVEL
		, [HIER_STOPDT]			= NMOAgentNumbers.STOP_DATE
		, [HIER_VERSIONID]		= NMOAgentNumbers.VERSION_ID
		, [AGNT_VERSIONID]		= NMOAgentNumbers.AGNT_VERSIONID
		, [NAME_ID]				= NMOAgentNumbers.NAME_ID
	FROM [EDW_Outbound].[work].[tmp_Account_NMO_HIER] AS DEST
		INNER JOIN NMOAgentNumbers ON
			NMOAgentNumbers.NAME_ID = DEST.NAME_ID
		AND NMOAgentNumbers.RN = 1;
	SELECT @ROWS = @@ROWCOUNT;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;          

	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account_NMO:Insert Name IDs HIER');          
	SELECT @LOGID = @@IDENTITY; 
	;WITH NMOAgentNumbers AS
		(SELECT ROW_NUMBER() OVER (PARTITION BY AGNT.[NAME_ID] ORDER BY COALESCE(HIER.[STOP_DATE],'12/31/9999') DESC) AS RN
			, HIER.[COMPANY_CODE]
			, HIER.[AGENT_NUMBER]
			, HIER.[MARKETING_CODE]
			, HIER.[AGENT_LEVEL]
			, HIER.[STOP_DATE]
			, HIER.[VERSION_ID]
			, AGNT.[NAME_ID]
			, AGNT.[VERSION_ID] AS AGNT_VERSIONID
		FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] AS HIER
			INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGNT ON
				AGNT.AGENT_NUMBER = HIER.AGENT_NUMBER
				AND AGNT.COMPANY_CODE = HIER.COMPANY_CODE
		WHERE HIER.REPORT_DESC = 'NMO'
			AND CAST(HIER.AGENT_LEVEL AS int) >= 90
			AND ((HIER.ROW_ID> @START_VAL_HIER
				AND HIER.ROW_ID<= @END_VAL_HIER)
				OR 
				(AGNT.Row_ID>@START_VAL_AGNT
				AND AGNT.Row_ID<=@END_VAL_AGNT))
		)
	INSERT [EDW_Outbound].[work].[tmp_Account_NMO_HIER]
		([HIER_COMPANYCODE]
		, [HIER_AGENTNUMBER]
		, [HIER_MARKETINGCODE]
		, [HIER_AGENTLEVEL]
		, [HIER_STOPDT]
		, [HIER_VERSIONID]
		, [NAME_ID]
		, [AGNT_VERSIONID])
	SELECT NMOAgentNumbers.COMPANY_CODE
		, NMOAgentNumbers.AGENT_NUMBER
		, NMOAgentNumbers.MARKETING_CODE
		, NMOAgentNumbers.AGENT_LEVEL
		, NMOAgentNumbers.STOP_DATE
		, NMOAgentNumbers.VERSION_ID
		, NMOAgentNumbers.NAME_ID
		, NMOAgentNumbers.AGNT_VERSIONID
	FROM NMOAgentNumbers
	WHERE RN = 1
		AND NOT EXISTS (SELECT 1 FROM [EDW_Outbound].[work].[tmp_Account_NMO_HIER] AS DEST WHERE DEST.NAME_ID = NMOAgentNumbers.NAME_ID);
    SELECT @ROWS = @@ROWCOUNT;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;    
	

	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account_NMO:Insert Name IDs ALL');       
    SELECT @LOGID = @@IDENTITY;       
	INSERT [work].[stage_sf_Account_NMO_first_name_id] 
		([Name_ID]
		, [Company_Code]
		, [Agent_Number]
		, [Version_ID])
	SELECT
		NAME_ID
		, HIER_COMPANYCODE
		, HIER_AGENTNUMBER
		, HIER_VERSIONID
	FROM [EDW_Outbound].[work].[tmp_Account_NMO_HIER]       AS src   
	WHERE NOT EXISTS (SELECT 1 FROM [work].[stage_sf_first_name_id] AS prsn WHERE prsn.Name_ID = src.NAME_ID) --AV - Check for person account          
		AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_Business_first_name_id] AS BS WHERE BS.[NAME_ID] = src.[NAME_ID]) --not in business accnt          
		AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_brokerdealer_first_name_id] AS BS WHERE BS.[NAME_ID] = src.[NAME_ID]) --not in broker dealer accnt          
		AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_Institution_first_name_id] AS INST WHERE INST.[NAME_ID]= src.[NAME_ID]) --not in institution          
		AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_Wholesaler_first_name_id] AS WS WHERE WS.[NAME_ID] =  src.[NAME_ID]) --not in wholesaler          
		AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_NMO_first_name_id] AS DEST WHERE DEST.Name_ID = src.NAME_ID); --NOT ALREADY THERE   
	SELECT @ROWS = @@ROWCOUNT;          
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;          
	END;          
/* END: Refresh name IDs in scope.*/          
          
/* START: Populate temporary tables.*/          
IF (1=1)          
	BEGIN;
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account_NMO:Get new and changed records');          
	SELECT @LOGID = @@IDENTITY;          
               
	--Pick all new or changed Name Ids from NAME_Curr_Vw          
	IF @START_VAL_NAME < @END_VAL_NAME          
		BEGIN;          
		INSERT [work].[tmp_Account_NMO_Bus_Keys]          
			([Name_ID])          
		SELECT           
			NAME_CURR.[NAME_ID] AS [Name_ID]          
		FROM  [EDW_DataLake].[lifepro_v].[NAME_BusKey_Vw] AS NAME_CURR          
		WHERE EXISTS(SELECT 1 FROM [work].[stage_sf_Account_NMO_first_name_id] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = NAME_CURR.NAME_ID) -- Only Name IDs in scope          
			AND NAME_CURR.Row_ID > @START_VAL_NAME                       -- Only changed records          
			AND NAME_CURR.Row_ID <= @END_VAL_NAME
		GROUP BY NAME_CURR.NAME_ID;          
		END;   
	--Pick all new or changed Name Ids from PhoneNumber
	IF @START_VAL_PHONE < @END_VAL_PHONE
		BEGIN;
		INSERT [work].[tmp_Account_NMO_Bus_Keys]          
			([Name_ID])   
		SELECT [NameID]
		FROM [salesforce].[PhoneNumber] AS SRC
		WHERE COALESCE(SRC.[MODIFIED_DT], SRC.[CREATED_DT]) > @START_VAL_PHONE
			AND COALESCE (SRC.[MODIFIED_DT], SRC.[CREATED_DT]) <= @END_VAL_PHONE
			AND NOT EXISTS (SELECT 1 FROM  [work].[tmp_Account_NMO_Bus_Keys]   AS DEST WHERE DEST.Name_ID = SRC.NameID);
		END;
	--Pick all new or changed Name Ids from HIER_Curr_Vw and AGNT_Curr_Vw          
	IF (@START_VAL_AGNT < @END_VAL_AGNT ) OR (@START_VAL_HIER < @END_VAL_HIER)
	BEGIN;          
    INSERT [work].[tmp_Account_NMO_Bus_Keys]          
		([Name_ID])          
	SELECT  AGNT.[Name_id]          
	FROM [EDW_DataLake].[lifepro_v].[HIER_Vw] AS HIER           
		LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Vw] AS AGNT          
			ON HIER.COMPANY_CODE = AGNT.COMPANY_CODE          
			AND HIER.AGENT_NUMBER = AGNT.AGENT_NUMBER          
	WHERE NOT EXISTS(SELECT 1 FROM [work].[tmp_Account_NMO_Bus_Keys] AS DEST WHERE DEST.[NAME_ID] = AGNT.[NAME_ID])          
		AND EXISTS(SELECT 1 FROM [work].[stage_sf_Account_NMO_first_name_id] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = AGNT.NAME_ID)          
		AND ((AGNT.[Row_id] > @START_VAL_AGNT          
		AND AGNT.[Row_ID] <= @END_VAL_AGNT   ) 
		OR
		(HIER.[Row_ID] > @START_VAL_HIER
		AND HIER.Row_ID <= @END_VAL_HIER))
	GROUP BY AGNT.[Name_id];          
	END; 	   
	--Pick all new or changed Name Ids from AEXP_10_Curr_Vw          
	IF @START_VAL_AEXP_10 < @END_VAL_AEXP_10          
		BEGIN;          
		 INSERT [work].[tmp_Account_NMO_Bus_Keys]          
			([Name_ID])          
		SELECT  AGNT.[Name_id]          
		FROM [EDW_DataLake].[lifepro_v].[AEXP_10_Vw] AS AEXP_10           
			LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Vw] AS AGNT          
				ON AEXP_10.COMPANY_CODE = AGNT.COMPANY_CODE          
			AND AEXP_10.AGENT_NUMBER = AGNT.AGENT_NUMBER          
		WHERE NOT EXISTS(SELECT 1 FROM [work].[tmp_Account_NMO_Bus_Keys] AS DEST WHERE DEST.[NAME_ID] = AGNT.[NAME_ID])          
			AND EXISTS(SELECT 1 FROM [work].[stage_sf_Account_NMO_first_name_id] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = AGNT.NAME_ID)          
			AND (AEXP_10.[Row_id] > @START_VAL_AEXP_10 AND AEXP_10.[Row_id] <= @END_VAL_AEXP_10)          
		GROUP BY AGNT.[Name_id];          
		END;          
		--Pick all new or changed Name Ids from AEXP_03_Curr_Vw          
	IF @START_VAL_AEXP_03 < @END_VAL_AEXP_03          
		BEGIN;          
		INSERT [work].[tmp_Account_NMO_Bus_Keys]          
			([Name_ID])          
		SELECT  AGNT.[Name_id]          
		FROM [EDW_DataLake].[lifepro_v].[AEXP_03_Vw] AS AEXP_03           
			LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Vw] AS AGNT          
				ON AEXP_03.COMPANY_CODE = AGNT.COMPANY_CODE          
				AND AEXP_03.AGENT_NUMBER = AGNT.AGENT_NUMBER          
		WHERE NOT EXISTS(SELECT 1 FROM [work].[tmp_Account_NMO_Bus_Keys] AS DEST WHERE DEST.[NAME_ID] = AGNT.[NAME_ID])          
			AND EXISTS(SELECT 1 FROM [work].[stage_sf_Account_NMO_first_name_id] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = AGNT.NAME_ID)          
			AND (AEXP_03.[Row_id] > @START_VAL_AEXP_03 AND AEXP_03.[Row_id] <= @END_VAL_AEXP_03)          
		GROUP BY AGNT.[Name_id];          
		END;          
		--Pick all new or changed Email addresses          
	IF (@START_VAL_NALK <@END_VAL_NALK ) OR (@START_VAL_ADDR < @END_VAL_ADDR)
		BEGIN;          
		INSERT [work].[tmp_Account_NMO_Bus_Keys]          
			([Name_ID])          
		SELECT  NALK.[Name_id]          
		FROM [EDW_DataLake].[lifepro_v].[NALK_Vw] AS NALK           
			LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[ADDR_Vw] AS ADDR ON          
				ADDR.[ADDRESS_ID] = NALK.ADDRESS_ID          
		WHERE NALK.[Address_type] = 'E'          
			AND NOT EXISTS(SELECT 1 FROM [work].[tmp_Account_NMO_Bus_Keys] AS DEST WHERE DEST.[NAME_ID] = NALK.[NAME_ID])          
			AND EXISTS(SELECT 1 FROM [work].[stage_sf_Account_NMO_first_name_id] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = NALK.NAME_ID)          
			AND           
			((NALK.[Row_id] > @START_VAL_NALK         
			AND NALK.[Row_id] <=@END_VAL_NALK)          
			OR          
			(ADDR.[Row_id] > @START_VAL_ADDR          
			AND ADDR.[Row_ID] <= @END_VAL_ADDR))          
		GROUP BY NALK.[Name_id];          
		END;          
     
	--Populate email address records from NALK
	;WITH EmailList AS
		(SELECT ROW_NUMBER() OVER (PARTITION BY NALK.NAME_ID ORDER BY COALESCE(NALK.EFFECTIVE_DATE, '1/1/1753') DESC) AS RN
		, NALK.NAME_ID
			, NALK.ADDRESS_ID
			, NALK.EFFECTIVE_DATE
			, LEFT(RTRIM(ADDR.ADDR_LINE_1) + RTRIM(ADDR.ADDR_LINE_2) + RTRIM(ADDR.ADDR_LINE_3) + ';', CHARINDEX(';', RTRIM(ADDR.ADDR_LINE_1) + RTRIM(ADDR.ADDR_LINE_2) + RTRIM(ADDR.ADDR_LINE_3) + ';') - 1) AS EMAIL
			, NALK.ADDRESS_CODE
			, NALK.COMPANY_CODE
			, NALK.POLICY_NUMBER
			, NALK.VERSION_ID
			, ADDR.VERSION_ID AS ADDR_EMAIL_VERSIONID
		FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] NALK 
			INNER JOIN [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw] AS ADDR ON 
				NALK.ADDRESS_ID = ADDR.ADDRESS_ID 
			INNER JOIN [work].[tmp_Account_NMO_Bus_Keys]   AS BUSKEY ON
				BUSKEY.Name_ID = NALK.NAME_ID
		WHERE ADDRESS_TYPE = 'E'
			AND ADDRESS_CODE = 'BUS')
		INSERT INTO [work].[tmp_Account_NMO_EmailAddressIds_NALK]
			( NAME_ID
			, ADDRESS_ID
			, EFFECTIVE_DATE
			, EMAIL
			, [NALK_EMAIL_ADDRESSCODE]
			, [NALK_EMAIL_COMPANYCODE]
			, [NALK_EMAIL_POLICYNUMBER]
			, [NALK_EMAIL_VERSIONID]
			, [ADDR_EMAIL_VERSIONID])
		SELECT  NAME_ID
			, ADDRESS_ID	 
			, EFFECTIVE_DATE				
			, EMAIL	
			, EmailList.ADDRESS_CODE
			, EmailList.COMPANY_CODE
			, EmailList.POLICY_NUMBER
			, EmailList.VERSION_ID
			, EmailList.ADDR_EMAIL_VERSIONID
		FROM EmailList
		WHERE RN = 1;
                 
	--Get Row Count           
	SELECT @Rows = SUM(st.row_count) FROM    sys.dm_db_partition_stats st WHERE  object_name(object_id) = 'tmp_Account_NMO_Bus_Keys' AND OBJECT_SCHEMA_NAME(OBJECT_ID) = 'work' AND (index_id < 2);          
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;          
    END;
/* END: Populate temporary tables.*/          
          
 /* START: Refresh mapping table*/          
 IF (1=1)          
  BEGIN;          
  INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account_NMO:Update Mappings');          
  SELECT @LOGID = @@IDENTITY;          
          
	UPDATE DEST
	SET [MODIFIED_DT]							= CURRENT_TIMESTAMP          
      , [NAMERECORD_VERSIONID]					= COALESCE(NAME_CURR_VW.[VERSION_ID] ,0)
	  , [EXTENSIONRECORDNADR_VERSIONID]			= 0
      , [AGENTRECORD_COMPANYCODE]				= AGENT.COMPANY_CODE          
      , [AGENTRECORD_AGENTNUMBER]				= AGENT.AGENT_NUMBER        
      , [AGENTRECORD_VERSIONID]					= COALESCE(AGENT.VERSION_ID,0)
      , [AGENTEXPANSION03_COMPANYCODE]			= AEXP03.COMPANY_CODE          
      , [AGENTEXPANSION03_AGENTNUMBER]			= AEXP03.AGENT_NUMBER          
      , [AGENTEXPANSION03_SEQUENCE]				= AEXP03.[SEQUENCE]          
      , [AGENTEXPANSION03_VERSIONID]			= 0        
      , [AGENTEXPANSION10_COMPANYCODE]			= AEXP10.COMPANY_CODE          
      , [AGENTEXPANSION10_AGENTNUMBER]			= AEXP10.AGENT_NUMBER         
      , [AGENTEXPANSION10_SEQUENCE]				= AEXP10.[SEQUENCE]         
      , [AGENTEXPANSION10_VERSIONID]			= COALESCE(AEXP10.VERSION_ID,0)
	  , [NAMERECORD_SSN]						= NAME_CURR_VW.[BUSINESS_TAX_CODE]
	  , [ADDR_EMAIL_ADDRESSID]					= EMAIL.[ADDRESS_ID]
	  , [ADDR_EMAIL_VERSIONID]					= COALESCE(EMAIL.[ADDR_EMAIL_VERSIONID],0)
	  , [NALK_EMAIL_ADDRESSID]					= EMAIL.[ADDRESS_ID]
	  , [NALK_EMAIL_EFFECTIVEDATE]				= EMAIL.[EFFECTIVE_DATE]
	  , [NALK_EMAIL_COMPANYCODE]				= EMAIL.[NALK_EMAIL_COMPANYCODE]
	  , [NALK_EMAIL_ADDRESSCODE]				= EMAIL.[NALK_EMAIL_ADDRESSCODE]
	  , [NALK_EMAIL_POLICYNUMBER]				= EMAIL.[NALK_EMAIL_POLICYNUMBER]
	  , [NALK_EMAIL_VERSIONID]					= COALESCE(EMAIL.[NALK_EMAIL_VERSIONID],0)
	  , [NALK_PHONE_NAMEID]						= PHONE.[NameID]
	  , [NALK_PHONE_ADDRESSID]					= PHONE.[ADDRESS_ID]
	  , [NALK_PHONE_ADDRESSCODE]				= PHONE.[ADDRESS_CODE]
	  , [NALK_PHONE_EFFECTIVEDATE]				= PHONE.[EFFECTIVE_DATE]
	  , [NALK_PHONE_COMPANYCODE]				= PHONE.[COMPANY_CODE]
	  , [NALK_PHONE_POLICYNUMBER]				= phone.[POLICY_NUMBER]
	  , [NALK_PHONE_VERSIONID]					= COALESCE(PHONE.[VERSION_ID],0)
	  , [HIER_COMPANYCODE]						= HIER.HIER_COMPANYCODE		
	  , [HIER_AGENTNUMBER]						= HIER.HIER_AGENTNUMBER
	  , [HIER_MARKETINGCODE]					= HIER.HIER_MARKETINGCODE
	  , [HIER_AGENTLEVEL]						= HIER.HIER_AGENTLEVEL
	  , [HIER_STOPDT]							= HIER.HIER_STOPDT
	  , [HIER_VERSIONID]						= COALESCE(HIER.HIER_VERSIONID,0)
	  , [DELETE_FLAG]							= CASE NAME_CURR_VW.[DXType] WHEN 'D' THEN 1 ELSE 0 END
  FROM	[salesforce].[mapping_Account] AS DEST 
	INNER JOIN [work].[tmp_Account_NMO_Bus_Keys] AS TMP    ON
		TMP.Name_ID = DEST.NAMERECORD_NAMEID
		AND DEST.RECORDTYPEID = @RecordTypeID
    INNER JOIN [work].[stage_sf_Account_NMO_first_name_id] AS BUSKEY ON
		TMP.Name_ID = BUSKEY.Name_ID 
    INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NAME_CURR_VW ON  
		NAME_CURR_VW.[NAME_ID] = TMP.[Name_ID]  
    INNER JOIN EDW_DataLake.lifepro_V.AGNT_CURR_VW AS AGENT ON  
		AGENT.NAME_ID = TMP.Name_ID
		 AND AGENT.AGENT_NUMBER = BUSKEY.Agent_Number
		 AND AGENT.COMPANY_CODE = BUSKEY.Company_Code
	LEFT OUTER JOIN [work].[tmp_Account_NMO_HIER] AS HIER ON
		HIER.NAME_ID = TMP.Name_ID
    LEFT outer JOIN [EDW_DataLake].[lifepro_v].[AEXP_10_Curr_Vw] AEXP10 ON  
		AEXP10.AGENT_NUMBER = BUSKEY.AGENT_NUMBER  
		 AND AEXP10.COMPANY_CODE = BUSKEY.COMPANY_CODE
    LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_03_Curr_Vw] AEXP03 ON  
		AEXP03.AGENT_NUMBER = AGENT.AGENT_NUMBER  
		AND AEXP03.COMPANY_CODE = BUSKEY.COMPANY_CODE
	LEFT OUTER JOIN [salesforce].[PhoneNumber] AS PHONE ON
		PHONE.[NameID] = TMP.Name_ID
	LEFT OUTER JOIN [work].[tmp_Account_NMO_EmailAddressIds_NALK] AS EMAIL ON
		EMAIL.[NAME_ID] = TMP.[Name_ID];
	SELECT @ROWS = @@ROWCOUNT;    
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;    
	
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account_NMO:Insert Mappings');    
	SELECT @LOGID = @@IDENTITY; 
	
	INSERT [salesforce].[mapping_Account]
		([CREATED_DT]          
		, [NAMERECORD_NAMEID]          
		, [NAMERECORD_VERSIONID]          
		, [EXTENSIONRECORDNADR_VERSIONID]          
		, [AGENTRECORD_COMPANYCODE]          
		, [AGENTRECORD_AGENTNUMBER]          
		, [AGENTRECORD_VERSIONID]          
		, [AGENTEXPANSION03_COMPANYCODE]          
		, [AGENTEXPANSION03_AGENTNUMBER]          
		, [AGENTEXPANSION03_SEQUENCE]          
		, [AGENTEXPANSION03_VERSIONID]          
		, [AGENTEXPANSION10_COMPANYCODE]          
		, [AGENTEXPANSION10_AGENTNUMBER]          
		, [AGENTEXPANSION10_SEQUENCE]          
		, [AGENTEXPANSION10_VERSIONID]
		, [NAMERECORD_SSN]
		, [RECORDTYPEID]
		, [ADDR_EMAIL_ADDRESSID]
		, [ADDR_EMAIL_VERSIONID]
		, [NALK_EMAIL_ADDRESSID]
		, [NALK_EMAIL_EFFECTIVEDATE]
		, [NALK_EMAIL_COMPANYCODE]	
		, [NALK_EMAIL_ADDRESSCODE]	
		, [NALK_EMAIL_POLICYNUMBER]	
		, [NALK_EMAIL_VERSIONID]	
		, [NALK_PHONE_NAMEID]		
		, [NALK_PHONE_ADDRESSID]
		, [NALK_PHONE_EFFECTIVEDATE]
		, [NALK_PHONE_ADDRESSCODE]
		, [NALK_PHONE_COMPANYCODE]	
		, [NALK_PHONE_POLICYNUMBER]	
		, [NALK_PHONE_VERSIONID]	
		, [HIER_COMPANYCODE]		
		, [HIER_AGENTNUMBER]		
		, [HIER_MARKETINGCODE]		
		, [HIER_AGENTLEVEL]			
		, [HIER_STOPDT]				
		, [HIER_VERSIONID]	
		, [DELETE_FLAG]
		)    
	SELECT 
		CURRENT_TIMESTAMP          
		, NAME_CURR_VW.NAME_ID
		, COALESCE(NAME_CURR_VW.[VERSION_ID],0)      
		, 0
		, AGENT.COMPANY_CODE          
		, AGENT.AGENT_NUMBER        
		, COALESCE(AGENT.VERSION_ID,0)          
		, AEXP03.COMPANY_CODE          
		, AEXP03.AGENT_NUMBER          
		, AEXP03.[SEQUENCE]          
		, 0
		, AEXP10.COMPANY_CODE          
		, AEXP10.AGENT_NUMBER         
		, AEXP10.[SEQUENCE]         
		, COALESCE(AEXP10.VERSION_ID,0)
		, NAME_CURR_VW.[BUSINESS_TAX_CODE]
		, @RecordTypeID
		, EMAIL.[ADDRESS_ID]
		, COALESCE(EMAIL.[ADDR_EMAIL_VERSIONID],0)
		, EMAIL.[ADDRESS_ID]
		, EMAIL.[EFFECTIVE_DATE]
		, EMAIL.[NALK_EMAIL_COMPANYCODE]
		, EMAIL.[NALK_EMAIL_ADDRESSCODE]
		, EMAIL.[NALK_EMAIL_POLICYNUMBER]
		, COALESCE(EMAIL.[NALK_EMAIL_VERSIONID],0)
		, PHONE.[NameID]
		, PHONE.[ADDRESS_ID]
		, PHONE.[EFFECTIVE_DATE]
		, PHONE.[ADDRESS_CODE]
		, PHONE.[COMPANY_CODE]
		, phone.[POLICY_NUMBER]
		, COALESCE(PHONE.[VERSION_ID],0)
		, HIER.HIER_COMPANYCODE		
		, HIER.HIER_AGENTNUMBER
		, HIER.HIER_MARKETINGCODE
		, HIER.HIER_AGENTLEVEL
		, HIER.HIER_STOPDT
		, COALESCE(HIER.HIER_VERSIONID,0)
		, CASE NAME_CURR_VW.[DXType] WHEN 'D' THEN 1 ELSE 0 END
	FROM [work].[tmp_Account_NMO_Bus_Keys] AS TMP    
      INNER JOIN [work].[stage_sf_Account_NMO_first_name_id] AS BUSKEY ON
		TMP.Name_ID = BUSKEY.Name_ID 
    INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NAME_CURR_VW ON  
		NAME_CURR_VW.[NAME_ID] = TMP.[Name_ID]  
    INNER JOIN EDW_DataLake.lifepro_V.AGNT_CURR_VW AS AGENT ON  
		AGENT.NAME_ID = TMP.Name_ID
		 AND AGENT.AGENT_NUMBER = BUSKEY.Agent_Number
		 AND AGENT.COMPANY_CODE = BUSKEY.Company_Code
	LEFT OUTER JOIN [work].[tmp_Account_NMO_HIER] AS HIER ON
		HIER.NAME_ID = TMP.Name_ID
    LEFT outer JOIN [EDW_DataLake].[lifepro_v].[AEXP_10_Curr_Vw] AEXP10 ON  
		AEXP10.AGENT_NUMBER = BUSKEY.AGENT_NUMBER  
		 AND AEXP10.COMPANY_CODE = BUSKEY.COMPANY_CODE
    LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_03_Curr_Vw] AEXP03 ON  
		AEXP03.AGENT_NUMBER = AGENT.AGENT_NUMBER  
		AND AEXP03.COMPANY_CODE = BUSKEY.COMPANY_CODE
	LEFT OUTER JOIN [salesforce].[PhoneNumber] AS PHONE ON
		PHONE.[NameID] = TMP.Name_ID
	LEFT OUTER JOIN [work].[tmp_Account_NMO_EmailAddressIds_NALK] AS EMAIL ON
		EMAIL.[NAME_ID] = TMP.[Name_ID]
	WHERE NOT EXISTS (SELECT 1 FROM [salesforce].[mapping_Account] AS DEST WHERE DEST.NAMERECORD_NAMEID = TMP.Name_ID); 
        
  SELECT @ROWS = @@ROWCOUNT;          
  UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;          
  END;           
 /* END: Refresh mapping table*/          
          
          
/* START: Populate staging table.*/          
IF (1=1)          
 BEGIN;          
          
 INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account_NMO:Update Staging');          
 SELECT @LOGID = @@IDENTITY;          
 
 --If previous execution was successful, this table will be empty.

	UPDATE	DEST
	SET		[Name]									= CASE WHEN NAME_VW.NAME_FORMAT_CODE = 'I'
														THEN TRIM(INDIVIDUAL_FIRST) + IIF(LEN(TRIM(INDIVIDUAL_FIRST)) > 0, ' ', '') + TRIM(INDIVIDUAL_MIDDLE) + IIF(LEN(TRIM(INDIVIDUAL_MIDDLE)) > 0, ' ', '') + TRIM(INDIVIDUAL_LAST)
														ELSE TRIM(BUSINESS_NAME)
													  END
			,[Phone]								= phone.PhoneNumber
			,[OwnerId]								= ''
			,[LifePro_Last_Modified_DateTime__c]	= Mapping.VERSIONID 
			,[X2017_Activity_Premium__c]			= premium.ActivityPremium2017
			,[X2017_Effective_Premium__c]			= premium.EffectivePremium2017
			,[X2018_Activity_Premium__c]			= premium.ActivityPremium2018
			,[X2018_Effective_Premium__c]			= premium.EffectivePremium2018
			,[X2019_Activity_Premium__c]			= premium.ActivityPremium2019
			,[X2019_Effective_Premium__c]			= premium.EffectivePremium2019
			,[Agent_Number__c]						= agnt.AGENT_NUMBER
			,[Company_Code__c]						= agnt.COMPANY_CODE
			,[Email__c]								= EmailAddressIds.EMAIL
			,[LifePro_ID__c]						= cast(mapping.ID as varchar(20))
			,[Region__c]							= regions.REGION_CODE
			,[Status__c]							= agnt.STATUS_CODE
			,[Status_Date__c]						= agnt.STATUS_DATE
			,[Suitability__c]						= CASE TRIM(suitability.SUITABILITY_FLAG)
														WHEN 'Y' THEN 1
														ELSE 0
													  END
			,[TIN__c]								= CASE WHEN NAME_VW.NAME_FORMAT_CODE = 'B'
														THEN STUFF(RIGHT('000000000' + TRIM(NAME_VW.BUSINESS_TAX_CODE), 9), 3, 0, '-')
														ELSE ''
													  END
			,[Social_Security_Number__c]			= CASE WHEN NAME_VW.NAME_FORMAT_CODE = 'I'
														THEN STUFF(STUFF(RIGHT('000000000' + CONVERT(varchar(11), NAME_VW.SOC_SEC_NUMBER), 9), 4, 0, '-'), 7, 0, '-')
														ELSE ''
													  END
			,[Tax_Status__c]						= NAME_VW.TAX_STATUS
			,[Tax_Witholding_Option__c]				= NAME_VW.TAX_WITHHOLDING_FLAG
			,[Modified_dt]							= CURRENT_TIMESTAMP
			,[LifePro_NameID]						= Mapping.[NAMERECORD_NAMEID] 
			,[Delete_Flag]							= MAPPING.[DELETE_FLAG]
	FROM	[salesforce].[Account_NMO] AS DEST 
		INNER JOIN [work].[tmp_Account_NMO_Bus_Keys] AS TMP ON
			DEST.[LifePro_NameID] = TMP.[NAME_ID]
		 INNER JOIN [salesforce].[mapping_Account] AS MAPPING ON 
			MAPPING.NAMERECORD_NAMEID = TMP.Name_ID  
			AND MAPPING.RECORDTYPEID = @RecordTypeID
		INNER JOIN [work].[stage_sf_Account_NMO_first_name_id] SRC
			ON TMP.Name_ID = SRC.Name_ID
		INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NAME_VW ON
			NAME_VW.[Name_ID] = TMP.[Name_ID]
		INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] agnt
			ON SRC.Company_Code = agnt.COMPANY_CODE
			AND SRC.Agent_Number = agnt.AGENT_NUMBER
			AND AGNT.VERSION_ID = MAPPING.AGENTRECORD_VERSIONID
		LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_10_Curr_Vw] regions
			ON agnt.COMPANY_CODE = regions.COMPANY_CODE
			AND agnt.AGENT_NUMBER = regions.AGENT_NUMBER
		LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_03_Curr_Vw] suitability
			ON agnt.COMPANY_CODE = suitability.COMPANY_CODE
			AND agnt.AGENT_NUMBER = suitability.AGENT_NUMBER
		LEFT OUTER JOIN [EDW_Outbound].[salesforce].[AgentYearlyPremiumTotals] premium
			ON agnt.COMPANY_CODE = premium.CompanyCode
			AND agnt.AGENT_NUMBER = premium.AgentNumber
		LEFT OUTER JOIN [EDW_Outbound].[work].[tmp_Account_NMO_EmailAddressIds_NALK] EmailAddressIds ON
			EmailAddressIds.[Name_id] = TMP.[Name_id]
		LEFT OUTER JOIN [EDW_Outbound].[salesforce].[PhoneNumber] AS phone ON
			phone.[Nameid] = TMP.[NAME_ID]  
   WHERE   (Mapping.VERSIONID >= COALESCE(Mapping.SALESFORCE_DT,0) 
			OR MAPPING.SALESFORCE_DT IS NULL);

SELECT @ROWS = @@ROWCOUNT;          
UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;     
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account_NMO:Insert Staging');          
SELECT @LOGID = @@IDENTITY;  
	
	INSERT INTO [salesforce].[Account_NMO]
           ([Name]
           ,[Phone]
           ,[OwnerId]
           ,[RecordTypeId]
           ,[LifePro_Last_Modified_DateTime__c]
           ,[X2017_Activity_Premium__c]
           ,[X2017_Effective_Premium__c]
           ,[X2018_Activity_Premium__c]
           ,[X2018_Effective_Premium__c]
           ,[X2019_Activity_Premium__c]
           ,[X2019_Effective_Premium__c]
           ,[Agent_Number__c]
           ,[Company_Code__c]
           ,[Email__c]
           ,[LifePro_ID__c]
           ,[Region__c]
           ,[Status__c]
           ,[Status_Date__c]
           ,[Suitability__c]
           ,[TIN__c]
           ,[Social_Security_Number__c]
           ,[Tax_Status__c]
           ,[Tax_Witholding_Option__c]
           ,[Created_dt]
           ,[LifePro_NameID]
		   ,[Delete_Flag])
	SELECT DISTINCT
		CASE WHEN NAME_VW.NAME_FORMAT_CODE = 'I'
			THEN TRIM(INDIVIDUAL_FIRST) + IIF(LEN(TRIM(INDIVIDUAL_FIRST)) > 0, ' ', '') + TRIM(INDIVIDUAL_MIDDLE) + IIF(LEN(TRIM(INDIVIDUAL_MIDDLE)) > 0, ' ', '') + TRIM(INDIVIDUAL_LAST)
			ELSE TRIM(BUSINESS_NAME)
		END AS Name,
		phone.PhoneNumber,
		'' AS OwnerId,
		@RecordTypeID AS RecordTypeId,
		Mapping.VERSIONID AS [LifePro_Last_Modified_DateTime__c],  
		premium.ActivityPremium2017 AS X2017_Activity_Premium__c,
		premium.EffectivePremium2017 AS X2017_Effective_Premium__c,
		premium.ActivityPremium2018 AS X2018_Activity_Premium__c,
		premium.EffectivePremium2018 AS X2018_Effective_Premium__c,
		premium.ActivityPremium2019 AS X2019_Activity_Premium__c,
		premium.EffectivePremium2019 AS X2019_Effective_Premium__c,
		agnt.AGENT_NUMBER AS Agent_Number__c,
		agnt.COMPANY_CODE AS Company_Code__c,
		EmailAddressIds.EMAIL AS Email__c,
		CAST(mapping.ID AS VARCHAR(20)) AS LifePro_ID__c,
		regions.REGION_CODE AS Region__c,
		agnt.STATUS_CODE AS Status__c,
		agnt.STATUS_DATE AS Status_Date__c,
		CASE TRIM(suitability.SUITABILITY_FLAG)
			WHEN 'Y' THEN 1
			ELSE 0
		END AS Suitability__c,
		CASE WHEN NAME_VW.NAME_FORMAT_CODE = 'B'
			THEN STUFF(RIGHT('000000000' + TRIM(NAME_VW.BUSINESS_TAX_CODE), 9), 3, 0, '-')
			ELSE ''
		END AS TIN__c,
		CASE WHEN NAME_VW.NAME_FORMAT_CODE = 'I'
			THEN STUFF(STUFF(RIGHT('000000000' + CONVERT(VARCHAR(11), NAME_VW.SOC_SEC_NUMBER), 9), 4, 0, '-'), 7, 0, '-')
			ELSE ''
		END AS Social_Security_Number__c,
		NAME_VW.TAX_STATUS AS Tax_Status__c,
		NAME_VW.TAX_WITHHOLDING_FLAG AS Tax_Witholding_Option__c,
		CURRENT_TIMESTAMP AS Created_dt,
		Mapping.[NAMERECORD_NAMEID] AS LifePro_NameID,
		mapping.[DELETE_FLAG]
	FROM [work].[tmp_Account_NMO_Bus_Keys] AS TMP
	INNER JOIN [salesforce].[mapping_Account] AS MAPPING ON 
		MAPPING.NAMERECORD_NAMEID = TMP.Name_ID
		AND MAPPING.RECORDTYPEID = @RecordTypeID
	INNER JOIN [work].[stage_sf_Account_NMO_first_name_id] SRC
		ON TMP.Name_ID = SRC.Name_ID
	INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NAME_VW ON
		NAME_VW.[Name_ID] = TMP.[Name_ID]
	INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] agnt
		ON SRC.Company_Code = agnt.COMPANY_CODE
		AND SRC.Agent_Number = agnt.AGENT_NUMBER
	LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_10_Curr_Vw] regions
		ON agnt.COMPANY_CODE = regions.COMPANY_CODE
		AND agnt.AGENT_NUMBER = regions.AGENT_NUMBER
	LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_03_Curr_Vw] suitability
		ON agnt.COMPANY_CODE = suitability.COMPANY_CODE
		AND agnt.AGENT_NUMBER = suitability.AGENT_NUMBER
	LEFT OUTER JOIN [EDW_Outbound].[salesforce].[AgentYearlyPremiumTotals] premium
		ON agnt.COMPANY_CODE = premium.CompanyCode
		AND agnt.AGENT_NUMBER = premium.AgentNumber
	LEFT OUTER JOIN [EDW_Outbound].[work].[tmp_Account_NMO_EmailAddressIds_NALK] EmailAddressIds ON
		EmailAddressIds.[Name_id] = TMP.[Name_id]
	LEFT OUTER JOIN [EDW_Outbound].[salesforce].[PhoneNumber] AS phone ON
		phone.[Nameid] = TMP.[NAME_ID]  
	WHERE NOT EXISTS(SELECT 1 FROM [salesforce].[Account_NMO] AS DEST WHERE DEST.lifepro_Id__c = Mapping.ID)
		AND (mapping.VERSIONID>=COALESCE(MAPPING.SALESFORCE_DT,0) OR mapping.SALESFORCE_DT IS NULL);
SELECT @ROWS = @@ROWCOUNT;          
UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;     
   
 END;          
/* END: Populate staging table.*/          
/* START: Add invalid email check */          
IF (1=1)          
 BEGIN;          
           
 INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account_NMO:Reject emails');          
 SELECT @LOGID = @@IDENTITY;          
          
 ;WITH INVALID_EMAILS AS          
  (SELECT [Email__c] AS [Account_NMO]          
   , [Reject_Flag]          
   , [Reject_Dt]          
   , [Reject_Reason]          
  FROM [salesforce].[Account_NMO]          
  WHERE ([Email__c] = ''           
   OR [Email__c] LIKE '% %'           
   OR [Email__c] LIKE ('%["(),:;<>\]%')           
   OR SUBSTRING([Email__c] ,CHARINDEX('@',[Email__c]),LEN([Email__c])) LIKE ('%[!#$%&*+/=?^`_{|]%')           
   OR (LEFT([Email__c],1) LIKE ('[-_.+]') OR RIGHT([Email__c],1) LIKE ('[-_.+]'))                                                                                         
   OR ([Email__c] LIKE '%[%' OR [Email__c] LIKE '%]%')           
   OR [Email__c] LIKE '%@%@%'           
   OR [Email__c] NOT LIKE '_%@_%._%'           
   OR [Email__c] LIKE '%..%'          
   OR [Email__c] LIKE '%-.%'          
   OR [Email__c] LIKE '%.@%'         
   OR [Email__c] LIKE '%@.%'           
   OR [Email__c] LIKE '%@%.-%'           
   OR [Email__c] LIKE '%@%-.%'           
   OR [Email__c] LIKE '%@-%'     
   OR CHARINDEX(CHAR(39),[Email__c] )=1
   OR CHARINDEX(' ',LTRIM(RTRIM([Email__c]))) > 0)          
   AND COALESCE([Reject_Flag],0)=0)          
          
 UPDATE INVALID_EMAILS SET [Account_NMO] = NULL          
  , [Reject_Flag] = 1          
   , [Reject_Dt] = CURRENT_TIMESTAMP          
   , [Reject_Reason]='Invalid Email:'+ LEFT(COALESCE([Account_NMO],''),85);          
          
 SELECT @ROWS = @@ROWCOUNT;          
 UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;          
          
 END;          
/* END: Add invalid email check */          
/* START: Update delta settings.*/          
IF (1=1)          
 BEGIN;          
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_HIER AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_HIER AND Setting_Module = @SETTING_MODULE;          
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_AGNT AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_AGNT AND Setting_Module = @SETTING_MODULE;          
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_NALK AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_NALK AND Setting_Module = @SETTING_MODULE;          
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_NAME AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_NAME AND Setting_Module = @SETTING_MODULE;          
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_ADDR AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_ADDR AND Setting_Module = @SETTING_MODULE;          
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_AEXP_10 AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_AEXP_10 AND Setting_Module = @SETTING_MODULE;          
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_AEXP_03 AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_AEXP_03 AND Setting_Module = @SETTING_MODULE;          
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_PHONE AS NVARCHAR(150)) WHERE Setting_Name = @SETTING_NAME_PHONE AND Setting_Module = @SETTING_MODULE;   
 END;          
 END;         
    --Logging          
 UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;            
          
END TRY          
BEGIN CATCH          
                     
DECLARE @ERROR_MSG          NVARCHAR(2000);          
DECLARE @ERROR_SEVERITY     INT;          
DECLARE @ERROR_STATE        INT;          
           
SET @ERROR_MSG              = ERROR_MESSAGE();          
SET @ERROR_SEVERITY         = ERROR_SEVERITY();          
SET @ERROR_STATE            = ERROR_STATE();          

--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account_NMO:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;            
          
RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);          
        
END CATCH;          
          
END; 
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Account_Institution]    Script Date: 5/17/2022 2:04:39 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

  
/*
select object_name(process_id),*, DATEDIFF(MINUTE, start_dt, stop_dt) from edw_audit..process_log 
WHERE object_name(process_id) ='usp_Upsert_Account_Institution'
AND start_dt >=CAST(CURRENT_TIMESTAMP AS DATE);
*/  
CREATE             PROCEDURE  [salesforce].[usp_Upsert_Account_Institution]  
    
AS  
BEGIN;  
-- =============================================  
  
 -- Author:    Steve Tangeman  
 -- CreationDate:   2021-06-22  
 -- Version:    0.1.1  
 -- Description:   Refresh Account Institution table for synchronization with SalesForce   
   
 -- Change Log:     
 -- Modified By:  Steve Tangeman  
 -- Modified Date:  8/9/2021  
 -- Version:   0.1.2  
 -- Description:  Handled owners who have a zero or null for SSN  
  
 -- Modified By:  Anastasia Vogelaar  
 -- Modified Date:  9/2/2021  
 -- Version:   0.1.3  
 -- Description:  Added check to only include accounts that were not uploaded with other acount types  
  
 -- Modified By:  Anastasia Vogelaar  
 -- Modified Date:  09/07/2021  
 -- Version:   0.1.4  
 -- Description:  Replaced Drop Table with Truncate  
  
 -- Modified By:  Anastasia Vogelaar  
 -- Modified Date:  09/10/2021  
 -- Version:   0.1.5  
 -- Description:  Added email check  
  
  -- Modified By:  Anastasia Vogelaar  
 -- Modified Date:  11/22/2021  
 -- Version:   0.1.6  
 -- Description:  Added email check  
  
 -- Modified By:	Anastasia Vogelaar    
 -- Modified Date:  12/18/2021 
 -- Version:		0.2.1    
 -- Description:	Added email check for char(39) 

 -- Modified By:	Anastasia Vogelaar    
 -- Modified Date:  12/19/2021 
 -- Version:		0.2.2    
 -- Description:	Fixed selection critera for the mapping table (no agent record should be pulled for institution

 -- Modified By:	Anastasia Vogelaar    
 -- Modified Date:  12/20/2021 
 -- Version:		0.2.3    
 -- Description:	Added record type check

 -- Modified By:	Anastasia Vogelaar    
 -- Modified Date:  01/01/2022
 -- Version:		0.2.4    
 -- Description:	Added reject email check

 -- Modified By:    Jason Rippel    
 -- Modified Date:	2022-01-20
 -- Version:		0.2.5   
 -- Description:	Updated NADRNA CTE to Temp table for performance

 -- Modified By:	Jason Rippel    
 -- Modified Date:	2022-01-24
 -- Version:		0.2.6    
 -- Description:	Updated EmailAddressIds CTE to Temp table for performance

 -- Modified By:	Steve Tangeman    
 -- Modified Date:	3/2/2022
 -- Version:		0.2.7
 -- Description:	Commented out version ID check for now

 -- Modified By:	Jason Rippel    
 -- Modified Date:	3/11/2022
 -- Version:		0.2.8
 -- Description:	Updated Email address to Address Type = Email and Highest Effective Date

 -- Modified By:	Anastasia Vogelaar    
 -- Modified Date:	03/30/2022
 -- Version:		0.3.0    
 -- Description:	Added version check back, modified logic for the mapping table, CX-4484

 -- Modified By:	Anastasia Vogelaar    
 -- Modified Date:	04/01/2022
 -- Version:		0.3.1    
 -- Description:	Added Salesforce_ID where available

 -- Modified By:	Anastasia Vogelaar    
 -- Modified Date:	04/21/2022
 -- Version:		0.3.2    
 -- Description:	Enabled version id check for full refreshes

 -- Modified By:	Anastasia Vogelaar    
 -- Modified Date:	05/02/2022
 -- Version:		0.3.3    
 -- Description:	Added check for changes triggered by deletions

 -- Full reload:  
 --INSERT [EDW_Audit].[dbo].[Delta_Settings] (Setting_Name, Setting_Module, Setting_Value) VALUES ('SYNC_ACCOUNT_INSTITUTION_NAME_BUSKEY_VW','SF_SYNC','0');
 --INSERT [EDW_Audit].[dbo].[Delta_Settings] (Setting_Name, Setting_Module, Setting_Value) VALUES ('SYNC_ACCOUNT_INSTITUTION_PHONENUM','SF_SYNC','1/1/1753');

--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME LIKE 'SYNC_ACCOUNT_INSTITUTION%' and setting_name<>'SYNC_ACCOUNT_INSTITUTION_PHONENUM'; 
--update settings set setting_value = '1/1/1753' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS where setting_name = 'SYNC_ACCOUNT_INSTITUTION_PHONENUM'
-- DROP TABLE IF EXISTS [work].[tmp_Account_Institution_Bus_Keys]; 
-- DROP TABLE IF EXISTS [work].[tmp_Account_Institution_EmailAddressIds_NALK];
--ALTER TABLE salesforce.Account_Institution ADD Delete_Flag BIT NULL DEFAULT 0;
--TRUNCATE TABLE salesforce.Account_Institution;
-- =============================================  
  
SET NOCOUNT ON;  
DECLARE @SETTING_NAME_NAME			NVARCHAR(50) = 'SYNC_ACCOUNT_INSTITUTION_NAME_BUSKEY_VW';  
DECLARE @SETTING_NAME_EXTN_NADRNA	NVARCHAR(50) = 'SYNC_ACCOUNT_INSTITUTION_EXT_NADRNA_CURR_VW';  
DECLARE @SETTING_NAME_NALK			NVARCHAR(50) = 'SYNC_ACCOUNT_INSTITUTION_NALK_CURR_VW';  
DECLARE @SETTING_NAME_ADDR			NVARCHAR(50) = 'SYNC_ACCOUNT_INSTITUTION_ADDR_CURR_VW';
DECLARE @SETTING_NAME_PHONE			NVARCHAR(40) = 'SYNC_ACCOUNT_INSTITUTION_PHONENUM';
DECLARE @SETTING_MODULE				NVARCHAR(50) = 'SF_SYNC';  
DECLARE @STARTVAL_NAME				BIGINT;  
DECLARE @STARTVAL_ADDR				BIGINT;  
DECLARE @STARTVAL_NALK				BIGINT;
DECLARE @STARTVAL_NADR				BIGINT;
DECLARE @STARTVAL_PHONE				DATETIME2;
DECLARE @ENDVAL_NAME				BIGINT;
DECLARE @ENDVAL_ADDR				BIGINT;
DECLARE @ENDVAL_NALK				BIGINT;
DECLARE @ENDVAL_NADR				BIGINT;
DECLARE @ENDVAL_PHONE				DATETIME2;
DECLARE @RecordTypeID				VARCHAR(20);  
DECLARE @LOGID_START				INT;  --Used for the first log id  
DECLARE @LOGID						INT;  --Used for intermediate log ids  
DECLARE @ROWS						INT;  --Used for logging row counts  

  
BEGIN TRY  
--Logging  
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountInstitution:Stat/End Indicator');  
SELECT @LOGID_START = @@IDENTITY;  

--Do not do anything if there are pending records from Salesforce
IF NOT EXISTS(SELECT 1 FROM [salesforce].[mapping_Account] WHERE [NAMERECORD_NAMEID] IS NULL)
	BEGIN;
	--Retrieve delta variables
	SELECT @RecordTypeID	= [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE DEVELOPERNAME = 'IndustriesInstitution' AND SOBJECTTYPE = 'Account';  
	SELECT @STARTVAL_PHONE	= CAST([Setting_Value] AS DATETIME2) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_NAME_PHONE;
	SELECT @STARTVAL_ADDR	= CAST([Setting_Value] AS BIGINT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_NAME_ADDR;
	SELECT @STARTVAL_NALK	= CAST([Setting_Value] AS BIGINT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_NAME_NALK;
	SELECT @STARTVAL_NAME	= CAST([Setting_Value] AS BIGINT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_NAME_NAME;
	SELECT @STARTVAL_NADR	= CAST([Setting_Value] AS BIGINT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_NAME_EXTN_NADRNA;
	SELECT @ENDVAL_PHONE	= MAX(COALESCE([MODIFIED_DT],[CREATED_DT])) FROM [salesforce].[PhoneNumber];		
	SELECT @ENDVAL_ADDR		= MAX([ROW_ID]) FROM [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw];
	SELECT @ENDVAL_NALK		= MAX([ROW_ID]) FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw];
	SELECT @ENDVAL_NAME		= MAX([ROW_ID]) FROM [EDW_DataLake].[lifepro_v].[NAME_BusKey_VW];
	SELECT @ENDVAL_NADR		= MAX([ROW_ID]) FROM [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Curr_Vw];

/* START: Create temporary tables.*/  
IF (1=1)  
	 BEGIN;  
	 --Name Ids - this table will contain all changed business keys for all dependencies  
	 IF OBJECT_ID (N'work.tmp_Account_Institution_Bus_Keys', N'U') IS NOT NULL  
		BEGIN;  
		TRUNCATE TABLE [work].[tmp_Account_Institution_Bus_Keys];  
		END;  
	  ELSE  
		BEGIN;  
		CREATE TABLE [work].[tmp_Account_Institution_Bus_Keys]  
			([Name_ID]     INT NOT NULL PRIMARY KEY CLUSTERED);  
		END;  

	IF OBJECT_ID (N'work.tmp_Account_Institution_NADRNA', N'U') IS NOT NULL
		BEGIN;
		TRUNCATE TABLE [work].[tmp_Account_Institution_NADRNA];
		END;
	ELSE
		BEGIN;
		CREATE	TABLE [work].[tmp_Account_Institution_NADRNA]
			( [EXTENSIONRECORDNADR_NAMEID] int not null primary key
			, [EXTENSIONRECORDNADR_FILEEXTENSION] varchar(4) NULL
			, [EXTENSIONRECORDNADR_SUBTYPERECORD] varchar(2) NULL
			, [EXTENSIONRECORDNADR_VERSIONID] BIGINT NULL
			, Client_Passcode__c varchar(20) NULL
			, Paperless_Annual_Statement__c bit NULL
			, Paperless_11_Month_Summary__c bit NULL);
		END;

	 IF OBJECT_ID (N'work.tmp_Account_Institution_EmailAddressIds_NALK', N'U') IS NOT NULL
		BEGIN;
		TRUNCATE TABLE [work].[tmp_Account_Institution_EmailAddressIds_NALK];
		END;
	ELSE
		BEGIN;
		CREATE	TABLE [work].[tmp_Account_Institution_EmailAddressIds_NALK]
			( NAME_ID int NOT NULL PRIMARY KEY CLUSTERED
			, ADDRESS_ID int NULL
			, EFFECTIVE_DATE datetime2(7) NULL
			, EMAIL varchar(105) NULL
			, NALK_ADDRESS_CODE VARCHAR(3) NULL
			, NALK_COMPANY_CODE VARCHAR(2) NULL
			, NALK_POLICY_NUMBER VARCHAR(12) NULL
			, NALK_VERSION_ID BIGINT NULL
			, ADDR_VERSION_ID BIGINT NULL);
		END;
	END;  
/* END: Create temporary tables.*/  
  
/* START: Refresh name IDs for specific Relate Code and Name Format Code.*/  
IF (1=1)  
	BEGIN;  
  
   --Refresh NameIDs in scope  
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountInstitution:Refresh Name IDs');  
	SELECT @LOGID = @@IDENTITY;  
  
	--This will insert new NAME_IDs to the account institution list
	;WITH ACNTSRC AS  
		(SELECT	MIN(NAME_VW.NAME_ID) AS NAME_ID  
		FROM		[EDW_DataLake].[lifepro_v].[RELA_Curr_Vw] AS RELA_CURR  
					INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_BusKey_Vw] AS NAME_VW ON  
						RELA_CURR.NAME_ID = NAME_VW.NAME_ID  
		WHERE RELA_CURR.RELATE_CODE IN ('PO', 'O1')  
			AND NAME_VW.NAME_FORMAT_CODE = 'B'  
			AND (NAME_VW.SOC_SEC_NUMBER <> 0 AND NAME_VW.SOC_SEC_NUMBER IS NOT NULL)  
		GROUP BY NAME_VW.SOC_SEC_NUMBER  
		UNION  
		SELECT NAME_VW.NAME_ID  
		FROM [EDW_DataLake].[lifepro_v].[RELA_Curr_Vw] AS RELA_CURR  
			INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_BusKey_Vw] AS NAME_VW ON  
				RELA_CURR.NAME_ID = NAME_VW.NAME_ID  
		WHERE RELA_CURR.RELATE_CODE IN ('PO', 'O1')  
			AND NAME_VW.NAME_FORMAT_CODE = 'B'  
			AND (NAME_VW.SOC_SEC_NUMBER = 0 OR NAME_VW.SOC_SEC_NUMBER IS NULL) 
		GROUP BY NAME_VW.NAME_ID
		) 
	INSERT [work].[stage_sf_Account_Institution_first_name_id]
		([Name_ID])
	SELECT ACNTSRC.[NAME_ID]
	FROM	ACNTSRC 
	WHERE	NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_Institution_first_name_id] AS DEST WHERE DEST.[Name_ID] = ACNTSRC.[NAME_ID])
			AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_Business_first_name_id] AS BS WHERE BS.[NAME_ID] = ACNTSRC.[NAME_ID])		--not in business accnt  
			AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_brokerdealer_first_name_id] AS BS WHERE BS.[NAME_ID] = ACNTSRC.[NAME_ID])	--not in broker dealer accnt  
			AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_NMO_first_name_id] AS NMO WHERE NMO.[NAME_ID] =  ACNTSRC.[NAME_ID])			--not in nmo  
			AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_Wholesaler_first_name_id] AS WS WHERE WS.[NAME_ID] =  ACNTSRC.[NAME_ID])		--not in wholesaler  
			AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_first_name_id] AS PRS WHERE PRS.[NAME_ID] = ACNTSRC.[NAME_ID]);						--not in account person  
	
	--Logging  
	SELECT @ROWS = @@ROWCOUNT;  
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;  

	END;  
/* END: Refresh name IDs for specific Relate Code and Name Format Code.*/  
  
/* START: Populate temporary tables.*/  
IF (1=1)  
	BEGIN;  
  
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountInstitution:Get new and changed records');  
	SELECT @LOGID = @@IDENTITY;  
   
	--Changes in the Name record
	IF @STARTVAL_NAME < @ENDVAL_NAME
		BEGIN;  
		INSERT [work].[tmp_Account_Institution_Bus_Keys]  
			([Name_ID])  
		SELECT   NAME_VW.[NAME_ID]        AS [Name_ID]  
		FROM	[EDW_DataLake].[lifepro_v].[NAME_BusKey_Vw] AS NAME_VW  
		WHERE EXISTS(SELECT 1 FROM [work].[stage_sf_Account_Institution_first_name_id] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = NAME_VW.NAME_ID) -- Only Name IDs in scope  
			AND NAME_VW.Row_ID > @STARTVAL_NAME                       -- Only changed records  
			AND NAME_vw.Row_ID <= @ENDVAL_NAME;  
		END;  
	--Changes in the NADRNA extension
	IF @STARTVAL_NADR < @ENDVAL_NADR
		BEGIN;  
		;WITH LAST_NANDRA (RN, NAME_ID)  
		AS  
			(SELECT ROW_NUMBER() OVER (PARTITION BY SRC.NAME_ID ORDER BY SRC.[DATE] DESC, SRC.[TIME] DESC) AS RN --THIS WILL GIVE US ORDER OF THE DATE AND TIME RECORD FOR EACH NAME_ID  
				, SRC.NAME_ID  
			FROM [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Vw] AS SRC  
			WHERE EXISTS (SELECT 1 FROM [work].[stage_sf_Account_Institution_first_name_id] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = SRC.NAME_ID) --Only records in scope  
				AND SRC.Row_ID >@STARTVAL_NADR
				AND SRC.Row_ID <= @ENDVAL_NADR
			)  
		INSERT  [work].[tmp_Account_Institution_Bus_Keys]  
			([Name_ID])  
		SELECT  LAST_NANDRA.NAME_ID  
		FROM	LAST_NANDRA  
		WHERE	RN = 1           --Only last available record for last Name ID  
			AND NOT EXISTS(SELECT 1 FROM  [work].[tmp_Account_Institution_Bus_Keys] AS DEST WHERE DEST.[Name_id] = LAST_NANDRA.[Name_ID]); --Exclude name IDs that are already in the table  
		END;
	--Changes to Email and Address link or to Email Address
	IF (@STARTVAL_NALK < @ENDVAL_NALK) OR (@STARTVAL_ADDR < @ENDVAL_ADDR)
		BEGIN;
		INSERT [work].[tmp_Account_Institution_Bus_Keys]  
			([Name_ID])  
		SELECT  NALK.[Name_id]  
		FROM	[EDW_DataLake].[lifepro_v].[NALK_Vw] AS NALK   
				LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[ADDR_Vw] AS ADDR ON  
					ADDR.[ADDRESS_ID] = NALK.ADDRESS_ID  
		WHERE	NOT EXISTS(SELECT 1 FROM [work].[tmp_Account_Institution_Bus_Keys] AS DEST WHERE DEST.[NAME_ID] = NALK.[NAME_ID])  
				AND EXISTS(SELECT 1 FROM [work].[stage_sf_Account_Institution_first_name_id] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = NALK.NAME_ID)  
		AND   
			((NALK.[Row_id] > @STARTVAL_NALK  
			AND NALK.[Row_id] <=@ENDVAL_NALK)  
			OR  
			(ADDR.[Row_id] > @STARTVAL_ADDR  
			AND ADDR.[Row_ID] <= @ENDVAL_ADDR))  
		GROUP BY NALK.[Name_id];  
		END;
	--Changes to Phone number
	IF @STARTVAL_PHONE < @ENDVAL_PHONE
		BEGIN;
		INSERT	[work].[tmp_Account_Institution_Bus_Keys]
				([Name_ID])
		SELECT	[NameID]
		FROM	[salesforce].[PhoneNumber] AS SRC
		WHERE	NOT EXISTS (SELECT 1 FROM [work].[tmp_Account_Institution_Bus_Keys] AS DEST WHERE DEST.Name_ID = SRC.NameID)
			AND EXISTS (SELECT 1 FROM  [work].[stage_sf_Account_Institution_first_name_id] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = SRC.NameID)
			AND COALESCE(SRC.[MODIFIED_DT], SRC.[CREATED_DT]) > @STARTVAL_PHONE
			AND COALESCE(SRC.[MODIFIED_DT], SRC.[CREATED_DT]) <=@ENDVAL_PHONE;
		END;
	SELECT @Rows = SUM(st.row_count) FROM    sys.dm_db_partition_stats st WHERE  object_name(object_id) = 'tmp_Account_Institution_Bus_Keys' AND OBJECT_SCHEMA_NAME(OBJECT_ID) = 'work' AND (index_id < 2);
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;

	--Extension records
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountInstitution:Get extension records');  
	SELECT @LOGID = @@IDENTITY;  
	;WITH NADRNA AS
		(SELECT ROW_NUMBER() OVER (PARTITION BY EXTN_NADRNA.NAME_ID ORDER BY EXTN_NADRNA.[DATE] DESC, EXTN_NADRNA.[TIME] DESC)	AS RN --THIS WILL GIVE US ORDER OF THE DATE AND TIME RECORD FOR EACH NAME_ID
			,EXTN_NADRNA.[NAME_ID]			AS [EXTENSIONRECORDNADR_NAMEID]
			,EXTN_NADRNA.[FILE_EXTENTION]	AS [EXTENSIONRECORDNADR_FILEEXTENSION]
			,EXTN_NADRNA.[SUB_TYPE_RECORD]	AS [EXTENSIONRECORDNADR_SUBTYPERECORD]
			,EXTN_NADRNA.[VERSION_ID]		AS [EXTENSIONRECORDNADR_VERSIONID]
			, ISNULL(TRIM(EXTN_NADRNA.NADR_PASSWORD) + TRIM(EXTN_NADRNA.NADR_PASSWORD2), '')		AS Client_Passcode__c
			, CASE TRIM(EXTN_NADRNA.PPRLESS_ANN_STMT) WHEN 'Y' THEN 1 ELSE 0 END					AS Paperless_Annual_Statement__c
			, CASE TRIM(EXTN_NADRNA.PPRLESS_11_MONTH) WHEN 'Y' THEN 1 ELSE 0 END					AS Paperless_11_Month_Summary__c
		FROM [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Curr_Vw] AS EXTN_NADRNA
		WHERE EXISTS (SELECT 1 FROM [work].[tmp_Account_Institution_Bus_Keys]   AS TMP WHERE TMP.Name_ID = EXTN_NADRNA.[NAME_ID])
		)
	INSERT INTO [work].[tmp_Account_Institution_NADRNA]
			( [EXTENSIONRECORDNADR_NAMEID]
			, [EXTENSIONRECORDNADR_FILEEXTENSION]
			, [EXTENSIONRECORDNADR_SUBTYPERECORD]
			, [EXTENSIONRECORDNADR_VERSIONID]
			, [Client_Passcode__c]
			, [Paperless_Annual_Statement__c]
			, [Paperless_11_Month_Summary__c])

	SELECT  [EXTENSIONRECORDNADR_NAMEID]
			,[EXTENSIONRECORDNADR_FILEEXTENSION]	 
			,[EXTENSIONRECORDNADR_SUBTYPERECORD]				
			,[EXTENSIONRECORDNADR_VERSIONID]	
			,Client_Passcode__c
			,Paperless_Annual_Statement__c
			,Paperless_11_Month_Summary__c
	FROM NADRNA
	WHERE RN = 1;
	SELECT @ROWS = @@ROWCOUNT;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
	
	--Retrieve emails
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountInstitution:Get emails');  
	SELECT @LOGID = @@IDENTITY;  
	;WITH EmailList AS
	(SELECT ROW_NUMBER() OVER (PARTITION BY NALK.NAME_ID ORDER BY COALESCE(NALK.EFFECTIVE_DATE, '1/1/1753') DESC) AS RN
		, NALK.NAME_ID
		, NALK.ADDRESS_ID
		, NALK.EFFECTIVE_DATE
		, LEFT(RTRIM(ADDR.ADDR_LINE_1) + RTRIM(ADDR.ADDR_LINE_2) + RTRIM(ADDR.ADDR_LINE_3) + ';', CHARINDEX(';', RTRIM(ADDR.ADDR_LINE_1) + RTRIM(ADDR.ADDR_LINE_2) + RTRIM(ADDR.ADDR_LINE_3) + ';') - 1) AS EMAIL
		, NALK.ADDRESS_CODE
		, NALK.COMPANY_CODE
		, NALK.POLICY_NUMBER
		, NALK.VERSION_ID AS NALK_VERSION_ID
		, ADDR.VERSION_ID AS ADDR_VERSION_ID
	FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] NALK 
	INNER JOIN [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw] AS ADDR ON 
				NALK.ADDRESS_ID = ADDR.ADDRESS_ID 
	WHERE ADDRESS_TYPE = 'E'
		AND EXISTS (SELECT 1 FROM [work].[tmp_Account_Institution_Bus_Keys]   AS TMP WHERE TMP.Name_ID = NALK.NAME_ID)
	)
	INSERT INTO [work].[tmp_Account_Institution_EmailAddressIds_NALK]
		( NAME_ID
		, ADDRESS_ID
		, EFFECTIVE_DATE
		, EMAIL
		, NALK_ADDRESS_CODE
		, NALK_COMPANY_CODE
		, NALK_POLICY_NUMBER
		, NALK_VERSION_ID
		, ADDR_VERSION_ID)

	SELECT   EmailList.NAME_ID
			, EmailList.ADDRESS_ID	 
			, EmailList.EFFECTIVE_DATE				
			, EmailList.EMAIL	
			, EmailList.ADDRESS_CODE
			, EmailList.COMPANY_CODE
			, EmailList.POLICY_NUMBER
			, EmailList.NALK_VERSION_ID
			, EmailList.ADDR_VERSION_ID
	FROM EmailList
	WHERE RN = 1;
 
	SELECT @Rows = @@ROWCOUNT;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;  
  
	END;  
/* END: Populate temporary tables.*/  
  
 /* START: Refresh mapping table*/  
IF (1=1)  
	BEGIN;  
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountInstitution:Update Mappings');  
	SELECT @LOGID = @@IDENTITY;  
 
	UPDATE DEST 
	SET [MODIFIED_DT]							= CURRENT_TIMESTAMP
			, [NAMERECORD_VERSIONID]				= COALESCE(NAME_VW.[VERSION_ID],0)
			, [EXTENSIONRECORDNADR_FILEEXTENSION]	= NADRNA.[EXTENSIONRECORDNADR_FILEEXTENSION]
			, [EXTENSIONRECORDNADR_SUBTYPERECORD]	= NADRNA.[EXTENSIONRECORDNADR_SUBTYPERECORD]
			, [EXTENSIONRECORDNADR_NAMEID]			= NADRNA.[EXTENSIONRECORDNADR_NAMEID]
			, [EXTENSIONRECORDNADR_VERSIONID]		= COALESCE(NADRNA.[EXTENSIONRECORDNADR_VERSIONID],0)
			, [NAMERECORD_SSN]						= NAME_VW.[BUSINESS_TAX_CODE]
			, [ADDR_EMAIL_ADDRESSID]				= EMAIL.[ADDRESS_ID]
			, [ADDR_EMAIL_VERSIONID]				= COALESCE(EMAIL.[ADDR_VERSION_ID],0)
			, [NALK_EMAIL_ADDRESSID]				= EMAIL.ADDRESS_ID
			, [NALK_EMAIL_EFFECTIVEDATE]			= EMAIL.EFFECTIVE_DATE
			, [NALK_EMAIL_ADDRESSCODE]				= EMAIL.NALK_ADDRESS_CODE
			, [NALK_EMAIL_COMPANYCODE]				= EMAIL.NALK_COMPANY_CODE
			, [NALK_EMAIL_POLICYNUMBER]				= EMAIL.NALK_POLICY_NUMBER
			, [NALK_EMAIL_VERSIONID]				= COALESCE(EMAIL.[NALK_VERSION_ID],0)
			, [NALK_PHONE_NAMEID]					= PHONE.[NameID]
			, [NALK_PHONE_ADDRESSID]				= PHONE.[ADDRESS_ID]
			, [NALK_PHONE_EFFECTIVEDATE]			= PHONE.[EFFECTIVE_DATE]
			, [NALK_PHONE_ADDRESSCODE]				= PHONE.[ADDRESS_CODE]
			, [NALK_PHONE_COMPANYCODE]				= PHONE.[COMPANY_CODE]
			, [NALK_PHONE_POLICYNUMBER]				= PHONE.[POLICY_NUMBER]
			, [NALK_PHONE_VERSIONID]				= COALESCE(PHONE.[VERSION_ID],0)
			, [DELETE_FLAG]							= CASE NAME_VW.[DXType] WHEN 'D' THEN 1 ELSE 0 END
	FROM	[salesforce].[mapping_Account] AS DEST
		INNER JOIN  [work].[tmp_Account_Institution_Bus_Keys] AS TMP  ON	
			TMP.Name_ID = DEST.NAMERECORD_NAMEID
			AND DEST.RECORDTYPEID = @RecordTypeID
		INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_BusKey_Vw] AS NAME_VW ON  
			NAME_VW.[NAME_ID] = TMP.[Name_ID]
		LEFT OUTER JOIN [work].[tmp_Account_Institution_NADRNA] AS NADRNA ON
			NADRNA.[EXTENSIONRECORDNADR_NAMEID] = TMP.[Name_ID]
		LEFT OUTER JOIN [work].[tmp_Account_Institution_EmailAddressIds_NALK] AS EMAIL ON
			EMAIL.NAME_ID = TMP.[NAME_ID]
		LEFT OUTER JOIN [salesforce].[PhoneNumber] AS PHONE ON
			PHONE.[NameID] = TMP.Name_ID;
	
	SELECT @ROWS = @@ROWCOUNT;    
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;    
	
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountInstitution:Insert Mappings');  
	SELECT @LOGID = @@IDENTITY;    

	INSERT [salesforce].[mapping_Account]
		([CREATED_DT]
		, [NAMERECORD_NAMEID]
		, [NAMERECORD_VERSIONID]
		, [EXTENSIONRECORDNADR_FILEEXTENSION]
		, [EXTENSIONRECORDNADR_SUBTYPERECORD]
		, [EXTENSIONRECORDNADR_NAMEID]
		, [EXTENSIONRECORDNADR_VERSIONID]
		, [NAMERECORD_SSN]
		, [RECORDTYPEID]
		, [ADDR_EMAIL_ADDRESSID]
		, [ADDR_EMAIL_VERSIONID]
		, [NALK_EMAIL_ADDRESSID]
		, [NALK_EMAIL_EFFECTIVEDATE]
		, [NALK_EMAIL_ADDRESSCODE]
		, [NALK_EMAIL_COMPANYCODE]
		, [NALK_EMAIL_POLICYNUMBER]
		, [NALK_EMAIL_VERSIONID]
		, [NALK_PHONE_NAMEID]
		, [NALK_PHONE_ADDRESSID]
		, [NALK_PHONE_EFFECTIVEDATE]
		, [NALK_PHONE_ADDRESSCODE]
		, [NALK_PHONE_COMPANYCODE]
		, [NALK_PHONE_POLICYNUMBER]
		, [NALK_PHONE_VERSIONID]
		, [DELETE_FLAG])
	SELECT CURRENT_TIMESTAMP
			,[NAMERECORD_NAMEID]					= NAME_VW.[NAME_ID]
			, [NAMERECORD_VERSIONID]				= COALESCE(NAME_VW.[VERSION_ID],0)
			, [EXTENSIONRECORDNADR_FILEEXTENSION]	= NADRNA.[EXTENSIONRECORDNADR_FILEEXTENSION]
			, [EXTENSIONRECORDNADR_SUBTYPERECORD]	= NADRNA.[EXTENSIONRECORDNADR_SUBTYPERECORD]
			, [EXTENSIONRECORDNADR_NAMEID]			= NADRNA.[EXTENSIONRECORDNADR_NAMEID]
			, [EXTENSIONRECORDNADR_VERSIONID]		= COALESCE(NADRNA.[EXTENSIONRECORDNADR_VERSIONID],0)
			, [NAMERECORD_SSN]						= NAME_VW.[BUSINESS_TAX_CODE]
			, [RECORDTYPEID]						= @RecordTypeID
			, [ADDR_EMAIL_ADDRESSID]				= EMAIL.[ADDRESS_ID]
			, [ADDR_EMAIL_VERSIONID]				= COALESCE(EMAIL.[ADDR_VERSION_ID],0)
			, [NALK_EMAIL_ADDRESSID]				= EMAIL.ADDRESS_ID
			, [NALK_EMAIL_EFFECTIVEDATE]			= EMAIL.EFFECTIVE_DATE
			, [NALK_EMAIL_ADDRESSCODE]				= EMAIL.NALK_ADDRESS_CODE
			, [NALK_EMAIL_COMPANYCODE]				= EMAIL.NALK_COMPANY_CODE
			, [NALK_EMAIL_POLICYNUMBER]				= EMAIL.NALK_POLICY_NUMBER
			, [NALK_EMAIL_VERSIONID]				= COALESCE(EMAIL.[NALK_VERSION_ID],0)
			, [NALK_PHONE_NAMEID]					= PHONE.[NameID]
			, [NALK_PHONE_ADDRESSID]				= PHONE.[ADDRESS_ID]
			, [NALK_PHONE_EFFECTIVEDATE]			= PHONE.[EFFECTIVE_DATE]
			, [NALK_PHONE_ADDRESSCODE]				= PHONE.[ADDRESS_CODE]
			, [NALK_PHONE_COMPANYCODE]				= PHONE.[COMPANY_CODE]
			, [NALK_PHONE_POLICYNUMBER]				= PHONE.[POLICY_NUMBER]
			, [NALK_PHONE_VERSIONID]				= COALESCE(PHONE.[VERSION_ID],0)
			, [DELETE_FLAG]							= CASE NAME_VW.[DXType] WHEN 'D' THEN 1 ELSE 0 END
	FROM [work].[tmp_Account_Institution_Bus_Keys] AS TMP   
		INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_BusKey_Vw] AS NAME_VW ON  
			NAME_VW.[NAME_ID] = TMP.[Name_ID]
		LEFT OUTER JOIN [work].[tmp_Account_Institution_NADRNA] AS NADRNA ON
			NADRNA.[EXTENSIONRECORDNADR_NAMEID] = TMP.[Name_ID]
		LEFT OUTER JOIN [work].[tmp_Account_Institution_EmailAddressIds_NALK] AS EMAIL ON
			EMAIL.NAME_ID = TMP.[NAME_ID]
		LEFT OUTER JOIN [salesforce].[PhoneNumber] AS PHONE ON
			PHONE.[NameID] = TMP.Name_ID
	WHERE NOT EXISTS(SELECT 1 FROM [salesforce].[mapping_Account] AS DEST WHERE DEST.NAMERECORD_NAMEID = TMP.Name_ID);

	SELECT @ROWS = @@ROWCOUNT;  
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;  
	END;   
/* END: Refresh mapping table*/  
  
  
/* START: Populate staging table.*/  
IF (1=1)  
	BEGIN;  
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountInstitution:Update Staging');  
	SELECT @LOGID = @@IDENTITY;  
   
	UPDATE	DEST
	SET	[Name]									= TRIM(NAME_VW.BUSINESS_NAME) 
		, [Phone]								= phone.PhoneNumber
		, [OwnerId]								= ''
		, [LifePro_Last_Modified_DateTime__c]	= Mapping.VERSIONID
		, [Email__c]							= EmailAddressIds.EMAIL
		, [TIN__c]								= STUFF(RIGHT('000000000' + TRIM(NAME_VW.BUSINESS_TAX_CODE), 9), 3, 0, '-')
		, [Client_Passcode__c]					= nadrna.Client_Passcode__c
		, [Paperless_Annual_Statement__c]		= nadrna.Paperless_Annual_Statement__c
		, [Paperless_11_Month_Summary__c]		= nadrna.Paperless_11_Month_Summary__c
		, [Tax_Status__c]						= NAME_VW.TAX_STATUS
		, [Tax_Witholding_Option__c]			= NAME_VW.TAX_WITHHOLDING_FLAG
		, [Modified_dt]							= CURRENT_TIMESTAMP
		, [LifePro_NameID]						= NAME_VW.NAME_ID
		, [LifePro_ID__c]						= CAST(mapping.ID as varchar(20))
		, [Delete_Flag]							= MAPPING.[DELETE_FLAG]
		, [Salesforce_ID]						= MAPPING.[SALESFORCE_ID]
	FROM	[salesforce].[Account_Institution] AS DEST 
		INNER JOIN [work].[tmp_Account_Institution_Bus_Keys] AS TMP ON
			DEST.[LifePro_NameID] = TMP.[NAME_ID]
		INNER JOIN [salesforce].[mapping_Account] AS MAPPING ON 
			MAPPING.NAMERECORD_NAMEID = TMP.Name_ID
			AND MAPPING.RECORDTYPEID = @RecordTypeID
		INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_BusKey_Vw] AS NAME_VW ON
			NAME_VW.[Name_ID] = TMP.[Name_ID]
		LEFT OUTER JOIN [work].[tmp_Account_Institution_EmailAddressIds_NALK] AS EmailAddressIds ON
			EmailAddressIds.[Name_id] = TMP.[Name_id]
		LEFT OUTER JOIN [EDW_Outbound].[salesforce].[PhoneNumber] AS phone ON
			phone.[Nameid] = TMP.[NAME_ID]  
		LEFT OUTER JOIN [work].[tmp_Account_Institution_NADRNA] AS NADRNA ON
			NADRNA.[EXTENSIONRECORDNADR_NAMEID] = TMP.[Name_ID] 
	WHERE (Mapping.VERSIONID >= COALESCE(Mapping.SALESFORCE_DT,0)
			OR mapping.salesforce_dt IS NULL);
	SELECT @ROWS = @@ROWCOUNT;  
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;  

	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountInstitution:Insert Staging');  
	SELECT @LOGID = @@IDENTITY;  
	
	INSERT	[salesforce].[Account_Institution]	
		([Name]
		, [Phone]
		, [RecordTypeId]
		, [LifePro_Last_Modified_DateTime__c]
		, [Email__c]
		, [TIN__c]
		, [OwnerId]								
		, [Client_Passcode__c]
		, [Paperless_Annual_Statement__c]
		, [Paperless_11_Month_Summary__c]
		, [Tax_Status__c]
		, [Tax_Witholding_Option__c]
		, [Created_dt]
		, [LifePro_NameID]
		, [LifePro_ID__c]
		, [Delete_Flag]
		, [Salesforce_ID])
	SELECT [Name]								= TRIM(NAME_VW.BUSINESS_NAME)
		, [Phone]								= phone.PhoneNumber
		, [RecordTypeId]						= @RecordTypeID
		, [LifePro_Last_Modified_DateTime__c]	= Mapping.VERSIONID 
		, [Email__c]                            = EmailAddressIds.EMAIL
		, [TIN__c]								= STUFF(RIGHT('000000000' + TRIM(NAME_VW.BUSINESS_TAX_CODE), 9), 3, 0, '-')
		, [OwnerId]								= ''
		, [Client_Passcode__c]					= nadrna.Client_Passcode__c
		, [Paperless_Annual_Statement__c]		= nadrna.Paperless_Annual_Statement__c
		, [Paperless_11_Month_Summary__c]		= nadrna.Paperless_11_Month_Summary__c
		, [Tax_Status__c]						= NAME_VW.TAX_STATUS
		, [Tax_Witholding_Option__c]			= NAME_VW.TAX_WITHHOLDING_FLAG
		, [Created_dt]							= CURRENT_TIMESTAMP
		, [LifePro_NameID]						= NAME_VW.NAME_ID
		, [LifePro_ID__c]						= CAST(mapping.ID as varchar(20)) 
		, mapping.[delete_flag]
		, mapping.[SALESFORCE_ID]
	FROM	[work].[tmp_Account_Institution_Bus_Keys] AS TMP 
			INNER JOIN [salesforce].[mapping_Account] AS MAPPING ON 
				mapping.namerecord_nameID = TMP.Name_ID
				AND MAPPING.RECORDTYPEID = @RecordTypeID
			INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_BusKey_Vw] AS NAME_VW ON
				NAME_VW.[Name_ID] = TMP.[Name_ID]
			LEFT OUTER JOIN [work].[tmp_Account_Institution_EmailAddressIds_NALK] AS EmailAddressIds ON
				EmailAddressIds.[Name_id] = TMP.[Name_id]
			LEFT OUTER JOIN [EDW_Outbound].[salesforce].[PhoneNumber] AS phone ON
				phone.[Nameid] = TMP.[NAME_ID]  
	        LEFT OUTER JOIN [work].[tmp_Account_Institution_NADRNA] AS NADRNA ON
	            NADRNA.[EXTENSIONRECORDNADR_NAMEID] = TMP.[Name_ID]
	WHERE NOT EXISTS(SELECT 1 FROM [salesforce].[Account_Institution] AS DEST WHERE DEST.LifePro_id__C = Mapping.ID)
		AND	(Mapping.VERSIONID >= COALESCE(Mapping.SALESFORCE_DT,0)  --"=" used for refreshes  
			OR mapping.salesforce_dt IS NULL);
	
	SELECT @ROWS = @@ROWCOUNT;  
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;  
 
  
 END;  
/* END: Populate staging table.*/  
/* START: Add invalid email check */  
IF (1=1)  
 BEGIN;  
  
 INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountInstitution:Reject emails');  
 SELECT @LOGID = @@IDENTITY;  
  
  
 ;WITH INVALID_EMAILS AS  
 (SELECT [Email__c] AS [Account_Institution]  
   , [Reject_Flag]  
   , [Reject_Dt]  
   , [Reject_Reason]  
 FROM [salesforce].[Account_Institution]  
 WHERE ([Email__c] = ''   
   OR [Email__c] LIKE '% %'   
   OR [Email__c] LIKE ('%["(),:;<>\]%')   
   OR SUBSTRING([Email__c] ,CHARINDEX('@',[Email__c]),LEN([Email__c])) LIKE ('%[!#$%&*+/=?^`_{|]%')   
   OR (LEFT([Email__c],1) LIKE ('[-_.+]') OR RIGHT([Email__c],1) LIKE ('[-_.+]'))                                                                                 
   OR ([Email__c] LIKE '%[%' OR [Email__c] LIKE '%]%')   
   OR [Email__c] LIKE '%@%@%'   
   OR [Email__c] NOT LIKE '_%@_%._%'   
   OR [Email__c] LIKE '%..%'  
   OR [Email__c] LIKE '%-.%'  
   OR [Email__c] LIKE '%.@%'   
   OR [Email__c] LIKE '%@.%'   
   OR [Email__c] LIKE '%@%.-%'   
   OR [Email__c] LIKE '%@%-.%'   
   OR [Email__c] LIKE '%@-%'   
   OR CHARINDEX(CHAR(39),[Email__c] )=1
   OR CHARINDEX(' ',LTRIM(RTRIM([Email__c]))) > 0)  )  
   
 UPDATE INVALID_EMAILS SET [Account_Institution] = NULL  
   , [Reject_Flag] = 1  
   , [Reject_Dt] = CURRENT_TIMESTAMP  
   , [Reject_Reason]='Invalid Email:'+ LEFT(COALESCE([Account_Institution],''),85);  
  
  
 SELECT @ROWS = @@ROWCOUNT;  
 UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;  
  
 END;  
/* END: Add invalid email check */  
  
/* START: Update delta settings.*/  
IF (1=1)  
 BEGIN;  
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@ENDVAL_NAME AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_NAME AND Setting_Module = @SETTING_MODULE;  
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@ENDVAL_NADR AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_EXTN_NADRNA AND Setting_Module = @SETTING_MODULE;  
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@ENDVAL_NALK AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_NALK AND Setting_Module = @SETTING_MODULE;  
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@ENDVAL_ADDR AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_ADDR AND Setting_Module = @SETTING_MODULE;  
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@ENDVAL_PHONE AS NVARCHAR(150)) WHERE Setting_Name = @SETTING_NAME_PHONE AND Setting_Module = @SETTING_MODULE;  
 END;  
END;
--Logging  
UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;     
     
  
     
END TRY  
BEGIN CATCH  
             
DECLARE @ERROR_MSG          NVARCHAR(2000);  
DECLARE @ERROR_SEVERITY     INT;  
DECLARE @ERROR_STATE        INT;  
   
SET @ERROR_MSG              = ERROR_MESSAGE();  
SET @ERROR_SEVERITY         = ERROR_SEVERITY();  
SET @ERROR_STATE            = ERROR_STATE();  

--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountInstitution:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;  
  
RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);  
  
END CATCH;  
  
END;  
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Advisor_Contact]    Script Date: 5/17/2022 2:04:39 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE     PROCEDURE  [salesforce].[usp_Upsert_Advisor_Contact]
 	
AS
BEGIN;
/* ===================================================================================

  Author: 			Anastasia Vogelaar
  Creation Date: 	01/10/2022
  Version: 			2.0.0
  Description: 	    Contact represents an individual record of an agent (SSN is the business key)
  Exceptions: 		work.stage_sf_Contact_Name_ID contains all the links between NAME_ID and SSN
	
 -- Change Log: 		
  Modified By:		Anastasia Vogelaar		
  Modified Date:	01/25/2022	
  Version:			2.1.0
  Description:		Add "individual" check to all contacts, store the latest NAME_ID in the mapping, 
					and retrieve remaining attributes based on the agent record

 Modified By:		Anastasia Vogelaar    
 Modified Date:		03/02/2022
 Version:			2.1.1    
 Description:		Temporary removed Version ID check
 
 Modified By:		Darin Baarda
 Modified Date:		03/10/2022
 Version:			2.1.2    
 Description:		Select only first email for lists and grab the BUS email address
 
 --Enter reset code here for full refreshes	
 select * from salesforce.advisor_contact where email is not null

 select * from [work].[tmp_advisorContactNalkRecord]

  Pre-deployment for V.2
  update EDW_Audit..delta_settings set setting_module = 'SF_SYNC' where setting_name like 'SYNC_ADVISOR_CONTACT%';
  update EDW_Audit..delta_settings set setting_value = '0' where setting_name like 'SYNC_ADVISOR_CONTACT%';
  truncate table salesforce.Advisor_Contact;
	DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_AdvisorContactAcnt];
	DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_AdvisorContactAgntRecord];
	DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_AdvisorContactAppDt];
	DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_AdvisorContactDeltas];
	DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_AdvisorContactEmailID];
	DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_AdvisorContactNADRNARecord];
	DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_advisorContactNalkRecord];
	DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_advisorContactProducers];
	DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_AdvisorContactSSNs];
	DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_AdvisorContactDeltas];
	DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_advisorContactNameRecord];
	DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_advisorContactNalkRecord];
	DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_AdvisorContactEmail];
	DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_AdvisorContactAddress] ;


OLD TABLES:
DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_AdvisorContactAddr];
DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_AdvisorContactAddress];
DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_AdvisorContactAddressId];
DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_AdvisorContactAgents];
DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_AdvisorContactAMLDates];
DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_AdvisorContactCRDNumber];
DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_advisorContactDeltas];
DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_AdvisorContactEmailBlock];
DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_AdvisorContactEmailID];
DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_AdvisorContactEmailID];
DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_AdvisorContactGeoAddressId];
DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_AdvisorContactHier];
DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_AdvisorContactLargeAdvisors];
DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_AdvisorContactLicenseState];
DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_AdvisorContactNPMNumber];
DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_AdvisorContactPerferredName];
DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_AdvisorContactPhoneBlock];
DROP TABLE IF EXISTS [EDW_Outbound].[work].[tmp_AdvisorContactRegion];


-- =================================================================================== 
*/

SET NOCOUNT ON;
DECLARE @ROWS						INT;		--Used for logging row counts
DECLARE @LOGID_START				INT;		--Used for the first log id
DECLARE	@LOGID						INT;		--Used for intermediate log ids
DECLARE @SETTING_MODULE				VARCHAR(10) = 'SF_SYNC';
DECLARE @SETTING_ADDR				VARCHAR(50) = 'SYNC_ADVISOR_CONTACT_ADDR';
DECLARE @SETTING_AGNT				VARCHAR(50) = 'SYNC_ADVISOR_CONTACT_AGNT';
DECLARE @SETTING_AGTT				VARCHAR(50) = 'SYNC_ADVISOR_CONTACT_AGTT';
DECLARE @SETTING_HIER				VARCHAR(50) = 'SYNC_ADVISOR_CONTACT_HIER';
DECLARE @SETTING_NADR				VARCHAR(50) = 'SYNC_ADVISOR_CONTACT_NADRNA';
DECLARE @SETTING_NALK				VARCHAR(50) = 'SYNC_ADVISOR_CONTACT_NALK';
DECLARE @SETTING_NAME				VARCHAR(50) = 'SYNC_ADVISOR_CONTACT_NAME';
DECLARE @SETTING_XP03				VARCHAR(50) = 'SYNC_ADVISOR_CONTACT_AEXP_03';
DECLARE @SETTING_XP10				VARCHAR(50) = 'SYNC_ADVISOR_CONTACT_AEXP_10';
DECLARE @START_ADDR					BIGINT;
DECLARE @START_AGNT					BIGINT;
DECLARE @START_AGTT					BIGINT;
DECLARE @START_HIER					BIGINT;
DECLARE @START_NADR					BIGINT;
DECLARE @START_NALK					BIGINT;
DECLARE @START_NAME					BIGINT;
DECLARE @START_XP03					BIGINT;
DECLARE @START_XP10					BIGINT;
DECLARE @END_ADDR					BIGINT;
DECLARE @END_AGNT					BIGINT;
DECLARE @END_AGTT					BIGINT;
DECLARE @END_HIER					BIGINT;
DECLARE @END_NADR					BIGINT;
DECLARE @END_NALK					BIGINT;
DECLARE @END_NAME					BIGINT;
DECLARE @END_XP03					BIGINT;
DECLARE @END_XP10					BIGINT;
DECLARE @AEContactRecordTypeID		varchar(20);
DECLARE @ELContactRecordTypeID		varchar(20);
DECLARE @NYContactRecordTypeID		varchar(20);

BEGIN TRY
--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AdvisorContact:Stat/End Indicator');
SELECT @LOGID_START = @@IDENTITY;

--Do not do anything if there are pending records from Salesforce
IF NOT EXISTS(SELECT 1 FROM [salesforce].[mapping_Contact] WHERE [NAMERECORD_SSN] IS NULL)
	BEGIN;
	/* START: Retrieve variables. */
	IF (1=1)
		BEGIN;
		--Sync Delta Settings
		IF NOT EXISTS(SELECT 1 FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE SETTING_MODULE = @SETTING_MODULE AND SETTING_NAME = @SETTING_ADDR)
			BEGIN;
			INSERT [EDW_Audit].[dbo].[Delta_Settings] (Setting_Module, Setting_Name, Setting_Value) VALUES (@SETTING_MODULE, @SETTING_ADDR, 0);
			END;
		IF NOT EXISTS(SELECT 1 FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE SETTING_MODULE = @SETTING_MODULE AND SETTING_NAME = @SETTING_AGNT)
			BEGIN;
			INSERT [EDW_Audit].[dbo].[Delta_Settings] (Setting_Module, Setting_Name, Setting_Value) VALUES (@SETTING_MODULE, @SETTING_AGNT, 0);
			END;
		IF NOT EXISTS(SELECT 1 FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE SETTING_MODULE = @SETTING_MODULE AND SETTING_NAME = @SETTING_AGTT)
			BEGIN;
			INSERT [EDW_Audit].[dbo].[Delta_Settings] (Setting_Module, Setting_Name, Setting_Value) VALUES (@SETTING_MODULE, @SETTING_AGTT, 0);
			END;
		IF NOT EXISTS(SELECT 1 FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE SETTING_MODULE = @SETTING_MODULE AND SETTING_NAME = @SETTING_HIER)
			BEGIN;
			INSERT [EDW_Audit].[dbo].[Delta_Settings] (Setting_Module, Setting_Name, Setting_Value) VALUES (@SETTING_MODULE, @SETTING_HIER, 0);
			END;
		IF NOT EXISTS(SELECT 1 FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE SETTING_MODULE = @SETTING_MODULE AND SETTING_NAME = @SETTING_NADR)
			BEGIN;
			INSERT [EDW_Audit].[dbo].[Delta_Settings] (Setting_Module, Setting_Name, Setting_Value) VALUES (@SETTING_MODULE, @SETTING_NADR, 0);
			END;
		IF NOT EXISTS(SELECT 1 FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE SETTING_MODULE = @SETTING_MODULE AND SETTING_NAME = @SETTING_NALK)
			BEGIN;
			INSERT [EDW_Audit].[dbo].[Delta_Settings] (Setting_Module, Setting_Name, Setting_Value) VALUES (@SETTING_MODULE, @SETTING_NALK, 0);
			END;
		IF NOT EXISTS(SELECT 1 FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE SETTING_MODULE = @SETTING_MODULE AND SETTING_NAME = @SETTING_NAME)
			BEGIN;
			INSERT [EDW_Audit].[dbo].[Delta_Settings] (Setting_Module, Setting_Name, Setting_Value) VALUES (@SETTING_MODULE, @SETTING_NAME, 0);
			END;
		IF NOT EXISTS(SELECT 1 FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE SETTING_MODULE = @SETTING_MODULE AND SETTING_NAME = @SETTING_XP03)
			BEGIN;
			INSERT [EDW_Audit].[dbo].[Delta_Settings] (Setting_Module, Setting_Name, Setting_Value) VALUES (@SETTING_MODULE, @SETTING_XP03, 0);
			END;
		IF NOT EXISTS(SELECT 1 FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE SETTING_MODULE = @SETTING_MODULE AND SETTING_NAME = @SETTING_XP10)
			BEGIN;
			INSERT [EDW_Audit].[dbo].[Delta_Settings] (Setting_Module, Setting_Name, Setting_Value) VALUES (@SETTING_MODULE, @SETTING_XP10, 0);
			END;
		--Retrieve last values for each objects

		SELECT @START_ADDR = [SETTING_VALUE] FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_ADDR;
		SELECT @START_AGNT = [SETTING_VALUE] FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_AGNT;
		SELECT @START_AGTT = [SETTING_VALUE] FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_AGTT;
		SELECT @START_HIER = [SETTING_VALUE] FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_HIER;
		SELECT @START_NADR = [SETTING_VALUE] FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_NADR;
		SELECT @START_NALK = [SETTING_VALUE] FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_NALK;
		SELECT @START_NAME = [SETTING_VALUE] FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_NAME;
		SELECT @START_XP03 = [SETTING_VALUE] FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_XP03;
		SELECT @START_XP10 = [SETTING_VALUE] FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_XP10;

		SELECT @END_ADDR = MAX(ROW_ID) FROM [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw];
		SELECT @END_AGNT = MAX(ROW_ID) FROM [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw];	
		SELECT @END_AGTT = MAX(ROW_ID) FROM [EDW_DataLake].[lifepro_v].[EXTN_AGTT_Curr_Vw];
		SELECT @END_HIER = MAX(ROW_ID) FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw]					
		SELECT @END_NADR = MAX(ROW_ID) FROM [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Curr_Vw];				
		SELECT @END_NALK = MAX(ROW_ID) FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw];	
		SELECT @END_NAME = MAX(ROW_ID) FROM [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw];
		SELECT @END_XP03 = MAX(ROW_ID) FROM [EDW_DataLake].[lifepro_v].[AEXP_03_Curr_Vw];				
		SELECT @END_XP10 = MAX(ROW_ID) FROM [EDW_DataLake].[lifepro_v].[AEXP_10_Curr_Vw];

		SELECT @AEContactRecordTypeID = [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE DEVELOPERNAME = 'AE_Advisor_Contact' AND SOBJECTTYPE = 'Contact';
		SELECT @ELContactRecordTypeID = [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE DEVELOPERNAME = 'EL_Advisor_Contact' AND SOBJECTTYPE = 'Contact';
		SELECT @NYContactRecordTypeID = [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE DEVELOPERNAME = 'NY_Advisor_Contact' AND SOBJECTTYPE = 'Contact';  --This one is not available yet
		END;		
	/* END: Retrieve variables. */

	/* START: Create temporary tables.*/
	IF (1=1)
		BEGIN;
		--All changed name ids
		IF OBJECT_ID (N'work.tmp_AdvisorContactDeltas', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactDeltas];
			END;
			ELSE
			BEGIN;
				CREATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactDeltas] 
					(SSN NVARCHAR(9) NOT NULL PRIMARY KEY CLUSTERED
					);
			END;
	
		IF OBJECT_ID (N'work.tmp_AdvisorContactNameRecord', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [EDW_Outbound].[work].[tmp_advisorContactNameRecord];
			END;
			ELSE
			BEGIN;
			CREATE TABLE [EDW_Outbound].[work].[tmp_advisorContactNameRecord] 
				([SSN] VARCHAR(9) PRIMARY KEY CLUSTERED
				, [LATEST_NAMEID] INT NOT NULL
				, [BIRTHDATE]	DATE NULL
				, [FIRSTNAME]	NVARCHAR(20) NULL
				, [LASTNAME]	NVARCHAR(20) NULL
				, [MIDDLENAME]	NVARCHAR(10) NULL
				, [SALUTATION]	NVARCHAR(6) NULL
				, [SUFFIX]		NVARCHAR(6) NULL
				, [GENDER]		NVARCHAR(1) NULL
				, [NAME_FORMAT]	NVARCHAR(1) NULL
				, [VERSION_ID]	BIGINT NOT NULL
				);
			END;
		IF OBJECT_ID (N'work.tmp_AdvisorContactNalkRecord', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE  TABLE [EDW_Outbound].[work].[tmp_advisorContactNalkRecord];
			END;
			ELSE
			BEGIN;
			CREATE  TABLE [EDW_Outbound].[work].[tmp_advisorContactNalkRecord] 
				([SSN] VARCHAR(9) NOT NULL 
				, [ADDRESS_ID] INT NOT NULL
				, [ADDRESS_TYPE] VARCHAR(1) NOT NULL
				, [ADDRESS_CODE] VARCHAR(3) NULL
				, [NAME_ID] INT  NULL
				, [EFFECTIVE_DATE] DATETIME2 NULL
				, [COMPANY_CODE] VARCHAR(2) NULL
				, [POLICY_NUMBER] VARCHAR(12) NULL
				, [BLOCK_IND] VARCHAR(1) NULL
				, [PHONE_NUMBER] BIGINT NULL
				, [VERSION_ID] BIGINT NULL
				, CONSTRAINT PK_advisorContactNalkRecord_SSN_ADDRESS_ID PRIMARY KEY CLUSTERED ([SSN], [ADDRESS_TYPE])
				);
				CREATE NONCLUSTERED INDEX IDX_tmp_advisorContactNalkRecord_ADDRESS_ID ON [EDW_Outbound].[work].[tmp_advisorContactNalkRecord] (ADDRESS_ID) INCLUDE ([SSN],[ADDRESS_TYPE]) WITH (FILLFACTOR=90);
			END;
		IF OBJECT_ID (N'work.tmp_AdvisorContactEmail', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE  TABLE [EDW_Outbound].[work].[tmp_AdvisorContactEmail];
			END;
			ELSE
			BEGIN;
			CREATE  TABLE [EDW_Outbound].[work].[tmp_AdvisorContactEmail] 
				([SSN] VARCHAR(9) NOT NULL PRIMARY KEY CLUSTERED 
				, [Email] NVARCHAR(105) NULL
				); 
			END;
		IF OBJECT_ID (N'work.tmp_AdvisorContactAddress', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactAddress];
			END;
			ELSE
			BEGIN;
			CREATE  TABLE [EDW_Outbound].[work].[tmp_AdvisorContactAddress] 
				([SSN] VARCHAR(9) NOT NULL  PRIMARY KEY CLUSTERED
				, [MailingAddress] NVARCHAR(275)
				, [MailingCity] NVARCHAR(24) NULL
				, [MailingCountry] NVARCHAR(30) NULL
				, [MailingState] NVARCHAR(2) NULL
				, [MailingStreet] NVARCHAR(107) NULL
				, [MailingPostalCode] NVARCHAR(5)
				, [Address_Code] NVARCHAR(3) NOT NULL
				);
			END;	
	
		IF OBJECT_ID (N'work.tmp_advisorContactNADRNARecord', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactNADRNARecord];
			END;
			ELSE
			BEGIN;
			CREATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactNADRNARecord] 
				([SSN] VARCHAR(9) NOT NULL PRIMARY KEY CLUSTERED
				, [FILE_EXTENTION] VARCHAR(4) NULL
				, [SUB_TYPE_RECORD] NVARCHAR(2) NULL
				, [NAME_ID] INT NULL
				, [VERSION_ID] BIGINT NOT NULL
				, [PERFERRED_NAME] NVARCHAR(50) NULL
				, [NPN_NUM] NVARCHAR(10) NULL
				, [CRD_NUM] VARCHAR(10) NULL
				);
			END;
		
		IF OBJECT_ID (N'work.tmp_AdvisorContactAcnt', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactAcnt];
			END;
		ELSE 
			BEGIN;
			CREATE  TABLE [EDW_Outbound].[work].[tmp_AdvisorContactAcnt]
				([SSN]	VARCHAR(9) NOT NULL PRIMARY KEY CLUSTERED
				, [ACCOUNT_SALESFORCE_ID] NVARCHAR(18) NULL
				, [REGION_CODE] NVARCHAR(6) NULL
				, [BUS_UPLINE_NAME_ID] INT NULL
				);
			END;
		IF OBJECT_ID (N'work.tmp_AdvisorContactAppDt', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactAppDt];
			END;
		ELSE 
			BEGIN;
			CREATE  TABLE [EDW_Outbound].[work].[tmp_AdvisorContactAppDt]
				([SSN]	VARCHAR(9) NOT NULL PRIMARY KEY CLUSTERED
				, [FIRST_APP_DT] DATE NOT NULL
				);
			END;
		END;
	/* END: Create temporary tables.*/

	/* START: Populate temporary tables.*/
	IF (1=1)
		BEGIN;
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AdvisorContact:Identify changed records');
		SELECT @LOGID = @@IDENTITY;
		--This section should pick up all NAME_IDs that have an agent record associated with them for SSNs that have been modified or inserted since the last refresh
		--New name records
		INSERT [EDW_Outbound].[work].[tmp_advisorContactDeltas] 
			([SSN])
		SELECT	NM.[BUSINESS_TAX_CODE]
		FROM	[EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NM
		WHERE	EXISTS(SELECT 1 FROM [work].[stage_sf_Contact_Name_ID] AS AGNT WHERE AGNT.[SSN] = NM.[BUSINESS_TAX_CODE])
				AND NM.[Row_ID]>@START_NAME 
				AND NM.[Row_ID] <=@END_NAME
		GROUP BY NM.[BUSINESS_TAX_CODE];
		--New agent records
		INSERT  [EDW_Outbound].[work].[tmp_advisorContactDeltas] 
			([SSN])
		SELECT NM.[BUSINESS_TAX_CODE]
		FROM	[EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS SRC
			INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NM ON
				SRC.NAME_ID = NM.NAME_ID
				AND NM.NAME_FORMAT_CODE = 'i'
			LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_03_Curr_Vw] AS XP03 ON
				XP03.AGENT_NUMBER = SRC.AGENT_NUMBER 
				AND XP03.COMPANY_CODE = SRC.COMPANY_CODE
			LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_10_Curr_Vw] AS XP10 ON
				XP10.[AGENT_NUMBER] = SRC.[AGENT_NUMBER]
				AND XP10.[COMPANY_CODE] = SRC.[COMPANY_CODE]
			LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[EXTN_AGTT_Curr_Vw] AS AGTT ON
				AGTT.POLICY_NUMBER = SRC.AGENT_NUMBER --Policy Number in the extension table actually stores Agent Numbers
				AND AGTT.COMPANY_CODE = SRC.COMPANY_CODE
			LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] AS HIER ON
				HIER.AGENT_NUMBER = SRC.AGENT_NUMBER 
				AND HIER.COMPANY_CODE = SRC.COMPANY_CODE
		WHERE	EXISTS (SELECT 1 FROM [EDW_Outbound].[work].[stage_sf_Contact_Name_ID] AS AGNT WHERE AGNT.[SSN] = NM.[BUSINESS_TAX_CODE])
				AND NOT EXISTS(SELECT 1 FROM [EDW_Outbound].[work].[tmp_advisorContactDeltas] AS DEST WHERE DEST.[SSN] = NM.[BUSINESS_TAX_CODE])
				AND (
					(SRC.[Row_ID]>@START_AGNT AND SRC.[Row_ID]<=@END_AGNT)
					OR (XP03.[Row_ID]>@START_XP03 AND XP03.[Row_ID]<=@END_XP03)
					OR (XP10.[Row_ID]>@START_XP10 AND XP10.[Row_ID]<=@END_XP03)
					OR (AGTT.[Row_ID]>@START_AGTT AND AGTT.[Row_ID]<=@END_AGTT)
					OR (HIER.[Row_ID]>@START_HIER AND AGTT.[Row_ID]<=@END_HIER)
					)
		GROUP BY nm.[BUSINESS_TAX_CODE];
		--New extension records
		INSERT [EDW_Outbound].[work].[tmp_advisorContactDeltas] 
			([SSN])
		SELECT NM.[BUSINESS_TAX_CODE]
		FROM	[EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Curr_Vw] AS SRC
				INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NM ON
					NM.[NAME_ID] = SRC.[NAME_ID]
					AND NM.NAME_FORMAT_CODE='i'
		WHERE	NOT EXISTS(SELECT 1 FROM [EDW_Outbound].[work].[tmp_advisorContactDeltas] AS DEST WHERE DEST.[SSN] = NM.[BUSINESS_TAX_CODE])
			AND EXISTS(SELECT 1 FROM [work].[stage_sf_Contact_Name_ID] AS AGNT WHERE AGNT.AGENT_NAMEID = SRC.[NAME_ID])
			AND SRC.[Row_ID]>@START_AGNT
			AND SRC.[Row_ID]<=@END_AGNT
		GROUP BY NM.[BUSINESS_TAX_CODE];
		--New nalk records
		INSERT [EDW_Outbound].[work].[tmp_advisorContactDeltas] 
			([SSN])
		SELECT NM.[BUSINESS_TAX_CODE]
		FROM	[EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] AS SRC
				INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NM ON
					NM.[NAME_ID] = SRC.[NAME_ID]
					AND NM.NAME_FORMAT_CODE = 'i'
			LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw] AS ADDR ON
				ADDR.[ADDRESS_ID] = SRC.[ADDRESS_ID]
		WHERE	NOT EXISTS(SELECT 1 FROM [EDW_Outbound].[work].[tmp_advisorContactDeltas] AS DEST WHERE DEST.[SSN] = NM.[BUSINESS_TAX_CODE])
			AND EXISTS(SELECT 1 FROM [work].[stage_sf_Contact_Name_ID] AS AGNT WHERE AGNT.SSN = NM.[BUSINESS_TAX_CODE] )
			AND (
				(SRC.[Row_ID]>@START_NALK AND SRC.[Row_ID]<=@END_NALK)
				OR (ADDR.[Row_ID]>@START_ADDR AND ADDR.[Row_ID]<=@END_ADDR)
				)
		GROUP BY NM.[BUSINESS_TAX_CODE];
		

		SELECT @ROWS = SUM(st.row_count) 
		FROM    sys.dm_db_partition_stats st 
		WHERE	object_name(object_id) = 'tmp_advisorContactDeltas' AND OBJECT_SCHEMA_NAME(OBJECT_ID) = 'work' AND (index_id < 2);
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Row_Count = @ROWS, Stop_Dt = CURRENT_TIMESTAMP WHERE Row_ID = @LOGID;
		
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AdvisorContact:Retrieve Name Records');
		SELECT @LOGID = @@IDENTITY;
		--Dedup by Social Security Number, choosing the NAME record, for the chosen Agent for a given SSN and most recent name and address, only pick agent records
		INSERT [EDW_Outbound].[work].[tmp_advisorContactNameRecord] 
			([SSN]				
			, [LATEST_NAMEID]	
			, [BIRTHDATE]		
			, [FIRSTNAME]		
			, [LASTNAME]			
			, [MIDDLENAME]			
			, [SALUTATION]			
			, [SUFFIX]
			, [GENDER]
			, [NAME_FORMAT]
			, [VERSION_ID])
		SELECT SRC.[SSN]
			, SRC.LAST_NAMEID
			, CAST(AGENT_NAMEID.DATE_OF_BIRTH AS DATE)
			, CASE WHEN COALESCE(RTRIM(AGENT_NAMEID.INDIVIDUAL_LAST),'') = '' THEN NULL ELSE RTRIM(AGENT_NAMEID.INDIVIDUAL_FIRST) END
			, CASE WHEN COALESCE(RTRIM(AGENT_NAMEID.INDIVIDUAL_LAST),'') = '' AND COALESCE(RTRIM(AGENT_NAMEID.INDIVIDUAL_FIRST),'') = '' THEN ''
				WHEN COALESCE(RTRIM(AGENT_NAMEID.INDIVIDUAL_LAST),'') = '' AND COALESCE(RTRIM(AGENT_NAMEID.INDIVIDUAL_FIRST),'')<>'' THEN RTRIM(AGENT_NAMEID.INDIVIDUAL_FIRST)
				ELSE  RTRIM(AGENT_NAMEID.INDIVIDUAL_LAST) 
				END
			, RTRIM(AGENT_NAMEID.INDIVIDUAL_MIDDLE)
			, CASE WHEN COALESCE(RTRIM(AGENT_NAMEID.INDIVIDUAL_PREFIX),'')<>'' THEN RTRIM(AGENT_NAMEID.INDIVIDUAL_PREFIX) ELSE RTRIM(AGENT_NAMEID.BUSINESS_PREFIX) END
			, CASE WHEN COALESCE(RTRIM(AGENT_NAMEID.INDIVIDUAL_SUFFIX),'')<>'' THEN RTRIM(AGENT_NAMEID.INDIVIDUAL_SUFFIX) ELSE RTRIM(AGENT_NAMEID.BUSINESS_SUFFIX) END
			, AGENT_NAMEID.[SEX_CODE]
			, AGENT_NAMEID.[NAME_FORMAT_CODE]
			, COALESCE(AGENT_NAMEID.VERSION_ID,0)
		FROM [EDW_Outbound].[work].[tmp_advisorContactDeltas]  AS NEW 
			INNER JOIN [work].[stage_sf_Contact_Name_ID] AS SRC ON
				NEW.[SSN] = SRC.[SSN]
			INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS AGENT_NAMEID ON
				AGENT_NAMEID.[NAME_ID] = SRC.[AGENT_NAMEID];
		SELECT @ROWS = @@ROWCOUNT;
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Row_Count = @ROWS, Stop_Dt = CURRENT_TIMESTAMP WHERE Row_ID = @LOGID;	
		
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AdvisorContact:Retrieve Nalk Records');
		SELECT @LOGID = @@IDENTITY;
		--Check for the max ADDRESS_ID to dedup
		;WITH NLK AS
			(SELECT ROW_NUMBER() OVER (PARTITION BY SRC.SSN
										, CASE WHEN NALK.ADDRESS_TYPE = 'E'  THEN 'E' ELSE 'O'	END 
										ORDER BY COALESCE(NALK.EFFECTIVE_DATE,'1/1/1753') DESC, NALK.ADDRESS_ID DESC) AS RN
				, SRC.SSN
				, NALK.NAME_ID
				, NALK.ADDRESS_ID
				, CASE WHEN NALK.ADDRESS_TYPE = 'E'  THEN 'E' ELSE 'O' END AS ADDRESS_TYPE
				, 'P' AS ADDRESS_CODE
				, NALK.BLOCK_IND
				, COALESCE(NALK.VERSION_ID,0) AS VERSION_ID
				, NALK.[EFFECTIVE_DATE]
				, NALK.[COMPANY_CODE]
				, NALK.[POLICY_NUMBER]
				, NALK.[PHONE_NUMBER]
			FROM  [EDW_Outbound].[work].[tmp_advisorContactDeltas] AS NEW			--All producer name ids for SSNs that changed
				INNER JOIN  [work].[stage_sf_Contact_Name_ID] AS SRC ON
					NEW.[SSN] = SRC.[SSN]
				INNER JOIN [EDW_DataLake].lifepro_v.[NALK_Curr_Vw]  AS NALK ON		--Matched to all nalk records 
					NALK.name_id = SRC.[AGENT_NAMEID]
			WHERE (rtrim(NALK.ADDRESS_CODE) = '') or (NALK.ADDRESS_TYPE='E' AND ADDRESS_CODE = 'BUS')									--Only choose business addresses
		)
		INSERT [work].[tmp_advisorContactNalkRecord] 
			([SSN]
			, [ADDRESS_ID]
			, [ADDRESS_TYPE]
			, [ADDRESS_CODE]
			, [NAME_ID]
			, [EFFECTIVE_DATE]
			, [COMPANY_CODE]
			, [POLICY_NUMBER]
			, [PHONE_NUMBER]
			, [BLOCK_IND]
			, [VERSION_ID]
			)
		SELECT NLK.SSN
			, NLK.ADDRESS_ID
			, NLK.ADDRESS_TYPE
			, NLK.ADDRESS_CODE
			, NLK.[NAME_ID]
			, NLK.[EFFECTIVE_DATE]
			, NLK.COMPANY_CODE
			, NLK.[POLICY_NUMBER]
			, NLK.[PHONE_NUMBER]
			, NLK.BLOCK_IND
			, NLK.VERSION_ID
		FROM NLK 
		WHERE RN = 1 ;
		SELECT @ROWS = @@ROWCOUNT;
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Row_Count = @ROWS, Stop_Dt = CURRENT_TIMESTAMP WHERE Row_ID = @LOGID;	

		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AdvisorContact:Retrieve Email Records');
		SELECT @LOGID = @@IDENTITY;
		INSERT [EDW_Outbound].[work].[tmp_advisorContactEmail] 
			(SSN
			, Email)
		SELECT NLK.SSN
			, left(RTRIM(ADDR.ADDR_LINE_1) + RTRIM(ADDR.ADDR_LINE_2) + RTRIM(ADDR.ADDR_LINE_3) + ';', CHARINDEX(';', RTRIM(ADDR.ADDR_LINE_1) + RTRIM(ADDR.ADDR_LINE_2) + RTRIM(ADDR.ADDR_LINE_3) + ';') - 1)
		FROM [work].[tmp_advisorContactNalkRecord] AS NLK
			INNER JOIN [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw] AS ADDR ON
				NLK.ADDRESS_ID = ADDR.ADDRESS_ID
				AND NLK.ADDRESS_TYPE = 'E'
			--	AND NLK.ADDRESS_CODE = 'BUS'
			--INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] as AGNT ON
			--	NLK.NAME_ID = AGNT.NAME_ID
		--ORDER BY COALESCE(STATUS_CODE, 'Z'), COALESCE(EFFECTIVE_DATE, '1/1/0001') DESC;

		--;WITH EMAILLIST
		-- AS (SELECT ROW_NUMBER() OVER (PARTITION BY ADVNAME.SSN ORDER BY ADVNAME.SSN) AS RN
		--	, ADVNAME.SSN
		--	, left(RTRIM(ADDR.ADDR_LINE_1) + RTRIM(ADDR.ADDR_LINE_2) + RTRIM(ADDR.ADDR_LINE_3) + ';', CHARINDEX(';', RTRIM(ADDR.ADDR_LINE_1) + RTRIM(ADDR.ADDR_LINE_2) + RTRIM(ADDR.ADDR_LINE_3) + ';') - 1) AS EMAIL
		--	, EFFECTIVE_DATE
		--	, STATUS_CODE
		--FROM [work].[tmp_AdvisorContactNameRecord] AS ADVNAME
		--	INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NAME ON 
		--		CAST(ADVNAME.SSN AS INT) = NAME.SOC_SEC_NUMBER
		--	INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] as AGNT ON
		--		NAME.NAME_ID = AGNT.NAME_ID
		--	INNER join [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] as NALK ON
		--		NAME.NAME_ID = NALK.NAME_ID
		--	INNER JOIN [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw] AS ADDR ON
		--		NALK.ADDRESS_ID = ADDR.ADDRESS_ID
		--		AND NALK.ADDRESS_TYPE = 'E'
		--		AND NALK.ADDRESS_CODE = 'BUS'
		--)
		--INSERT [EDW_Outbound].[work].[tmp_advisorContactEmail] 
		--	(SSN
		--	, Email)
		--SELECT SSN, EMAIL
		--FROM EMAILLIST
		--WHERE RN = 1
		--ORDER BY COALESCE(STATUS_CODE, 'Z'), COALESCE(EFFECTIVE_DATE, '1/1/0001') DESC
		SELECT @ROWS = @@ROWCOUNT;
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Row_Count = @ROWS, Stop_Dt = CURRENT_TIMESTAMP WHERE Row_ID = @LOGID;
		
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AdvisorContact:Retrieve Addresses');
		SELECT @LOGID = @@IDENTITY;
		INSERT [EDW_Outbound].[work].[tmp_AdvisorContactAddress] 
			([SSN]
			, [MailingAddress]
			, [MailingCity]
			, [MailingCountry]
			, [MailingState]
			, [MailingStreet]
			, [MailingPostalCode]
			, [Address_Code])
		SELECT NLK.[SSN]
			, RTRIM(ISNULL(Addr.[ADDR_LINE_1],'')) + CASE WHEN RTRIM(ISNULL(Addr.[ADDR_LINE_2], '')) <> '' THEN ' ' + RTRIM(Addr.[ADDR_LINE_2]) ELSE '' END +  CASE WHEN RTRIM(ISNULL(Addr.[ADDR_LINE_3], '')) <> '' THEN ' ' + RTRIM(Addr.[ADDR_LINE_3]) ELSE '' END 
			, RTRIM(ADDR.CITY)
			, RTRIM(ADDR.COUNTRY)
			, RTRIM(ADDR.[STATE])
			, RTRIM(ISNULL(Addr.[ADDR_LINE_1],'')) + CASE WHEN RTRIM(ISNULL(Addr.[ADDR_LINE_2], '')) <> '' THEN ' ' + RTRIM(Addr.[ADDR_LINE_2]) ELSE '' END +  CASE WHEN RTRIM(ISNULL(Addr.[ADDR_LINE_3], '')) <> '' THEN ' ' + RTRIM(Addr.[ADDR_LINE_3]) ELSE '' END 
			, RTRIM(ADDR.ZIP)
			, NLK.[ADDRESS_CODE]
		FROM [work].[tmp_advisorContactNalkRecord] AS NLK
			INNER JOIN [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw] AS ADDR ON
				NLK.ADDRESS_ID = ADDR.ADDRESS_ID
				AND NLK.ADDRESS_TYPE = 'O';
		SELECT @ROWS = @@ROWCOUNT;
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Row_Count = @ROWS, Stop_Dt = CURRENT_TIMESTAMP WHERE Row_ID = @LOGID;
				
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AdvisorContact:Retrieve NADRNA Records');
		SELECT @LOGID = @@IDENTITY;
		;WITH NADRNA
			AS
			(SELECT ROW_NUMBER() OVER (PARTITION BY NEW.SSN ORDER BY EXTN.[DATE] DESC, EXTN.[TIME] DESC) AS RN
				, NEW.SSN
				, EXTN.[FILE_EXTENTION]
				, EXTN.[SUB_TYPE_RECORD]
				, EXTN.[NAME_ID]
				, COALESCE(EXTN.[VERSION_ID],0) AS VERSION_ID
				, EXTN.[PERFERRED_NAME]
				, EXTN.[NPN_NUM]
				, EXTN.[CRD_NUM]
			FROM [EDW_Outbound].[work].[tmp_advisorContactDeltas] AS NEW			--All producer name ids for SSNs that changed
				INNER JOIN  [work].[stage_sf_Contact_Name_ID] AS SRC ON
					NEW.[SSN] = SRC.[SSN]
				INNER JOIN [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Curr_Vw] AS EXTN ON
					EXTN.NAME_ID = SRC.AGENT_NAMEID)
		INSERT [work].[tmp_advisorContactNADRNARecord]
			([SSN]
			, [FILE_EXTENTION]
			, [SUB_TYPE_RECORD]
			, [NAME_ID]
			, [VERSION_ID]
			, [PERFERRED_NAME]
			, [NPN_NUM]
			, [CRD_NUM])
		SELECT 
			NADRNA.SSN
			, NADRNA.FILE_EXTENTION
			, NADRNA.SUB_TYPE_RECORD
			, NADRNA.NAME_ID
			, NADRNA.VERSION_ID
			, NADRNA.PERFERRED_NAME
			, RTRIM(NADRNA.NPN_NUM)
			, RTRIM(NADRNA.CRD_NUM)
		FROM NADRNA
		WHERE RN = 1;
		SELECT @ROWS = @@ROWCOUNT;
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Row_Count = @ROWS, Stop_Dt = CURRENT_TIMESTAMP WHERE Row_ID = @LOGID;

		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AdvisorContact: Hierarchy');
		SELECT @LOGID = @@IDENTITY;
		

		--Retrieve Accounts for SSNs in scope - pick top line hierarchy for the last agent record for a given SSN to account records
		INSERT work.[tmp_AdvisorContactAcnt]
		(
		    [SSN],
		    [ACCOUNT_SALESFORCE_ID],
			[REGION_CODE],
			[BUS_UPLINE_NAME_ID]
		)
		SELECT SRC.[SSN]
			, ACNT.[SALESFORCE_ID]
			, HIER.REGION_CODE
			, HIER.TOPUPLINE_ID
		FROM	[EDW_Outbound].[work].[tmp_advisorContactDeltas] AS NEW			--All producer name ids for SSNs that changed
				INNER JOIN  [work].[stage_sf_Contact_Name_ID] AS SRC ON
					NEW.[SSN] = SRC.[SSN]
				INNER JOIN [work].[stage_sf_AdvisorContactHierarchy] AS HIER ON
					HIER.NAME_ID = src.AGENT_NAMEID
				INNER JOIN [salesforce].[mapping_Account] AS ACNT ON
					ACNT.NAMERECORD_NAMEID = HIER.TOPUPLINE_ID
					AND ACNT.SALESFORCE_ID IS NOT NULL;
		SELECT @ROWS = @@ROWCOUNT;
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Row_Count = @ROWS, Stop_Dt = CURRENT_TIMESTAMP WHERE Row_ID = @LOGID;

		--Retrieve App Date
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AdvisorContact:App Dt');
		SELECT @LOGID = @@IDENTITY;
		;WITH LAST_CONTACT AS
			(SELECT ROW_NUMBER() OVER (PARTITION BY [LIFEPRO_ID__C] ORDER BY Row_ID DESC) AS RN
				, LIFEPRO_ID__C
				, FIRST_APP_DATE__C
			FROM [EDW_DataLake].[salesforce_v].[contact_Curr_Vw] 
			WHERE LIFEPRO_ID__C IS NOT NULL)
			INSERT	[work].[tmp_AdvisorContactAppDt]
				([SSN]
				, [FIRST_APP_DT])
			SELECT src.[SSN]
				, LAST_CONTACT.FIRST_APP_DATE__C
			FROM [EDW_Outbound].[work].[tmp_advisorContactDeltas] AS NEW			--All producer name ids for SSNs that changed
				INNER JOIN  [work].[stage_sf_Contact_Name_ID] AS SRC ON
					NEW.[SSN] = SRC.[SSN]  
				INNER JOIN LAST_CONTACT ON
					src.AGENT_COMPANY_CODE + '-' + src.AGENT_NUMBER  = LAST_CONTACT.LIFEPRO_ID__C
			WHERE	LAST_CONTACT.RN = 1
				AND [LAST_CONTACT].[FIRST_APP_DATE__C] IS NOT NULL;

			SELECT @ROWS = @@ROWCOUNT;
			UPDATE [EDW_Audit].[dbo].[Process_Log] SET Row_Count = @ROWS, Stop_Dt = CURRENT_TIMESTAMP WHERE Row_ID = @LOGID;

        END;
	/* END: Populate temporary tables.*/

	/* START: Refresh mapping table*/
	IF (1=1)
		BEGIN;
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AdvisorContact:Update Mappings');
		SELECT @LOGID = @@IDENTITY;

		UPDATE DEST 
		SET [MODIFIED_DT]							= CURRENT_TIMESTAMP
			, [ADDRESS_EMAILADDRESSID]				= EML.ADDRESS_ID
			, [ADDRESS_VERSIONID]					= EML.VERSION_ID
			, [AGENTEXPANSION03_AGENTNUMBER]		= XP03.[AGENT_NUMBER]
			, [AGENTEXPANSION03_COMPANYCODE]		= XP03.[COMPANY_CODE]
			, [AGENTEXPANSION03_SEQUENCE]			= XP03.[SEQUENCE]
			, [AGENTEXPANSION03_VERSIONID]			= 0						--Hardcode, as there is no VersionID
			, [AGENTEXPANSION10_AGENTNUMBER]		= XP10.[AGENT_NUMBER]
			, [AGENTEXPANSION10_COMPANYCODE]		= XP10.[COMPANY_CODE]
			, [AGENTEXPANSION10_SEQUENCE]			= XP10.[SEQUENCE]
			, [AGENTEXPANSION10_VERSIONID]			= COALESCE(XP10.[VERSION_ID],0)
			, [AGENTRECORD_AGENTNUMBER]				= AGNT.[AGENT_NUMBER]
			, [AGENTRECORD_COMPANY_CODE]			= AGNT.[AGENT_COMPANY_CODE]
			, [AGENTRECORD_VERSIONID]				= 0 --AGNT.[VERSION_ID] --not yet in uat
			, [EXTENSIONRECORDAGTT_AGENTNUMBER]		= AGTT.[POLICY_NUMBER]
			, [EXTENSIONRECORDAGTT_FILEEXTENSION]   = AGTT.[FILE_EXTENTION]
			, [EXTENSIONRECORDAGTT_SUBTYPERECORD]   = AGTT.[SUB_TYPE_RECORD]
			, [EXTENSIONRECORDAGTT_VERSIONID]		= COALESCE(AGTT.[VERSION_ID],0)
			, [EXTENSIONRECORDNADR_FILEEXTENSION]   = NADRNA.[FILE_EXTENTION]
			, [EXTENSIONRECORDNADR_NAMEID]			= NADRNA.[NAME_ID]
			, [EXTENSIONRECORDNADR_SUBTYPERECORD]   = NADRNA.[SUB_TYPE_RECORD]
			, [EXTENSIONRECORDNADR_VERSIONID]		= NADRNA.[VERSION_ID]
			, [NAMELINK_ADDRESSCODE]				= NLK.[ADDRESS_CODE]
			, [NAMELINK_ADDRESSID]					= NLK.[ADDRESS_ID]
			, [NAMELINK_COMPANYCODE]				= NLK.[COMPANY_CODE]
			, [NAMELINK_EFFETIVEDATE]				= NLK.[EFFECTIVE_DATE]
			, [NAMELINK_NAMEID]						= NLK.[NAME_ID]
			, [NAMELINK_POLICYNUMBER]				= NLK.[POLICY_NUMBER]
			, [NAMELINK_VERSIONID]					= NLK.[VERSION_ID]
			, [NAMERECORD_NAMEID]					= AGNT.AGENT_NAMEID --This name ID references the name attributes that are being displayed in SF.  
			, [NAMERECORD_VERSIONID]				= NM.VERSION_ID
			, [RECORDTYPEID]						=	CASE WHEN AGNT.[AGENT_COMPANY_CODE] = '01' THEN @AEContactRecordTypeID
															WHEN AGNT.[AGENT_COMPANY_CODE] = '09' THEN @ELContactRecordTypeID
															ELSE @NYContactRecordTypeID
														END
		FROM  [salesforce].[mapping_Contact] AS DEST
			INNER JOIN [work].[tmp_advisorContactNameRecord] AS NM ON	--Name records
				NM.SSN = DEST.[NAMERECORD_SSN] 
			INNER JOIN [work].[stage_sf_Contact_Name_ID] AS AGNT ON
				AGNT.[SSN] = DEST.[NAMERECORD_SSN]
			LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_03_Curr_Vw] AS XP03 ON
				XP03.[AGENT_NUMBER] = AGNT.AGENT_NUMBER
				AND XP03.COMPANY_CODE = AGNT.AGENT_COMPANY_CODE
			LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_10_Curr_Vw] AS XP10 ON
				XP10.[AGENT_NUMBER] = AGNT.AGENT_NUMBER
				AND XP10.COMPANY_CODE = AGNT.AGENT_COMPANY_CODE
			LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[EXTN_AGTT_Curr_Vw] AS AGTT ON
				AGTT.[POLICY_NUMBER] = AGNT.[AGENT_NUMBER]
				AND AGTT.[COMPANY_CODE] = AGNT.[AGENT_COMPANY_CODE]
			LEFT OUTER JOIN [work].[tmp_advisorContactNADRNARecord] AS NADRNA ON
				NADRNA.[SSN] = DEST.[NAMERECORD_SSN]
			LEFT OUTER JOIN [work].[tmp_advisorContactNalkRecord] AS NLK ON
				NLK.[SSN] = DEST.[NAMERECORD_SSN]
				AND NLK.ADDRESS_TYPE<>'E'
			LEFT OUTER JOIN [work].[tmp_advisorContactNalkRecord] AS EML ON
				EML.SSN = DEST.[NAMERECORD_SSN]
				AND EML.[ADDRESS_TYPE]='E';
	
		SELECT @ROWS = @@ROWCOUNT;
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;

		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AdvisorContact:Insert Mappings');
		SELECT @LOGID = @@IDENTITY;
		INSERT	[salesforce].[mapping_Contact]
		   ([CREATED_DT]
		  , [ADDRESS_EMAILADDRESSID]
		  , [ADDRESS_VERSIONID]
		  , [AGENTEXPANSION03_AGENTNUMBER]
		  , [AGENTEXPANSION03_COMPANYCODE]
		  , [AGENTEXPANSION03_SEQUENCE]
		  , [AGENTEXPANSION03_VERSIONID]
		  , [AGENTEXPANSION10_AGENTNUMBER]
		  , [AGENTEXPANSION10_COMPANYCODE]
		  , [AGENTEXPANSION10_SEQUENCE]
		  , [AGENTEXPANSION10_VERSIONID]
		  , [AGENTRECORD_AGENTNUMBER]
		  , [AGENTRECORD_COMPANY_CODE]
		  , [AGENTRECORD_VERSIONID]
		  , [EXTENSIONRECORDAGTT_AGENTNUMBER]
		  , [EXTENSIONRECORDAGTT_FILEEXTENSION]
		  , [EXTENSIONRECORDAGTT_SUBTYPERECORD]
		  , [EXTENSIONRECORDAGTT_VERSIONID]
		  , [EXTENSIONRECORDNADR_FILEEXTENSION]
		  , [EXTENSIONRECORDNADR_NAMEID]
		  , [EXTENSIONRECORDNADR_SUBTYPERECORD]
		  , [EXTENSIONRECORDNADR_VERSIONID]
		  , [NAMELINK_ADDRESSCODE]
		  , [NAMELINK_ADDRESSID]
		  , [NAMELINK_COMPANYCODE]
		  , [NAMELINK_EFFETIVEDATE]
		  , [NAMELINK_NAMEID]
		  , [NAMELINK_POLICYNUMBER]
		  , [NAMELINK_VERSIONID]
		  , [NAMERECORD_NAMEID]
		  , [NAMERECORD_SSN]
		  , [NAMERECORD_VERSIONID]
		  , [RECORDTYPEID]
		  )
		SELECT	CURRENT_TIMESTAMP
			, [ADDRESS_EMAILADDRESSID]				= EML.ADDRESS_ID
			, [ADDRESS_VERSIONID]					= EML.VERSION_ID
			, [AGENTEXPANSION03_AGENTNUMBER]		= XP03.[AGENT_NUMBER]
			, [AGENTEXPANSION03_COMPANYCODE]		= XP03.[COMPANY_CODE]
			, [AGENTEXPANSION03_SEQUENCE]			= XP03.[SEQUENCE]
			, [AGENTEXPANSION03_VERSIONID]			= 0						--Hardcode, as there is no VersionID
			, [AGENTEXPANSION10_AGENTNUMBER]		= XP10.[AGENT_NUMBER]
			, [AGENTEXPANSION10_COMPANYCODE]		= XP10.[COMPANY_CODE]
			, [AGENTEXPANSION10_SEQUENCE]			= XP10.[SEQUENCE]
			, [AGENTEXPANSION10_VERSIONID]			= COALESCE(XP10.[VERSION_ID],0)
			, [AGENTRECORD_AGENTNUMBER]				= AGNT.[AGENT_NUMBER]
			, [AGENTRECORD_COMPANY_CODE]			= AGNT.[AGENT_COMPANY_CODE]
			, [AGENTRECORD_VERSIONID]				= 0 --AGNT.[VERSION_ID] - not yet in UAT
			, [EXTENSIONRECORDAGTT_AGENTNUMBER]		= AGTT.[POLICY_NUMBER]
			, [EXTENSIONRECORDAGTT_FILEEXTENSION]   = AGTT.[FILE_EXTENTION]
			, [EXTENSIONRECORDAGTT_SUBTYPERECORD]   = AGTT.[SUB_TYPE_RECORD]
			, [EXTENSIONRECORDAGTT_VERSIONID]		= COALESCE(AGTT.[VERSION_ID],0)
			, [EXTENSIONRECORDNADR_FILEEXTENSION]   = NADRNA.[FILE_EXTENTION]
			, [EXTENSIONRECORDNADR_NAMEID]			= NADRNA.[NAME_ID]
			, [EXTENSIONRECORDNADR_SUBTYPERECORD]   = NADRNA.[SUB_TYPE_RECORD]
			, [EXTENSIONRECORDNADR_VERSIONID]		= NADRNA.[VERSION_ID]
			, [NAMELINK_ADDRESSCODE]				= NLK.[ADDRESS_CODE]
			, [NAMELINK_ADDRESSID]					= NLK.[ADDRESS_ID]
			, [NAMELINK_COMPANYCODE]				= NLK.[COMPANY_CODE]
			, [NAMELINK_EFFETIVEDATE]				= NLK.[EFFECTIVE_DATE]
			, [NAMELINK_NAMEID]						= NLK.[NAME_ID]
			, [NAMELINK_POLICYNUMBER]				= NLK.[POLICY_NUMBER]
			, [NAMELINK_VERSIONID]					= NLK.[VERSION_ID]
			, [NAMERECORD_NAMEID]					= AGNT.AGENT_NAMEID --This name ID references the name attributes that are being displayed in SF.  
			, [NAMERECORD_SSN]						= NM.[SSN]
			, [NAMERECORD_VERSIONID]				= NM.VERSION_ID
			, [RECORDTYPEID]						=	CASE WHEN AGNT.[AGENT_COMPANY_CODE] = '01' THEN @AEContactRecordTypeID
															WHEN AGNT.[AGENT_COMPANY_CODE] = '09' THEN @ELContactRecordTypeID
															ELSE @NYContactRecordTypeID
														END
	FROM [work].[tmp_advisorContactNameRecord] AS NM 	--Name records
			INNER JOIN [work].[stage_sf_Contact_Name_ID] AS AGNT ON
				AGNT.[SSN] = NM.[SSN]
			LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_03_Curr_Vw] AS XP03 ON
				XP03.[AGENT_NUMBER] = AGNT.AGENT_NUMBER
				AND XP03.COMPANY_CODE = AGNT.AGENT_COMPANY_CODE
			LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_10_Curr_Vw] AS XP10 ON
				XP10.[AGENT_NUMBER] = AGNT.AGENT_NUMBER
				AND XP10.COMPANY_CODE = AGNT.AGENT_COMPANY_CODE
			LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[EXTN_AGTT_Curr_Vw] AS AGTT ON
				AGTT.[POLICY_NUMBER] = AGNT.[AGENT_NUMBER]
				AND AGTT.[COMPANY_CODE] = AGNT.AGENT_COMPANY_CODE
			LEFT OUTER JOIN [work].[tmp_advisorContactNADRNARecord] AS NADRNA ON
				NADRNA.[SSN] = NM.[SSN]
			LEFT OUTER JOIN [work].[tmp_advisorContactNalkRecord] AS NLK ON
				NLK.[SSN] = NM.[SSN]
				AND NLK.ADDRESS_TYPE<>'E' 
			LEFT OUTER JOIN [work].[tmp_advisorContactNalkRecord] AS EML ON
				EML.SSN = NM.[SSN]
				AND EML.[ADDRESS_TYPE]='E'
		WHERE NOT EXISTS (SELECT 1 FROM [salesforce].[mapping_Contact] AS DEST WHERE DEST.[NAMERECORD_SSN] = NM.[SSN]);

		SELECT @ROWS = @@ROWCOUNT;
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
		END; 
	/* END: Refresh mapping table*/

	/* START: Populate staging table.*/
	IF (1=1)
		BEGIN;
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AdvisorContact:Update staging');
		SELECT @LOGID = @@IDENTITY;
		UPDATE DEST
		SET	 [AccountID]								= ACNT.ACCOUNT_SALESFORCE_ID
			, [BirthDate]								= CASE WHEN (NM.[BIRTHDATE] > '12/31/4000' OR NM.[BIRTHDATE]<'1/1/1700') THEN NULL ELSE NM.[BIRTHDATE] END
			, [BusinessPhone]							= COALESCE(CAST(NLK.[PHONE_NUMBER] AS VARCHAR(40)),SPHONE.[PhoneNumber],'')
			, [DoNotCall]								= CASE WHEN NLK.BLOCK_IND IN ('A', 'B','D','E','G','I') THEN 1 ELSE 0 END
			, [Email]									= EML.Email
			, [HasOptedOutOfEmail]						= CASE WHEN NLK.BLOCK_IND IN ('A','B','C','D','F','G','H','L') THEN 1 ELSE 0 END
			, [HasOptedOutOfFax]						= CASE WHEN NLK.BLOCK_IND IN ('A','B','C','E','F','I','J','M') THEN 1 ELSE 0 END
			, [OwnerID]									= NULL --NOT DEFINED
			, [FirstName]								= NM.[FIRSTNAME]
			, [LastName]								= NM.[LASTNAME]
			, [MailingAddress]							= ADDR.[MailingAddress]
			, [MailingCity]								= ADDR.[MailingCity]
			, [MailingCountry]							= ADDR.[MailingCountry] 
			, [MailingState]							= ADDR.[MailingState]
			, [MailingStreet]							= LEFT(ADDR.[MailingStreet],105)
			, [MailingPostalCode]						= ADDR.[MailingPostalCode]
			, [MiddleName]								= NM.[MIDDLENAME]
			, [OtherPhone]								= NULL -- NOT DEFINED
			--, [OtherAddress]							= GEO.MailingAddress
			--, [OtherCity]								= GEO.[MailingCity]
			--, [OtherCountry]							= GEO.[MailingCountry]
			--, [OtherState]								= GEO.[MailingState]
			--, [OtherStreet]								= LEFT(GEO.[MailingStreet], 105)
			--, [OtherPostalCode]							= GEO.[MailingPostalCode]
			, [RecordType]								= MPG.[RECORDTYPEID]
			, [Salutation]								= NM.[SALUTATION]
			, [Suffix]									= NM.[SUFFIX]
			, [LifePro_Last_Modified_DateTime__c]		= MPG.[VERSIONID]
			, [DLRS_2020_Fall_Conference_Premium__c]	= NULL --NOT DEFINED
			, [DLRS_2021_Fall_Conference_Premium__c]	= NULL --NOT DEFINED
			, [All_Time_Premium__c]						= NULL --NOT DEFINED
			, [AML_Training__c]							= CASE WHEN AGTT.AML_DATE >'12/31/4000' OR AGTT.AML_DATE<'1/1/1700' THEN NULL ELSE  CAST(AGTT.AML_DATE AS DATE) END
			, [Total_Production__c]						= NULL --NOT DEFINED
			, [DLRS_August_Premium_Total__c]			= NULL --NOT DEFINED
			, [Company_Code__c]							= MPG.[AGENTEXPANSION03_COMPANYCODE]
			, [Contact_Record_Type__c]					= NULL --Formula
			, [First_App_Date__c]						= APPDT.FIRST_APP_DT
			, [Gender__c]								= NM.GENDER
			, [Last_App_Date__c]						= NULL	--NOT DEFINED
			, [Last_Status_Date__c]						= NULL	--NOT DEFINED
			, [Last_Terminated_Date__c]					= NULL	--NOT DEFINED
			, [LifePro_ID__c]							= MPG.[ID]
			, [LO_Agent__c]								= NULL	--NOT DEFINED
			, [Name_Format__c]							= NM.NAME_FORMAT
			, [Preferred_Name__c]						= NADR.[PERFERRED_NAME] 
			, [Region__c]								= ACNT.[REGION_CODE]
			, [State__c]								= NULL	--NOT DEFINED
			, [Suitability__c]							= CASE WHEN XP03.[SUITABILITY_FLAG] = ' ' THEN NULL 
																WHEN XP03.SUITABILITY_FLAG = 'Y' THEN 1
																ELSE 0 END 
			, [Terminated_Amount__c]					= NULL	--NOT DEFINED
			, [YTD_Activity_Amount__c]					= NULL	--NOT DEFINED
			, [YTD_Apps_Received__c]					= NULL	--NOT DEFINED
			, [YTD_Effective_Amount__c]					= NULL	--NOT DEFINED
			, [DLRS_YTD_FIA_Premium__c]					= NULL	--NOT DEFINED
			, [YTD_Issue_Amount__c]						= NULL	--NOT DEFINED
			, [Parent_Name_Id__c]						= ACNT.[BUS_UPLINE_NAME_ID] 
			, [Name_Id__c]								= MPG.NAMERECORD_NAMEID
			, [NPN__c]									= NADR.NPN_NUM
			, [CRD__c]									= NADR.CRD_NUM
			, [Modified_dt]								= CURRENT_TIMESTAMP
			, [Reject_Flag]								= CASE	WHEN COALESCE(NM.[LASTNAME],'')='' THEN 2
																WHEN (NM.[BIRTHDATE] > '12/31/4000' OR NM.[BIRTHDATE]<'1/1/1700') THEN 1
																WHEN (AGTT.AML_DATE >'12/31/4000' OR AGTT.AML_DATE<'1/1/1700') THEN 1
															ELSE 0
															END
															
			, [Reject_Dt]								= CASE	WHEN COALESCE(NM.[LASTNAME],'')='' THEN CURRENT_TIMESTAMP
																WHEN (NM.[BIRTHDATE] > '12/31/4000' OR NM.[BIRTHDATE]<'1/1/1700') THEN CURRENT_TIMESTAMP
																WHEN (AGTT.AML_DATE >'12/31/4000' OR AGTT.AML_DATE<'1/1/1700') THEN CURRENT_TIMESTAMP
															ELSE NULL
															END
			, [Reject_Reason]							= CASE	WHEN COALESCE(NM.[LASTNAME],'')='' THEN 'Last name is not available'
																WHEN (NM.[BIRTHDATE] > '12/31/4000' OR NM.[BIRTHDATE]<'1/1/1700') THEN 'Invalid Birth Date'
																WHEN (AGTT.AML_DATE >'12/31/4000' OR AGTT.AML_DATE<'1/1/1700') THEN 'Invalid AML Date'
															ELSE NULL 
															END
		
		FROM [salesforce].[Advisor_Contact] AS DEST
			INNER JOIN [work].[tmp_advisorContactNameRecord] AS NM ON
				NM.[SSN] = DEST.[SSN__c]
			INNER JOIN [salesforce].[mapping_Contact] AS MPG ON
				MPG.[ID] = DEST.[LifePro_ID__c]
			INNER JOIN [work].[stage_sf_Contact_Name_ID] AS AGNT ON
				AGNT.[SSN] = NM.[SSN]
			LEFT OUTER JOIN work.[tmp_AdvisorContactAcnt] AS ACNT ON
				ACNT.[SSN] =  MPG.[NAMERECORD_SSN]
			LEFT OUTER JOIN work.[tmp_advisorContactNalkRecord] AS NLK ON
				NLK.[SSN] = NM.[SSN]
				AND NLK.ADDRESS_TYPE='O'
			LEFT OUTER JOIN [salesforce].[PhoneNumber] AS SPHONE ON
				SPHONE.NameID = NLK.NAME_ID
			LEFT OUTER JOIN [work].[tmp_AdvisorContactEmail] AS EML ON
				EML.SSN = NM.SSN
			LEFT OUTER JOIN [work].[tmp_AdvisorContactAddress] AS ADDR ON
				ADDR.SSN = NM.SSN
			--LEFT OUTER JOIN [work].[tmp_AdvisorContactAddress] AS GEO ON
			--	GEO.SSN = NM.SSN
			--	AND GEO.Address_Code = 'GEO'
			LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[EXTN_AGTT_Curr_Vw] AS AGTT ON
				AGTT.[POLICY_NUMBER] = AGNT.[AGENT_NUMBER]
				AND AGTT.[COMPANY_CODE] = AGNT.[AGENT_COMPANY_CODE]
			LEFT OUTER JOIN [work].[tmp_AdvisorContactAppDt] AS APPDT ON 
				NM.[SSN] =APPDT.[SSN]
			LEFT OUTER JOIN [work].[tmp_advisorContactNADRNARecord] AS NADR ON
				NADR.[SSN] = NM.[SSN]
			LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_03_Curr_Vw] AS XP03  ON
				XP03.AGENT_NUMBER = AGNT.AGENT_NUMBER
				AND XP03.COMPANY_CODE = AGNT.AGENT_COMPANY_CODE;
		--WHERE (MPG.VERSIONID > COALESCE(MPG.SALESFORCE_DT,0)
		--	OR MPG.salesforce_dt IS NULL)
		--	AND DEST.Reject_Flag<2;	--Do not udpate rejected records
		SELECT @ROWS = @@ROWCOUNT;
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;

		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AdvisorContact:Insert staging');
		SELECT @LOGID = @@IDENTITY;
		
		INSERT [salesforce].[Advisor_Contact]
			( [AccountID]
			, [BirthDate]
			, [BusinessPhone]
			, [DoNotCall]
			, [Email]
			, [HasOptedOutOfEmail]
			, [HasOptedOutOfFax]
			, [OwnerID]
			, [FirstName]
			, [LastName]
			, [MailingAddress]
			, [MailingCity]
			, [MailingCountry]
			, [MailingState]
			, [MailingStreet]
			, [MailingPostalCode]
			, [MiddleName]
			--, [OtherPhone]
			--, [OtherAddress]
			--, [OtherCity]
			--, [OtherCountry]
			--, [OtherState]
			--, [OtherStreet]
			--, [OtherPostalCode]
			, [RecordType]
			, [Salutation]
			, [Suffix]
			, [LifePro_Last_Modified_DateTime__c]
			, [DLRS_2020_Fall_Conference_Premium__c]
			, [DLRS_2021_Fall_Conference_Premium__c]
			, [All_Time_Premium__c]
			, [AML_Training__c]
			, [Total_Production__c]
			, [DLRS_August_Premium_Total__c]
			, [Company_Code__c]
			, [Contact_Record_Type__c]
			, [First_App_Date__c]
			, [Gender__c]
			, [Last_App_Date__c]
			, [Last_Status_Date__c]
			, [Last_Terminated_Date__c]
			, [LifePro_ID__c]
			, [LO_Agent__c]
			, [Name_Format__c]
			, [Preferred_Name__c]
			, [Region__c]
			, [SSN__c]
			, [State__c]
			, [Suitability__c]
			, [Terminated_Amount__c]
			, [YTD_Activity_Amount__c]
			, [YTD_Apps_Received__c]
			, [YTD_Effective_Amount__c]
			, [DLRS_YTD_FIA_Premium__c]
			, [YTD_Issue_Amount__c]
			, [Parent_Name_Id__c]
			, [Name_Id__c]
			, [NPN__c]
			, [CRD__c]
			, [Created_dt]
			, [Reject_Flag]
			, [Reject_Dt]
			, [Reject_Reason])
		SELECT	[AccountID]								= ACNT.ACCOUNT_SALESFORCE_ID
			, [BirthDate]								= CASE WHEN (NM.[BIRTHDATE] > '12/31/4000' OR NM.[BIRTHDATE]<'1/1/1700') THEN NULL ELSE NM.[BIRTHDATE] END
			, [BusinessPhone]							= COALESCE(CAST(NLK.[PHONE_NUMBER] AS VARCHAR(40)),SPHONE.[PhoneNumber],'')
			, [DoNotCall]								= CASE WHEN NLK.BLOCK_IND IN ('A', 'B','D','E','G','I') THEN 1 ELSE 0 END
			, [Email]									= EML.Email
			, [HasOptedOutOfEmail]						= CASE WHEN NLK.BLOCK_IND IN ('A','B','C','D','F','G','H','L') THEN 1 ELSE 0 END
			, [HasOptedOutOfFax]						= CASE WHEN NLK.BLOCK_IND IN ('A','B','C','E','F','I','J','M') THEN 1 ELSE 0 END
			, [OwnerID]									= NULL --NOT DEFINED
			, [FirstName]								= NM.[FIRSTNAME]
			, [LastName]								= NM.[LASTNAME]
			, [MailingAddress]							= ADDR.[MailingAddress]
			, [MailingCity]								= ADDR.[MailingCity]
			, [MailingCountry]							= ADDR.[MailingCountry] 
			, [MailingState]							= ADDR.[MailingState]
			, [MailingStreet]							= LEFT(ADDR.[MailingStreet],105)
			, [MailingPostalCode]						= ADDR.[MailingPostalCode]
			, [MiddleName]								= NM.[MIDDLENAME]
			--, [OtherPhone]								= NULL -- NOT DEFINED
			--, [OtherAddress]							= GEO.MailingAddress
			--, [OtherCity]								= GEO.[MailingCity]
			--, [OtherCountry]							= GEO.[MailingCountry]
			--, [OtherState]								= GEO.[MailingState]
			--, [OtherStreet]								= LEFT(GEO.[MailingStreet], 105)
			--, [OtherPostalCode]							= GEO.[MailingPostalCode]
			, [RecordType]								= MPG.[RECORDTYPEID]
			, [Salutation]								= NM.[SALUTATION]
			, [Suffix]									= NM.[SUFFIX]
			, [LifePro_Last_Modified_DateTime__c]		= MPG.[VERSIONID]
			, [DLRS_2020_Fall_Conference_Premium__c]	= NULL --NOT DEFINED
			, [DLRS_2021_Fall_Conference_Premium__c]	= NULL --NOT DEFINED
			, [All_Time_Premium__c]						= NULL --NOT DEFINED
			, [AML_Training__c]							= CASE WHEN AGTT.AML_DATE >'12/31/4000' OR AGTT.AML_DATE<'1/1/1700' THEN NULL ELSE  CAST(AGTT.AML_DATE AS DATE) END
			, [Total_Production__c]						= NULL --NOT DEFINED
			, [DLRS_August_Premium_Total__c]			= NULL --NOT DEFINED
			, [Company_Code__c]							= MPG.[AGENTEXPANSION03_COMPANYCODE]
			, [Contact_Record_Type__c]					= NULL --Formula
			, [First_App_Date__c]						= APPDT.FIRST_APP_DT
			, [Gender__c]								= NM.GENDER
			, [Last_App_Date__c]						= NULL	--NOT DEFINED
			, [Last_Status_Date__c]						= NULL	--NOT DEFINED
			, [Last_Terminated_Date__c]					= NULL	--NOT DEFINED
			, [LifePro_ID__c]							= MPG.[ID]
			, [LO_Agent__c]								= NULL	--NOT DEFINED
			, [Name_Format__c]							= NM.NAME_FORMAT
			, [Preferred_Name__c]						= NADR.[PERFERRED_NAME] 
			, [Region__c]								= ACNT.[REGION_CODE]
			, [SSN]										= NM.[SSN]
			, [State__c]								= NULL	--NOT DEFINED
			, [Suitability__c]							= CASE WHEN XP03.[SUITABILITY_FLAG] = ' ' THEN NULL 
																WHEN XP03.SUITABILITY_FLAG = 'Y' THEN 1
																ELSE 0 END 
			, [Terminated_Amount__c]					= NULL	--NOT DEFINED
			, [YTD_Activity_Amount__c]					= NULL	--NOT DEFINED
			, [YTD_Apps_Received__c]					= NULL	--NOT DEFINED
			, [YTD_Effective_Amount__c]					= NULL	--NOT DEFINED
			, [DLRS_YTD_FIA_Premium__c]					= NULL	--NOT DEFINED
			, [YTD_Issue_Amount__c]						= NULL	--NOT DEFINED
			, [Parent_Name_Id__c]						= ACNT.[BUS_UPLINE_NAME_ID] 
			, [Name_Id__c]								= MPG.NAMERECORD_NAMEID
			, [NPN__c]									= NADR.NPN_NUM
			, [CRD__c]									= NADR.CRD_NUM
			, [CREATED_DT]								= CURRENT_TIMESTAMP
			, [Reject_Flag]								= CASE	WHEN COALESCE(NM.[LASTNAME],'')='' THEN 2
																WHEN (NM.[BIRTHDATE] > '12/31/4000' OR NM.[BIRTHDATE]<'1/1/1700') THEN 1
																WHEN (AGTT.AML_DATE >'12/31/4000' OR AGTT.AML_DATE<'1/1/1700') THEN 1
															ELSE 0
															END
															
			, [Reject_Dt]								= CASE	WHEN COALESCE(NM.[LASTNAME],'')='' THEN CURRENT_TIMESTAMP
																WHEN (NM.[BIRTHDATE] > '12/31/4000' OR NM.[BIRTHDATE]<'1/1/1700') THEN CURRENT_TIMESTAMP
																WHEN (AGTT.AML_DATE >'12/31/4000' OR AGTT.AML_DATE<'1/1/1700') THEN CURRENT_TIMESTAMP
															ELSE NULL
															END
			, [Reject_Reason]							= CASE	WHEN COALESCE(NM.[LASTNAME],'')='' THEN 'Last name is not available'
																WHEN (NM.[BIRTHDATE] > '12/31/4000' OR NM.[BIRTHDATE]<'1/1/1700') THEN 'Invalid Birth Date'
																WHEN (AGTT.AML_DATE >'12/31/4000' OR AGTT.AML_DATE<'1/1/1700') THEN 'Invalid AML Date'
															ELSE NULL 
															END
	FROM  [work].[tmp_advisorContactNameRecord] AS NM --WHERE nm.ssn='001327468'
			INNER JOIN [salesforce].[mapping_Contact] AS MPG ON
				MPG.[NAMERECORD_SSN] = NM.[SSN] 
			INNER JOIN [work].[stage_sf_Contact_Name_ID] AS AGNT ON
				AGNT.[SSN] = NM.[SSN]
			LEFT OUTER JOIN work.[tmp_AdvisorContactAcnt] AS ACNT ON
				ACNT.[SSN] =  MPG.[NAMERECORD_SSN] 
			LEFT OUTER JOIN work.[tmp_advisorContactNalkRecord] AS NLK ON
				NLK.[SSN] = NM.[SSN]
				AND NLK.ADDRESS_TYPE='O'
				AND nlk.[ADDRESS_CODE] <>'GEO' 
			LEFT OUTER JOIN [salesforce].[PhoneNumber] AS SPHONE ON
				SPHONE.NameID = NLK.NAME_ID 
			LEFT OUTER JOIN [work].[tmp_AdvisorContactEmail] AS EML ON
				EML.SSN = NM.SSN 
			LEFT OUTER JOIN [work].[tmp_AdvisorContactAddress] AS ADDR ON
				ADDR.SSN = NM.SSN
			--LEFT OUTER JOIN [work].[tmp_AdvisorContactAddress] AS GEO ON
			--	GEO.SSN = NM.SSN
			--	AND GEO.Address_Code = 'GEO' 
			LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[EXTN_AGTT_Curr_Vw] AS AGTT ON
				AGTT.[POLICY_NUMBER] = AGNT.[AGENT_NUMBER]
				AND AGTT.[COMPANY_CODE] = AGNT.[AGENT_COMPANY_CODE] 
			LEFT OUTER JOIN [work].[tmp_AdvisorContactAppDt] AS APPDT ON 
				NM.[SSN] =APPDT.[SSN] 
			LEFT OUTER JOIN [work].[tmp_advisorContactNADRNARecord] AS NADR ON
				NADR.[SSN] = NM.[SSN] 
			LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_03_Curr_Vw] AS XP03  ON
				XP03.AGENT_NUMBER = AGNT.AGENT_NUMBER
				AND XP03.COMPANY_CODE = AGNT.AGENT_COMPANY_CODE
			WHERE NOT EXISTS(SELECT 1 FROM [salesforce].[Advisor_Contact] AS DEST WHERE DEST.LifePro_ID__c = MPG.ID);
				--AND  (MPG.VERSIONID > COALESCE(MPG.SALESFORCE_DT,0)
				--	OR MPG.salesforce_dt IS NULL);
		SELECT @ROWS = @@ROWCOUNT;
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
		END; 
	/* END: Populate staging table.*/
	/* START: Add error handling */
	IF (1=1)
		BEGIN;
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AdvisorContact:Reject emails');
		SELECT @LOGID = @@IDENTITY;
		
		;WITH INVALID_EMAIL
			AS (SELECT [Email] 
				, [reject_flag]
				, [Reject_Dt]
				, [Reject_Reason]
			FROM	[salesforce].[Advisor_Contact]
			WHERE	[Email] = '' 
				OR [Email] like '% %' 
				OR [Email] like ('%["(),:;<>\]%') 
				OR substring([Email] ,charindex('@',[Email]),len([Email])) like ('%[!#$%&*+/=?^`_{|]%') 
				OR (left([Email],1) like ('[-_.+]') or right([Email],1) like ('[-_.+]'))                                                                               
				OR ([Email] like '%[%' or [EMAIL] like '%]%') 
				OR [Email] LIKE '%@%@%' 
				OR [Email] NOT LIKE '_%@_%._%' 
				OR [Email] LIKE '%..%'
				OR [Email] LIKE '%-.%'
				OR [Email] LIKE '%.@%' 
				OR [Email] LIKE '%@.%' 
				OR [Email] LIKE '%@%.-%' 
				OR [Email] LIKE '%@%-.%' 
				OR [Email] LIKE '%@-%' 
				OR CHARINDEX(CHAR(39),[Email] )=1
				OR CHARINDEX(' ',LTRIM(RTRIM([Email]))) > 0)
		UPDATE INVALID_EMAIL
		SET Reject_dt = CURRENT_TIMESTAMP
			, Reject_Reason = 'Invalid Email: ' + LEFT(COALESCE([email],''),80)
			, reject_Flag = 1
			, Email = NULL;

		SELECT @ROWS = @@ROWCOUNT;
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
		END;
	/* END: Add error handling  */
	/* START: Update delta settings.*/
	IF (1=1)
		BEGIN;
		UPDATE DEST SET [SETTING_VALUE] = @END_ADDR FROM [EDW_Audit].[dbo].[Delta_Settings] AS DEST WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_ADDR;
		UPDATE DEST SET [SETTING_VALUE] = @END_AGNT FROM [EDW_Audit].[dbo].[Delta_Settings] AS DEST WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_AGNT;
		UPDATE DEST SET [SETTING_VALUE] = @END_AGTT FROM [EDW_Audit].[dbo].[Delta_Settings] AS DEST WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_AGTT;
		UPDATE DEST SET [SETTING_VALUE] = @END_HIER FROM [EDW_Audit].[dbo].[Delta_Settings] AS DEST WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_HIER;
		UPDATE DEST SET [SETTING_VALUE] = @END_NADR FROM [EDW_Audit].[dbo].[Delta_Settings] AS DEST WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_NADR;
		UPDATE DEST SET [SETTING_VALUE] = @END_NALK FROM [EDW_Audit].[dbo].[Delta_Settings] AS DEST WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_NALK;
		UPDATE DEST SET [SETTING_VALUE] = @END_NAME FROM [EDW_Audit].[dbo].[Delta_Settings] AS DEST WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_NAME;
		UPDATE DEST SET [SETTING_VALUE] = @END_XP03 FROM [EDW_Audit].[dbo].[Delta_Settings] AS DEST WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_XP03;
		UPDATE DEST SET [SETTING_VALUE] = @END_XP10 FROM [EDW_Audit].[dbo].[Delta_Settings] AS DEST WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_XP10;
		END;
    /* END: Update delta settings.*/
	END;
--Logging
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;   

END TRY
BEGIN CATCH

DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();
--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AdvisorContact:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;

RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;

  

GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Account_BrokerDealer]    Script Date: 5/17/2022 2:04:39 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
select object_name(process_id),*, DATEDIFF(MINUTE, start_dt, stop_dt) from edw_audit..process_log 
WHERE object_name(process_id) ='usp_Upsert_Account_BrokerDealer'
AND start_dt >=CAST(CURRENT_TIMESTAMP AS DATE);
*/
CREATE             PROCEDURE [salesforce].[usp_Upsert_Account_BrokerDealer]    
    
AS    
BEGIN;    
-- =============================================    
 --VERSIONING a.b.c - where a - major version (breaks compatibility) - b - minor version (additions) - c - bug fixes   
 -- Author:    Steve Tangeman    
 -- CreationDate:   2021-06-28    
 -- Version:    0.1.0    
 -- Description:   Refresh Account Broker Dealer table for synchronization with SalesForce     
 -- Change Log:       
 -- Modified By:  Anastasia Vogelaar    
 -- Modified Date:  9/2/2021    
 -- Version:   0.1.3    
 -- Description:  Added check to only include accounts that were not uploaded with other acount types    
    
  -- Change Log:       
 -- Modified By:  Anastasia Vogelaar    
 -- Modified Date:  09/07/2021    
 -- Version:   0.1.2    
 -- Description:  Replaced Drop Table with Truncate    
     
 -- Modified By:  Anastasia Vogelaar    
 -- Modified Date:  09/10/2021    
 -- Version:   0.1.3    
 -- Description:  Added email check    
    
 -- Modified By:  Harish Kola    
 -- Modified Date:  11/11/2021    
 -- Version:   0.2.0    
 -- Description:  Included Audit logging,Mapping table merge and updated Rejection code     

 -- Modified By:	Anastasia Vogelaar    
 -- Modified Date:  12/18/2021 
 -- Version:		0.2.1    
 -- Description:	Added email check for char(39)
 
 -- Modified By:	Anastasia Vogelaar    
 -- Modified Date:  12/20/2021 
 -- Version:		0.2.2    
 -- Description:	Added record type check
 
 -- Modified By:	Anastasia Vogelaar    
 -- Modified Date:  12/20/2021 
 -- Version:		0.2.3    
 -- Description:	Replaced merge with update/insert - only update if recordtypeid matches, only insert if NAME ID is new

 -- Modified By:	Anastasia Vogelaar    
 -- Modified Date:  01/01/2022
 -- Version:		0.2.4    
 -- Description:	Adapted code to account for NULL Version IDs in Production

 -- Modified By:    Jason Rippel    
 -- Modified Date:	2022-01-20
 -- Version:		0.2.5   
 -- Description:	Updated NADRNA CTE to Temp table for performance

 -- Modified By:	Jason Rippel    
 -- Modified Date:	2022-01-24
 -- Version:		0.2.6   
 -- Description:	Updated EmailAddressIds CTE to Temp table for performance

 -- Modified By:	Steve Tangeman    
 -- Modified Date:	3/2/2022
 -- Version:		0.2.7
 -- Description:	Commented out version ID check for now
 
 -- Modified By:	Darin Baarda    
 -- Modified Date:	3/17/2022
 -- Version:		0.2.8
 -- Description:	Change how email are gotten

 -- Modified By:	Anastasia Vogelaar
 -- Modified Date:	04/08/2022
 -- Version:		0.3.0
 -- Description:	Added Phone Number check, replaced merge statemet with Insert, 
 --					Removed NADRNA refrence - it's not being used, added view (instead 
 --					of current view) for delta references

 -- Full reload:    
--DECLARE @SETTING_NAME_HIER   NVARCHAR(50) = 'SYNC_ACCOUNT_BD_HIER_CURR_VW';    
--DECLARE @SETTING_NAME_AGNT   NVARCHAR(50) = 'SYNC_ACCOUNT_BD_AGNT_CURR_VW';    
--DECLARE @SETTING_NAME_NALK   NVARCHAR(50) = 'SYNC_ACCOUNT_BD_NALK_CURR_VW';    
--DECLARE @SETTING_NAME_NAME   NVARCHAR(50) = 'SYNC_ACCOUNT_BD_NAME_CURR_VW';    
--DECLARE @SETTING_NAME_ADDR   NVARCHAR(50) = 'SYNC_ACCOUNT_BD_ADDR_CURR_VW';    
--DECLARE @SETTING_NAME_AEXP_10   NVARCHAR(50) = 'SYNC_ACCOUNT_BD_AEXP_10_CURR_VW'    
--DECLARE @SETTING_NAME_AEXP_03   NVARCHAR(50) = 'SYNC_ACCOUNT_BD_AEXP_03_CURR_VW'    
--DECLARE @SETTING_NAME_PHONE   NVARCHAR(50) = 'SYNC_ACCOUNT_BD_PHONE'   
--DECLARE @SETTING_MODULE    NVARCHAR(50) = 'SF_SYNC';    
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_HIER AND SETTING_MODULE = @SETTING_MODULE;    
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_AGNT AND SETTING_MODULE = @SETTING_MODULE;    
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_NALK AND SETTING_MODULE = @SETTING_MODULE;    
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_NAME AND SETTING_MODULE = @SETTING_MODULE;    
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_ADDR AND SETTING_MODULE = @SETTING_MODULE;    
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_AEXP_10 AND SETTING_MODULE = @SETTING_MODULE;    
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_AEXP_03 AND SETTING_MODULE = @SETTING_MODULE;    
--UPDATE SETTINGS SET SETTING_VALUE = '1/1/1753' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_PHONE AND SETTING_MODULE = @SETTING_MODULE;    
-- =============================================    
    
SET NOCOUNT ON;    
DECLARE @SETTING_NAME_HIER		NVARCHAR(50) = 'SYNC_ACCOUNT_BD_HIER_CURR_VW';    
DECLARE @SETTING_NAME_AGNT		NVARCHAR(50) = 'SYNC_ACCOUNT_BD_AGNT_CURR_VW';    
DECLARE @SETTING_NAME_NALK		NVARCHAR(50) = 'SYNC_ACCOUNT_BD_NALK_CURR_VW';    
DECLARE @SETTING_NAME_NAME		NVARCHAR(50) = 'SYNC_ACCOUNT_BD_NAME_CURR_VW';    
DECLARE @SETTING_NAME_ADDR		NVARCHAR(50) = 'SYNC_ACCOUNT_BD_ADDR_CURR_VW';    
DECLARE @SETTING_NAME_AEXP_10	NVARCHAR(50) = 'SYNC_ACCOUNT_BD_AEXP_10_CURR_VW';  
DECLARE @SETTING_NAME_AEXP_03	NVARCHAR(50) = 'SYNC_ACCOUNT_BD_AEXP_03_CURR_VW'; 
DECLARE @SETTING_NAME_PHONE		NVARCHAR(50) = 'SYNC_ACCOUNT_BD_PHONE';
DECLARE @SETTING_MODULE			NVARCHAR(50) = 'SF_SYNC';    
DECLARE @START_VAL_HIER			BIGINT; 
DECLARE @START_VAL_AGNT			BIGINT;
DECLARE @START_VAL_NALK			BIGINT;
DECLARE @START_VAL_NAME			BIGINT; 
DECLARE @START_VAL_ADDR			BIGINT;    
DECLARE @START_VAL_AEXP_10		BIGINT;
DECLARE @START_VAL_AEXP_03		BIGINT;
DECLARE @START_VAL_PHONE		DATETIME2;
DECLARE @END_VAL_HIER			BIGINT;    
DECLARE @END_VAL_AGNT			BIGINT;    
DECLARE @END_VAL_NALK			BIGINT;    
DECLARE @END_VAL_NAME			BIGINT;    
DECLARE @END_VAL_ADDR			BIGINT;    
DECLARE @END_VAL_AEXP_10		BIGINT;    
DECLARE @END_VAL_AEXP_03		BIGINT;  
DECLARE @END_VAL_PHONE			DATETIME2;
DECLARE @RecordTypeID			NVARCHAR(18);    
DECLARE @LOGID_START			INT;  --Used for the first log id    
DECLARE @LOGID					INT;  --Used for intermediate log ids    
DECLARE @ROWS					INT;  --Used for logging row counts    
    
    
BEGIN TRY  
IF NOT EXISTS(SELECT 1 FROM EDW_Audit.[dbo].[Delta_Settings] WHERE SETTING_NAME = @SETTING_NAME_PHONE AND SETTING_MODULE = @SETTING_MODULE)
	BEGIN;
	INSERT EDW_Audit.[dbo].[Delta_Settings] (Setting_Value, Setting_Module, Setting_Name) VALUES ('1/1/1753', @SETTING_MODULE, @SETTING_NAME_PHONE);
	END;

--Logging    
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountBrokerDealer:Stat/End Indicator');    
SELECT @LOGID_START = @@IDENTITY;    
    
--Do not do anything if there are pending records from Salesforce    
--IF NOT EXISTS(SELECT 1 FROM [salesforce].[mapping_Account] WHERE [NAMERECORD_NAMEID] IS NULL)  
IF NOT EXISTS(SELECT 1 FROM [salesforce].[mapping_Account] WHERE [NAMERECORD_NAMEID] IS NULL)
	BEGIN;

IF (1=1)      
 BEGIN; 
SELECT @RecordTypeID	= [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE [DEVELOPERNAME] = 'Broker_Dealer' AND SOBJECTTYPE = 'Account';     
SELECT @START_VAL_HIER  = CAST(SETTING_VALUE as INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_HIER AND Setting_Module = @SETTING_MODULE;    
SELECT @END_VAL_HIER	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[HIER_Vw];    
SELECT @START_VAL_AGNT  = CAST(SETTING_VALUE as INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_AGNT AND Setting_Module = @SETTING_MODULE;    
SELECT @END_VAL_AGNT	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[AGNT_Vw];   
SELECT @START_VAL_NALK	= CAST(SETTING_VALUE as INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_NALK AND Setting_Module = @SETTING_MODULE;    
SELECT @END_VAL_NALK	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[NALK_Vw];    
SELECT @START_VAL_NAME	= CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_NAME AND Setting_Module = @SETTING_MODULE;    
SELECT @END_VAL_NAME	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[NAME_BusKey_Vw];    
SELECT @START_VAL_ADDR	= CAST(SETTING_VALUE as INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_ADDR AND Setting_Module = @SETTING_MODULE;       
SELECT @END_VAL_ADDR	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[ADDR_Vw];  
SELECT @START_VAL_AEXP_10	= CAST(SETTING_VALUE as INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_AEXP_10 AND Setting_Module = @SETTING_MODULE;  
SELECT @END_VAL_AEXP_10 = MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[AEXP_10_Vw];  
SELECT @START_VAL_AEXP_03	= CAST(SETTING_VALUE as INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_AEXP_03 AND Setting_Module = @SETTING_MODULE;  
SELECT @END_VAL_AEXP_03	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[AEXP_03_Vw];    
SELECT @START_VAL_PHONE = CAST([SETTING_VALUE] AS DATETIME2) FROM EDW_Audit.[dbo].[Delta_Settings] WHERE [Setting_Name]= @SETTING_NAME_PHONE AND [Setting_Module]= @SETTING_MODULE;
SELECT @END_VAL_PHONE	= MAX(COALESCE([MODIFIED_DT], [CREATED_DT],'1/1/1753')) FROM [salesforce].[PhoneNumber];     
 

   

/* START: Create temporary tables.*/    
IF (1=1)    
   BEGIN;    
   --Name Ids - this table will contain all changed business keys for all dependencies    
   IF OBJECT_ID (N'work.tmp_Account_BD_Bus_Keys', N'U') IS NOT NULL    
      BEGIN;    
           TRUNCATE TABLE [work].[tmp_Account_BD_Bus_Keys];    
      END;    
   ELSE    
      BEGIN;    
           CREATE TABLE [work].[tmp_Account_BD_Bus_Keys]    
          ([Name_ID]     INT NOT NULL PRIMARY KEY CLUSTERED);    
      END;
  
  	IF OBJECT_ID (N'work.tmp_Account_BD_EmailAddressIds_NALK', N'U') IS NOT NULL
	   BEGIN;
	        TRUNCATE TABLE [work].[tmp_Account_BD_EmailAddressIds_NALK];
	   END;
	ELSE
	   BEGIN;
		CREATE	TABLE [work].[tmp_Account_BD_EmailAddressIds_NALK]
			( NAME_ID int NOT NULL PRIMARY KEY CLUSTERED
			, ADDRESS_ID int NULL
			, EFFECTIVE_DATE datetime2(7) NULL
			, EMAIL nvarchar(105) NULL
			, [NALK_EMAIL_ADDRESSCODE] varchar(3) NULL
			, [NALK_EMAIL_COMPANYCODE] VARCHAR(2) NULL
			, [NALK_EMAIL_POLICYNUMBER] VARCHAR(12) NULL
			, [NALK_EMAIL_VERSIONID] BIGINT NULL
			, [ADDR_EMAIL_VERSIONID] BIGINT NULL);
	   END;
	IF OBJECT_ID (N'work.tmp_Account_BD_HIER', N'U') IS NULL
		BEGIN;
		CREATE	TABLE  [EDW_Outbound].[work].[tmp_Account_BD_HIER]
			([HIER_COMPANYCODE] VARCHAR(2) NOT NULL
			, [HIER_AGENTNUMBER] VARCHAR(12) NOT NULL
			, [HIER_MARKETINGCODE] VARCHAR(10) NULL
			, [HIER_AGENTLEVEL] VARCHAR(2) NULL
			, [HIER_STOPDT] DATETIME2 NULL
			, [HIER_VERSIONID] BIGINT NULL
			, [AGNT_VERSIONID] BIGINT NULL
			, [NAME_ID] INT NOT NULL PRIMARY KEY CLUSTERED
			);
		END;
 END;    
/* END: Create temporary tables.*/    
    
/* START: Retrieve latest hierarchy records and broker dealer name records.*/    
IF (1=1)    
	BEGIN;    
   --Refresh NameIDs in scope    
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountBrokerDealer:Refresh Name IDs HIER');    
	SELECT @LOGID = @@IDENTITY; 
		;WITH DEDUP AS
			(SELECT ROW_NUMBER() OVER (PARTITION BY AGNT.[NAME_ID] ORDER BY COALESCE(HIER.[STOP_DATE],'12/31/9999') DESC) AS RN
				, HIER.COMPANY_CODE
				, HIER.AGENT_NUMBER
				, HIER.MARKETING_CODE
				, HIER.AGENT_LEVEL
				, HIER.STOP_DATE
				, HIER.VERSION_ID
				, AGNT.NAME_ID
				, AGNT.VERSION_ID AS AGNT_VERSIONID
			FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] AS HIER
				INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGNT ON
					AGNT.AGENT_NUMBER = HIER.AGENT_NUMBER
					AND AGNT.COMPANY_CODE = HIER.COMPANY_CODE
			WHERE (
					(HIER.COMPANY_CODE =  '01'     
					AND HIER.REGION_CODE = 'BD')
					OR
					(HIER.COMPANY_CODE = '09'     
					AND HIER.REGION_CODE = 'RAYJAY'     
					AND HIER.SALES_REGION = 'SE')
					OR
					(HIER.COMPANY_CODE = '09'     
					AND HIER.SALES_REGION = 'BD'    
					AND HIER.REGION_CODE <> 'WHOLE')
					OR
					(HIER.COMPANY_CODE = '06'     
					AND HIER.SALES_REGION = 'BD'    
					AND HIER.REGION_CODE <> 'WHOLE')
				)
				AND
				(
					(AGNT.Row_ID > @START_VAL_AGNT
					AND AGNT.Row_ID <= @END_VAL_AGNT)
					OR 
					(HIER.Row_ID > @START_VAL_HIER
					AND HIER.Row_ID <= @END_VAL_HIER)
				)
			)
		UPDATE DEST
		SET [HIER_COMPANYCODE]		= DEDUP.COMPANY_CODE
			, [HIER_AGENTNUMBER]	= DEDUP.AGENT_NUMBER
			, [HIER_MARKETINGCODE]	= DEDUP.MARKETING_CODE
			, [HIER_AGENTLEVEL]		= DEDUP.AGENT_LEVEL
			, [HIER_STOPDT]			= DEDUP.STOP_DATE
			, [HIER_VERSIONID]		= DEDUP.VERSION_ID
			, [AGNT_VERSIONID]		= DEDUP.AGNT_VERSIONID
		FROM  [EDW_Outbound].[work].[tmp_Account_BD_HIER] AS DEST 
			INNER JOIN DEDUP ON
				DEST.NAME_ID = DEDUP.NAME_ID
		WHERE DEDUP.RN = 1;
		SELECT @ROWS = @@ROWCOUNT;
		
		;WITH DEDUP AS
			(SELECT ROW_NUMBER() OVER (PARTITION BY AGNT.[NAME_ID] ORDER BY COALESCE(HIER.[STOP_DATE],'12/31/9999') DESC) AS RN
				, HIER.COMPANY_CODE
				, HIER.AGENT_NUMBER
				, HIER.MARKETING_CODE
				, HIER.AGENT_LEVEL
				, HIER.STOP_DATE
				, HIER.VERSION_ID
				, AGNT.NAME_ID
				, AGNT.VERSION_ID AS AGNT_VERSIONID
			FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] AS HIER
				INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGNT ON
					AGNT.AGENT_NUMBER = HIER.AGENT_NUMBER
					AND AGNT.COMPANY_CODE = HIER.COMPANY_CODE
			WHERE (
					(HIER.COMPANY_CODE =  '01'     
					AND HIER.REGION_CODE = 'BD')
					OR
					(HIER.COMPANY_CODE = '09'     
					AND HIER.REGION_CODE = 'RAYJAY'     
					AND HIER.SALES_REGION = 'SE')
					OR
					(HIER.COMPANY_CODE = '09'     
					AND HIER.SALES_REGION = 'BD'    
					AND HIER.REGION_CODE <> 'WHOLE')
					OR
					(HIER.COMPANY_CODE = '06'     
					AND HIER.SALES_REGION = 'BD'    
					AND HIER.REGION_CODE <> 'WHOLE')
				)
				AND
				(
					(AGNT.Row_ID > @START_VAL_AGNT
					AND AGNT.Row_ID <= @END_VAL_AGNT)
					OR 
					(HIER.Row_ID > @START_VAL_HIER
					AND HIER.Row_ID <= @END_VAL_HIER)
				)
			)
		INSERT [EDW_Outbound].[work].[tmp_Account_BD_HIER]
			([HIER_COMPANYCODE]
			, [HIER_AGENTNUMBER]
			, [HIER_MARKETINGCODE]
			, [HIER_AGENTLEVEL]
			, [HIER_STOPDT]
			, [HIER_VERSIONID]
			, [NAME_ID]	
			, [AGNT_VERSIONID])
		SELECT DEDUP.COMPANY_CODE
			, DEDUP.AGENT_NUMBER
			, DEDUP.MARKETING_CODE
			, DEDUP.AGENT_LEVEL
			, DEDUP.STOP_DATE
			, DEDUP.VERSION_ID
			, DEDUP.NAME_ID
			, DEDUP.AGNT_VERSIONID
		FROM DEDUP
		WHERE RN = 1
			AND NOT EXISTS (SELECT 1 FROM [EDW_Outbound].[work].[tmp_Account_BD_HIER] AS DEST WHERE DEST.NAME_ID = DEDUP.NAME_ID);
	SELECT @ROWS = @@ROWCOUNT + @ROWS;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;    

	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountBrokerDealer:Add new bd nameid-s');    
	SELECT @LOGID = @@IDENTITY; 
		 --This statement will insert new NAME_IDs from the source subselect to target table    
		INSERT [work].[stage_sf_Account_BrokerDealer_first_name_id]    
			( [Name_ID]
			, [Company_Code]
			, [Agent_Number]
			, [Version_ID]   )
		SELECT BDAgentNumbersWithNameIDs.NAME_ID
			, BDAgentNumbersWithNameIDs.HIER_COMPANYCODE
			, BDAgentNumbersWithNameIDs.HIER_AGENTNUMBER
			, BDAgentNumbersWithNameIDs.AGNT_VERSIONID
		FROM [EDW_Outbound].[work].[tmp_Account_BD_HIER] AS BDAgentNumbersWithNameIDs    
		WHERE NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_Business_first_name_id] AS BS WHERE BS.[NAME_ID] = BDAgentNumbersWithNameIDs.[NAME_ID]) --not in business accnt    
			AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_Institution_first_name_id] AS INST WHERE INST.[NAME_ID]= BDAgentNumbersWithNameIDs.[NAME_ID]) --not in institution    
			AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_NMO_first_name_id] AS NMO WHERE NMO.[NAME_ID] =  BDAgentNumbersWithNameIDs.[NAME_ID]) --not in nmo    
			AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_Wholesaler_first_name_id] AS WS WHERE WS.[NAME_ID] =  BDAgentNumbersWithNameIDs.[NAME_ID]) --not in wholesaler    
			AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_first_name_id] AS PRS WHERE PRS.[NAME_ID] = BDAgentNumbersWithNameIDs.[NAME_ID]) --not in account person   
			AND NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Account_BrokerDealer_first_name_id] AS PRS WHERE PRS.[NAME_ID] = BDAgentNumbersWithNameIDs.[NAME_ID]); --not already in the list   

	--Logging    
	SELECT @ROWS = @@ROWCOUNT;    
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;    
    
	END;    
/* END: Retrieve latest hierarchy records and broker dealer name records.*/    
    
/* START: Populate temporary tables.*/    
IF (1=1)    
 BEGIN;    
    
  INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountBrokerDealer:Get new and changed records');    
  SELECT @LOGID = @@IDENTITY;    
    
    
 --Pick all new or changed Name Ids from NAME_Curr_Vw    
  
 IF @START_VAL_NAME < @END_VAL_NAME    
	BEGIN;    
	INSERT [work].[tmp_Account_BD_Bus_Keys]    
		([Name_ID])    
	SELECT     
		NAME_CURR.[NAME_ID] AS [Name_ID]    
	FROM  [EDW_DataLake].[lifepro_v].[NAME_BusKey_Vw] AS NAME_CURR    
	WHERE EXISTS(SELECT 1 FROM [work].[stage_sf_Account_BrokerDealer_first_name_id] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = NAME_CURR.NAME_ID) -- Only Name IDs in scope    
		AND NAME_CURR.Row_ID > @START_VAL_NAME                      -- Only changed records    
		AND NAME_CURR.Row_ID <= @END_VAL_NAME;    
	END;    


 --Pick all new or changed phone numbers
 IF @END_VAL_PHONE > @START_VAL_PHONE
	BEGIN;
	INSERT [work].[tmp_Account_BD_Bus_Keys]    
		([Name_ID])   
	SELECT	SRC.[NameID]
	FROM	[salesforce].[PhoneNumber] AS SRC
	WHERE	NOT EXISTS (SELECT 1 FROM [work].[tmp_Account_BD_Bus_Keys]     AS DEST WHERE DEST.[Name_ID]= SRC.[NameID])
			AND COALESCE(SRC.[MODIFIED_DT], SRC.[CREATED_DT]) > @START_VAL_PHONE
			AND COALESCE(SRC.[MODIFIED_DT], SRC.[CREATED_DT]) <= @END_VAL_PHONE;
	END;


 --Pick all new or changed Name Ids from HIER_Curr_Vw and AGNT_Curr_Vw    
  
 IF (@START_VAL_HIER < @END_VAL_HIER) OR @START_VAL_AGNT < @END_VAL_AGNT  
	BEGIN;    
	INSERT [work].[tmp_Account_BD_Bus_Keys]    
	([Name_ID])    
	SELECT  AGNT.[Name_id]    
	FROM [EDW_DataLake].[lifepro_v].[HIER_Vw] AS HIER     
	LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Vw] AS AGNT    
		ON HIER.COMPANY_CODE = AGNT.COMPANY_CODE    
		AND HIER.AGENT_NUMBER = AGNT.AGENT_NUMBER    
	WHERE NOT EXISTS(SELECT 1 FROM [work].[tmp_Account_BD_Bus_Keys] AS DEST WHERE DEST.[NAME_ID] = AGNT.[NAME_ID])    
	AND EXISTS(SELECT 1 FROM [work].[stage_sf_Account_BrokerDealer_first_name_id] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = AGNT.NAME_ID)    
	AND ((HIER.[Row_id] > @START_VAL_HIER    
			AND HIER.[Row_id] <=@END_VAL_HIER  )
			OR
			(AGNT.[Row_id] > @START_VAL_AGNT    
		AND AGNT.[Row_ID] <= @END_VAL_AGNT ))
	GROUP BY AGNT.[Name_id];    
	END;    

  
 --Pick all new or changed Name Ids from AEXP_10_Curr_Vw    
 IF @START_VAL_AEXP_10 < @END_VAL_AEXP_10    
  BEGIN;    
    
  INSERT [work].[tmp_Account_BD_Bus_Keys]    
    ([Name_ID])    
  SELECT  AGNT.[Name_id]    
  FROM [EDW_DataLake].[lifepro_v].[AEXP_10_Vw] AS AEXP_10     
    LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Vw] AS AGNT    
     ON AEXP_10.COMPANY_CODE = AGNT.COMPANY_CODE    
     AND AEXP_10.AGENT_NUMBER = AGNT.AGENT_NUMBER    
  WHERE NOT EXISTS(SELECT 1 FROM [work].[tmp_Account_BD_Bus_Keys] AS DEST WHERE DEST.[NAME_ID] = AGNT.[NAME_ID])    
    AND EXISTS(SELECT 1 FROM [work].[stage_sf_Account_BrokerDealer_first_name_id] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = AGNT.NAME_ID)    
    AND (AEXP_10.[Row_id] > @START_VAL_AEXP_10 AND AEXP_10.[Row_id] <= @END_VAL_AEXP_10)    
  GROUP BY AGNT.[Name_id];    
  END;    
    
 --Pick all new or changed Name Ids from AEXP_03_Curr_Vw    
 IF @START_VAL_AEXP_03 < @END_VAL_AEXP_03    
  BEGIN;    
    
  INSERT [work].[tmp_Account_BD_Bus_Keys]    
    ([Name_ID])    
  SELECT  AGNT.[Name_id]    
  FROM [EDW_DataLake].[lifepro_v].[AEXP_03_Vw] AS AEXP_03     
    LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Vw] AS AGNT    
     ON AEXP_03.COMPANY_CODE = AGNT.COMPANY_CODE    
     AND AEXP_03.AGENT_NUMBER = AGNT.AGENT_NUMBER    
  WHERE NOT EXISTS(SELECT 1 FROM [work].[tmp_Account_BD_Bus_Keys] AS DEST WHERE DEST.[NAME_ID] = AGNT.[NAME_ID])    
    AND EXISTS(SELECT 1 FROM [work].[stage_sf_Account_BrokerDealer_first_name_id] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = AGNT.NAME_ID)    
    AND (AEXP_03.[Row_id] > @START_VAL_AEXP_03 AND AEXP_03.[Row_id] <= @END_VAL_AEXP_03)    
  GROUP BY AGNT.[Name_id];    
  END;    
    
   
 IF (@START_VAL_NALK<@END_VAL_NALK ) OR (@START_VAL_ADDR<@END_VAL_ADDR)   
  BEGIN;    
  INSERT [work].[tmp_Account_BD_Bus_Keys]    
    ([Name_ID])    
  SELECT  NALK.[Name_id]    
  FROM [EDW_DataLake].[lifepro_v].[NALK_Vw] AS NALK     
    LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[ADDR_Vw] AS ADDR ON    
     ADDR.[ADDRESS_ID] = NALK.ADDRESS_ID    
  WHERE NALK.[Address_type] = 'E'    
    AND NOT EXISTS(SELECT 1 FROM [work].[tmp_Account_BD_Bus_Keys] AS DEST WHERE DEST.[NAME_ID] = NALK.[NAME_ID])    
    AND EXISTS(SELECT 1 FROM [work].[stage_sf_Account_BrokerDealer_first_name_id] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = NALK.NAME_ID)    
    AND     
     ((NALK.[Row_id] > @START_VAL_NALK    
     AND NALK.[Row_id] <=@END_VAL_NALK)    
     OR    
     (ADDR.[Row_id] > @START_VAL_ADDR    
     AND ADDR.[Row_ID] <= @END_VAL_ADDR))    
  GROUP BY NALK.[Name_id];    
  END;    

  
 
	  ;WITH EmailList AS
	  (SELECT ROW_NUMBER() OVER (PARTITION BY NALK.NAME_ID ORDER BY COALESCE(NALK.EFFECTIVE_DATE, '1/1/1753') DESC) AS RN
		 , NALK.NAME_ID
		 , NALK.ADDRESS_ID
		 , NALK.EFFECTIVE_DATE
		 , LEFT(RTRIM(ADDR.ADDR_LINE_1) + RTRIM(ADDR.ADDR_LINE_2) + RTRIM(ADDR.ADDR_LINE_3) + ';', CHARINDEX(';', RTRIM(ADDR.ADDR_LINE_1) + RTRIM(ADDR.ADDR_LINE_2) + RTRIM(ADDR.ADDR_LINE_3) + ';') - 1) AS EMAIL
		 , NALK.ADDRESS_CODE
		 , NALK.COMPANY_CODE
		 , NALK.POLICY_NUMBER
		 , NALK.VERSION_ID
		 , ADDR.VERSION_ID AS ADDR_EMAIL_VERSIONID
	  FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] NALK 
	  INNER JOIN [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw] AS ADDR ON 
				  NALK.ADDRESS_ID = ADDR.ADDRESS_ID 
	  WHERE ADDRESS_TYPE = 'E'
		AND ADDRESS_CODE = 'BUS'
		)
	  INSERT INTO [work].[tmp_Account_BD_EmailAddressIds_NALK]
			   ( NAME_ID
			   , ADDRESS_ID
			   , EFFECTIVE_DATE
			   , EMAIL
			   , [NALK_EMAIL_ADDRESSCODE]
			   , [NALK_EMAIL_COMPANYCODE]
			   , [NALK_EMAIL_POLICYNUMBER]
			   , [NALK_EMAIL_VERSIONID]
			   , [ADDR_EMAIL_VERSIONID])

	  SELECT  NAME_ID
			, ADDRESS_ID	 
			, EFFECTIVE_DATE				
			, EMAIL	
			, EmailList.ADDRESS_CODE
			, EmailList.COMPANY_CODE
			, EmailList.POLICY_NUMBER
			, EmailList.VERSION_ID
			, EmailList.ADDR_EMAIL_VERSIONID
	  FROM EmailList
	  WHERE RN = 1;


 --Get Row Count     
  SELECT @Rows = SUM(st.row_count) FROM    sys.dm_db_partition_stats st WHERE  object_name(object_id) = 'tmp_Account_BD_Bus_Keys' AND OBJECT_SCHEMA_NAME(OBJECT_ID) = 'work' AND (index_id < 2);    
  UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;    
    
    
 END;    

/* END: Populate temporary tables.*/    
 /* START: Refresh mapping table*/    
 IF (1=1)    
  BEGIN;    
  INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountBrokerDealer:Update Mappings');    
  SELECT @LOGID = @@IDENTITY;    
    
	UPDATE DEST
	SET [MODIFIED_DT]							= CURRENT_TIMESTAMP    
		, [NAMERECORD_VERSIONID]					= COALESCE(NAME_CURR_VW.[VERSION_ID],0) 
		, [EXTENSIONRECORDNADR_VERSIONID]		= 0
		, [AGENTRECORD_COMPANYCODE]				= HIER.HIER_COMPANYCODE
		, [AGENTRECORD_AGENTNUMBER]				= HIER.HIER_AGENTNUMBER
		, [AGENTRECORD_VERSIONID]				= COALESCE(HIER.[AGNT_VERSIONID],0) 
		, [AGENTEXPANSION03_COMPANYCODE]			= AEXP03.COMPANY_CODE    
		, [AGENTEXPANSION03_AGENTNUMBER]			= AEXP03.AGENT_NUMBER  
		, [AGENTEXPANSION03_SEQUENCE]			= AEXP03.[SEQUENCE]    
		, [AGENTEXPANSION03_VERSIONID]			= 0 --NOT AVAILABLE    
		, [AGENTEXPANSION10_COMPANYCODE]			= AEXP10.COMPANY_CODE    
		, [AGENTEXPANSION10_AGENTNUMBER]			= AEXP10.AGENT_NUMBER  
		, [AGENTEXPANSION10_SEQUENCE]			= AEXP10.[SEQUENCE]  
		, [AGENTEXPANSION10_VERSIONID]			= COALESCE(AEXP10.VERSION_ID,0)  	  
		, [NAMERECORD_SSN]						= NAME_CURR_VW.[BUSINESS_TAX_CODE]
		, [ADDR_EMAIL_ADDRESSID]					= EMAIL.ADDRESS_ID
		, [ADDR_EMAIL_VERSIONID]					= COALESCE(EMAIL.[ADDR_EMAIL_VERSIONID],0)
		, [NALK_EMAIL_ADDRESSID]					= EMAIL.[ADDRESS_ID]
		, [NALK_EMAIL_EFFECTIVEDATE]				= EMAIL.[EFFECTIVE_DATE]
		, [NALK_EMAIL_ADDRESSCODE]				= EMAIL.[NALK_EMAIL_ADDRESSCODE]
		, [NALK_EMAIL_COMPANYCODE]				= EMAIL.[NALK_EMAIL_COMPANYCODE]
		, [NALK_EMAIL_POLICYNUMBER]				= EMAIL.[NALK_EMAIL_POLICYNUMBER]
		, [NALK_EMAIL_VERSIONID]					= COALESCE(EMAIL.[NALK_EMAIL_VERSIONID],0)
		, [NALK_PHONE_NAMEID]					= PHONE.[NameID]
		, [NALK_PHONE_ADDRESSID]					= PHONE.[ADDRESS_ID]
		, [NALK_PHONE_EFFECTIVEDATE]				= PHONE.[EFFECTIVE_DATE]
		, [NALK_PHONE_ADDRESSCODE]				= PHONE.[ADDRESS_CODE]
		, [NALK_PHONE_COMPANYCODE]				= PHONE.[COMPANY_CODE]
		, [NALK_PHONE_POLICYNUMBER]				= PHONE.[POLICY_NUMBER]
		, [NALK_PHONE_VERSIONID]					= COALESCE(PHONE.[VERSION_ID],0)
		, [HIER_COMPANYCODE]						= HIER.[HIER_COMPANYCODE]
		, [HIER_AGENTNUMBER]						= HIER.[HIER_AGENTNUMBER]
		, [HIER_MARKETINGCODE]					= HIER.[HIER_MARKETINGCODE]
		, [HIER_AGENTLEVEL]						= HIER.[HIER_AGENTLEVEL]
		, [HIER_STOPDT]							= HIER.[HIER_STOPDT]
		, [HIER_VERSIONID]						= COALESCE(HIER.[HIER_VERSIONID],0)
		, [DELETE_FLAG]							= CASE NAME_CURR_VW.DXType WHEN 'D' THEN 1 ELSE 0 END --This will only return 0-s until name is switched to a business key view
	FROM [salesforce].[mapping_Account] AS DEST
		INNER JOIN [work].[tmp_Account_BD_Bus_Keys] AS TMP  ON	
			TMP.Name_ID = DEST.NAMERECORD_NAMEID
			AND DEST.RECORDTYPEID = @RecordTypeID
		INNER JOIN [work].stage_sf_Account_BrokerDealer_first_name_id AS BUSKEY ON
			TMP.Name_ID = BUSKEY.Name_ID 
		INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NAME_CURR_VW ON  
			NAME_CURR_VW.[NAME_ID] = TMP.[Name_ID]  
		INNER JOIN [EDW_Outbound].[work].[tmp_Account_BD_HIER] AS HIER ON
			HIER.NAME_ID = TMP.Name_ID
		INNER JOIN [EDW_DataLake].[lifepro_v].[AEXP_10_Curr_Vw] AEXP10 ON  
			AEXP10.AGENT_NUMBER = BUSKEY.AGENT_NUMBER  
			AND AEXP10.COMPANY_CODE = BUSKEY.COMPANY_CODE
		INNER JOIN [EDW_DataLake].[lifepro_v].[AEXP_03_Curr_Vw] AEXP03 ON  
			AEXP03.COMPANY_CODE = HIER.HIER_COMPANYCODE  
			and AEXP03.AGENT_NUMBER = HIER.HIER_AGENTNUMBER
		LEFT OUTER JOIN [work].[tmp_Account_BD_EmailAddressIds_NALK] AS EMAIL ON
			EMAIL.NAME_ID = TMP.Name_ID
		LEFT OUTER JOIN [salesforce].[PhoneNumber] AS PHONE ON
			PHONE.NameID = TMP.Name_ID;
		
	SELECT @ROWS = @@ROWCOUNT;    
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;    
	
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountBrokerDealer:Insert Mappings');    
	SELECT @LOGID = @@IDENTITY;    

	
	INSERT [salesforce].[mapping_Account]
		([CREATED_DT]    
		, [NAMERECORD_NAMEID]    
		, [NAMERECORD_VERSIONID] 
		, [EXTENSIONRECORDNADR_VERSIONID]
		, [AGENTRECORD_COMPANYCODE]    
		, [AGENTRECORD_AGENTNUMBER]        
		, [AGENTRECORD_VERSIONID]    
		, [AGENTEXPANSION03_COMPANYCODE]    
		, [AGENTEXPANSION03_AGENTNUMBER]    
		, [AGENTEXPANSION03_SEQUENCE]    
		, [AGENTEXPANSION03_VERSIONID]    
		, [AGENTEXPANSION10_COMPANYCODE]    
		, [AGENTEXPANSION10_AGENTNUMBER]    
		, [AGENTEXPANSION10_SEQUENCE]    
		, [AGENTEXPANSION10_VERSIONID]
		, [NAMERECORD_SSN]
		, [RECORDTYPEID]
		, [ADDR_EMAIL_ADDRESSID]
		, [ADDR_EMAIL_VERSIONID]
		, [NALK_EMAIL_ADDRESSID]
		, [NALK_EMAIL_EFFECTIVEDATE]
		, [NALK_EMAIL_ADDRESSCODE]
		, [NALK_EMAIL_COMPANYCODE]
		, [NALK_EMAIL_POLICYNUMBER]
		, [NALK_EMAIL_VERSIONID]
		, [NALK_PHONE_NAMEID]
		, [NALK_PHONE_ADDRESSID]
		, [NALK_PHONE_EFFECTIVEDATE]
		, [NALK_PHONE_ADDRESSCODE]
		, [NALK_PHONE_COMPANYCODE]
		, [NALK_PHONE_POLICYNUMBER]
		, [NALK_PHONE_VERSIONID]
		, [HIER_COMPANYCODE]
		, [HIER_AGENTNUMBER]
		, [HIER_MARKETINGCODE]
		, [HIER_AGENTLEVEL]
		, [HIER_STOPDT]
		, [HIER_VERSIONID]
		, [DELETE_FLAG])

	SELECT 
		CURRENT_TIMESTAMP
		,NAME_CURR_VW.[NAME_ID]							AS [NAMERECORD_NAMEID]    
		, COALESCE(NAME_CURR_VW.[VERSION_ID],0)  		AS [NAMERECORD_VERSIONID] 
		, 0
		, [AGENTRECORD_COMPANYCODE]						= HIER.HIER_COMPANYCODE
		, [AGENTRECORD_AGENTNUMBER]						= HIER.HIER_AGENTNUMBER
		, [AGENTRECORD_VERSIONID]						= COALESCE(HIER.[AGNT_VERSIONID],0)  
		, AEXP03.COMPANY_CODE							AS [AGENTEXPANSION03_COMPANYCODE]    
		, AEXP03.AGENT_NUMBER							AS [AGENTEXPANSION03_AGENTNUMBER]    
		, AEXP03.[SEQUENCE]								AS [AGENTEXPANSION03_SEQUENCE]    
		, 0												AS [AGENTEXPANSION03_VERSIONID]    
		, AEXP10.COMPANY_CODE							AS [AGENTEXPANSION10_COMPANYCODE]    
		, AEXP10.AGENT_NUMBER							AS [AGENTEXPANSION10_AGENTNUMBER]    
		, AEXP10.[SEQUENCE]								AS [AGENTEXPANSION10_SEQUENCE]    
		, COALESCE(AEXP10.VERSION_ID,0) 					AS [AGENTEXPANSION10_VERSIONID]  
		, NAME_CURR_VW.[BUSINESS_TAX_CODE]				AS [NAMERECORD_SSN]
		, @RecordTypeID									AS [RECORDTYPEID]
		, [ADDR_EMAIL_ADDRESSID]						= EMAIL.ADDRESS_ID
		, [ADDR_EMAIL_VERSIONID]						= COALESCE(EMAIL.[ADDR_EMAIL_VERSIONID],0)
		, [NALK_EMAIL_ADDRESSID]						= EMAIL.[ADDRESS_ID]
		, [NALK_EMAIL_EFFECTIVEDATE]					= EMAIL.[EFFECTIVE_DATE]
		, [NALK_EMAIL_ADDRESSCODE]						= EMAIL.[NALK_EMAIL_ADDRESSCODE]
		, [NALK_EMAIL_COMPANYCODE]						= EMAIL.[NALK_EMAIL_COMPANYCODE]
		, [NALK_EMAIL_POLICYNUMBER]						= EMAIL.[NALK_EMAIL_POLICYNUMBER]
		, [NALK_EMAIL_VERSIONID]						= COALESCE(EMAIL.[NALK_EMAIL_VERSIONID],0)
		, [NALK_PHONE_NAMEID]							= PHONE.[NameID]
		, [NALK_PHONE_ADDRESSID]						= PHONE.[ADDRESS_ID]
		, [NALK_PHONE_EFFECTIVEDATE]					= PHONE.[EFFECTIVE_DATE]
		, [NALK_PHONE_ADDRESSCODE]						= PHONE.[ADDRESS_CODE]
		, [NALK_PHONE_COMPANYCODE]						= PHONE.[COMPANY_CODE]
		, [NALK_PHONE_POLICYNUMBER]						= PHONE.[POLICY_NUMBER]
		, [NALK_PHONE_VERSIONID]						= COALESCE(PHONE.[VERSION_ID],0)
		, [HIER_COMPANYCODE]							= HIER.[HIER_COMPANYCODE]
		, [HIER_AGENTNUMBER]							= HIER.[HIER_AGENTNUMBER]
		, [HIER_MARKETINGCODE]							= HIER.[HIER_MARKETINGCODE]
		, [HIER_AGENTLEVEL]								= HIER.[HIER_AGENTLEVEL]
		, [HIER_STOPDT]									= HIER.[HIER_STOPDT]
		, [HIER_VERSIONID]								= COALESCE(HIER.[HIER_VERSIONID],0)
		, [DELETE_FLAG]									= CASE NAME_CURR_VW.DXType WHEN 'D' THEN 1 ELSE 0 END	--Hardcoding this for now, as deletion functionality is to be picked up later
   FROM [work].[tmp_Account_BD_Bus_Keys] AS TMP  
		INNER JOIN [work].stage_sf_Account_BrokerDealer_first_name_id AS BUSKEY ON
			TMP.Name_ID = BUSKEY.Name_ID 
		INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NAME_CURR_VW ON  
			NAME_CURR_VW.[NAME_ID] = TMP.[Name_ID]  
		INNER JOIN [EDW_Outbound].[work].[tmp_Account_BD_HIER] AS HIER ON
			HIER.NAME_ID = TMP.Name_ID
		INNER JOIN [EDW_DataLake].[lifepro_v].[AEXP_10_Curr_Vw] AEXP10 ON  
			AEXP10.AGENT_NUMBER = BUSKEY.AGENT_NUMBER  
			AND AEXP10.COMPANY_CODE = BUSKEY.COMPANY_CODE
		INNER JOIN [EDW_DataLake].[lifepro_v].[AEXP_03_Curr_Vw] AEXP03 ON  
			AEXP03.COMPANY_CODE = HIER.HIER_COMPANYCODE  
			and AEXP03.AGENT_NUMBER = HIER.HIER_AGENTNUMBER
		LEFT OUTER JOIN [work].[tmp_Account_BD_EmailAddressIds_NALK] AS EMAIL ON
			EMAIL.NAME_ID = TMP.Name_ID
		LEFT OUTER JOIN [salesforce].[PhoneNumber] AS PHONE ON
			PHONE.NameID = TMP.Name_ID
    WHERE NOT EXISTS(SELECT 1 FROM [salesforce].[mapping_Account] AS DEST WHERE DEST.NAMERECORD_NAMEID = TMP.Name_ID);
   
  SELECT @ROWS = @@ROWCOUNT;    
  UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;    
  END;     
 /* END: Refresh mapping table*/    
    
    
/* START: Populate staging table.*/    
IF (1=1)    
 BEGIN;    
    
 INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountBrokerDealer:Update Staging');    
 SELECT @LOGID = @@IDENTITY;    
 
 --If previous execution was successful, this table will be empty.
	
	UPDATE	DEST
SET		[Name]									= CASE WHEN NAME_VW.NAME_FORMAT_CODE = 'I'
													THEN TRIM(INDIVIDUAL_FIRST) + IIF(LEN(TRIM(INDIVIDUAL_FIRST)) > 0, ' ', '') + TRIM(INDIVIDUAL_MIDDLE) + IIF(LEN(TRIM(INDIVIDUAL_MIDDLE)) > 0, ' ', '') + TRIM(INDIVIDUAL_LAST)
													ELSE TRIM(BUSINESS_NAME)
													END
			,[Phone]								= phone.PhoneNumber
			,[OwnerId]							= ''
			,[RecordTypeId]						= @RecordTypeID
			,[LifePro_Last_Modified_DateTime__c]	= mapping.VERSIONID
			,[X2017_Activity_Premium__c]			= premium.ActivityPremium2017
			,[X2017_Effective_Premium__c]		= premium.EffectivePremium2017
			,[X2018_Activity_Premium__c]			= premium.ActivityPremium2018
			,[X2018_Effective_Premium__c]		= premium.EffectivePremium2018
			,[X2019_Activity_Premium__c]			= premium.ActivityPremium2019
			,[X2019_Effective_Premium__c]		= premium.EffectivePremium2019
			,[Agent_Number__c]					= agnt.AGENT_NUMBER
			,[Company_Code__c]					= agnt.COMPANY_CODE
			,[Email__c]							= EmailAddressIds.EMAIL
			--,[LifePro_ID__c]					= cast(mapping.ID as varchar(20))
			,[Region__c]							= regions.REGION_CODE
			,[Status__c]							= agnt.STATUS_CODE
			,[Status_Date__c]					= agnt.STATUS_DATE
			,[Suitability__c]					= CASE TRIM(suitability.SUITABILITY_FLAG)
													WHEN 'Y' THEN 1
													ELSE 0
													END
			,[TIN__c]							= CASE WHEN NAME_VW.NAME_FORMAT_CODE = 'B'
													THEN STUFF(RIGHT('000000000' + TRIM(NAME_VW.BUSINESS_TAX_CODE), 9), 3, 0, '-')
													ELSE ''
													END
			,[Social_Security_Number__c]			= CASE WHEN NAME_VW.NAME_FORMAT_CODE = 'I'
													THEN STUFF(STUFF(RIGHT('000000000' + CONVERT(varchar(11), NAME_VW.SOC_SEC_NUMBER), 9), 4, 0, '-'), 7, 0, '-')
													ELSE ''
													END
			,[Tax_Status__c]						= NAME_VW.TAX_STATUS
			,[Tax_Witholding_Option__c]			= NAME_VW.TAX_WITHHOLDING_FLAG
			,[Modified_dt]						= CURRENT_TIMESTAMP
			,[LifePro_NameID]					= Mapping.[NAMERECORD_NAMEID]  
			, [Delete_Flag]						= mapping.[DELETE_FLAG]
	FROM	[salesforce].[Account_BrokerDealer] AS DEST 
		INNER JOIN [work].[tmp_Account_BD_Bus_Keys] AS TMP ON
			DEST.[LifePro_NameID] = TMP.[NAME_ID]
		INNER JOIN [salesforce].[mapping_Account] AS MAPPING ON 
			MAPPING.NAMERECORD_NAMEID = TMP.Name_ID
			AND MAPPING.RECORDTYPEID = @RecordTypeID
		INNER JOIN [work].[stage_sf_Account_BrokerDealer_first_name_id] SRC  
			ON TMP.Name_ID = SRC.Name_ID  
		INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NAME_VW ON  
			NAME_VW.[Name_ID] = TMP.[Name_ID]  
		INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] agnt  
			ON SRC.Company_Code = agnt.COMPANY_CODE  
			 And SRC.NAME_ID = agnt.Name_ID
			AND SRC.Agent_Number = agnt.AGENT_NUMBER  
		LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_10_Curr_Vw] regions  
			ON agnt.COMPANY_CODE = regions.COMPANY_CODE  
			AND agnt.AGENT_NUMBER = regions.AGENT_NUMBER  
		LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_03_Curr_Vw] suitability  
			ON agnt.COMPANY_CODE = suitability.COMPANY_CODE  
			AND agnt.AGENT_NUMBER = suitability.AGENT_NUMBER  
		LEFT OUTER JOIN [EDW_Outbound].[salesforce].[AgentYearlyPremiumTotals] premium  
			ON agnt.COMPANY_CODE = premium.CompanyCode  
			AND agnt.AGENT_NUMBER = premium.AgentNumber 
		LEFT OUTER JOIN [work].[tmp_Account_BD_EmailAddressIds_NALK] AS EmailAddressIds ON
		    EmailAddressIds.[Name_id] = TMP.[Name_id]
	   	LEFT OUTER JOIN [EDW_Outbound].[salesforce].[PhoneNumber] AS phone ON  
			phone.[Nameid] = TMP.[NAME_ID]   
	WHERE   Mapping.VERSIONID >= COALESCE(Mapping.SALESFORCE_DT,0) 
			OR mapping.salesforce_dt IS NULL;

SELECT @ROWS = @@ROWCOUNT;    
UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;    

INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountBrokerDealer:Insert Staging');    
SELECT @LOGID = @@IDENTITY;  
	
	INSERT INTO [salesforce].[Account_BrokerDealer]
           ([Name]
           ,[Phone]
           ,[OwnerId]
           ,[RecordTypeId]
           ,[LifePro_Last_Modified_DateTime__c]
           ,[X2017_Activity_Premium__c]
           ,[X2017_Effective_Premium__c]
           ,[X2018_Activity_Premium__c]
           ,[X2018_Effective_Premium__c]
           ,[X2019_Activity_Premium__c]
           ,[X2019_Effective_Premium__c]
           ,[Agent_Number__c]
           ,[Company_Code__c]
           ,[Email__c]
           ,[LifePro_ID__c]
           ,[Region__c]
           ,[Status__c]
           ,[Status_Date__c]
           ,[Suitability__c]
           ,[TIN__c]
           ,[Social_Security_Number__c]
           ,[Tax_Status__c]
           ,[Tax_Witholding_Option__c]
           ,[Created_dt]
           ,[LifePro_NameID]
		   ,[Delete_Flag])
	SELECT
		CASE WHEN NAME_VW.NAME_FORMAT_CODE = 'I'
			THEN TRIM(INDIVIDUAL_FIRST) + IIF(LEN(TRIM(INDIVIDUAL_FIRST)) > 0, ' ', '') + TRIM(INDIVIDUAL_MIDDLE) + IIF(LEN(TRIM(INDIVIDUAL_MIDDLE)) > 0, ' ', '') + TRIM(INDIVIDUAL_LAST)
			ELSE TRIM(BUSINESS_NAME)
		END AS Name,
		phone.PhoneNumber,
		'' AS OwnerId,
		@RecordTypeID AS RecordTypeId,
		Mapping.VERSIONID,
		premium.ActivityPremium2017 AS X2017_Activity_Premium__c,
		premium.EffectivePremium2017 AS X2017_Effective_Premium__c,
		premium.ActivityPremium2018 AS X2018_Activity_Premium__c,
		premium.EffectivePremium2018 AS X2018_Effective_Premium__c,
		premium.ActivityPremium2019 AS X2019_Activity_Premium__c,
		premium.EffectivePremium2019 AS X2019_Effective_Premium__c,
		agnt.AGENT_NUMBER AS Agent_Number__c,
		agnt.COMPANY_CODE AS Company_Code__c,
		EmailAddressIds.EMAIL AS Email__c,
		mapping.ID,
		regions.REGION_CODE AS Region__c,
		agnt.STATUS_CODE AS Status__c,
		agnt.STATUS_DATE AS Status_Date__c,
		CASE TRIM(suitability.SUITABILITY_FLAG)
			WHEN 'Y' THEN 1
			ELSE 0
		END AS Suitability__c,
		CASE WHEN NAME_VW.NAME_FORMAT_CODE = 'B'
			THEN STUFF(RIGHT('000000000' + TRIM(NAME_VW.BUSINESS_TAX_CODE), 9), 3, 0, '-')
			ELSE ''
		END AS TIN__c,
		CASE WHEN NAME_VW.NAME_FORMAT_CODE = 'I'
			THEN STUFF(STUFF(RIGHT('000000000' + CONVERT(varchar(11), NAME_VW.SOC_SEC_NUMBER), 9), 4, 0, '-'), 7, 0, '-')
			ELSE ''
		END AS Social_Security_Number__c,
		NAME_VW.TAX_STATUS AS Tax_Status__c,
		NAME_VW.TAX_WITHHOLDING_FLAG AS Tax_Witholding_Option__c,
		CURRENT_TIMESTAMP AS Created_dt,
		 Mapping.[NAMERECORD_NAMEID]   AS LifePro_NameID,
		 mapping.[DELETE_FLAG]
	FROM [work].[tmp_Account_BD_Bus_Keys] AS TMP
	INNER JOIN [salesforce].[mapping_Account] AS MAPPING ON 
		MAPPING.NAMERECORD_NAMEID = TMP.Name_ID
		AND MAPPING.RECORDTYPEID = @RecordTypeID
	INNER JOIN [work].[stage_sf_Account_BrokerDealer_first_name_id] SRC
		ON TMP.Name_ID = SRC.Name_ID
	INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NAME_VW ON
		NAME_VW.[Name_ID] = TMP.[Name_ID]
	INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] agnt
		ON SRC.Company_Code = agnt.COMPANY_CODE
		AND  SRC.NAME_ID = agnt.Name_ID
		AND SRC.Agent_Number = agnt.AGENT_NUMBER
	LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_10_Curr_Vw] regions
		ON agnt.COMPANY_CODE = regions.COMPANY_CODE
		AND agnt.AGENT_NUMBER = regions.AGENT_NUMBER
	LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_03_Curr_Vw] suitability
		ON agnt.COMPANY_CODE = suitability.COMPANY_CODE
		AND agnt.AGENT_NUMBER = suitability.AGENT_NUMBER
	LEFT OUTER JOIN [EDW_Outbound].[salesforce].[AgentYearlyPremiumTotals] premium
		ON agnt.COMPANY_CODE = premium.CompanyCode
		AND agnt.AGENT_NUMBER = premium.AgentNumber
	LEFT OUTER JOIN [work].[tmp_Account_BD_EmailAddressIds_NALK] AS EmailAddressIds ON
		EmailAddressIds.[Name_id] = TMP.[Name_id]
	LEFT OUTER JOIN [EDW_Outbound].[salesforce].[PhoneNumber] AS phone ON
		phone.[Nameid] = TMP.[NAME_ID]  
	WHERE NOT EXISTS(SELECT 1 FROM [salesforce].[Account_BrokerDealer] AS DEST WHERE DEST.Lifepro_Id__C = Mapping.ID)
		AND  (Mapping.VERSIONID >= COALESCE(Mapping.SALESFORCE_DT,0) OR MAPPING.SALESFORCE_ID IS NULL); 	
	
  
 SELECT @ROWS = @@ROWCOUNT;    
 UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;    
    
 END;    
/* END: Populate staging table.*/    
/* START: Add invalid email check */    
IF (1=1)    
 BEGIN;    
    
    
 INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountBrokerDealer:Reject emails');    
 SELECT @LOGID = @@IDENTITY;    
    
 ;WITH INVALID_EMAILS AS    
  (SELECT [Email__c] AS [Account_BrokerDealer]    
   , [Reject_Flag]    
   , [Reject_Dt]    
   , [Reject_Reason]    
  FROM [salesforce].[Account_BrokerDealer]    
  WHERE ([Email__c] = ''     
   OR [Email__c] LIKE '% %'     
   OR [Email__c] LIKE ('%["(),:;<>\]%')     
   OR SUBSTRING([Email__c] ,CHARINDEX('@',[Email__c]),LEN([Email__c])) LIKE ('%[!#$%&*+/=?^`_{|]%')     
   OR (LEFT([Email__c],1) LIKE ('[-_.+]') OR RIGHT([Email__c],1) LIKE ('[-_.+]'))                                                                                   
   OR ([Email__c] LIKE '%[%' OR [Email__c] LIKE '%]%')     
   OR [Email__c] LIKE '%@%@%'     
   OR [Email__c] NOT LIKE '_%@_%._%'     
   OR [Email__c] LIKE '%..%'    
   OR [Email__c] LIKE '%-.%'    
   OR [Email__c] LIKE '%.@%'     
   OR [Email__c] LIKE '%@.%'     
   OR [Email__c] LIKE '%@%.-%'     
   OR [Email__c] LIKE '%@%-.%'     
   OR [Email__c] LIKE '%@-%'     
   OR CHARINDEX(CHAR(39),[Email__c] )=1
   OR CHARINDEX(' ',LTRIM(RTRIM([Email__c]))) > 0)    
   AND COALESCE([Reject_Flag],0)=0)    
    
 UPDATE INVALID_EMAILS SET [Account_BrokerDealer] = NULL    
   , [Reject_Flag] = 1    
   , [Reject_Dt] = CURRENT_TIMESTAMP    
   , [Reject_Reason]='Invalid Email:'+ LEFT(COALESCE([Account_BrokerDealer],''),85);    
    
    
 SELECT @ROWS = @@ROWCOUNT;    
 UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;    
    
 END;    
/* END: Add invalid email check */    
/* START: Update delta settings.*/    
IF (1=1)    
 BEGIN;    
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_HIER AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_HIER AND Setting_Module = @SETTING_MODULE;    
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_AGNT AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_AGNT AND Setting_Module = @SETTING_MODULE;    
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_NALK AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_NALK AND Setting_Module = @SETTING_MODULE;    
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_NAME AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_NAME AND Setting_Module = @SETTING_MODULE;    
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_ADDR AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_ADDR AND Setting_Module = @SETTING_MODULE;    
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_AEXP_10 AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_AEXP_10 AND Setting_Module = @SETTING_MODULE;    
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_AEXP_03 AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_AEXP_03 AND Setting_Module = @SETTING_MODULE;    
 UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_PHONE AS NVARCHAR(120)) WHERE Setting_Name = @SETTING_NAME_PHONE AND Setting_Module = @SETTING_MODULE;
 END;   
 END;
    
 --Logging    
 UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;      
  END    
    
 --Logging    
 UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;       
       
    
END TRY    
BEGIN CATCH    
               
DECLARE @ERROR_MSG          NVARCHAR(2000);    
DECLARE @ERROR_SEVERITY     INT;    
DECLARE @ERROR_STATE        INT;    
     
SET @ERROR_MSG              = ERROR_MESSAGE();    
SET @ERROR_SEVERITY         = ERROR_SEVERITY();    
SET @ERROR_STATE            = ERROR_STATE();    
    
--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountBrokerDealer:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;
    
RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);    
    
END CATCH;    
    
END;    
    
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Account_NMO]    Script Date: 5/17/2022 2:04:40 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE     PROCEDURE  [salesforce].[usp_Truncate_Account_NMO]
 	
AS
BEGIN;
/* ===================================================================================

  Author: 			12/18/2021
  Creation Date: 	12/18/2021
  Version: 			0.2.0
  Description: 	    Truncate Account_NMO synct table - 
 					this stored proc is to be called upon successful 
 					sync of the staging table with salesforce dest list	
  Exceptions: 		
	
 -- Change Log: 		
  Modified By:		
  Modified Date:		
  Version:			
  Description:		

-- =================================================================================== 
*/


SET NOCOUNT ON;
DECLARE @ROWS						INT;		--Used for logging row counts
DECLARE @LOGID_START				INT;		--Used for the first log id
DECLARE	@LOGID						INT;		--Used for intermediate log ids

BEGIN TRY
--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'TruncateAccount_NMO:Start/End Indicator');
SELECT @LOGID_START = @@IDENTITY;
/*START: Flag records rejected by Salesforce*/
IF (1=1)
	BEGIN;
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'TruncateAccount_NMO:Flag Salesforce Rejections');
	SELECT @LOGID = @@IDENTITY;
	;WITH FAILS 
		AS
		(SELECT [Reject_Flag]
			, [Reject_Dt]
			, [Reject_Reason]
		FROM  [salesforce].[Account_NMO] 
		WHERE	COALESCE([Reject_Flag],0)=0
			AND EXISTS(SELECT 1 FROM [salesforce].[mapping_Account] AS MAPPING WHERE MAPPING.[ID] = [salesforce].[Account_NMO].[LifePro_ID__c] AND MAPPING.[SALESFORCE_ID] IS NULL)
		)
	UPDATE FAILS SET 
		[Reject_Flag] = 2
		, [Reject_Dt] = CURRENT_TIMESTAMP
		, [FAILS].[Reject_Reason] = 'Rejected by Salesforce';

	SELECT @ROWS = @@ROWCOUNT;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;
	END;
/*END: Flag records rejected by Salesforce*/
/*START: Move rejected rows to reject table*/
IF (1=1)
	BEGIN;
  IF EXISTS(SELECT 1 FROM [salesforce].[Account_NMO] WHERE COALESCE([Reject_Flag],0)<>0)
    BEGIN;
    INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'TruncateAccount_NMO:Log Rejections');
    SELECT @LOGID = @@IDENTITY;
    INSERT [salesforce].[reject_Account_NMO]
      ([Name]
		,[Phone]
		,[OwnerId]
		,[RecordTypeId]
		,[LifePro_Last_Modified_DateTime__c]
		,[X2017_Activity_Premium__c]
		,[X2017_Effective_Premium__c]
		,[X2018_Activity_Premium__c]
		,[X2018_Effective_Premium__c]
		,[X2019_Activity_Premium__c]
		,[X2019_Effective_Premium__c]
		,[Agent_Number__c]
		,[Company_Code__c]
		,[Email__c]
		,[LifePro_ID__c]
		,[Region__c]
		,[Status__c]
		,[Status_Date__c]
		,[Suitability__c]
		,[TIN__c]
		,[Social_Security_Number__c]
		,[Tax_Status__c]
		,[Tax_Witholding_Option__c]
		,[Created_dt]
		,[Modified_dt]
		,[LifePro_NameID]
		,[Reject_Flag]
		,[Reject_Dt]
		,[Reject_Reason]) --destination columns
    SELECT [Name]
		,[Phone]
		,[OwnerId]
		,[RecordTypeId]
		,[LifePro_Last_Modified_DateTime__c]
		,[X2017_Activity_Premium__c]
		,[X2017_Effective_Premium__c]
		,[X2018_Activity_Premium__c]
		,[X2018_Effective_Premium__c]
		,[X2019_Activity_Premium__c]
		,[X2019_Effective_Premium__c]
		,[Agent_Number__c]
		,[Company_Code__c]
		,[Email__c]
		,[LifePro_ID__c]
		,[Region__c]
		,[Status__c]
		,[Status_Date__c]
		,[Suitability__c]
		,[TIN__c]
		,[Social_Security_Number__c]
		,[Tax_Status__c]
		,[Tax_Witholding_Option__c]
		,[Created_dt]
		,[Modified_dt]
		,[LifePro_NameID]
		,[Reject_Flag]
		,[Reject_Dt]
		,[Reject_Reason]
    FROM [salesforce].[Account_NMO] 
    WHERE COALESCE([Reject_Flag],0)<>0;
    SELECT @ROWS = @@ROWCOUNT;
    UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;
    END;
	END;
/*END: Move rejected rows to reject table*/
/*START: Truncate staging*/
IF (1=1)
	BEGIN;
  SELECT @ROWS = SUM(st.row_count) FROM    sys.dm_db_partition_stats st WHERE object_name(object_id) = 'Account_NMO' AND OBJECT_SCHEMA_NAME(OBJECT_ID) = 'salesforce' AND (index_id < 2);
  TRUNCATE TABLE [EDW_Outbound].[salesforce].[Account_NMO];
  UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID_START;
  END;
/*END: Truncate staging*/
END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();

--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account_NMO:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;

RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;

  

GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Account_Address_Sub_Account]    Script Date: 5/17/2022 2:04:40 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [salesforce].[usp_Upsert_Account_Address_Sub_Account]
 	
AS
BEGIN;
-- =============================================

 -- Author: 			Jason Rippel
 -- CreationDate: 		2021-08-12
 -- Version: 			0.1.0
 -- Description: 		Refresh Account Address Sub Account table for synchronization with SalesForce 

 -- Author: 			Darin Baarda
 -- CreationDate: 		2021-10-14
 -- Version: 			0.1.1
 -- Description: 		redesign to match the account address

  -- Author: 			Darin Baarda
 -- CreationDate: 		2021-10-25
 -- Version: 			0.1.2
 -- Description: 		redesign to match the account address
 
 -- Author: 			Darin Baarda
 -- CreationDate: 		2021-11-03
 -- Version: 			0.1.3
 -- Description: 		redesign to pull history
 
 -- Author: 			Darin Baarda
 -- CreationDate: 		2021-11-10
 -- Version: 			0.1.4
 -- Description: 		change to check if not exists
  
 -- Author: 			Darin Baarda
 -- CreationDate: 		2021-11-15
 -- Version: 			0.1.5
 -- Description: 		changed how it links tables to not use min name id

 -- Modified By:		Steve Tangeman
 -- Modified Date:		1/4/2022
 -- Version:			0.1.6
 -- Description:		Updated to exclude e-mail address records based on address type.
 --						Also updated effective date field to pull from the data lake.

 -- Modified By:		Steve Tangeman
 -- Modified Date:		1/26/2022
 -- Version:			0.1.7
 -- Description:		Updated address code to be P for Primary when blank

 -- Modified By:		Steve Tangeman
 -- Modified Date:		4/8/2022
 -- Version:			0.1.8
 -- Description:		Replaced [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] with [EDW_DataLake].[lifepro_v].[NALK_BusKey_Vw] to handle deletes.
 --						Also added update statement.

 -- Full reload:
 /*
DECLARE @SETTING_NAME_NALK			NVARCHAR(50) = 'SETTING_ACCOUNT_ADDRESS_SUB_NALK';
DECLARE @SETTING_MODULE				NVARCHAR(50) = 'SF_SNYC';
UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_NALK AND SETTING_MODULE = @SETTING_MODULE;

truncate table [salesforce].[Account_Address_Sub_Account]
EXEC [salesforce].[usp_Upsert_Account_Address_Sub_Account]
select * from [salesforce].[Account_Address_Sub_Account]

select count(1) from salesforce.[LOOKUP_SUB_ACCOUNT__C]

select * from [salesforce].[Account_Address_Sub_Account]

select * from salesforce.sub_account

select account_address_external_id, count(1)
from [salesforce].[Account_Address_Sub_Account]
group by account_Address_External_id
having count(1) > 1

select * from salesforce.lookup_insurancepolicy
select * from salesforce.[LOOKUP_SUB_ACCOUNT__C]

truncate table salesforce.lookup_insurancepolicy
truncate table salesforce.lookup_sub_account__c

*/
-- =============================================

BEGIN TRY

	DECLARE @SETTING_MODULE							VARCHAR(20) = 'SF_SNYC'
	DECLARE @SETTING_ACCOUNT_ADDRESS_NALK			VARCHAR(50) = 'SETTING_ACCOUNT_ADDRESS_SUB_NALK';
	DECLARE @START_ACCOUNT_ADDRESS_NALK				INT;
	DECLARE @END_ACCOUNT_ADDRESS_NALK				INT;
	DECLARE @ROWS									INT;		--Used for logging row counts
	DECLARE @LOGID_START							INT;		--Used for the first log id
	DECLARE	@LOGID									INT;		--Used for intermediate log ids

	--Logging
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountAddressSubAccount:Start/End Indicator');
	SELECT @LOGID_START = @@IDENTITY;

	IF NOT EXISTS(SELECT * FROM [EDW_Audit].[dbo].[Delta_Settings]   WHERE Setting_Name = @SETTING_ACCOUNT_ADDRESS_NALK AND Setting_Module = @SETTING_MODULE)
	BEGIN
		INSERT INTO [EDW_Audit].[dbo].[Delta_Settings] VALUES (@SETTING_ACCOUNT_ADDRESS_NALK, @SETTING_MODULE, CAST(0 AS VARCHAR(20)))
	END

	DECLARE @SubAccountAddressRecordTypeID varchar(20) = (SELECT [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE DEVELOPERNAME = 'Sub_Account_Address' AND SOBJECTTYPE = 'Account_Address__c')
	SELECT @START_ACCOUNT_ADDRESS_NALK = CAST(Setting_Value AS INT) from [EDW_Audit].[dbo].[Delta_Settings]  WHERE Setting_Name = @SETTING_ACCOUNT_ADDRESS_NALK AND Setting_Module = @SETTING_MODULE; 	
	SELECT @END_ACCOUNT_ADDRESS_NALK = MAX(Row_ID) FROM [EDW_DataLake].[lifepro_v].[NALK_BusKey_Vw]
	
	--Only populate staging if there are new records
	IF @START_ACCOUNT_ADDRESS_NALK < @END_ACCOUNT_ADDRESS_NALK
		BEGIN;

		/*START: Update staging table*/
		IF (1=1)
			BEGIN;
			--Logging
			INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountAddressSubAccount:Update stg tbl');
			SELECT @LOGID = @@IDENTITY;

			UPDATE	DEST
			SET	[RecordTypeID]							= @SubAccountAddressRecordTypeID
				, [LifePro_Last_Modified_DateTime__c]	= '0' --This will be mapped to VERSION_ID field that is not available at the time of this release
				, [Address_External_Id__c]				= LOOKUP_ADDRESS__C.EXTERNAL_ID__C
				, [Address__c]							= [LOOKUP_ADDRESS__C].[ID]
				, [Type__c]								= SRC.[ADDRESS_TYPE]
				, [Policy_External_Id__c]				= RTRIM(SRC.[POLICY_NUMBER]) + case when RTRIM(SRC.[POLICY_NUMBER]) <> '' then '-' else '' end + RTRIM(SRC.[COMPANY_CODE])
				, [Policy__c]							= LU_POL.[ID]
				, [Address_Code__c]						= CASE WHEN TRIM(SRC.[ADDRESS_CODE])='' THEN 'P' ELSE SRC.ADDRESS_CODE END
				, [Recurring_From_Month__c]				= CASE WHEN SRC.[RECURRING_START_MONTH]=0 THEN NULL ELSE SRC.[RECURRING_START_MONTH] END
				, [Recurring_From_Day__c]				= CASE WHEN SRC.[RECURRING_START_DAY]=0 THEN NULL ELSE SRC.[RECURRING_START_DAY] END
				, [Recurring_To_Month__c]				= CASE WHEN SRC.[RECURRING_STOP_MONTH]=0 THEN NULL ELSE SRC.[RECURRING_STOP_MONTH] END
				, [Recurring_To_Day__c]					= CASE WHEN SRC.[RECURRING_START_DAY]=0 THEN NULL ELSE SRC.[RECURRING_START_DAY] END
				, [Phone__c]							= CASE WHEN SRC.[PHONE_NUMBER]=0 THEN NULL ELSE SRC.[PHONE_NUMBER] END
				, [Fax__c]								= CASE WHEN SRC.[FAX_NUMBER]= 0 THEN NULL ELSE SRC.[FAX_NUMBER] END
				, [Sub_Account__c]						= [LOOKUP_SUB_ACCOUNT__C].[ID]
				, [Sub_Account_Name_Id__c]				= SRC.[NAME_ID]
				, [Effective_Date__c]					= CASE WHEN SRC.[EFFECTIVE_DATE] < '1/1/1700' OR SRC.EFFECTIVE_DATE > '12/31/4000' THEN NULL ELSE SRC.[EFFECTIVE_DATE] END
				, [Account__c]							= [LOOKUP_SUB_ACCOUNT__C].[PARENT_ACCOUNT__C]
				, [Modified_dt]							= CURRENT_TIMESTAMP
				, [Delete_Flag]							= CASE WHEN SRC.DXType = 'D' THEN 1 ELSE 0 END
			FROM [salesforce].[Account_Address_Sub_Account] AS DEST 
				INNER JOIN [EDW_DataLake].[lifepro_v].[NALK_BusKey_Vw] AS SRC ON
					DEST.Account_Address_External_Id = CAST(
										CAST(SRC.[NAME_ID] as varchar(20)) + '|' +
										CAST(SRC.[ADDRESS_ID] as varchar(20)) + '|' +
										RTRIM(SRC.[ADDRESS_TYPE]) + '|' +
										RTRIM(SRC.[POLICY_NUMBER]) + case when RTRIM(SRC.[POLICY_NUMBER]) <> '' then '-' else '' end + RTRIM(SRC.[COMPANY_CODE]) + '|' +
										RTRIM(SRC.[ADDRESS_CODE]) + '|' +
										CASE WHEN SRC.[EFFECTIVE_DATE] IS NULL OR SRC.[EFFECTIVE_DATE] < '1/1/1700' OR SRC.EFFECTIVE_DATE > '12/31/4000' THEN '' ELSE FORMAT(SRC.[EFFECTIVE_DATE], 'MM-dd-yy') END
									AS VARCHAR(100))
				INNER JOIN salesforce.LOOKUP_SUB_ACCOUNT__C ON 
					SRC.NAME_ID = LOOKUP_SUB_ACCOUNT__C.NAME_ID__C
				INNER JOIN salesforce.LOOKUP_ADDRESS__C ON 
					SRC.ADDRESS_ID = LOOKUP_ADDRESS__C.EXTERNAL_ID__C
				LEFT OUTER JOIN [salesforce].[LOOKUP_INSURANCEPOLICY] AS LU_POL ON
					LU_POL.[EXTERNAL_ID__C] = TRIM(SRC.[POLICY_NUMBER]) + '-' + SRC.[COMPANY_CODE]
			SELECT @ROWS = @@ROWCOUNT;
			--Logging
			UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
			END;
		/*END: Update staging table*/

		/*START: Insert new records into staging table*/
		IF (1=1)
			BEGIN
			--Logging
			INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountAddressSubAccount:Insert stg tbl');
			SELECT @LOGID = @@IDENTITY;

			INSERT INTO [salesforce].[Account_Address_Sub_Account](
				RecordTypeID
				, LifePro_Last_Modified_DateTime__c
				, Address_External_Id__c
				, Address__c
				, Type__c
				, Policy_External_Id__c
				, Policy__c
				, Address_Code__c
				, Recurring_From_Month__c
				, Recurring_From_Day__c
				, Recurring_To_Month__c
				, Recurring_To_Day__c
				, Phone__c
				, Fax__c
				, Sub_Account__c
				, Sub_Account_Name_Id__c
				, Effective_Date__c
				, Account_Address_External_Id
				, Account__c
				, Created_dt
				, Delete_Flag
			)
			SELECT DISTINCT
				@SubAccountAddressRecordTypeID as 'RecordTypeID'
				, '0' AS 'LifePro_Last_Modified_DateTime__c' --This will be mapped to VERSION_ID field that is not available at the time of this release
				, LOOKUP_ADDRESS__C.EXTERNAL_ID__C as 'Address_External_Id__c'
				, [LOOKUP_ADDRESS__C].[ID] AS 'Address__c'
				, SRC.[ADDRESS_TYPE] AS 'Type__c'
				, RTRIM(SRC.[POLICY_NUMBER]) + case when RTRIM(SRC.[POLICY_NUMBER]) <> '' then '-' else '' end + RTRIM(SRC.[COMPANY_CODE]) AS 'Policy_External_Id__c'
				, LU_POL.[ID] AS 'Policy__c'
				, CASE WHEN TRIM(SRC.[ADDRESS_CODE])='' THEN 'P' ELSE SRC.ADDRESS_CODE END AS 'Address_Code__c'
				, CASE WHEN SRC.[RECURRING_START_MONTH]=0 THEN NULL ELSE SRC.[RECURRING_START_MONTH] END AS 'Recurring_From_Month__c'
				, CASE WHEN SRC.[RECURRING_START_DAY]=0 THEN NULL ELSE SRC.[RECURRING_START_DAY] END AS 'Recurring_From_Day__c'
				, CASE WHEN SRC.[RECURRING_STOP_MONTH]=0 THEN NULL ELSE SRC.[RECURRING_STOP_MONTH] END AS 'Recurring_To_Month__c'
				, CASE WHEN SRC.[RECURRING_START_DAY]=0 THEN NULL ELSE SRC.[RECURRING_START_DAY] END AS 'Recurring_To_Day__c'
				, CASE WHEN SRC.[PHONE_NUMBER]=0 THEN NULL ELSE SRC.[PHONE_NUMBER] END AS 'Phone__c'
				, CASE WHEN SRC.[FAX_NUMBER]= 0 THEN NULL ELSE SRC.[FAX_NUMBER] END AS 'Fax__c'
				, [LOOKUP_SUB_ACCOUNT__C].[ID] AS 'Sub_Account__c'
				, SRC.[NAME_ID] AS 'Sub_Account_Name_Id__c'
				, CASE WHEN SRC.[EFFECTIVE_DATE] < '1/1/1700' OR SRC.EFFECTIVE_DATE > '12/31/4000' THEN NULL ELSE SRC.[EFFECTIVE_DATE] END AS 'Effective_Date__c'
				, CAST(
					CAST(SRC.[NAME_ID] as varchar(20)) + '|' +
					CAST(SRC.[ADDRESS_ID] as varchar(20)) + '|' +
					RTRIM(SRC.[ADDRESS_TYPE]) + '|' +
					RTRIM(SRC.[POLICY_NUMBER]) + case when RTRIM(SRC.[POLICY_NUMBER]) <> '' then '-' else '' end + RTRIM(SRC.[COMPANY_CODE]) + '|' +
					RTRIM(SRC.[ADDRESS_CODE]) + '|' +
					CASE WHEN SRC.[EFFECTIVE_DATE] IS NULL OR SRC.[EFFECTIVE_DATE] < '1/1/1700' OR SRC.EFFECTIVE_DATE > '12/31/4000' THEN '' ELSE FORMAT(SRC.[EFFECTIVE_DATE], 'MM-dd-yy') END
				AS VARCHAR(100)) AS 'Account_Address_External_Id'
				, [LOOKUP_SUB_ACCOUNT__C].[PARENT_ACCOUNT__C] AS 'Account__c'
				, CURRENT_TIMESTAMP AS 'Created_dt'
				, CASE WHEN SRC.DXType = 'D' THEN 1 ELSE 0 END AS 'Delete_Flag'
			FROM  [EDW_DataLake].lifepro_v.NALK_BusKey_Vw AS SRC
				INNER JOIN salesforce.LOOKUP_SUB_ACCOUNT__C ON 
					SRC.NAME_ID = LOOKUP_SUB_ACCOUNT__C.NAME_ID__C
				JOIN salesforce.LOOKUP_ADDRESS__C ON 
					SRC.ADDRESS_ID = LOOKUP_ADDRESS__C.EXTERNAL_ID__C
				LEFT OUTER JOIN [salesforce].[LOOKUP_INSURANCEPOLICY] AS LU_POL ON
					LU_POL.[EXTERNAL_ID__C] = TRIM(SRC.[POLICY_NUMBER]) + '-' + SRC.[COMPANY_CODE]
			WHERE ADDRESS_TYPE <> 'E'
				AND SRC.[Row_ID] > @START_ACCOUNT_ADDRESS_NALK
				AND SRC.[Row_ID] <= @END_ACCOUNT_ADDRESS_NALK
				AND LOOKUP_SUB_ACCOUNT__C.NAME_ID__C IS NOT null
				AND NOT EXISTS (select top 1 Account_Address_External_Id 
								from [salesforce].[Account_Address_Sub_Account] as Dest
								where Account_Address_External_Id = CAST(
										CAST(SRC.[NAME_ID] as varchar(20)) + '|' +
										CAST(SRC.[ADDRESS_ID] as varchar(20)) + '|' +
										RTRIM(SRC.[ADDRESS_TYPE]) + '|' +
										RTRIM(SRC.[POLICY_NUMBER]) + case when RTRIM(SRC.[POLICY_NUMBER]) <> '' then '-' else '' end + RTRIM(SRC.[COMPANY_CODE]) + '|' +
										RTRIM(SRC.[ADDRESS_CODE]) + '|' +
										CASE WHEN SRC.[EFFECTIVE_DATE] IS NULL OR SRC.[EFFECTIVE_DATE] < '1/1/1700' OR SRC.EFFECTIVE_DATE > '12/31/4000' THEN '' ELSE FORMAT(SRC.[EFFECTIVE_DATE], 'MM-dd-yy') END
									AS VARCHAR(100))
								)
			SELECT @ROWS = @@ROWCOUNT;
			--Logging
			UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
		END
		/*END: Insert new records into staging table*/

		UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_ACCOUNT_ADDRESS_NALK AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_ACCOUNT_ADDRESS_NALK AND Setting_Module = @SETTING_MODULE;
	END

	--Logging
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP WHERE Row_ID = @LOGID_START;
END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();

--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountAddressSubAccount:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;

RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Account_Address]    Script Date: 5/17/2022 2:04:40 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:          Darin Baarda
-- Create date:		07/06/2021
-- Description:     link the accounts to the addresses
-- =============================================
-- Last Run Date : 07/07/2021
-- Last Run Exec : truncate table [salesforce].[account_address] exec salesforce.usp_Upsert_Account_Address select count(1) from [salesforce]
-- Last Run Stat : 28 seconds, 454,395 records
-- =============================================
-- Maintenance 
-- =============================================
-- CX-1188     07/06/2021 Darin Baarda 
-- New Stored Procedure

 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		9/7/2021
 -- Version:			0.1.1
 -- Description:		Replaced drop temp table with truncate

 -- Modified By:		Patricia Evans
 -- Modified Date:		11/03/2021
 -- Version:			0.1.2
 -- Description:		Update Fax__c to display nulls when 0.

 -- Modified By:		Darin Baarda
 -- Modified Date:		11/10/2021
 -- Version:			0.1.3
 -- Description:		added logic to check for not existing record

 -- Modified By:		Darin Baarda
 -- Modified Date:		11/23/2021
 -- Version:			0.1.4
 -- Description:		redesign and added the update

 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		11/30/2021
 -- Version:			0.1.5
 -- Description:		Fixed performance issues; PK: Name_Id, Address ID, Policy ID-CompanyCode

 -- Modified By:		Anastasia Vogelaar and Darin
 -- Modified Date:		12/01/2021
 -- Version:			0.1.6
 -- Description:		Account link and Address link are mandatory

 -- Modified By:		Anastasia and Jason
 -- Modified Date:		12/02/2021
 -- Version:			0.1.7
 -- Description:		Added default Address_Code ('p')

 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		12/17/2021
 -- Version:			0.2.0
 -- Description:		Replaced LOOKUP_Account with the mapping table

 -- Modified By:		Steve Tangeman
 -- Modified Date:		1/10/2022
 -- Version:			0.2.1
 -- Description:		Removed limitation of only address codes of BUS or blank

 -- Modified By:		Steve Tangeman
 -- Modified Date:		1/27/2022
 -- Version:			0.2.2
 -- Description:		Updated not to include records where the Salesforce ID in the mapping_Account table is null

 -- Modified By:		Steve Tangeman
 -- Modified Date:		1/28/2022
 -- Version:			0.2.3
 -- Description:		Removed grouping of nalk to include all addresses and added effective date to the unique key

 -- Modified By:		Steve Tangeman
 -- Modified Date:		4/7/2022
 -- Version:			0.2.4
 -- Description:		Replaced [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] with [EDW_DataLake].[lifepro_v].[NALK_BusKey_Vw] to handle deletes.

-- =============================================

/*

update [EDW_Audit].[dbo].[Delta_Settings]
set Setting_Value = 0
where setting_name = 'SETTING_ACCOUNT_ADDRESS_NALK'

truncate table [salesforce].[account_address] 
exec salesforce.usp_Upsert_Account_Address; 
select count(*) from [salesforce].[account_Address]
select TOP 1000 * from salesforce.account_address

*/

CREATE   PROCEDURE [salesforce].[usp_Upsert_Account_Address]

AS
BEGIN
SET NOCOUNT ON;
DECLARE @AccountAddressRecordTypeID		varchar(20);
DECLARE @SubAccountAddressRecordTypeID	varchar(20);
DECLARE @NOW							DATETIME2;
DECLARE @SETTING_ACCOUNT_ADDRESS_NALK	VARCHAR(50) = 'SETTING_ACCOUNT_ADDRESS_NALK';
DECLARE @SETTING_MODULE					VARCHAR(20) = 'SF_SNYC';
DECLARE @START_ACCOUNT_ADDRESS_NALK		INT;
DECLARE @END_ACCOUNT_ADDRESS_NALK		INT;
DECLARE @ROWS							INT;		--Used for logging row counts
DECLARE @LOGID_START					INT;		--Used for the first log id
DECLARE	@LOGID							INT;		--Used for intermediate log ids

BEGIN TRY
--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountAddress:Start/End Indicator');
SELECT @LOGID_START = @@IDENTITY;

/* code starts here for the procedure */
--Check if settings values for deltas exist
IF NOT EXISTS(SELECT 1 FROM [EDW_Audit].[dbo].[Delta_Settings]   WHERE Setting_Name = @SETTING_ACCOUNT_ADDRESS_NALK AND Setting_Module = @SETTING_MODULE)
BEGIN;
	INSERT INTO [EDW_Audit].[dbo].[Delta_Settings] (Setting_Name, Setting_Module, Setting_Value) VALUES (@SETTING_ACCOUNT_ADDRESS_NALK, @SETTING_MODULE, '0');
END;

--Retrieve Delta Settings
select @START_ACCOUNT_ADDRESS_NALK = CAST(Setting_Value AS INT) from [EDW_Audit].[dbo].[Delta_Settings]  WHERE Setting_Name = @SETTING_ACCOUNT_ADDRESS_NALK AND Setting_Module = @SETTING_MODULE; 
SELECT @END_ACCOUNT_ADDRESS_NALK = MAX(Row_ID) FROM [EDW_DataLake].[lifepro_v].[NALK_BusKey_Vw];

--Only populate staging if there are new records
IF @START_ACCOUNT_ADDRESS_NALK < @END_ACCOUNT_ADDRESS_NALK
	BEGIN;
	--Retrieve Record Types
	SELECT @AccountAddressRecordTypeID		= [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE DEVELOPERNAME = 'Account_Address' AND SOBJECTTYPE = 'Account_Address__c';
	SELECT @SubAccountAddressRecordTypeID	= [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE DEVELOPERNAME = 'Sub_Account_Address' AND SOBJECTTYPE = 'Account_Address__c';
	SELECT @NOW								= CURRENT_TIMESTAMP;

	/* START: Check that lookup tables are indexed - these tables are being dropped and recreated by Informatica with no indexes*/
	 IF (1=1)
		BEGIN;
		--Logging
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountAddress:Index Lookup tbls');
		SELECT @LOGID = @@IDENTITY;
		--this code could be removed once we stop using Lookup tables
		IF EXISTS (SELECT 1  FROM sys.indexes  WHERE OBJECT_ID = OBJECT_ID('[salesforce].[LOOKUP_ADDRESS__C]') AND type_desc = 'HEAP')
			BEGIN;
			CREATE CLUSTERED INDEX IDX_CL_LOOKUP_ADDRESS__C ON [salesforce].[LOOKUP_ADDRESS__C] ([EXTERNAL_ID__C]);
			END;
		IF EXISTS (SELECT 1  FROM sys.indexes  WHERE OBJECT_ID = OBJECT_ID('[salesforce].[LOOKUP_INSURANCEPOLICY]') AND type_desc = 'HEAP')
			BEGIN;
			CREATE CLUSTERED INDEX IDX_CL_LOOKUP_INSURANCEPOLICY ON [salesforce].[LOOKUP_INSURANCEPOLICY] ([EXTERNAL_ID__C]);
			END;
		
		--Logging
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP WHERE Row_ID = @LOGID;
		END;
	/* END: Check that lookup tables are indexed*/

	/*START: Update staging table*/
	IF (1=1)
		BEGIN;
		--Logging
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountAddress:Update stg tbl');
		SELECT @LOGID = @@IDENTITY;

		UPDATE	DEST
		SET		[LifePro_Last_Modified_DateTime__c] = '0'				--This will be mapped to VERSION_ID field that is not available at the time of this release
				, [Account_Name_Id__c]				= src.[NAME_ID]
				, [Account__c]						= LU_ACCNT.[SALESFORCE_ID]
				, [Address_External_Id__c]			= SRC.[ADDRESS_ID]
				, [Address__c]						= LU_ADDR.[ID]
				, [Type__c]							= SRC.[ADDRESS_TYPE]
				, [Policy_External_Id__c]			= CASE WHEN COALESCE(TRIM(SRC.[POLICY_NUMBER]),'')='' THEN NULL ELSE TRIM(SRC.[POLICY_NUMBER]) + '-' + TRIM(SRC.[COMPANY_CODE]) END
				, [Policy__c]						= LU_POL.[ID]
				, [Address_Code__c]					= CASE WHEN TRIM(SRC.[ADDRESS_CODE])='' THEN 'P' ELSE SRC.ADDRESS_CODE END
				, [Recurring_From_Month__c]			= CASE WHEN SRC.[RECURRING_START_MONTH]=0 THEN NULL ELSE SRC.[RECURRING_START_MONTH] END
				, [Recurring_From_Day__c]			= CASE WHEN SRC.[RECURRING_START_DAY]=0 THEN NULL ELSE SRC.[RECURRING_START_DAY] END
				, [Recurring_To_Month__c]			= CASE WHEN SRC.[RECURRING_STOP_MONTH]=0 THEN NULL ELSE SRC.[RECURRING_STOP_MONTH] END
				, [Recurring_To_Day__c]				= CASE WHEN SRC.[RECURRING_START_DAY]=0 THEN NULL ELSE SRC.[RECURRING_START_DAY] END
				, [Phone__c]						= CASE WHEN SRC.[PHONE_NUMBER]=0 THEN NULL ELSE SRC.[PHONE_NUMBER] END
				, [Fax__c]							= CASE WHEN SRC.[FAX_NUMBER]= 0 THEN NULL ELSE SRC.[FAX_NUMBER] END
				, [Sub_Account__c]					= NULL --NOT DEFINED
				, [Sub_Account_Name_Id__c]			= NULL --NOT DEFINED
				, [Effective_Date__c]				= CASE WHEN SRC.[EFFECTIVE_DATE]<'1/1/1700' OR SRC.EFFECTIVE_DATE>'12/31/4000' THEN NULL ELSE SRC.[EFFECTIVE_DATE] END
				, [Contract]						= NULL --NOT DEFINED
				, [CompanyCode]						= NULL --NOT DEFINED
				, [Modified_dt]						= CURRENT_TIMESTAMP
				, [Delete_Flag]						= CASE WHEN SRC.DXType = 'D' THEN 1 ELSE 0 END
		FROM	[salesforce].[Account_Address] AS DEST 
				INNER JOIN [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] AS SRC ON
					DEST.Account_Address_External_Id = CAST(
							CAST(SRC.[NAME_ID] AS NVARCHAR(20)) + '|' + 
							TRIM(SRC.[ADDRESS_TYPE]) + '|' + 
							TRIM(SRC.[ADDRESS_CODE]) + '|' + 
							TRIM(SRC.[POLICY_NUMBER]) + '-' + TRIM(SRC.[COMPANY_CODE]) + '|' + 
							CAST(SRC.[ADDRESS_ID] AS NVARCHAR(20)) + '|' +
							CASE WHEN SRC.[EFFECTIVE_DATE] IS NULL OR SRC.[EFFECTIVE_DATE] < '1/1/1700' OR SRC.EFFECTIVE_DATE > '12/31/4000' THEN '' ELSE FORMAT(SRC.[EFFECTIVE_DATE], 'MM-dd-yy') END
							AS VARCHAR(100))
				INNER JOIN [salesforce].[LOOKUP_ADDRESS__C] AS LU_ADDR ON
					LU_ADDR.[EXTERNAL_ID__C] = SRC.[ADDRESS_ID]
				INNER JOIN	[salesforce].[mapping_Account] AS LU_ACCNT ON
					LU_ACCNT.[NAMERECORD_NAMEID] = SRC.[NAME_ID]
				LEFT OUTER JOIN [salesforce].[LOOKUP_INSURANCEPOLICY] AS LU_POL ON
					LU_POL.[EXTERNAL_ID__C] = TRIM(SRC.[POLICY_NUMBER]) + '-' + SRC.[COMPANY_CODE];
		SELECT @ROWS = @@ROWCOUNT;
		--Logging
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
		END;
	/*END: Update staging table*/

	/*START: Insert new records into staging table*/
	IF (1=1)
		BEGIN;
		--Logging
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountAddress:Insert stg tbl');
		SELECT @LOGID = @@IDENTITY;

		INSERT [salesforce].[Account_Address]
			([Account_Address_External_Id]		
			, [LifePro_Last_Modified_DateTime__c]
			, [Created_dt]
			, [RecordTypeID]
			, [Account_Name_Id__c]
			, [Account__c]
			, [Address_External_Id__c]
			, [Address__c]
			, [Type__c]
			, [Policy_External_Id__c]
			, [Policy__c]
			, [Address_Code__c]
			, [Recurring_From_Month__c]
			, [Recurring_From_Day__c]
			, [Recurring_To_Month__c]
			, [Recurring_To_Day__c]
			, [Phone__c]
			, [Fax__c]
			, [Sub_Account__c]
			, [Sub_Account_Name_Id__c]
			, [Effective_Date__c]
			, [Contract]
			, [CompanyCode]
			, [Delete_Flag]
			)
		SELECT DISTINCT CAST(SRC.[NAME_ID] AS NVARCHAR(20)) + '|' + 
					TRIM(SRC.[ADDRESS_TYPE]) + '|' + 
					TRIM(SRC.[ADDRESS_CODE]) + '|' + 
					TRIM(SRC.[POLICY_NUMBER]) + '-' + TRIM(SRC.[COMPANY_CODE]) + '|' + 
					CAST(SRC.[ADDRESS_ID] AS NVARCHAR(20)) + '|' +
					CASE WHEN SRC.[EFFECTIVE_DATE] IS NULL OR SRC.[EFFECTIVE_DATE] < '1/1/1700' OR SRC.EFFECTIVE_DATE > '12/31/4000' THEN '' ELSE FORMAT(SRC.[EFFECTIVE_DATE], 'MM-dd-yy') END
			, '0'				--This will be mapped to VERSION_ID field that is not available at the time of this release
			, CURRENT_TIMESTAMP
			, @AccountAddressRecordTypeID
			, SRC.[NAME_ID]
			, LU_ACCNT.[SALESFORCE_ID]
			, SRC.[ADDRESS_ID]
			, LU_ADDR.[ID]
			, SRC.[ADDRESS_TYPE]
			, CASE WHEN COALESCE(TRIM(SRC.[POLICY_NUMBER]),'')='' THEN NULL ELSE TRIM(SRC.[POLICY_NUMBER]) + '-' + TRIM(SRC.[COMPANY_CODE]) END
			, LU_POL.[ID]
			, CASE WHEN TRIM(SRC.[ADDRESS_CODE])='' THEN 'P' ELSE SRC.ADDRESS_CODE END
			, CASE WHEN SRC.[RECURRING_START_MONTH]=0 THEN NULL ELSE SRC.[RECURRING_START_MONTH] END
			, CASE WHEN SRC.[RECURRING_START_DAY]=0 THEN NULL ELSE SRC.[RECURRING_START_DAY] END
			, CASE WHEN SRC.[RECURRING_STOP_MONTH]=0 THEN NULL ELSE SRC.[RECURRING_STOP_MONTH] END
			, CASE WHEN SRC.[RECURRING_START_DAY]=0 THEN NULL ELSE SRC.[RECURRING_START_DAY] END
			, CASE WHEN SRC.[PHONE_NUMBER]=0 THEN NULL ELSE SRC.[PHONE_NUMBER] END
			, CASE WHEN SRC.[FAX_NUMBER]= 0 THEN NULL ELSE SRC.[FAX_NUMBER] END
			, NULL --NOT DEFINED
			, NULL --NOT DEFINED
			, CASE WHEN SRC.[EFFECTIVE_DATE]<'1/1/1700' OR SRC.EFFECTIVE_DATE>'12/31/4000' THEN NULL ELSE SRC.[EFFECTIVE_DATE] END
			, NULL --NOT DEFINED
			, NULL --NOT DEFINED
			, CASE WHEN SRC.DXType = 'D' THEN 1 ELSE 0 END
		FROM [EDW_DataLake].[lifepro_v].[NALK_BusKey_Vw] AS SRC
			INNER JOIN [salesforce].[LOOKUP_ADDRESS__C] AS LU_ADDR ON
				LU_ADDR.[EXTERNAL_ID__C] = SRC.[ADDRESS_ID]
			INNER JOIN [salesforce].[mapping_Account] AS LU_ACCNT ON
				LU_ACCNT.[NAMERECORD_NAMEID] = SRC.[NAME_ID]
			LEFT OUTER JOIN [salesforce].[LOOKUP_INSURANCEPOLICY] AS LU_POL ON
				LU_POL.[EXTERNAL_ID__C] = TRIM(SRC.[POLICY_NUMBER]) + '-' + SRC.[COMPANY_CODE]
		WHERE ADDRESS_TYPE <> 'E'
			AND [Row_ID] > @START_ACCOUNT_ADDRESS_NALK
			AND [Row_ID] <= @END_ACCOUNT_ADDRESS_NALK
			AND NOT EXISTS (SELECT 1 FROM [salesforce].[Account_Address] AS DEST 
							WHERE DEST.[Account_Address_External_Id] = CAST(
							CAST([NAME_ID] AS NVARCHAR(20)) + '|' + 
							TRIM([ADDRESS_TYPE]) + '|' + 
							TRIM([ADDRESS_CODE]) + '|' + 
							TRIM([POLICY_NUMBER]) + '-' + TRIM([COMPANY_CODE]) + '|' + 
							CAST([ADDRESS_ID] AS NVARCHAR(20)) + '|' +
							CASE WHEN [EFFECTIVE_DATE] IS NULL OR [EFFECTIVE_DATE] < '1/1/1700' OR EFFECTIVE_DATE > '12/31/4000' THEN '' ELSE FORMAT([EFFECTIVE_DATE], 'MM-dd-yy') END
							AS VARCHAR(100)))
			AND LU_ACCNT.[SALESFORCE_ID] IS NOT NULL
		SELECT @ROWS = @@ROWCOUNT;
		--Logging
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
		END;
	/*END: Insert new records into staging table*/
	
	UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_ACCOUNT_ADDRESS_NALK AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_ACCOUNT_ADDRESS_NALK AND Setting_Module = @SETTING_MODULE;
	END;

--Logging
UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP WHERE Row_ID = @LOGID_START;

		/* code ends here for the procedure */

	END TRY
	BEGIN CATCH
           
	DECLARE @ERROR_MSG          NVARCHAR(2000);
	DECLARE @ERROR_SEVERITY     INT;
	DECLARE @ERROR_STATE        INT;
 
	SET @ERROR_MSG              = ERROR_MESSAGE();
	SET @ERROR_SEVERITY         = ERROR_SEVERITY();
	SET @ERROR_STATE            = ERROR_STATE();

	--Logging
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountAddress:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
	UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;


	RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

	END CATCH;

END




GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Upline_Detail]    Script Date: 5/17/2022 2:04:40 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

	
CREATE     PROCEDURE  [salesforce].[usp_Truncate_Upline_Detail]
 	
AS
/*
select object_name(process_id),*, DATEDIFF(MINUTE, start_dt, stop_dt) from edw_audit..process_log 
WHERE object_name(process_id) ='usp_Truncate_Upline_Detail'
AND start_dt >=CAST(CURRENT_TIMESTAMP AS DATE);
*/ 
BEGIN;
/* ===================================================================================

  Author: 			Anastasia Vogelaar
  Creation Date: 	2022-05-06
  Version: 			0.1.0
  Description: 	    Truncate Upline_Detail synct table - 
 					this stored proc is to be called upon successful 
 					sync of the staging table with salesforce dest list	
  Exceptions: 		
	
 -- Change Log: 		
  Modified By:		
  Modified Date:		
  Version:			
  Description:		

-- =================================================================================== 
*/


SET NOCOUNT ON;
DECLARE @ROWS						INT;		--Used for logging row counts
DECLARE @LOGID_START				INT;		--Used for the first log id
DECLARE	@LOGID						INT;		--Used for intermediate log ids

BEGIN TRY
--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'TruncateUplineDetail:Start/End Indicator');
SELECT @LOGID_START = @@IDENTITY;
/*START: Flag records rejected by Salesforce*/
IF (1=1)
	BEGIN;
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'TruncateUplineDetail:Flag Salesforce Rejections');
	SELECT @LOGID = @@IDENTITY;
	;WITH FAILS 
		AS
		(SELECT [Reject_Flag]
			, [Reject_Dt]
			, [Reject_Reason]
		FROM  [salesforce].[Upline_Detail] 
		WHERE	COALESCE([Reject_Flag],0)=0
			AND EXISTS(SELECT 1 FROM [salesforce].[mapping_Upline_Detail] AS MAPPING WHERE MAPPING.[ID] = [salesforce].[Upline_Detail].[External_ID__c] 
						AND ((MAPPING.[SALESFORCE_ID] IS NULL)
						OR (COALESCE(mapping.[SALESFORCE_DT],0)<>MAPPING.[VERSION_ID])))
		)
	UPDATE FAILS SET 
		[Reject_Flag] = 2
		, [Reject_Dt] = CURRENT_TIMESTAMP
		, [FAILS].[Reject_Reason] = 'Rejected by Salesforce';

	SELECT @ROWS = @@ROWCOUNT;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;
	END;
/*END: Flag records rejected by Salesforce*/
/*START: Move rejected rows to reject table*/
IF (1=1)
	BEGIN;
  IF EXISTS(SELECT 1 FROM [salesforce].[Upline_Detail] WHERE COALESCE([Reject_Flag],0)<>0)
    BEGIN;
    INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'TruncateUplineDetail:Log Rejections');
    SELECT @LOGID = @@IDENTITY;
    INSERT [salesforce].[reject_Upline_Detail]
      ([External_Id__c]
	  , [Version_Id__c]
	  , [Salesforce_Id]
	  , [Delete_Flag]
	  , [Created_Dt]
	  , [Modified_Dt]
	  , [Agent_Level__c]
	  , [BD_Agent_Percent__c]
	  , [Agent_Number__c]
	  , [BD_Commission_Level__c]
	  , [BD_NMO_Percent__c]
	  , [BD_Product_Type_Commissions__c]
	  , [Region__c]
	  , [Start_Date__c]
	  , [Stop_Date__c]
	  , [BD_Upline_Percent__c]
	  , [Upline__c]
	  , [Signing_Agent__c]
	  , [Upline_Level__c]
	  , [Company_Code__c]
	  , [Broker_Dealer_Agent_Number__c]
	  , [Reject_Flag]
	  , [Reject_Dt]
	  , [Reject_Reason]) 
    SELECT 
        [External_Id__c]
	  , [Version_Id__c]
	  , [Salesforce_Id]
	  , [Delete_Flag]
	  , [Created_Dt]
	  , [Modified_Dt]
	  , [Agent_Level__c]
	  , [BD_Agent_Percent__c]
	  , [Agent_Number__c]
	  , [BD_Commission_Level__c]
	  , [BD_NMO_Percent__c]
	  , [BD_Product_Type_Commissions__c]
	  , [Region__c]
	  , [Start_Date__c]
	  , [Stop_Date__c]
	  , [BD_Upline_Percent__c]
	  , [Upline__c]
	  , [Signing_Agent__c]
	  , [Upline_Level__c]
	  , [Company_Code__c]
	  , [Broker_Dealer_Agent_Number__c]
	  , [Reject_Flag]
	  , [Reject_Dt]
	  , [Reject_Reason]
	FROM [salesforce].[Upline_Detail]
    WHERE COALESCE([Reject_Flag],0)<>0;
    SELECT @ROWS = @@ROWCOUNT;
    UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;
    END;
	END;
/*END: Move rejected rows to reject table*/
/*START: Truncate staging*/
IF (1=1)
	BEGIN;
  SELECT @ROWS = SUM(st.row_count) FROM    sys.dm_db_partition_stats st WHERE object_name(object_id) = 'Upline_Detail' AND OBJECT_SCHEMA_NAME(OBJECT_ID) = 'salesforce' AND (index_id < 2);
  TRUNCATE TABLE [EDW_Outbound].[salesforce].[Upline_Detail];
  UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID_START;
  END;
/*END: Truncate staging*/
END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();

--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'TruncateUplineDetail:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;

RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;

  

GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Sub_Account]    Script Date: 5/17/2022 2:04:40 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE    PROCEDURE  [salesforce].[usp_Truncate_Sub_Account]
 	
AS
BEGIN;
-- =============================================

 -- Author: 			Anastasia Vogelaar
 -- CreationDate: 		2021-06-24
 -- Version: 			0.1.0
 -- Description: 		Truncate Sub_Account synct table - 
 --						this stored proc is to be called upon successful 
 --						sync of the staging table with Salesforce dest list
 -- Change Log: 		
 -- =============================================

SET NOCOUNT ON;

BEGIN TRY

TRUNCATE TABLE [EDW_Outbound].[salesforce].[Sub_Account];

END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();


RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Product]    Script Date: 5/17/2022 2:04:41 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE    PROCEDURE  [salesforce].[usp_Truncate_Product]
 	
AS
BEGIN;
-- =============================================

 -- Author: 			Anastasia Vogelaar
 -- CreationDate: 		2021-07-12
 -- Version: 			0.1.0
 -- Description: 		Truncate product synct table - 
 --						this stored proc is to be called upon successful 
 --						sync of the staging table with Salesforce dest list
 -- Change Log: 		
 -- =============================================

SET NOCOUNT ON;

BEGIN TRY

TRUNCATE TABLE [EDW_Outbound].[salesforce].[Product];

END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();


RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Producer_Upline]    Script Date: 5/17/2022 2:04:41 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



create   PROCEDURE  [salesforce].[usp_Truncate_Producer_Upline]
 	
AS
BEGIN;
-- =============================================

 -- Author: 			Anastasia Vogelaar
 -- CreationDate: 		2022-05-12
 -- Version: 			0.1.0
 -- Description: 		Truncate Producer Upline - 
 --						this stored proc is to be called upon successful 
 --						sync of the staging table with Salesforce dest list
 -- Change Log: 		
 -- =============================================

SET NOCOUNT ON;

BEGIN TRY
DECLARE @ROWS						INT;		--Used for logging row counts
DECLARE @LOGID_START				INT;		--Used for the first log id

INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'TruncateProducerUpline:Start/End Indicator');
SELECT @LOGID_START = @@IDENTITY;
SELECT @ROWS = SUM(st.row_count) FROM    sys.dm_db_partition_stats st WHERE object_name(object_id) = 'Producer_Upline' AND OBJECT_SCHEMA_NAME(OBJECT_ID) = 'salesforce' AND (index_id < 2);
TRUNCATE TABLE [EDW_Outbound].[salesforce].[Producer_Upline];
UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID_START;

END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'TruncateProducerUpline:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;

RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Advisor_Contact_V2]    Script Date: 5/17/2022 2:04:41 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--CREATE NONCLUSTERED INDEX idx_EXTN_NADRNA_dxtype ON [EDW_DataLake].[lifepro].[EXTN_NADRNA] (DXType) INCLUDE(SysData, DXTimestamp,NAME_ID, PERFERRED_NAME) --INCLUDE (DXType)
CREATE    PROCEDURE [salesforce].[usp_Upsert_Advisor_Contact_V2]
-- =============================================
-- Author:          Darin Baarda
-- Create date:		06/16/2021
-- Description:     Delta/Initial insert of AE Advisor Contact data
-- Modified date:	08/30/2021 - Anastasia Vogelaar - performance optimization
-- =============================================
-- Last Run Date :	06/28/2021
-- Last Run Exec :	truncate table [salesforce].[Advisor_contact] exec [salesforce].usp_upsert_Advisor_Contact SELECT 1 From salesforce.advisor_contact ORDER BY cast(LifePro_ID__c as int)
-- Last Run Stat :	Initial run 1:50 minutes , 278,619 rows
-- =============================================
-- Maintenance 
-- =============================================
-- CE-302		06/16/2021 Darin Baarda 
-- New Stored Procedure
-- =============================================
-- CX-2813		09/21/2021 Darin Baarda
--	fix for the npn number and getting the latest one
-- =============================================
-- CX-2869		09/23/2021 Darin Baarda
--	fix for the getting the region code from hier_curr_vw
-- =============================================
-- CX-3359		10/14/2021 Darin Baarda
--	change to only get the address records that are associated with the agent
-- =============================================
/*

DROP TABLE [EDW_Outbound].[work].[tmp_advisorContactDeltas]
DROP TABLE [EDW_Outbound].[work].[tmp_AdvisorContactLargeAdvisors];
DROP TABLE [EDW_Outbound].[work].[tmp_AdvisorContactAgents]
DROP TABLE [EDW_Outbound].[work].[tmp_AdvisorContactEmailID]
DROP TABLE [EDW_Outbound].[work].[tmp_AdvisorContactAddressId]
DROP TABLE [EDW_Outbound].[work].[tmp_AdvisorContactGeoAddressId]
DROP TABLE [EDW_Outbound].[work].[tmp_AdvisorContactAMLDates]
DROP TABLE [EDW_Outbound].[work].[tmp_AdvisorContactPerferredName]
DROP TABLE [EDW_Outbound].[work].[tmp_AdvisorContactCRDNumber]
DROP TABLE [EDW_Outbound].[work].[tmp_AdvisorContactNPMNumber]
DROP TABLE [EDW_Outbound].[work].[tmp_AdvisorContactSuitabilityTraining]
DROP TABLE [EDW_Outbound].[work].[tmp_AdvisorContactLicenseState]
DROP TABLE [EDW_Outbound].[work].[tmp_AdvisorContactAddr]
DROP TABLE [EDW_Outbound].[work].[tmp_AdvisorContactRegion]


UPDATE [EDW_Audit].[dbo].[Delta_Settings]
SET SETTING_VALUE = CAST(0 AS VARCHAR(20))
WHERE SETTING_NAME LIKE 'SYNC_ADVISOR_CON%'
TRUNCATE TABLE SALESFORCE.ADVISOR_CONTACT
TRUNCATE TABLE SALESFORCE.ADVISOR_CONTACT_Darin



exec salesforce.usp_Upsert_Advisor_Contact_V2


SELECT top 100 * fROM SALESFORCE.ADVISOR_CONTACT
where ssn__c = '001-52-0173'

SELECT * FROM EDW_DATALAKE.LIFEPRO_V.AGNT_CURR_VW
WHERE NAME_ID = 3892509



*/
AS
BEGIN

SET NOCOUNT ON;


BEGIN TRY
/*START: DECLARE VARIABLES*/
	DECLARE @NOW										DATETIME2	= CURRENT_TIMESTAMP;
	DECLARE @SETTING_MODULE								VARCHAR(20) = 'SF_SNYC';
	DECLARE @SETTING_ADVISOR_CONTACT_NAME				VARCHAR(50) = 'SYNC_ADVISOR_CONTACT_NAME';
	DECLARE @SETTING_ADVISOR_CONTACT_ADDR				VARCHAR(50) = 'SYNC_ADVISOR_CONTACT_ADDR';
	DECLARE @SETTING_ADVISOR_CONTACT_HIER				VARCHAR(50) = 'SYNC_ADVISOR_CONTACT_HIER';
	DECLARE @SETTING_ADVISOR_ACCOUNT_NALK				VARCHAR(50) = 'SYNC_ADVISOR_CONTACT_NALK';
	DECLARE @SETTING_ADVISOR_CONTACT_AGENT				VARCHAR(50) = 'SYNC_ADVISOR_CONACT_AGENT';
	DECLARE @SETTING_ADVISOR_CONTACT_NADRNA				VARCHAR(50) = 'SYNC_ADVISOR_CONTACT_NADRAN';
	DECLARE @SETTING_ADVISOR_CONTACT_AEXP_12			VARCHAR(50) = 'SYNC_ADVISOR_CONTACT_AEXP_12';
	DECLARE @SETTING_ADVISOR_CONTACT_AEXP_04			VARCHAR(50) = 'SYNC_ADVISOR_CONTACT_AEXP_04';
	DECLARE @SETTING_ADVISOR_CONTACT_CONTACT			VARCHAR(50) = 'SYNC_ADVISOR_CONTACT_CONTACT';
	DECLARE @START_ADVISOR_CONTACT_CONTACT				INT;
	DECLARE @END_ADVISOR_CONTACT_CONTACT				INT;
	DECLARE @START_ADVISOR_CONTACT_AEXP_04				INT;
	DECLARE @END_ADVISOR_CONTACT_AEXP_04				INT;
	DECLARE @START_ADVISOR_CONTACT_AEXP_12				INT;
	DECLARE @END_ADVISOR_CONTACT_AEXP_12				INT;
	DECLARE @START_ADVISOR_CONTACT_NADRNA				INT;
	DECLARE @END_ADVISOR_CONTACT_NADRNA					INT;
	DECLARE @START_ADVISOR_CONTACT_AGENT				INT;
	DECLARE @END_ADVISOR_CONTACT_AGENT					INT;
	DECLARE @START_ADVISOR_CONTACT_NALK					INT;
	DECLARE @END_ADVISOR_CONTACT_NALK					INT;
	DECLARE @START_ADVISOR_CONTACT_HIER					INT;
	DECLARE @END_ADVISOR_CONTACT_HIER					INT;
	DECLARE @START_ADVISOR_CONTACT_ADDR					INT;
	DECLARE @END_ADVISOR_CONTACT_ADDR					INT;
	DECLARE @START_ADVISOR_CONTACT_NAME					INT;
	DECLARE @END_ADVISOR_CONTACT_NAME					INT;
--RESET LOGIC
--UPDATE [EDW_Audit].DBO.Delta_Settings SET Setting_Value = '0' WHERE Setting_Module = @SETTING_MODULE AND Setting_Name IN (@SETTING_ADVISOR_CONTACT_NAME	,@SETTING_ADVISOR_CONTACT_ADDR, @SETTING_ADVISOR_CONTACT_HIER, @SETTING_ADVISOR_ACCOUNT_NALK, @SETTING_ADVISOR_CONTACT_AGENT, @SETTING_ADVISOR_CONTACT_NADRNA, @SETTING_ADVISOR_CONTACT_AEXP_12, @SETTING_ADVISOR_CONTACT_AEXP_04, @SETTING_ADVISOR_CONTACT_AEXP_08, @SETTING_ADVISOR_CONTACT_CONTACT);
/*END: DECLARE VARIABLES*/
/*START: ASSIGN VALUES TO THE VARIABLES*/
IF (1=1)
	BEGIN;
	IF NOT EXISTS(SELECT 1 FROM [EDW_Audit].[dbo].[Delta_Settings]   WHERE Setting_Name = @SETTING_ADVISOR_CONTACT_NAME AND Setting_Module = @SETTING_MODULE)
	BEGIN;
		INSERT INTO [EDW_Audit].[dbo].[Delta_Settings] VALUES (@SETTING_ADVISOR_CONTACT_NAME, @SETTING_MODULE, CAST(0 AS VARCHAR(20)));
	END;
	
	IF NOT EXISTS(SELECT 1 FROM [EDW_Audit].[dbo].[Delta_Settings]   WHERE Setting_Name = @SETTING_ADVISOR_CONTACT_ADDR AND Setting_Module = @SETTING_MODULE)
	BEGIN;
		INSERT INTO [EDW_Audit].[dbo].[Delta_Settings] VALUES (@SETTING_ADVISOR_CONTACT_ADDR, @SETTING_MODULE, CAST(0 AS VARCHAR(20)));
	END;
	   	 
	IF NOT EXISTS(SELECT 1 FROM [EDW_Audit].[dbo].[Delta_Settings]   WHERE Setting_Name = @SETTING_ADVISOR_CONTACT_HIER AND Setting_Module = @SETTING_MODULE)
	BEGIN;
		INSERT INTO [EDW_Audit].[dbo].[Delta_Settings] VALUES (@SETTING_ADVISOR_CONTACT_HIER, @SETTING_MODULE, CAST(0 AS VARCHAR(20)));
	END;

	IF NOT EXISTS(SELECT 1 FROM [EDW_Audit].[dbo].[Delta_Settings]   WHERE Setting_Name = @SETTING_ADVISOR_ACCOUNT_NALK AND Setting_Module = @SETTING_MODULE)
	BEGIN;
		INSERT INTO [EDW_Audit].[dbo].[Delta_Settings] VALUES (@SETTING_ADVISOR_ACCOUNT_NALK, @SETTING_MODULE, CAST(0 AS VARCHAR(20)));
	END;
	   
	IF NOT EXISTS(SELECT 1 FROM [EDW_Audit].[dbo].[Delta_Settings]   WHERE Setting_Name = @SETTING_ADVISOR_CONTACT_AGENT AND Setting_Module = @SETTING_MODULE)
	BEGIN;
		INSERT INTO [EDW_Audit].[dbo].[Delta_Settings] VALUES (@SETTING_ADVISOR_CONTACT_AGENT, @SETTING_MODULE, CAST(0 AS VARCHAR(20)));
	END;
	   	IF NOT EXISTS(SELECT 1 FROM [EDW_Audit].[dbo].[Delta_Settings]   WHERE Setting_Name = @SETTING_ADVISOR_CONTACT_NADRNA AND Setting_Module = @SETTING_MODULE)
	BEGIN;
		INSERT INTO [EDW_Audit].[dbo].[Delta_Settings] VALUES (@SETTING_ADVISOR_CONTACT_NADRNA, @SETTING_MODULE, CAST(0 AS VARCHAR(20)));
	END;

	IF NOT EXISTS(SELECT 1 FROM [EDW_Audit].[dbo].[Delta_Settings]   WHERE Setting_Name = @SETTING_ADVISOR_CONTACT_AEXP_12 AND Setting_Module = @SETTING_MODULE)
	BEGIN;
		INSERT INTO [EDW_Audit].[dbo].[Delta_Settings] VALUES (@SETTING_ADVISOR_CONTACT_AEXP_12, @SETTING_MODULE, CAST(0 AS VARCHAR(20)));
	END;
	   	  
	IF NOT EXISTS(SELECT 1 FROM [EDW_Audit].[dbo].[Delta_Settings]   WHERE Setting_Name = @SETTING_ADVISOR_CONTACT_AEXP_04 AND Setting_Module = @SETTING_MODULE)
	BEGIN;
		INSERT INTO [EDW_Audit].[dbo].[Delta_Settings] VALUES (@SETTING_ADVISOR_CONTACT_AEXP_04, @SETTING_MODULE, CAST(0 AS VARCHAR(20)));
	END;
	   
   
	IF NOT EXISTS(SELECT 1 FROM [EDW_Audit].[dbo].[Delta_Settings]   WHERE Setting_Name = @SETTING_ADVISOR_CONTACT_CONTACT AND Setting_Module = @SETTING_MODULE)
	BEGIN;
		INSERT INTO [EDW_Audit].[dbo].[Delta_Settings] VALUES (@SETTING_ADVISOR_CONTACT_CONTACT, @SETTING_MODULE, CAST(0 AS VARCHAR(20)));
	END;
	   
	DECLARE @AEContactRecordTypeID		varchar(20) = (SELECT [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE NAME = 'AE Advisor Contact' AND SOBJECTTYPE = 'Contact');
	DECLARE @ELContactRecordTypeID		varchar(20) = (SELECT [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE NAME = 'EL Advisor Contact' AND SOBJECTTYPE = 'Contact');
	DECLARE @NYContactRecordTypeID		varchar(20) = (SELECT [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE NAME = 'NY Advisor Contact' AND SOBJECTTYPE = 'Contact');

	select @START_ADVISOR_CONTACT_NAME = CAST(Setting_Value AS INT) from [EDW_Audit].[dbo].[Delta_Settings]  WHERE Setting_Name = @SETTING_ADVISOR_CONTACT_NAME AND Setting_Module = @SETTING_MODULE; 
	select @START_ADVISOR_CONTACT_ADDR = CAST(Setting_Value AS INT) from [EDW_Audit].[dbo].[Delta_Settings]  WHERE Setting_Name = @SETTING_ADVISOR_CONTACT_ADDR AND Setting_Module = @SETTING_MODULE; 
	select @START_ADVISOR_CONTACT_HIER = CAST(Setting_Value AS INT) from [EDW_Audit].[dbo].[Delta_Settings]  WHERE Setting_Name = @SETTING_ADVISOR_CONTACT_HIER AND Setting_Module = @SETTING_MODULE; 
	select @START_ADVISOR_CONTACT_NALK = CAST(Setting_Value AS INT) from [EDW_Audit].[dbo].[Delta_Settings]  WHERE Setting_Name = @SETTING_ADVISOR_ACCOUNT_NALK AND Setting_Module = @SETTING_MODULE; 
	select @START_ADVISOR_CONTACT_AGENT = CAST(Setting_Value AS INT) from [EDW_Audit].[dbo].[Delta_Settings]  WHERE Setting_Name = @SETTING_ADVISOR_CONTACT_AGENT AND Setting_Module = @SETTING_MODULE; 
	select @START_ADVISOR_CONTACT_NADRNA = CAST(Setting_Value AS INT) from [EDW_Audit].[dbo].[Delta_Settings]  WHERE Setting_Name = @SETTING_ADVISOR_CONTACT_NADRNA AND Setting_Module = @SETTING_MODULE; 
	select @START_ADVISOR_CONTACT_AEXP_12 = CAST(Setting_Value AS INT) from [EDW_Audit].[dbo].[Delta_Settings]  WHERE Setting_Name = @SETTING_ADVISOR_CONTACT_AEXP_12 AND Setting_Module = @SETTING_MODULE; 
	select @START_ADVISOR_CONTACT_AEXP_04 = CAST(Setting_Value AS INT) from [EDW_Audit].[dbo].[Delta_Settings]  WHERE Setting_Name = @SETTING_ADVISOR_CONTACT_AEXP_04 AND Setting_Module = @SETTING_MODULE; 
	select @START_ADVISOR_CONTACT_CONTACT = CAST(Setting_Value AS INT) from [EDW_Audit].[dbo].[Delta_Settings]  WHERE Setting_Name = @SETTING_ADVISOR_CONTACT_CONTACT AND Setting_Module = @SETTING_MODULE; 

	--print @START_ADVISOR_CONTACT_NAME
	SELECT @END_ADVISOR_CONTACT_NAME = MAX(Row_ID) FROM [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw];
	SELECT @END_ADVISOR_CONTACT_ADDR = MAX(Row_ID) FROM [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw];
	SELECT @END_ADVISOR_CONTACT_HIER = MAX(Row_ID) FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw];
	SELECT @END_ADVISOR_CONTACT_NALK = MAX(Row_ID) from [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw];
	SELECT @END_ADVISOR_CONTACT_AGENT = MAX(Row_ID) from [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw];
	SELECT @END_ADVISOR_CONTACT_NADRNA = MAX(Row_ID) from [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Curr_Vw];
	SELECT @END_ADVISOR_CONTACT_AEXP_12 = MAX(Row_ID) from [EDW_DataLake].[lifepro_v].[AEXP_12_Curr_Vw];
	SELECT @END_ADVISOR_CONTACT_AEXP_04 = MAX(Row_ID) from [EDW_DataLake].[lifepro_v].[AEXP_04_Curr_Vw];
	SELECT @END_ADVISOR_CONTACT_CONTACT = MAX(Row_ID) from [EDW_DataLake].[salesforce_v].[CONTACT_Vw];

	IF (@END_ADVISOR_CONTACT_NAME IS NULL)		SET @END_ADVISOR_CONTACT_NAME = 0;
	IF (@END_ADVISOR_CONTACT_ADDR IS NULL)		SET @END_ADVISOR_CONTACT_ADDR = 0;
	IF (@END_ADVISOR_CONTACT_HIER IS NULL)		SET @END_ADVISOR_CONTACT_HIER = 0;
	IF (@END_ADVISOR_CONTACT_NALK IS NULL)		SET @END_ADVISOR_CONTACT_NALK = 0;
	IF (@END_ADVISOR_CONTACT_AGENT IS NULL)		SET @END_ADVISOR_CONTACT_AGENT = 0;
	IF (@END_ADVISOR_CONTACT_NADRNA IS NULL)	SET @END_ADVISOR_CONTACT_NADRNA = 0;
	IF (@END_ADVISOR_CONTACT_AEXP_12 IS NULL)	SET @END_ADVISOR_CONTACT_AEXP_12 = 0;
	IF (@END_ADVISOR_CONTACT_AEXP_04 IS NULL)	SET @END_ADVISOR_CONTACT_AEXP_04 = 0;
	IF (@END_ADVISOR_CONTACT_CONTACT IS NULL)	SET @END_ADVISOR_CONTACT_CONTACT = 0;
	END;
/*END: ASSIGN VALUES TO THE VARIABLES*/
/*START: CREATE TEMPORARY OBJECTS*/
IF (1=1)
	BEGIN;
	IF OBJECT_ID (N'work.tmp_advisorContactDeltas', N'U') IS NOT NULL
		BEGIN;
		TRUNCATE TABLE [EDW_Outbound].[work].[tmp_advisorContactDeltas];
		END;
	ELSE
		BEGIN;
		create table [EDW_Outbound].[work].[tmp_advisorContactDeltas] 
			(name_id int
			);
			CREATE NONCLUSTERED INDEX IDX_UQ_ADVISORCONTACTDELTAS ON [EDW_Outbound].[work].[tmp_advisorContactDeltas] (name_id);
		END;
	IF OBJECT_ID (N'work.tmp_AdvisorContactLargeAdvisors', N'U') IS NOT NULL
		BEGIN;
		TRUNCATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactLargeAdvisors];
		END;
	ELSE 
		BEGIN;
		CREATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactLargeAdvisors](
				[NAME_ID] INT NOT NULL
			);
			CREATE NONCLUSTERED INDEX IDX_UQ_ADVISORCONTACTLARGEADVISORSNAMEID ON [EDW_Outbound].[work].[tmp_AdvisorContactLargeAdvisors] (name_id);

		END;
	IF OBJECT_ID (N'work.tmp_AdvisorContactAgents', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactAgents];
			END;
		ELSE 
			BEGIN;
			CREATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactAgents]
				([SOC_SEC_NUMBER] [INT] NOT NULL,
				[MinNameID] [INT] NOT NULL,
				CONSTRAINT [PK_TMP_ADVISOR_CONTACT_AGENTS] PRIMARY KEY CLUSTERED ([MinNameID]));
			CREATE UNIQUE NONCLUSTERED INDEX IDX_UQ_ADVISORCONTACTAGENTS ON [EDW_Outbound].[work].[tmp_AdvisorContactAgents] ([SOC_SEC_NUMBER]) INCLUDE (MinNameID);
			END;
		IF OBJECT_ID (N'work.tmp_AdvisorContactEmailID', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactEmailID];
			END;
		ELSE 
			BEGIN;
			CREATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactEmailID]
				([SOC_SEC_NUMBER] [int] NOT NULL,
				[EmailID] INT NULL,
				[BlockIdn] varchar(2) NULL,
				CONSTRAINT [PK_TMP_ADVISOR_CONTACT_EMAILIDS] PRIMARY KEY CLUSTERED ([SOC_SEC_NUMBER]));
				CREATE NONCLUSTERED INDEX IDX_EmailID ON [EDW_Outbound].[work].[tmp_AdvisorContactEmailID] (EmailID) INCLUDE (SOC_SEC_NUMBER);
			END;
		IF OBJECT_ID (N'work.tmp_AdvisorContactAddressId', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactAddressId];
			END;
		ELSE 
			BEGIN;
			CREATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactAddressId]
				([SOC_SEC_NUMBER] [int] NOT NULL,
				[AddressID] INT NULL,
				[Phone] varchar(20),
				[BlockIdn] varchar(2) NULL,
				);
				CREATE NONCLUSTERED INDEX IDX_AdvisorContactAddressID ON [EDW_Outbound].[work].[tmp_AdvisorContactAddressId] (SOC_SEC_NUMBER);				
				CREATE NONCLUSTERED INDEX IDX_AddressID ON [EDW_Outbound].[work].[tmp_AdvisorContactAddressId] (AddressID) INCLUDE (SOC_SEC_NUMBER);
			END;
		IF OBJECT_ID (N'work.tmp_AdvisorContactGeoAddressId', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactGeoAddressId];
			END;
		ELSE 
			BEGIN;
			CREATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactGeoAddressId]
				([SOC_SEC_NUMBER] [int] NOT NULL,
				[AddressID] INT NULL,
				CONSTRAINT [PK_TMP_ADVISOR_CONTACT_GEO] PRIMARY KEY CLUSTERED ([SOC_SEC_NUMBER]));
				CREATE NONCLUSTERED INDEX IDX_AddressID ON [EDW_Outbound].[work].[tmp_AdvisorContactGeoAddressId] (AddressID) INCLUDE ([SOC_SEC_NUMBER]);
			END;
		IF OBJECT_ID (N'work.tmp_AdvisorContactAMLDates', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactAMLDates];
			END;
		ELSE 
			BEGIN;
			CREATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactAMLDates]
				([SOC_SEC_NUMBER] [int] NOT NULL,
				[AMLDate] DATETIME2 NULL
				CONSTRAINT [PK_tmp_AdvisorContactAMLDates] PRIMARY KEY CLUSTERED ([SOC_SEC_NUMBER]));
			END;
		IF OBJECT_ID (N'work.tmp_AdvisorContactPerferredName', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactPerferredName];
			END;
		ELSE 
			BEGIN;
			CREATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactPerferredName]
				([SOC_SEC_NUMBER] [int] NOT NULL,
				[PeferredName] varchar(50) NULL,
				CONSTRAINT [PK_tmp_AdvisorContactPerferredName] PRIMARY KEY CLUSTERED ([SOC_SEC_NUMBER]));
			END;
		IF OBJECT_ID (N'work.tmp_AdvisorContactCRDNumber', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactCRDNumber];
			END;
		ELSE 
			BEGIN;
			CREATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactCRDNumber]
				([SOC_SEC_NUMBER] [int] NOT NULL,
				[CRD_NUM] [varchar](20) NULL,
				CONSTRAINT [PK_tmp_AdvisorContactCRDNumber] PRIMARY KEY CLUSTERED ([SOC_SEC_NUMBER]));
			END;
		IF OBJECT_ID (N'work.tmp_AdvisorContactNPMNumber', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactNPMNumber];
			END;
		ELSE 
			BEGIN;
			CREATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactNPMNumber]
				([SOC_SEC_NUMBER] [int] NOT NULL,
				[SysData] [bigint] NULL,
				CONSTRAINT [PK_tmp_AdvisorContactNPMNumber] PRIMARY KEY CLUSTERED ([SOC_SEC_NUMBER]));
			END;
		IF OBJECT_ID (N'work.tmp_AdvisorContactSuitabilityTraining', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactSuitabilityTraining];
			END;
		ELSE 
			BEGIN;
			CREATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactSuitabilityTraining]
				([SOC_SEC_NUMBER] [int] NOT NULL,
				[ROW_ID] [INT] NULL
				)
				CREATE NONCLUSTERED INDEX IDX_AdvisorContactSuitabilityTraining ON [EDW_Outbound].[work].[tmp_AdvisorContactSuitabilityTraining] (ROW_ID) INCLUDE ([SOC_SEC_NUMBER]);

			END;
		IF OBJECT_ID (N'work.tmp_AdvisorContactLicenseState', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactLicenseState];
			END;
		ELSE 
			BEGIN;
			CREATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactLicenseState]
				([SOC_SEC_NUMBER] [int] NOT NULL,
				[License_State] [varchar](2) NULL,
				);
				CREATE NONCLUSTERED INDEX IDX_AdvisorContactLicenseState ON [EDW_Outbound].[work].[tmp_AdvisorContactLicenseState] ([License_State]) INCLUDE ([SOC_SEC_NUMBER]);

			END;
		IF OBJECT_ID (N'work.tmp_AdvisorContactAddr', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactAddr];
			END;
		ELSE 
			BEGIN;
			CREATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactAddr]
				([Address_ID] INT NOT NULL PRIMARY KEY CLUSTERED
				, [MailingAddress] NVARCHAR(300) NULL
				, [MailingCity]	NVARCHAR(75) null
				, [MailingCountry] NVARCHAR(100) null
				, [MailingState] NVARCHAR(100) null
				, [MailingPostalCode] NVARCHAR(40) null
				, [Email] NVARCHAR(300) null
				);
			END;

		IF OBJECT_ID (N'work.tmp_AdvisorContactRegion', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactRegion];
			END;
		ELSE 
			BEGIN;
			CREATE TABLE [EDW_Outbound].[work].[tmp_AdvisorContactRegion]
				([Soc_Sec_Number] INT NOT NULL PRIMARY KEY CLUSTERED
				, [SysData] BIGINT null
				);
			END;
	END;
/*END: CREATE TEMPORARY OBJECTS*/
/*START: RETRIEVE RECORDS THAT ARE NEW OR CHANGE */
	--If there are any changes since the last execution
	IF (@START_ADVISOR_CONTACT_NAME <> @END_ADVISOR_CONTACT_NAME
		or @START_ADVISOR_CONTACT_ADDR <> @END_ADVISOR_CONTACT_ADDR
		or @START_ADVISOR_CONTACT_HIER <> @END_ADVISOR_CONTACT_HIER
		or @START_ADVISOR_CONTACT_NALK <> @END_ADVISOR_CONTACT_NALK
		or @START_ADVISOR_CONTACT_AGENT <> @END_ADVISOR_CONTACT_AGENT
		or @START_ADVISOR_CONTACT_NADRNA <> @END_ADVISOR_CONTACT_NADRNA
		or @START_ADVISOR_CONTACT_AEXP_12 <> @END_ADVISOR_CONTACT_AEXP_12
		or @START_ADVISOR_CONTACT_AEXP_04 <> @END_ADVISOR_CONTACT_AEXP_04
		or @START_ADVISOR_CONTACT_CONTACT <> @END_ADVISOR_CONTACT_CONTACT)
		BEGIN;

PRINT 'RETRIEVE RECORDS TO BE EXCLUDED'
			--Retrieve all records to be excluded
			insert into [EDW_Outbound].[work].[tmp_AdvisorContactLargeAdvisors] (NAME_ID)
			select NAME_ID FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw]
			JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] on [HIER_Curr_Vw].[COMPANY_CODE] = [AGNT_Curr_Vw].[COMPANY_CODE] and [HIER_Curr_Vw].[AGENT_NUMBER] = [AGNT_Curr_Vw].[AGENT_NUMBER]
			WHERE	([HIER_Curr_Vw].COMPANY_CODE = '01' AND [HIER_Curr_Vw].REGION_CODE = 'BD')
				OR	([HIER_Curr_Vw].COMPANY_CODE = '09' AND [HIER_Curr_Vw].SALES_REGION = 'BD')
				OR	([HIER_Curr_Vw].COMPANY_CODE = '09' AND [HIER_Curr_Vw].REGION_CODE = 'RAYJAY' AND [HIER_Curr_Vw].SALES_REGION = 'SE')
				OR	([HIER_Curr_Vw].REGION_CODE = 'WHOLE')

PRINT 'RETRIEVE DELTAS'
			/* START: Retrieve deltas*/
PRINT 'AGENT'
			--Agent
			INSERT INTO [work].[tmp_advisorContactDeltas] (	name_id)
			select SRC.NAME_ID 
			from [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS SRC
			where SRC.Row_ID > @START_ADVISOR_CONTACT_AGENT
				AND SRC.Row_ID <= @END_ADVISOR_CONTACT_AGENT
				AND NOT EXISTS(SELECT 1 FROM  [work].[tmp_AdvisorContactLargeAdvisors] AS DEST WHERE DEST.NAME_ID = SRC.NAME_ID)
PRINT 'HIER'
			--HIER
			INSERT INTO [work].[tmp_advisorContactDeltas] (	name_id)
			select AG.NAME_ID
			FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] SRC 
			JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AG ON SRC.COMPANY_CODE = AG.COMPANY_CODE AND SRC.AGENT_NUMBER = AG.AGENT_NUMBER
			WHERE	SRC.Row_ID > @START_ADVISOR_CONTACT_HIER
				AND SRC.Row_ID <= @END_ADVISOR_CONTACT_HIER
				AND NOT EXISTS(SELECT 1 FROM  [work].[tmp_AdvisorContactLargeAdvisors] AS ADV WHERE ADV.NAME_ID = AG.NAME_ID)
				AND NOT EXISTS(SELECT 1 FROM   [work].[tmp_advisorContactDeltas] AS DEST WHERE DEST.name_id = AG.NAME_ID)
PRINT 'NAME'
			--NAME
			INSERT INTO [work].[tmp_advisorContactDeltas] (name_id)
			select SRC.NAME_ID 
			FROM	[EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] SRC 
			WHERE	EXISTS (SELECT 1 FROM [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NM WHERE NM.Row_ID>=@START_ADVISOR_CONTACT_NAME AND NM.Row_ID<=@END_ADVISOR_CONTACT_NAME AND NM.NAME_ID = SRC.NAME_ID)
			AND NOT EXISTS(SELECT 1 FROM  [work].[tmp_AdvisorContactLargeAdvisors] AS ADV WHERE ADV.NAME_ID = SRC.NAME_ID)
				AND NOT EXISTS(SELECT 1 FROM   [work].[tmp_advisorContactDeltas] AS DEST WHERE DEST.name_id = SRC.NAME_ID)
PRINT 'NALK'
			--NALK
			INSERT INTO [work].[tmp_advisorContactDeltas] (	name_id)
			select SRC.NAME_ID 
			FROM	[EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] SRC 
			WHERE	EXISTS (SELECT 1 FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] AS NM WHERE NM.Row_ID>=@START_ADVISOR_CONTACT_NALK AND NM.Row_ID<=@END_ADVISOR_CONTACT_NALK AND NM.NAME_ID = SRC.NAME_ID)
			AND NOT EXISTS(SELECT 1 FROM  [work].[tmp_AdvisorContactLargeAdvisors] AS ADV WHERE ADV.NAME_ID = SRC.NAME_ID)
				AND NOT EXISTS(SELECT 1 FROM   [work].[tmp_advisorContactDeltas] AS DEST WHERE DEST.name_id = SRC.NAME_ID)
PRINT 'ADDR'
			--ADDR
			INSERT INTO [work].[tmp_advisorContactDeltas] (	name_id)
			select SRC.NAME_ID
			FROM	[EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] SRC 
				INNER JOIN [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] AS NALK on SRC.[NAME_ID] = NALK.[NAME_ID]
				INNER JOIN [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw] AS ADDR ON NALK.[ADDRESS_ID] = ADDR.[ADDRESS_ID]
					AND ADDR.Row_ID > @START_ADVISOR_CONTACT_ADDR
					AND ADDR.Row_ID <= @END_ADVISOR_CONTACT_ADDR
			WHERE	NOT EXISTS(SELECT 1 FROM  [work].[tmp_AdvisorContactLargeAdvisors] AS ADV WHERE ADV.NAME_ID = SRC.NAME_ID)
				AND NOT EXISTS(SELECT 1 FROM   [work].[tmp_advisorContactDeltas] AS DEST WHERE DEST.name_id = SRC.NAME_ID)
			
PRINT 'NADRNA'
			--NADRNA
			INSERT INTO [work].[tmp_advisorContactDeltas] (name_id)
			select SRC.NAME_ID
			FROM	[EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] SRC
			WHERE	EXISTS (SELECT 1 FROM [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Curr_Vw] AS NDR WHERE NDR.[NAME_ID] = SRC.[NAME_ID] AND NDR.Row_ID>@START_ADVISOR_CONTACT_NADRNA AND NDR.Row_ID<=@END_ADVISOR_CONTACT_NADRNA)
				AND NOT EXISTS(SELECT 1 FROM  [work].[tmp_AdvisorContactLargeAdvisors] AS ADV WHERE ADV.NAME_ID = SRC.NAME_ID)
				AND NOT EXISTS(SELECT 1 FROM   [work].[tmp_advisorContactDeltas] AS DEST WHERE DEST.name_id = SRC.NAME_ID)

PRINT 'AEXP12'
			--AEXP12

			INSERT INTO [work].[tmp_advisorContactDeltas] ( name_id)
			select AG.NAME_ID
			FROM	[EDW_DataLake].[lifepro_v].[AEXP_12_Curr_Vw] SRC
			JOIN	[EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AG ON SRC.COMPANY_CODE = AG.COMPANY_CODE AND SRC.AGENT_NUMBER = AG.AGENT_NUMBER
			WHERE	SRC.Row_ID>@START_ADVISOR_CONTACT_AEXP_12 
				AND SRC.Row_ID <=@END_ADVISOR_CONTACT_AEXP_12
				AND NOT EXISTS(SELECT 1 FROM  [work].[tmp_AdvisorContactLargeAdvisors] AS ADV WHERE ADV.NAME_ID = AG.NAME_ID)
				AND NOT EXISTS(SELECT 1 FROM   [work].[tmp_advisorContactDeltas] AS DEST WHERE DEST.name_id = AG.NAME_ID)
			
			--AEXP04

			INSERT INTO [work].[tmp_advisorContactDeltas] (	name_id)
			select AG.NAME_ID
			FROM	[EDW_DataLake].[lifepro_v].[AEXP_04_Curr_Vw] SRC
			JOIN	[EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AG ON SRC.COMPANY_CODE = AG.COMPANY_CODE AND SRC.AGENT_NUMBER = AG.AGENT_NUMBER
			WHERE	SRC.Row_ID>@START_ADVISOR_CONTACT_AEXP_04
				AND SRC.Row_ID <=@END_ADVISOR_CONTACT_AEXP_04
				AND NOT EXISTS(SELECT 1 FROM  [work].[tmp_AdvisorContactLargeAdvisors] AS ADV WHERE ADV.NAME_ID = AG.NAME_ID)
				AND NOT EXISTS(SELECT 1 FROM   [work].[tmp_advisorContactDeltas] AS DEST WHERE DEST.name_id = AG.NAME_ID)

PRINT 'CONTACT'
			--CONTACT
			INSERT INTO [work].[tmp_advisorContactDeltas] (name_id)
			SELECT SRC.NAME_ID
			from [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS SRC
				INNER JOIN [EDW_DataLake].[salesforce_v].[CONTACT_Vw] on (SRC.COMPANY_CODE + '-' + SRC.AGENT_NUMBER) = [CONTACT_Vw].LIFEPRO_ID__C
			where [CONTACT_Vw].Row_ID > @START_ADVISOR_CONTACT_CONTACT
				AND [EDW_DataLake].[salesforce_v].[CONTACT_Vw].Row_ID <=@END_ADVISOR_CONTACT_CONTACT



			/* END: Retrieve deltas*/
PRINT 'DONE: RETRIEVE RECORDS TO BE THAT CHANGED'
		END;
/*END: RETRIEVE RECORDS THAT ARE NEW OR CHANGED */
/*START: POPULATE TEMPORARY OBJECTS*/
IF (1=1)
	BEGIN;
PRINT 'RETRIEVE NAME IDs'
		IF EXISTS (SELECT (1) FROM [EDW_Outbound].[work].[tmp_advisorContactDeltas])
			BEGIN;
			--GET MIN NAME-IDS
PRINT 'GET MIN NAME-IDS'
			;WITH MIN_AGENT --There was an issue in UAT where same NAME_ID was attached to multiple Agents, hence the deduplication
				AS
				(SELECT ROW_NUMBER() OVER(PARTITION BY SRC.NAME_ID ORDER BY SRC.COMPANY_CODE, SRC.AGENT_NUMBER, SRC.NAME_ID ASC) AS RN
					, SRC.NAME_ID
					, NM.SOC_SEC_NUMBER
					 FROM [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS SRC
				INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NM ON	
					SRC.NAME_ID = NM.NAME_ID
			WHERE	EXISTS(SELECT 1 FROM [work].[tmp_advisorContactDeltas] AS DELTA WHERE DELTA.name_id = SRC.NAME_ID)
				AND NM.NAME_FORMAT_CODE = 'I'
				AND SRC.COMPANY_CODE <>'02'
				AND NOT EXISTS (SELECT 1 from [EDW_Outbound].[salesforce].[LOOKUP_ACCOUNT] as Dest Where Dest.LIFEPRO_ID__C = NM.NAME_id)
				)
			INSERT	[EDW_Outbound].[work].[tmp_AdvisorContactAgents]
				(SOC_SEC_NUMBER
				, MinNameID)
			SELECT	SOC_SEC_NUMBER
				, MIN(NAME_ID)
			FROM MIN_AGENT
			WHERE RN = 1
			GROUP BY MIN_AGENT.SOC_SEC_NUMBER

				
PRINT 'GET MAX EMAIL IDS'	
			--GET EMAIL IDS
			INSERT [EDW_Outbound].[work].[tmp_AdvisorContactEmailID] (SOC_SEC_NUMBER, EmailID, BlockIdn)
			SELECT NAME.SOC_SEC_NUMBER
				, MAX(NALK.ADDRESS_ID)
				, MAX(RTRIM(NALK.BLOCK_IND))
			FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] AS NALK
				INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NAME ON
					NALK.NAME_ID = NAME.NAME_ID
				INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGNT ON
					NALK.NAME_ID= AGNT.NAME_ID
			WHERE SOC_SEC_NUMBER IS NOT NULL
				AND ADDRESS_TYPE = 'E'
				AND (rtrim(ADDRESS_CODE) = 'BUS' OR rtrim(ADDRESS_CODE) = '')
			GROUP BY NAME.SOC_SEC_NUMBER;
PRINT 'GET MAX MAIL IDS'
			--GET MAILING ADDRESSES
			INSERT into [EDW_Outbound].[work].[tmp_AdvisorContactAddressId] (SOC_SEC_NUMBER, AddressID)
			SELECT	NAME.SOC_SEC_NUMBER
				, max(NALK.ADDRESS_ID) as AddressID
			FROM [EDW_Datalake].[lifepro_v].[NALK_Curr_Vw] AS NALK
				INNER JOIN [EDW_Datalake].[lifepro_v].[NAME_Curr_Vw] as NAME ON
					NALK.NAME_ID = name.NAME_ID
				INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGNT ON
					NALK.NAME_ID= AGNT.NAME_ID
			WHERE SOC_SEC_NUMBER IS NOT NULL
				AND ADDRESS_TYPE <> 'E'
				AND (rtrim(ADDRESS_CODE) = 'BUS' OR rtrim(ADDRESS_CODE) = '')
			GROUP BY NAME.SOC_SEC_NUMBER
--PRINT 'GET GEO MAIL IDS'			
--SELECT * FROM work.tmp_AdvisorContactAgents WHERE MinNameID=215262  
--SELECT * FROM EDW_DataLake.lifepro_v.AGNT_Curr_Vw WHERE NAME_ID = '215262  '
			--GET GEO ADDRESSES
			insert into [EDW_Outbound].[work].[tmp_AdvisorContactGeoAddressId] (SOC_SEC_NUMBER, AddressID)
			SELECT	NAME.SOC_SEC_NUMBER
				, MAX(NALK.ADDRESS_ID)
			FROM  [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] AS NALK
				INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NAME ON
					NALK.NAME_ID = NAME.NAME_ID
				INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGNT ON
					NALK.NAME_ID= AGNT.NAME_ID
			WHERE SOC_SEC_NUMBER IS NOT NULL
				AND ADDRESS_TYPE <> 'E'
				AND rtrim(ADDRESS_CODE) = 'GEO'
			GROUP BY NAME.SOC_SEC_NUMBER;
PRINT 'GET AML DATES'
			--GET MAX AML DATES
			insert into [EDW_Outbound].[work].[tmp_AdvisorContactAMLDates] (SOC_SEC_NUMBER, [AMLDate])
			SELECT NAME.SOC_SEC_NUMBER
				, MAX(EXTN.AML_DATE)
			FROM [EDW_DataLake].[lifepro_v].[EXTN_AGTT_Curr_Vw] AS EXTN
				INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGNT ON
					EXTN.COMPANY_CODE = AGNT.COMPANY_CODE AND
					EXTN.POLICY_NUMBER = AGNT.AGENT_NUMBER
				INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NAME ON
					AGNT.NAME_ID = NAME.NAME_ID
			WHERE SOC_SEC_NUMBER IS NOT NULL
			group by NAME.SOC_SEC_NUMBER;

			--SELECT DISTINCT policy_number FROM [EDW_DataLake].[lifepro_v].[EXTN_AGTT_Curr_Vw]
PRINT 'GET PREFERRED NAME'
			--GET MAX PREFERRED NAME
			INSERT into [EDW_Outbound].[work].[tmp_AdvisorContactPerferredName] (SOC_SEC_NUMBER, PeferredName)
			SELECT NAME.SOC_SEC_NUMBER
				, MAX(NADR.PERFERRED_NAME)
			from [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Curr_Vw] AS NADR 
				INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NAME ON
					NADR.NAME_ID = NAME.NAME_ID
			where rtrim(NADR.PERFERRED_NAME) <> ''
			AND SOC_SEC_NUMBER IS NOT NULL
			GROUP BY NAME.SOC_SEC_NUMBER;
PRINT 'GET CRD NUMBER'
			--GET CRD NUMBERS
			INSERT into [EDW_Outbound].[work].[tmp_AdvisorContactCRDNumber] (SOC_SEC_NUMBER, CRD_NUM)
			SELECT NAME.SOC_SEC_NUMBER
				, MAX(NADR.CRD_NUM)
			from [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Curr_Vw] AS NADR
				INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NAME ON
					NADR.NAME_ID = NAME.NAME_ID
			where RTRIM(CRD_NUM) <> ''
				--AND NOT EXISTS (SELECT 1 FROM [EDW_Outbound].[work].[tmp_AdvisorContactPerferredName] AS DEST where DEST.MinNameID = NADR.NAME_ID)
			AND SOC_SEC_NUMBER IS NOT NULL
			GROUP BY NAME.SOC_SEC_NUMBER;
PRINT 'GET NPM NUMBER'
			--GET NPM NUMBERS
			INSERT into [EDW_Outbound].[work].[tmp_AdvisorContactNPMNumber] (SOC_SEC_NUMBER, SysData)
			SELECT NAME.SOC_SEC_NUMBER
				, MAX(NADR.[SysData])
			from [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Curr_Vw] AS NADR 
				INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NAME ON
					NADR.NAME_ID = NAME.NAME_ID
			where RTRIM(NPN_NUM) <> ''
				--AND NOT EXISTS (SELECT 1 FROM [EDW_Outbound].[work].[tmp_AdvisorContactPerferredName] AS DEST where DEST.MinNameID = NADR.NAME_ID)
			AND SOC_SEC_NUMBER IS NOT NULL
			GROUP BY NAME.SOC_SEC_NUMBER;

PRINT 'GET ADVISOR TRAINING'
			--GET ADVISOR TRAINING SELECT TOP 100 * FROM [EDW_DataLake].[lifepro_v].[AEXP_12_Curr_Vw]

			INSERT into [EDW_Outbound].[work].[tmp_AdvisorContactSuitabilityTraining] (SOC_SEC_NUMBER, ROW_ID)
			SELECT NAME.SOC_SEC_NUMBER
				, MAX(AG.ROW_ID)
			from [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AG 
				INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NAME ON
					AG.NAME_ID = NAME.NAME_ID
				INNER JOIN [EDW_DataLake].[lifepro_v].[AEXP_12_Curr_Vw] AS AEXP12 ON
					AG.COMPANY_CODE = AEXP12.COMPANY_CODE AND
					AG.AGENT_NUMBER = AEXP12.AGENT_NUMBER
			WHERE SOC_SEC_NUMBER = 2089124
			and RTRIM(AEXP12.SUITABLTY_TRNING) <> ''
			GROUP BY SOC_SEC_NUMBER;
			
PRINT 'GET LICENSE STATE'
			--GET LICENSE STATE
			; WITH AEXP04 (RN, COMPANY_CODE, AGENT_NUMBER, License_State)
				AS
				(SELECT ROW_NUMBER() OVER (PARTITION BY COMPANY_CODE, AGENT_NUMBER ORDER BY ROW_ID DESC) AS RN
					, COMPANY_CODE
					, AGENT_NUMBER
					,  STATE_1
				FROM [EDW_DataLake].[lifepro_v].[AEXP_04_Curr_Vw])
			INSERT into [EDW_Outbound].[work].[tmp_AdvisorContactLicenseState] (SOC_SEC_NUMBER, License_State)
			SELECT NAME.SOC_SEC_NUMBER
				, AEXP04.License_State
			from [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AG 
				INNER JOIN AEXP04 ON
					AG.Company_Code = AEXP04.COMPANY_CODE 
					AND AG.Agent_Number = AEXP04.AGENT_NUMBER
				INNER JOIN [EDW_Datalake].[lifepro_v].[NAME_Curr_Vw] as NAME ON
					AG.NAME_ID = NAME.NAME_ID
			WHERE	AEXP04.RN = 1
			AND SOC_SEC_NUMBER IS NOT NULL;

PRINT 'GET ADDR';
			--ADDR
			INSERT [EDW_Outbound].[work].[tmp_AdvisorContactAddr]
				([Address_ID] 
				, [MailingAddress]
				, [MailingCity]
				, [MailingCountry] 
				, [MailingState]
				, [MailingPostalCode] 
				, [Email])
			SELECT ADDR.[ADDRESS_ID]
				, RTRIM(ISNULL(Addr.[ADDR_LINE_1],'')) + CASE WHEN RTRIM(ISNULL(Addr.[ADDR_LINE_2], '')) <> '' THEN ' ' + RTRIM(Addr.[ADDR_LINE_2]) ELSE '' END +  CASE WHEN RTRIM(ISNULL(Addr.[ADDR_LINE_3], '')) <> '' THEN ' ' + RTRIM(Addr.[ADDR_LINE_3]) ELSE '' END 
				, ADDR.[CITY]
				, ADDR.[COUNTRY]
				, ADDR.[STATE]
				, ADDR.[ZIP]
				, RTRIM(ADDR.ADDR_LINE_1) + RTRIM(ADDR.ADDR_LINE_2) + RTRIM(ADDR.ADDR_LINE_3)
			FROM	[EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw] AS ADDR
			WHERE	EXISTS (SELECT 1 FROM [EDW_Outbound].[work].[tmp_AdvisorContactEmailID] AS EMAIL WHERE EMAIL.EmailID = ADDR.ADDRESS_ID)
				OR EXISTS(SELECT 1 FROM [EDW_Outbound].[work].[tmp_AdvisorContactAddressId] AS MAIL WHERE MAIL.AddressID = ADDR.ADDRESS_ID)
				OR EXISTS(SELECT 1 FROM [EDW_Outbound].[work].[tmp_AdvisorContactGeoAddressId] AS GEO WHERE GEO.AddressID = ADDR.ADDRESS_ID);
			END;

PRINT 'GET REGION'
			--REGION
			INSERT [EDW_Outbound].[work].[tmp_AdvisorContactRegion]
				([Soc_Sec_Number]
				, [sysdata]
				)
				SELECT SOC_SEC_NUMBER, MAX(HIER.SYSDATA)
				FROM [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NAME
					INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGNT ON
						NAME.NAME_ID = AGNT.NAME_ID
					LEFT JOIN [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] as HIER ON
						AGNT.COMPANY_CODE = HIER.COMPANY_CODE
						AND AGNT.AGENT_NUMBER = HIER.AGENT_NUMBER
				WHERE NAME_FORMAT_CODE = 'I'
				GROUP BY SOC_SEC_NUMBER



	END;
/*END: POPULATE TEMPORARY OBJECTS*/
/*START: CREATE INDEXES IF THEY DON'T EXIST*/
IF (1=1)
	BEGIN;
PRINT 'DONE: RETRIEVE NAME IDs'		
PRINT 'CREATE CONSTRAINTS IF DO NOT EXIST'
	IF NOT EXISTS(SELECT 1 FROM SYS.INDEXES WHERE NAME = N'UQ_NAMEID_SF_ADVISOR_CONTACT' AND OBJECT_ID = OBJECT_ID(N'salesforce.Advisor_Contact', N'U'))
		BEGIN;
		CREATE UNIQUE INDEX UQ_NAMEID_SF_ADVISOR_CONTACT ON  [salesforce].[Advisor_Contact] ([Name_Id__c]);
		END;
	IF NOT EXISTS(SELECT 1 FROM SYS.INDEXES WHERE NAME = N'IDX_LIFEPRO_ID__c_LOOKUP_ACCOUNT' AND OBJECT_ID = OBJECT_ID(N'salesforce.LOOKUP_ACCOUNT', N'U'))
		BEGIN;
		CREATE INDEX IDX_LIFEPRO_ID__c_LOOKUP_ACCOUNT ON [salesforce].[LOOKUP_ACCOUNT] ([LIFEPRO_ID__C]) INCLUDE ([ID]) WITH (FILLFACTOR=80);
		END;
	IF NOT EXISTS(SELECT 1 FROM SYS.OBJECTS WHERE TYPE = 'PK' AND parent_object_id = OBJECT_ID(N'salesforce.PhoneNumber', N'U'))
		BEGIN;
		ALTER TABLE [salesforce].[PhoneNumber] ADD CONSTRAINT PK_NAMEID PRIMARY KEY CLUSTERED ([NameID]);
		END;
	END;
/*END: CREATE INDEXES IF THEY DON'T EXIST*/
/*START: UPDATE EXISTING RECORDS AT THE DESTINATION*/



IF (1=1)
	BEGIN
PRINT 'DONE:CREATE CONSTRAINTS IF DO NOT EXIST'
PRINT 'UPDATE EXISTING VALUES IN THE SYNC TABLE'
		IF EXISTS(SELECT 1 FROM [salesforce].[Advisor_Contact])
			BEGIN;
				
				;WITH LAST_CONTACT AS
					(SELECT ROW_NUMBER() OVER (PARTITION BY [LIFEPRO_ID__C] ORDER BY Row_ID DESC) AS RN
						, LIFEPRO_ID__C
						, FIRST_APP_DATE__C
					FROM [EDW_DataLake].[salesforce_v].[contact_Curr_Vw] 
					WHERE LIFEPRO_ID__C IS NOT NULL)
				UPDATE	DEST
				SET		[AccountID]									= rtrim(isnull(LOOKUP_ACCOUNT.[ID],''))
						, [BirthDate]								= CASE WHEN SRC.[DATE_OF_BIRTH] > '12/31/4000' OR SRC.[DATE_OF_BIRTH]<'1/1/1700' THEN NULL ELSE SRC.[DATE_OF_BIRTH] END
						, [BusinessPhone]							= rtrim(isnull(SPHONE.[PhoneNumber], ''))
						, [DoNotCall]								= CASE WHEN NALK.BLOCK_IND IN ('A', 'B','D','E','G','I') THEN 1 ELSE 0 END
						, [Email]									= rtrim(isnull(EMAIL.Email, ''))
						, [HasOptedOutOfEmail]						= CASE WHEN NALK.BLOCK_IND IN ('A','B','C','D','F','G','H','L') THEN 1 ELSE 0 END
						, [HasOptedOutOfFax]						= CASE WHEN NALK.BLOCK_IND IN ('A','B','C','E','F','I','J','M') THEN 1 ELSE 0 END
						, [OwnerID]									= NULL --NOT DEFINED
						, [FirstName]								= rtrim(isnull(SRC.INDIVIDUAL_FIRST, ''))
						, [LastName]								= CASE WHEN COALESCE(RTRIM(SRC.INDIVIDUAL_LAST), '')='' THEN 'N/A' ELSE RTRIM(SRC.INDIVIDUAL_LAST) END
						, [MailingAddress]							= rtrim(isnull(ADDR.MailingAddress, ''))
						, [MailingCity]								= rtrim(isnull(ADDR.[MailingCity], ''))
						, [MailingCountry]							= rtrim(isnull(ADDR.[MailingCountry], ''))
						, [MailingState]							= rtrim(isnull(ADDR.[MailingState], ''))
						, [MailingStreet]							= rtrim(isnull(ADDR.MailingAddress, ''))
						, [MailingPostalCode]						= rtrim(isnull(ADDR.[MailingPostalCode], ''))
						, [MiddleName]								= rtrim(isnull(SRC.INDIVIDUAL_MIDDLE, ''))
						, [OtherPhone]								= NULL --NOT DEFINED
						, [OtherAddress]							= rtrim(isnull(GEO.[MailingAddress], ''))
						, [OtherCity]								= rtrim(isnull(geo.[MailingCity], ''))
						, [OtherCountry]							= rtrim(isnull(GEO.[MailingCountry], ''))
						, [OtherState]								= rtrim(isnull(GEO.[MailingState], ''))
						, [OtherStreet]								= rtrim(isnull(GEO.[MailingAddress], ''))
						, [OtherPostalCode]							= rtrim(isnull(GEO.[MailingPostalCode], ''))
						--, [RecordType]								= CASE WHEN AG.COMPANY_CODE = '01' THEN @AEContactRecordTypeID 
						--													WHEN AG.Company_Code = '09' THEN @ELContactRecordTypeID
						--													ELSE @NYContactRecordTypeID
						--												END 
						, [Salutation]								= CASE WHEN RTRIM(SRC.INDIVIDUAL_PREFIX)<>'' THEN SRC.INDIVIDUAL_PREFIX ELSE SRC.BUSINESS_PREFIX END
						, [Suffix]									= CASE	WHEN RTRIM(SRC.INDIVIDUAL_SUFFIX)<>'' THEN SRC.INDIVIDUAL_SUFFIX ELSE SRC.BUSINESS_SUFFIX END
						--, [LifePro_Last_Modified_DateTime__c]		= @NOW
						, [DLRS_2020_Fall_Conference_Premium__c]	= NULL -- NOT DEFINED
						, [DLRS_2021_Fall_Conference_Premium__c]	= NULL -- NOT DEFINED
						, [All_Time_Premium__c]						= NULL -- NOT DEFINED
						, [AML_Training__c]							= AML.AMLDate
						, [Total_Production__c]						= NULL -- NOT DEFINED
						, [DLRS_August_Premium_Total__c]			= NULL -- NOT DEFINED
						, [Company_Code__c]							= rtrim(isnull(AG.Company_Code, ''))
						--, [Contact_Record_Type__c]					= CASE	WHEN AG.COMPANY_CODE = '01' THEN @AEContactRecordTypeID 
						--													WHEN AG.Company_Code = '09' THEN @ELContactRecordTypeID
						--													ELSE @NYContactRecordTypeID
						--												END 
						, [First_App_Date__c]						= LAST_CONTACT.FIRST_APP_DATE__C
						, [Gender__c]								= CASE WHEN RTRIM(isnull(SRC.SEX_CODE, '')) NOT IN ('M','F') THEN NULL ELSE RTRIM(isnull(SRC.SEX_CODE, '')) END
						, [Last_App_Date__c]						= NULL -- NOT DEFINED
						, [Last_Status_Date__c]						= NULL -- NOT DEFINED
						, [Last_Terminated_Date__c]					= NULL -- NOT DEFINED
						, [LifePro_ID__c]							= TMP.MinNameID
						, [LO_Agent__c]								= NULL -- NOT DEFINED
						, [Name_Format__c]							= rtrim(isnull(SRC.NAME_FORMAT_CODE, ''))
						, [Preferred_Name__c]						= rtrim(isnull(PreferredNames.PeferredName, ''))
						, [Region__c]								= HIER.REGION_CODE
						, [SSN__c]									= CASE	WHEN SRC.NAME_FORMAT_CODE = 'B' THEN STUFF(RIGHT('000000000' + TRIM(SRC.BUSINESS_TAX_CODE), 9), 3, 0, '-')
																			ELSE STUFF(STUFF(RIGHT('000000000' + CONVERT(varchar(11), SRC.SOC_SEC_NUMBER), 9), 4, 0, '-'), 7, 0, '-')
																		END
						, [State__c]								= NULL -- NOT DEFINED
						, [Suitability__c]							= rtrim(isnull(AEXP12.SUITABLTY_TRNING, ''))
						, [Terminated_Amount__c]					= NULL -- NOT DEFINED
						, [YTD_Activity_Amount__c]					= NULL -- NOT DEFINED
						, [YTD_Apps_Received__c]					= NULL -- NOT DEFINED
						, [YTD_Effective_Amount__c]					= NULL -- NOT DEFINED
						, [DLRS_YTD_FIA_Premium__c]					= NULL -- NOT DEFINED
						, [YTD_Issue_Amount__c]						= NULL -- NOT DEFINED
						, [Parent_Name_Id__c]						= NULL -- NOT DEFINED
						, [Name_Id__c]								= SRC.NAME_ID
						, [NPN__c]									= rtrim(isnull(NPM.NPN_NUM, ''))
						, [CRD__c]									= rtrim(isnull(CRD.CRD_NUM, ''))
				FROM	[salesforce].[Advisor_Contact] AS DEST
						INNER JOIN [EDW_Outbound].[work].[tmp_AdvisorContactAgents] AS TMP 
							on DEST.Name_Id__c = tmp.MinNameID
						INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS SRC ON
							SRC.[NAME_ID] = TMP.[MinNameID]
						INNER JOIN [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] AS NALK ON
							SRC.[NAME_ID] = NALK.[NAME_ID]
						INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AG ON 
							TMP.MinNameID = AG.NAME_ID
						LEFT OUTER JOIN [salesforce].[LOOKUP_ACCOUNT] AS LOOKUP_ACCOUNT ON
							LOOKUP_ACCOUNT.[LIFEPRO_ID__C] = TMP.MinNameID
						LEFT OUTER JOIN [salesforce].[PhoneNumber] AS SPHONE ON
							SPHONE.NameID = TMP.MinNameID
						LEFT OUTER JOIN [EDW_Outbound].[work].[tmp_AdvisorContactAddressId] AS TMP_ADDR ON	
							TMP_ADDR.SOC_SEC_NUMBER = SRC.SOC_SEC_NUMBER
						LEFT OUTER JOIN [EDW_Outbound].[work].[tmp_AdvisorContactEmailID] AS TMP_EMAIL ON	
							TMP_EMAIL.SOC_SEC_NUMBER = SRC.SOC_SEC_NUMBER
						LEFT OUTER JOIN [EDW_Outbound].[work].[tmp_AdvisorContactGeoAddressId] AS TMP_GEO ON	
							TMP_GEO.SOC_SEC_NUMBER = SRC.SOC_SEC_NUMBER
						LEFT OUTER JOIN [EDW_Outbound].[work].[tmp_AdvisorContactAddr] AS EMAIL ON
							EMAIL.[ADDRESS_ID] = TMP_EMAIL.EmailID
						LEFT OUTER JOIN [EDW_Outbound].[work].[tmp_AdvisorContactAddr] AS ADDR ON
							ADDR.[ADDRESS_ID] = TMP_ADDR.AddressID
						LEFT OUTER JOIN [EDW_Outbound].[work].[tmp_AdvisorContactAddr] AS GEO ON	
							GEO.[ADDRESS_ID] = TMP_GEO.AddressID
						LEFT OUTER JOIN [work].[tmp_AdvisorContactAMLDates] AS AML ON	
							AML.SOC_SEC_NUMBER = SRC.SOC_SEC_NUMBER
						LEFT OUTER JOIN LAST_CONTACT ON 
							LAST_CONTACT.LIFEPRO_ID__C = AG.COMPANY_CODE + AG.AGENT_NUMBER
							AND LAST_CONTACT.RN = 1
						LEFT OUTER JOIN [EDW_Outbound].[work].[tmp_AdvisorContactPerferredName] AS PreferredNames ON	
							PreferredNames.SOC_SEC_NUMBER = SRC.SOC_SEC_NUMBER
						LEFT OUTER JOIN [EDW_Outbound].[work].[tmp_AdvisorContactSuitabilityTraining] AS TRAINING ON
							TRAINING.SOC_SEC_NUMBER = SRC.SOC_SEC_NUMBER
						LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_12_Curr_Vw] as AEXP12 ON
							TRAINING.ROW_ID = AEXP12.Row_ID
						LEFT OUTER JOIN [EDW_Outbound].[work].[tmp_AdvisorContactNPMNumber] AS TMP_NPM ON
							TMP_NPM.SOC_SEC_NUMBER = SRC.SOC_SEC_NUMBER
						LEFT OUTER JOIN [EDW_Outbound].[work].[tmp_AdvisorContactCRDNumber] AS CRD ON
							CRD.SOC_SEC_NUMBER = SRC.SOC_SEC_NUMBER
						LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Curr_Vw] AS NPM ON
							NPM.sysdata = TMP_NPM.SYSDATA
						LEFT OUTER JOIN [EDW_Outbound].[work].[tmp_AdvisorContactRegion] as TMP_RGN ON
							SRC.SOC_SEC_NUMBER = TMP_RGN.Soc_Sec_Number
						LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] AS HIER ON
							TMP_RGN.SysData = HIER.SysData

				

	
	PRINT 'DONE: UPDATE EXISTING VALUES IN THE SYNC TABLE - ' + CAST(@@ROWCOUNT AS NVARCHAR);					
	END;
END;
/*END: UPDATE EXISTING RECORDS AT THE DESTINATION*/
/*START: INSERT NEW RECORDS*/
IF (1=1)
	BEGIN;
PRINT 'INSERT NEW VALUES IN THE SYNC TABLE';

	;WITH LAST_CONTACT AS
		(SELECT ROW_NUMBER() OVER (PARTITION BY [LIFEPRO_ID__C] ORDER BY Row_ID DESC) AS RN
			, LIFEPRO_ID__C
			, FIRST_APP_DATE__C
		FROM [EDW_DataLake].[salesforce_v].[contact_Curr_Vw] 
		WHERE LIFEPRO_ID__C IS NOT NULL)
	insert into [EDW_Outbound].[salesforce].advisor_contact (
			[AccountID]
			, [BirthDate]
			, [BusinessPhone]
			, [DoNotCall]
			, [Email]
			, [HasOptedOutOfEmail]
			, [HasOptedOutOfFax]
			, [OwnerID]
			, [FirstName]
			, [LastName]
			, [MailingAddress]
			, [MailingCity]
			, [MailingCountry]
			, [MailingState]
			, [MailingStreet]
			, [MailingPostalCode]
			, [MiddleName]
			, [OtherPhone]
			, [OtherAddress]
			, [OtherCity]
			, [OtherCountry]
			, [OtherState]
			, [OtherStreet]
			, [OtherPostalCode]
			, [RecordType]
			, [Salutation]
			, [Suffix]
			, [LifePro_Last_Modified_DateTime__c]
			, [DLRS_2020_Fall_Conference_Premium__c]
			, [DLRS_2021_Fall_Conference_Premium__c]
			, [All_Time_Premium__c]
			, [AML_Training__c]
			, [Total_Production__c]
			, [DLRS_August_Premium_Total__c]
			, [Company_Code__c]
			, [Contact_Record_Type__c]
			, [First_App_Date__c]
			, [Gender__c]
			, [Last_App_Date__c]
			, [Last_Status_Date__c]
			, [Last_Terminated_Date__c]
			, [LifePro_ID__c]
			, [LO_Agent__c]
			, [Name_Format__c]
			, [Preferred_Name__c]
			, [Region__c]
			, [SSN__c]
			, [State__c]
			, [Suitability__c]
			, [Terminated_Amount__c]
			, [YTD_Activity_Amount__c]
			, [YTD_Apps_Received__c]
			, [YTD_Effective_Amount__c]
			, [DLRS_YTD_FIA_Premium__c]
			, [YTD_Issue_Amount__c]
			, [Parent_Name_Id__c]
			, [Name_Id__c]
			, [NPN__c]
			, [CRD__c])
	select distinct
			[AccountID]									= rtrim(isnull(LOOKUP_ACCOUNT.[ID], ''))
			, [BirthDate]								= CASE WHEN SRC.[DATE_OF_BIRTH] > '12/31/4000' OR SRC.[DATE_OF_BIRTH]<'1/1/1700' THEN NULL ELSE SRC.[DATE_OF_BIRTH] END
			, [BusinessPhone]							= isnull(SPHONE.[PhoneNumber], '')
			, [DoNotCall]								= CASE WHEN NALK.BLOCK_IND IN ('A', 'B','D','E','G','I') THEN 1 ELSE 0 END
			, [Email]									= isnull(EMAIL.Email, '')
			, [HasOptedOutOfEmail]						= CASE WHEN NALK.BLOCK_IND IN ('A','B','C','D','F','G','H','L') THEN 1 ELSE 0 END
			, [HasOptedOutOfFax]						= CASE WHEN NALK.BLOCK_IND IN ('A','B','C','E','F','I','J','M') THEN 1 ELSE 0 END
			, [OwnerID]									= NULL --NOT DEFINED
			, [FirstName]								= rtrim(isnull(SRC.INDIVIDUAL_FIRST,''))
			, [LastName]								= CASE WHEN COALESCE(RTRIM(SRC.INDIVIDUAL_LAST), '')='' THEN 'N/A' ELSE RTRIM(SRC.INDIVIDUAL_LAST) END
			, [MailingAddress]							= rtrim(isnull(ADDR.MailingAddress,''))
			, [MailingCity]								= rtrim(isnull(ADDR.[MailingCity],''))
			, [MailingCountry]							= rtrim(isnull(ADDR.[MailingCountry],''))
			, [MailingState]							= rtrim(isnull(ADDR.[MailingState],''))
			, [MailingStreet]							= rtrim(isnull(ADDR.[MailingAddress],''))
			, [MailingPostalCode]						= rtrim(isnull(ADDR.[MailingPostalCode],''))
			, [MiddleName]								= rtrim(isnull(SRC.INDIVIDUAL_MIDDLE,''))
			, [OtherPhone]								= NULL --NOT DEFINED
			, [OtherAddress]							= rtrim(isnull(GEO.[MailingAddress],''))
			, [OtherCity]								= rtrim(isnull(geo.[MailingCity],''))
			, [OtherCountry]							= rtrim(isnull(GEO.[MailingCountry],''))
			, [OtherState]								= rtrim(isnull(GEO.[MailingState],''))
			, [OtherStreet]								= rtrim(isnull(GEO.[MailingAddress],''))
			, [OtherPostalCode]							= rtrim(isnull(GEO.[MailingPostalCode],''))
			, [RecordType]								= CASE WHEN AG.COMPANY_CODE = '01' THEN @AEContactRecordTypeID 
																WHEN AG.Company_Code = '09' THEN @ELContactRecordTypeID
																ELSE @NYContactRecordTypeID
															END 
			, [Salutation]								= CASE WHEN RTRIM(SRC.INDIVIDUAL_PREFIX)<>'' THEN SRC.INDIVIDUAL_PREFIX ELSE SRC.BUSINESS_PREFIX END
			, [Suffix]									= CASE	WHEN RTRIM(SRC.INDIVIDUAL_SUFFIX)<>'' THEN SRC.INDIVIDUAL_SUFFIX ELSE SRC.BUSINESS_SUFFIX END
			, [LifePro_Last_Modified_DateTime__c]		= @NOW
			, [DLRS_2020_Fall_Conference_Premium__c]	= NULL -- NOT DEFINED
			, [DLRS_2021_Fall_Conference_Premium__c]	= NULL -- NOT DEFINED
			, [All_Time_Premium__c]						= NULL -- NOT DEFINED
			, [AML_Training__c]							= AML.AMLDate
			, [Total_Production__c]						= NULL -- NOT DEFINED
			, [DLRS_August_Premium_Total__c]			= NULL -- NOT DEFINED
			, [Company_Code__c]							= rtrim(isnull(AG.Company_Code,''))
			, [Contact_Record_Type__c]					= CASE	WHEN AG.COMPANY_CODE = '01' THEN @AEContactRecordTypeID 
																WHEN AG.Company_Code = '09' THEN @ELContactRecordTypeID
																ELSE @NYContactRecordTypeID
															END 
			, [First_App_Date__c]						= LAST_CONTACT.FIRST_APP_DATE__C
			, [Gender__c]								= CASE WHEN RTRIM(isnull(SRC.SEX_CODE, '')) NOT IN ('M','F') THEN NULL ELSE RTRIM(isnull(SRC.SEX_CODE, '')) END
			, [Last_App_Date__c]						= NULL -- NOT DEFINED
			, [Last_Status_Date__c]						= NULL -- NOT DEFINED
			, [Last_Terminated_Date__c]					= NULL -- NOT DEFINED
			, [LifePro_ID__c]							= TMP.MinNameID
			, [LO_Agent__c]								= NULL -- NOT DEFINED
			, [Name_Format__c]							= rtrim(isnull(SRC.NAME_FORMAT_CODE,''))
			, [Preferred_Name__c]						= rtrim(isnull(PreferredNames.PeferredName,''))
			, [Region__c]								= HIER.REGION_CODE
			, [SSN__c]									= CASE	WHEN SRC.NAME_FORMAT_CODE = 'B' THEN STUFF(RIGHT('000000000' + TRIM(SRC.BUSINESS_TAX_CODE), 9), 3, 0, '-')
																ELSE STUFF(STUFF(RIGHT('000000000' + CONVERT(varchar(11), SRC.SOC_SEC_NUMBER), 9), 4, 0, '-'), 7, 0, '-')
															END
			, [State__c]								= NULL -- NOT DEFINED
			, [Suitability__c]							= rtrim(isnull(AEXP12.SUITABLTY_TRNING,''))
			, [Terminated_Amount__c]					= NULL -- NOT DEFINED
			, [YTD_Activity_Amount__c]					= NULL -- NOT DEFINED
			, [YTD_Apps_Received__c]					= NULL -- NOT DEFINED
			, [YTD_Effective_Amount__c]					= NULL -- NOT DEFINED
			, [DLRS_YTD_FIA_Premium__c]					= NULL -- NOT DEFINED
			, [YTD_Issue_Amount__c]						= NULL -- NOT DEFINED
			, [Parent_Name_Id__c]						= NULL -- NOT DEFINED
			, [Name_Id__c]								= SRC.NAME_ID
			, [NPN__c]									= rtrim(isnull(NPM.NPN_NUM,''))
			, [CRD__c]									= rtrim(isnull(CRD.CRD_NUM,''))
	FROM	[EDW_Outbound].[work].[tmp_AdvisorContactAgents] AS TMP 
			INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS SRC ON
				SRC.[NAME_ID] = TMP.[MinNameID]
			INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AG ON 
				TMP.MinNameID = AG.NAME_ID
			LEFT OUTER JOIN [salesforce].[LOOKUP_ACCOUNT] AS LOOKUP_ACCOUNT ON
				LOOKUP_ACCOUNT.[LIFEPRO_ID__C] = TMP.MinNameID
			LEFT OUTER JOIN [salesforce].[PhoneNumber] AS SPHONE ON
				SPHONE.NameID = TMP.MinNameID
			LEFT OUTER JOIN [EDW_Outbound].[work].[tmp_AdvisorContactAddressId] AS TMP_ADDR ON	
				TMP_ADDR.SOC_SEC_NUMBER = SRC.SOC_SEC_NUMBER
			LEFT OUTER JOIN [EDW_Outbound].[work].[tmp_AdvisorContactEmailID] AS TMP_EMAIL ON	
				TMP_EMAIL.SOC_SEC_NUMBER = SRC.SOC_SEC_NUMBER
			LEFT OUTER JOIN [EDW_Outbound].[work].[tmp_AdvisorContactGeoAddressId] AS TMP_GEO ON	
				TMP_GEO.SOC_SEC_NUMBER = SRC.SOC_SEC_NUMBER
			LEFT OUTER JOIN [EDW_Outbound].[work].[tmp_AdvisorContactAddr] AS EMAIL ON
				EMAIL.[ADDRESS_ID] = TMP_EMAIL.EmailID
			LEFT OUTER JOIN [EDW_Outbound].[work].[tmp_AdvisorContactAddr] AS ADDR ON
				ADDR.[ADDRESS_ID] = TMP_ADDR.AddressID
			LEFT OUTER JOIN [EDW_Outbound].[work].[tmp_AdvisorContactAddr] AS GEO ON	
				GEO.[ADDRESS_ID] = TMP_GEO.AddressID
			LEFT OUTER JOIN [work].[tmp_AdvisorContactAMLDates] AS AML ON	
				AML.SOC_SEC_NUMBER = SRC.SOC_SEC_NUMBER
			LEFT OUTER JOIN LAST_CONTACT ON 
				LAST_CONTACT.LIFEPRO_ID__C = AG.COMPANY_CODE + AG.AGENT_NUMBER
				AND LAST_CONTACT.RN = 1
			LEFT OUTER JOIN [EDW_Outbound].[work].[tmp_AdvisorContactPerferredName] AS PreferredNames ON	
				PreferredNames.SOC_SEC_NUMBER = SRC.SOC_SEC_NUMBER
			LEFT OUTER JOIN [EDW_Outbound].[work].[tmp_AdvisorContactSuitabilityTraining] AS TRAINING ON
				TRAINING.SOC_SEC_NUMBER = SRC.SOC_SEC_NUMBER
			LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AEXP_12_Curr_Vw] as AEXP12 ON
				TRAINING.ROW_ID = AEXP12.Row_ID
			LEFT OUTER JOIN [EDW_Outbound].[work].[tmp_AdvisorContactNPMNumber] AS TMP_NPM ON
				TMP_NPM.SOC_SEC_NUMBER = SRC.SOC_SEC_NUMBER
			LEFT OUTER JOIN [EDW_Outbound].[work].[tmp_AdvisorContactCRDNumber] AS CRD ON
				CRD.SOC_SEC_NUMBER = SRC.SOC_SEC_NUMBER
			LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Curr_Vw] AS NPM ON
				NPM.SYSDATA = TMP_NPM.SYSDATA
			LEFT JOIN [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] AS NALK ON
				SRC.[NAME_ID] = NALK.[NAME_ID] and
				TMP_ADDR.AddressID = NALK.ADDRESS_ID
			LEFT OUTER JOIN [EDW_Outbound].[work].[tmp_AdvisorContactRegion] as TMP_RGN ON
				SRC.SOC_SEC_NUMBER = TMP_RGN.Soc_Sec_Number
			LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] AS HIER ON
				TMP_RGN.SysData = HIER.SysData
		WHERE NOT EXISTS(SELECT 1 FROM [salesforce].[Advisor_Contact] AS DEST WHERE TMP.MinNameID = DEST.Name_Id__c)
		and ag.COMPANY_CODE <> '02';
		


PRINT 'DONE: INSERT NEW VALUES IN THE SYNC TABLE - ' + CAST(@@ROWCOUNT AS NVARCHAR);
	END;
/*END: INSERT NEW RECORDS*/
/*START: Check for invalid emails*/
PRINT 'CHECK INVALID EMAILS'
IF (1=1)
	BEGIN;
	 ;WITH INVALID_EMAILS AS
		(SELECT [Email] 
		FROM	[EDW_Outbound].[salesforce].advisor_contact
		WHERE	[Email] = '' 
			OR [Email] like '% %' 
            OR [Email] like ('%["(),:;<>\]%') 
            OR substring([Email] ,charindex('@',[Email]),len([Email])) like ('%[!#$%&*+/=?^`_{|]%') 
            OR (left([Email],1) like ('[-_.+]') or right([Email],1) like ('[-_.+]'))                                                                               
			OR ([Email] like '%[%' or [Email] like '%]%') 
            OR [Email] LIKE '%@%@%' 
            OR [Email] NOT LIKE '_%@_%._%' 
			OR [Email] LIKE '%..%'
			OR [EMAIL] LIKE '%-.%'
			OR [EMAIL] LIKE '%.@%' 
			OR [EMAIL] LIKE '%@.%' 
			OR [EMAIL] LIKE '%@%.-%' 
			OR [EMAIL] LIKE '%@%-.%' 
			OR [EMAIL] LIKE '%@-%' 
			OR CHARINDEX(' ',LTRIM(RTRIM([EMAIL]))) > 0)
	UPDATE INVALID_EMAILS SET [Email] = NULL;
	PRINT 'DONE: CHECK INVALID EMAILS - ' + CAST (@@ROWCOUNT AS NVARCHAR);
	END;
/*START: UPDATE SETTINGS*/
PRINT 'UPDATE SETTINGS'

		UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_ADVISOR_CONTACT_NAME AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_ADVISOR_CONTACT_NAME AND Setting_Module = @SETTING_MODULE;
		UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_ADVISOR_CONTACT_ADDR AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_ADVISOR_CONTACT_ADDR AND Setting_Module = @SETTING_MODULE;
		UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_ADVISOR_CONTACT_HIER AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_ADVISOR_CONTACT_HIER AND Setting_Module = @SETTING_MODULE;
		UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_ADVISOR_CONTACT_NALK AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_ADVISOR_ACCOUNT_NALK AND Setting_Module = @SETTING_MODULE;
		UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_ADVISOR_CONTACT_AGENT AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_ADVISOR_CONTACT_AGENT AND Setting_Module = @SETTING_MODULE;
		UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_ADVISOR_CONTACT_NADRNA AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_ADVISOR_CONTACT_NADRNA AND Setting_Module = @SETTING_MODULE;
		UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_ADVISOR_CONTACT_AEXP_12 AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_ADVISOR_CONTACT_AEXP_12 AND Setting_Module = @SETTING_MODULE;
		UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_ADVISOR_CONTACT_AEXP_04 AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_ADVISOR_CONTACT_AEXP_04 AND Setting_Module = @SETTING_MODULE;
		UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_ADVISOR_CONTACT_CONTACT AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_ADVISOR_CONTACT_CONTACT AND Setting_Module = @SETTING_MODULE;

PRINT 'DONE: UPDATE SETTINGS'
/*END: UPDATE SETTINGS*/

 
END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();


RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;





END

GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Account_Address1]    Script Date: 5/17/2022 2:04:41 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE   PROC [salesforce].[usp_Upsert_Account_Address1]
AS
BEGIN;
SET NOCOUNT ON;
TRUNCATE TABLE [salesforce].[Account_Address];
END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Agent_Hierarchy]    Script Date: 5/17/2022 2:04:42 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE  [salesforce].[usp_Upsert_Agent_Hierarchy]

AS
BEGIN;
-- =============================================
/*							WORK IN PROGRESS					*/
 -- Author: 			Anastasia Vogelaar
 -- CreationDate: 		2021-07-08
 -- Version: 			0.1.0
 -- Description: 		This process generates a surrogate key for all Agent Hierarchy values 
 --						and stores it in a permanent table salesforce.AGENT_HIER_SF_MAPPING
 -- Change Log: 		


 -- Full reload:
--DECLARE @SETTING_NAME_HIER					NVARCHAR(50) = 'SYNC_AGENT_HIERARCHY_HIER_CURR_VW';
--DECLARE @SETTING_NAME_AGNT					NVARCHAR(50) = 'SYNC_AGENT_HIERARCHY_AGNT_CURR_VW';
--DECLARE @SETTING_MODULE						NVARCHAR(50) = 'SF_SYNC';
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings]  AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_HIER AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings]  AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_AGNT AND SETTING_MODULE = @SETTING_MODULE;

--INSERT [EDW_Audit].[dbo].[Delta_Settings] (Setting_Name, Setting_Module, Setting_Value) VALUES (@SETTING_NAME_AGNT, @SETTING_MODULE,0);
-- =============================================

SET NOCOUNT ON;
DECLARE @SETTING_NAME_HIER			NVARCHAR(50)	= 'SYNC_AGENT_HIERARCHY_HIER_CURR_VW';
DECLARE @SETTING_NAME_AGNT			NVARCHAR(50)	= 'SYNC_AGENT_HIERARCHY_AGNT_CURR_VW';
DECLARE @SETTING_MODULE				NVARCHAR(50)	= 'SF_SYNC';
DECLARE @START_VAL					INT;
DECLARE @END_VAL					INT;
DECLARE	@PROCESS_DT					DATETIME2		= CURRENT_TIMESTAMP;


BEGIN TRY
/*START: Retrieve the first and the last row in scope*/
SELECT	@START_VAL	= SETTING_VALUE FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_HIER AND Setting_Module = @SETTING_MODULE;
SELECT	@END_VAL	= MAX(ROW_ID) FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw];
/*END: Retrieve the first and the last row in scope*/

IF @START_VAL < @END_VAL
	BEGIN;
	/*START: Create mapping table if it doesn't exist*/
	IF (1=1)
		BEGIN;
		IF  NOT EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'[salesforce].[AGEN_HIER_SF_MAPPING]') )
			BEGIN;
			CREATE TABLE salesforce.AGENT_HIER_SF_MAPPING
				(ID INT NOT NULL IDENTITY PRIMARY KEY CLUSTERED
				, [AGENT_NUMBER]			VARCHAR(12) NOT NULL
				, [COMPANY_CODE]			VARCHAR(2) NULL
				, [AGENT_LEVEL]				VARCHAR(2) NULL
				, [MARKETING_CODE]			VARCHAR(10) NULL
				, [START_DATE]				DATETIME2 NULL
				, [STOP_DATE]				DATETIME2 NULL
				, [HIERARCHY_AGENT]			VARCHAR(12) NULL
				, [HIERARCHY_AGENT_LEVEL]	VARCHAR(2) NULL
				, [HIERARCHY_MARKET_CODE]	VARCHAR(10) NULL
				, [HIER_AGENT_ID]			NUMERIC NULL
				, [CREATED_DT]				DATETIME2 NULL
				, [MODIFIED_DT]				DATETIME2 NULL
				);
			CREATE UNIQUE NONCLUSTERED INDEX IDX_UQ_BUS_KEY ON salesforce.AGENT_HIER_SF_MAPPING ([AGENT_NUMBER],[COMPANY_CODE] , [AGENT_LEVEL], [MARKETING_CODE], [STOP_DATE] DESC ) INCLUDE ([SF_ID]) WITH (FILLFACTOR=80);
			CREATE NONCLUSTERED INDEX IDX_HIER_AGENT ON salesforce.AGENT_HIER_SF_MAPPING ([STOP_DATE], [HIERARCHY_AGENT], [HIERARCHY_AGENT_LEVEL], [HIERARCHY_MARKET_CODE]) INCLUDE ([HIER_AGENT_ID]) WITH (FILLFACTOR=80);
			CREATE NONCLUSTERED INDEX IDX_HIER_AGENT_ID ON salesforce.AGENT_HIER_SF_MAPPING (HIER_AGENT_ID) WITH (FILLFACTOR=80);
			CREATE NONCLUSTERED INDEX IDX_DT ON salesforce.AGENT_HIER_SF_MAPPING (MODIFIED_DT, CREATED_DT) WITH (FILLFACTOR=80);
			END;
		
		END;
	/*END: Create mapping table if it doesn't exist*/
	/*START: Retrieve all Agent Hierarchy Records that have been modified or created*/
	IF (1=1)
		BEGIN;
		--Update keys
		--The only modifications that could happen is STOP_DATE changing from NULL - everything else will be a brand new record
		UPDATE	DEST
		SET	 [STOP_DATE]				= SRC.[STOP_DATE]
			, [MODIFIED_DT]				= @PROCESS_DT
		FROM [EDW_Outbound].[salesforce].[AGENT_HIER_SF_MAPPING] AS DEST
			INNER JOIN [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] AS SRC ON
				DEST.AGENT_NUMBER		= SRC.AGENT_NUMBER
				AND DEST.COMPANY_CODE	= SRC.COMPANY_CODE
				AND DEST.AGENT_LEVEL	= SRC.AGENT_LEVEL
				AND DEST.MARKETING_CODE = SRC.MARKETING_CODE
				AND DEST.[START_DATE]	= SRC.[START_DATE]
				AND COALESCE(DEST.[STOP_DATE],'12/31/9999') ='12/31/9999'
				AND COALESCE(SRC.[STOP_DATE] ,'12/31/9999') <> '12/31/9999'
		WHERE SRC.Row_ID	> @START_VAL
			AND SRC.Row_ID	<= @END_VAL;

		--Insert new keys
		INSERT	[EDW_Outbound].[salesforce].[AGENT_HIER_SF_MAPPING]
			([AGENT_NUMBER]
			, [COMPANY_CODE]
			, [AGENT_LEVEL]
			, [MARKETING_CODE]
			, [START_DATE]
			, [STOP_DATE]
			, [HIERARCHY_AGENT]
			, [HIERARCHY_AGENT_LEVEL]
			, [HIERARCHY_MARKET_CODE]
			, [CREATED_DT])
		SELECT 	SRC.AGENT_NUMBER
			, SRC.[COMPANY_CODE]
			, SRC.[AGENT_LEVEL]
			, SRC.[MARKETING_CODE]
			, SRC.[START_DATE]
			, SRC.[STOP_DATE]
			, SRC.[HIERARCHY_AGENT]
			, SRC.[HIERARCHY_AGENT_LEVEL]
			, SRC.[HIERARCHY_MARKET_CODE]
			, @PROCESS_DT
		FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] AS SRC
		WHERE SRC.Row_ID	>	@START_VAL
			AND SRC.Row_ID	<=	@END_VAL
			AND NOT EXISTS (SELECT 1 FROM salesforce.AGEN_HIER_SF_MAPPING AS DEST 
					WHERE DEST.AGENT_NUMBER							= SRC.AGENT_NUMBER
						AND DEST.COMPANY_CODE						= SRC.COMPANY_CODE
						AND DEST.AGENT_LEVEL						= SRC.AGENT_LEVEL
						AND DEST.MARKETING_CODE						= SRC.MARKETING_CODE
						AND COALESCE(DEST.STOP_DATE,'12/31/9999')	= COALESCE(SRC.STOP_DATE,'12/31/9999'))
		GROUP BY SRC.AGENT_NUMBER
			, SRC.[COMPANY_CODE]
			, SRC.[AGENT_LEVEL]
			, SRC.[MARKETING_CODE]
			, SRC.[START_DATE]
			, SRC.[STOP_DATE]
			, SRC.[HIERARCHY_AGENT]
			, SRC.[HIERARCHY_AGENT_LEVEL]
			, SRC.[HIERARCHY_MARKET_CODE];
		
		--Refresh Identifiers for hierarchy agent
		UPDATE	DEST
		SET		[HIER_AGENT_ID] = SRC.[ID]
		FROM	salesforce.AGENT_HIER_SF_MAPPING AS DEST 
				INNER JOIN salesforce.AGEN_HIER_SF_MAPPING AS SRC ON	
					SRC.AGENT_NUMBER		= DEST.HIERARCHY_AGENT
					AND SRC.COMPANY_CODE	= DEST.COMPANY_CODE
					AND SRC.AGENT_LEVEL		= DEST.HIERARCHY_AGENT_LEVEL
					AND SRC.MARKETING_CODE	= DEST.HIERARCHY_MARKET_CODE
					AND		(SRC.[START_DATE]						<= DEST.[START_DATE] 
						AND COALESCE(SRC.[STOP_DATE],'12/31/9999')	>= COALESCE(DEST.[STOP_DATE],'12/31/9999'))
		WHERE	DEST.HIER_AGENT_ID IS NULL;

		--Update Settings
		UPDATE dest SET SETTING_VALUE = @END_VAL FROM [EDW_Audit].[dbo].[Delta_Settings] AS dest WHERE SETTING_NAME= @SETTING_NAME_HIER AND SETTING_MODULE = @SETTING_MODULE;
		END;
	/*END: Retrieve all Agent Hierarchy Records that have been modified or created*/
	/*START: Retrieve all Agent Records that have been modified or created*/
	IF (1=1)
		BEGIN;
		SELECT @START_VAL = SETTING_VALUE FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_AGNT AND Setting_Module = @SETTING_MODULE;
		SELECT @END_VAL	= MAX(ROW_ID) FROM [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw];
		END;
	/*END: Retrieve all Agent Records that have been modified or created*/
	/*START: Update staging table with new records */
	IF (1=1)
		BEGIN;
		--update
		UPDATE	DEST
				SET	[Stop_Date__c]	= SRC.[STOP_DATE]
					, [Status__c]	= AGNT.[STATUS_CODE]
					, [Modified_dt]	= @PROCESS_DT
		FROM	salesforce.Agent_Hierarchy AS DEST
				INNER JOIN [EDW_Outbound].[salesforce].[AGENT_HIER_SF_MAPPING]  AS SRC ON	
					SRC.ID = DEST.[External_ID]
				LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGNT ON	
					AGNT.[AGENT_NUMBER] = SRC.[AGENT_NUMBER];
		--insert
		;WITH CHANGED_IDS (ID) 
			AS
			(SELECT	ID
			FROM	[EDW_Outbound].[salesforce].[AGENT_HIER_SF_MAPPING] AS SRC
			WHERE	COALESCE(SRC.MODIFIED_DT, SRC.CREATED_DT) = @PROCESS_DT
				OR EXISTS(SELECT 1 FROM [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGNT 
					WHERE AGNT.Row_ID	>@START_VAL 
						AND AGNT.Row_ID <= @END_VAL
						AND AGNT.AGENT_NUMBER = SRC.AGENT_NUMBER)
			)
		INSERT	[salesforce].[Agent_Hierarchy]
			([Agent_Number__c]
			, [Upline_Level__c]
			, [Agent_Level__c]
			, [Status__c]
			, [Signing_Agent__c]
			, [External_ID]
			, [Upline_External_Id__c]
			, [Start_Date__c]
			, [Stop_Date__c]
			, [Region__c]
		--	, [Upline_Account__c] --How are we to link lookup account to agent?
			, [Upline_Agent__c]
			, [Created_dt]
			) 
		SELECT	
			SRC.[AGENT_NUMBER]
			, SRC.[HIERARCHY_AGENT_LEVEL]
			, SRC.[AGENT_LEVEL]
			, AGNT.[STATUS_CODE]
			, PROD.[ID]
			, SRC.[ID]
			, SRC.[HIER_AGENT_ID] 
			, SRC.[START_DATE]
			, SRC.[STOP_DATE]
			, CURRVW.[REGION_CODE]
			-- ACNT.[ID]
			, AGNTH.[ID]
			, @PROCESS_DT
		FROM [salesforce].[AGENT_HIER_SF_MAPPING] AS SRC
			INNER JOIN [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] AS CURRVW ON	
				CURRVW.AGENT_NUMBER							= SRC.AGENT_NUMBER
				AND CURRVW.COMPANY_CODE						= SRC.COMPANY_CODE
				AND CURRVW.AGENT_LEVEL						= SRC.AGENT_LEVEL
				AND CURRVW.MARKETING_CODE					= SRC.MARKETING_CODE
				AND COALESCE(CURRVW.STOP_DATE,'12/31/9999')	= COALESCE(SRC.STOP_DATE,'12/31/9999')
			LEFT OUTER JOIN [salesforce].[LOOKUP_PRODUCER] AS PROD ON	
				PROD.[Name_Id__c] = CURRVW.[SA_AGENT]
			--LEFT OUTER JOIN [salesforce].[LOOKUP_ACCOUNT] AS ACNT ON 
			--	ACNT.[LIFEPRO_ID__C] = SRC.[???]
			LEFT OUTER JOIN [salesforce].[LOOKUP_AGENT_HIERARCHY__C] AS AGNTH ON
				AGNTH.[External_Id__c] = SRC.[HIER_AGENT_ID]
			LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGNT ON	
				AGNT.[AGENT_NUMBER] = SRC.[AGENT_NUMBER]
		WHERE EXISTS(SELECT 1 FROM CHANGED_IDS WHERE CHANGED_IDS.ID = SRC.ID);
		--update settings
		UPDATE SETTINGS SET SETTING_VALUE = @END_VAL FROM [EDW_Audit].[dbo].[Delta_Settings]  AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_AGNT AND SETTING_MODULE = @SETTING_MODULE;
		END;
	/*END: Update staging table with new records */
	

	END;

   
END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();


RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Product]    Script Date: 5/17/2022 2:04:42 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE    PROCEDURE  [salesforce].[usp_Upsert_Product]

AS
BEGIN;
-- =============================================

 -- Author: 			Anastasia Vogelaar
 -- CreationDate: 		2021-07-12
 -- Version: 			0.1.0
 -- Description: 		Delta loader for product; [PRODUCT_ID] is the business key
 -- Change Log: 		


 -- Full reload:
--DECLARE @SETTING_NAME_PRDF			NVARCHAR(50) = 'SYNC_PRODUCT_PRDF_CURR_VW';
--DECLARE @SETTING_MODULE				NVARCHAR(50) = 'SF_SYNC';
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_PRDF AND SETTING_MODULE = @SETTING_MODULE;
--INSERT [EDW_Audit].[dbo].[Delta_Settings] (Setting_Name, Setting_Module, Setting_Value) VALUES (@SETTING_NAME_PRDF, @SETTING_MODULE, 0)
-- =============================================

SET NOCOUNT ON;
DECLARE @SETTING_NAME_PRDF			NVARCHAR(50) = 'SYNC_PRODUCT_PRDF_CURR_VW';
DECLARE @SETTING_MODULE				NVARCHAR(50) = 'SF_SYNC';
DECLARE @START_VAL					INT;
DECLARE @END_VAL					INT;
DECLARE @RecordTypeID				varchar(20);


BEGIN TRY
/* START: Retrieve delta boundry ids*/
IF (1=1)
	BEGIN;
	SELECT @START_VAL	= CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE SETTING_NAME = @SETTING_NAME_PRDF AND SETTING_MODULE = @SETTING_MODULE;
	SELECT @END_VAL		= MAX(ROW_ID) FROM [EDW_DataLake].[lifepro_V].[PRDF_Curr_Vw];
	END;
/* END: Retrieve delta boundry ids*/

/* START: Refresh staging table */
IF @START_VAL < @END_VAL
	BEGIN;
	--Update existing values
	UPDATE	DEST
	SET		[IsActive]			= IIF(SRC.[END_DATE] < CURRENT_TIMESTAMP, 0,1)	--If EndDate < Today, IsActive = False
			, [ProductCode]		= SRC.[PRODUCT_ID]
			, [Name]			= SRC.[MARKET_NAME]
			, [Product_Type__c]	= SRC.[PRODUCT_TYPE]
			, [Is_Myga__c]		= CASE SRC.[MYGA_FLAG] WHEN 'N' THEN 0 
									WHEN 'Y' THEN 1
									ELSE NULL
									END
			, [Modified_dt]		= CURRENT_TIMESTAMP		
	FROM	[salesforce].[Product] AS DEST
			INNER JOIN [EDW_DataLake].[lifepro_v].[PRDF_Curr_Vw] AS SRC ON	
				SRC.[PRODUCT_ID] = DEST.[External_Id__c]
	WHERE	SRC.Row_ID > @START_VAL 
			AND SRC.Row_ID <=@END_VAL;

	--Insert new values
	INSERT [salesforce].[Product]
		([IsActive]
		, [ProductCode]
		, [Name]
		, [Product_Type__c]
		, [External_Id__c]
		, [Is_Myga__c]
		, [Created_dt]
		)
	SELECT IIF(SRC.[END_DATE] < CURRENT_TIMESTAMP, 0,1)	AS ISACTIVE					--If EndDate < Today, IsActive = False
		, SRC.[PRODUCT_ID]
		, SRC.[MARKET_NAME]
		, SRC.[PRODUCT_TYPE]
		, SRC.[PRODUCT_ID]
		, CASE SRC.[MYGA_FLAG] WHEN 'Y' THEN 1 
			WHEN 'N' THEN 0 
			ELSE NULL
			END											AS IS_MYGA__c
		, CURRENT_TIMESTAMP
	FROM 	[EDW_DataLake].[lifepro_v].[PRDF_Curr_Vw] AS SRC 
	WHERE	NOT EXISTS (SELECT 1 FROM [salesforce].[Product] AS DEST WHERE DEST.External_Id__c = SRC.PRODUCT_ID)
		AND SRC.Row_ID > @START_VAL
		AND SRC.Row_ID <= @END_VAL;
	
	--Update delta settings
	UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_PRDF AND Setting_Module = @SETTING_MODULE;
	END;
/* END: Refresh staging table */
 
END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();


RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Allocation]    Script Date: 5/17/2022 2:04:42 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE       PROCEDURE [salesforce].[usp_Upsert_Allocation]
 	
AS
BEGIN;
--dummy proc

SET NOCOUNT ON;
SELECT 1;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Producer_Policy_Assignment]    Script Date: 5/17/2022 2:04:42 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE   PROCEDURE  [salesforce].[usp_Truncate_Producer_Policy_Assignment]
 	
AS
BEGIN;
-- =============================================

 -- Author: 			Jason Rippel
 -- CreationDate: 		2021-09-22
 -- Version: 			0.1.0
 -- Description: 		Truncate Producer_Policy_Assignment staging table - 
 --						this stored proc is to be called upon successful 
 --						sync of the staging table with Salesforce dest list
 -- Change Log: 		
 -- =============================================

SET NOCOUNT ON;

BEGIN TRY

TRUNCATE TABLE [EDW_Outbound].[salesforce].[Producer_Policy_Assignment];

END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();


RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Producer_Upline]    Script Date: 5/17/2022 2:04:42 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [salesforce].[usp_Upsert_Producer_Upline]

AS
BEGIN;
-- =============================================

 -- Author: 			Steve Tangeman
 -- Creation Date: 		5/9/2022
 -- Version: 			0.1.1
 -- Description: 		Inserts into and updates the salesforce.Producer_Upline staging table


 -- Full reload:
--DECLARE @SETTING_NAME_HIER				NVARCHAR(50) = 'SYNC_Producer_Upline_HIER_CURR_VW';
--DECLARE @SETTING_NAME_AGNT				NVARCHAR(50) = 'SYNC_Producer_Upline_AGNT_CURR_VW';
--DECLARE @SETTING_NAME_LOOKUP_PRODUCER		NVARCHAR(50) = 'SYNC_Producer_Upline_LOOKUP_PRODUCER';
--DECLARE @SETTING_MODULE					NVARCHAR(50) = 'SF_SYNC';
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_HIER AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_AGNT AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '1/1/1753' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_LOOKUP_PRODUCER AND SETTING_MODULE = @SETTING_MODULE;
-- =============================================

SET NOCOUNT ON;
DECLARE @SETTING_NAME_HIER				NVARCHAR(50) = 'SYNC_Producer_Upline_HIER_CURR_VW';
DECLARE @SETTING_NAME_AGNT				NVARCHAR(50) = 'SYNC_Producer_Upline_AGNT_CURR_VW';
DECLARE @SETTING_NAME_LOOKUP_PRODUCER	NVARCHAR(50) = 'SYNC_Producer_Upline_LOOKUP_PRODUCER';
DECLARE @SETTING_MODULE					NVARCHAR(50) = 'SF_SYNC';
DECLARE @START_VAL_HIER					INT;
DECLARE @START_VAL_AGNT					INT;
DECLARE @START_VAL_LOOKUP_PRODUCER		DATETIME2;
DECLARE @END_VAL_HIER					INT;
DECLARE @END_VAL_AGNT					INT;
DECLARE @END_VAL_LOOKUP_PRODUCER		DATETIME2;
DECLARE @ROWS							INT;		--Used for logging row counts
DECLARE @LOGID_START					INT;		--Used for the first log id
DECLARE	@LOGID							INT;		--Used for intermediate log ids

BEGIN TRY
	--Logging
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'ProducerUpline:Start/End Indicator');
	SELECT @LOGID_START = @@IDENTITY;

	--Retrieve deltas
	SELECT @START_VAL_HIER				= CAST([Setting_Value] AS BIGINT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_NAME_HIER;
	SELECT @START_VAL_AGNT				= CAST([Setting_Value] AS BIGINT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_NAME_AGNT;
	SELECT @START_VAL_LOOKUP_PRODUCER	= CAST([Setting_Value] AS datetime2) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_NAME_LOOKUP_PRODUCER;
	SELECT @END_VAL_HIER				= MAX([ROW_ID]) FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw];
	SELECT @END_VAL_AGNT				= MAX([ROW_ID]) FROM [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw];
	SELECT @END_VAL_LOOKUP_PRODUCER		= MAX(COALESCE([LASTMODIFIEDDATE],[CREATEDDATE])) FROM [salesforce].[LOOKUP_PRODUCER];	

	/* START: Create temporary tables.*/
	IF (1=1)
		BEGIN;

		IF OBJECT_ID (N'work.tmp_Producer_Upline_Agents', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [work].[tmp_Producer_Upline_Agents];
			END;
		ELSE
			BEGIN;
			CREATE TABLE [work].[tmp_Producer_Upline_Agents]
				([CompanyCode_AgentNumber] VARCHAR(15) NOT NULL
				, CONSTRAINT PK_tmp_producer_upline_agents PRIMARY KEY CLUSTERED ([CompanyCode_AgentNumber])
				);
			END;

		IF OBJECT_ID (N'work.tmp_Producer_Upline_Hierarchy', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [work].[tmp_Producer_Upline_Hierarchy];
			END;
		ELSE
			BEGIN;
			CREATE TABLE [work].[tmp_Producer_Upline_Hierarchy]
				([CompanyCode_AgentNumber] VARCHAR(15) NOT NULL,
				 [CompanyCode_HierarchyAgentNumber] VARCHAR(15) NOT NULL,
				 CONSTRAINT PK_tmp_producer_upline_hierarchy PRIMARY KEY CLUSTERED ([CompanyCode_AgentNumber])
				);
			END;

		END;
	/* END: Create temporary tables.*/

	/* START: Populate temporary tables.*/
	IF (1=1)
		BEGIN;
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'ProducerUpline:Get new and changed records');
		SELECT @LOGID = @@IDENTITY;

		INSERT	[work].[tmp_Producer_Upline_Agents] ([CompanyCode_AgentNumber])
		SELECT	(COALESCE(AGNT.[COMPANY_CODE],'') + '-') + COALESCE(AGNT.[AGENT_NUMBER],'')
		FROM	[EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGNT
		WHERE	AGNT.Row_ID > @START_VAL_AGNT
				AND AGNT.Row_ID <= @END_VAL_AGNT
		GROUP BY AGNT.[COMPANY_CODE], AGNT.[AGENT_NUMBER]

		INSERT	[work].[tmp_Producer_Upline_Agents] ([CompanyCode_AgentNumber])
		SELECT	(COALESCE(HIER.[COMPANY_CODE],'') + '-') + COALESCE(HIER.[AGENT_NUMBER],'')
		FROM	[EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] AS HIER
		WHERE	HIER.Row_ID > @START_VAL_HIER
				AND HIER.Row_ID <= @END_VAL_HIER
				AND NOT EXISTS(SELECT 1 FROM [work].[tmp_Producer_Upline_Agents] AS DEST WHERE DEST.[CompanyCode_AgentNumber] = (COALESCE(HIER.[COMPANY_CODE],'') + '-') + COALESCE(HIER.[AGENT_NUMBER],''))
		GROUP BY HIER.[COMPANY_CODE], HIER.[AGENT_NUMBER]

		INSERT	[work].[tmp_Producer_Upline_Agents] ([CompanyCode_AgentNumber])
		SELECT	LP.[EXTERNAL_ID__C]
		FROM	[EDW_Outbound].[salesforce].[LOOKUP_PRODUCER] AS LP
		WHERE	COALESCE(LP.[LASTMODIFIEDDATE],LP.[CREATEDDATE]) > @START_VAL_LOOKUP_PRODUCER
				AND COALESCE(LP.[LASTMODIFIEDDATE],LP.[CREATEDDATE]) <= @END_VAL_LOOKUP_PRODUCER
				AND NOT EXISTS(SELECT 1 FROM [work].[tmp_Producer_Upline_Agents] AS DEST WHERE DEST.[CompanyCode_AgentNumber] = LP.[EXTERNAL_ID__C])
				AND LP.[EXTERNAL_ID__C] IS NOT NULL
		GROUP BY LP.[EXTERNAL_ID__C]

		;WITH AgentUpline AS
		(
			SELECT ROW_NUMBER() OVER (PARTITION BY [COMPANY_CODE], [AGENT_NUMBER] ORDER BY COALESCE([STOP_DATE],'12/31/9999') DESC) AS RN,
				[COMPANY_CODE],
				[AGENT_NUMBER],
				[HIERARCHY_AGENT],
				[STOP_DATE]
			FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw]
			JOIN [work].[tmp_Producer_Upline_Agents]
				ON (COALESCE([COMPANY_CODE],'') + '-') + COALESCE([AGENT_NUMBER],'') = CompanyCode_AgentNumber
		)
		INSERT [work].[tmp_Producer_Upline_Hierarchy] ([CompanyCode_AgentNumber], [CompanyCode_HierarchyAgentNumber])
		SELECT (COALESCE([COMPANY_CODE],'') + '-') + RTRIM(COALESCE([AGENT_NUMBER],'')),
			(COALESCE([COMPANY_CODE],'') + '-') + RTRIM(COALESCE([HIERARCHY_AGENT],''))
		FROM AgentUpline
		WHERE RN = 1

		--Get Row Count 
		SELECT @Rows = SUM(st.row_count) FROM    sys.dm_db_partition_stats st WHERE  object_name(object_id) = 'tmp_Producer_Upline_Agents' AND OBJECT_SCHEMA_NAME(OBJECT_ID) = 'work' AND (index_id < 2);
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
		END;
	/* END: Populate temporary tables.*/

	/*START: Update staging table*/
	IF (1=1)
		BEGIN;
		--Logging
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'ProducerUpline:Update stg tbl');
		SELECT @LOGID = @@IDENTITY;

		UPDATE	DEST
		SET		[Producer_SalesforceID] = Producer.ID,
				[Upline__c] = ProducerUpline.ID,
				[Modified_dt] = CURRENT_TIMESTAMP
		FROM	[salesforce].[Producer_Upline] AS DEST 
		INNER JOIN [work].[tmp_Producer_Upline_Hierarchy] AS SRC
			ON DEST.External_Id__c = SRC.CompanyCode_AgentNumber
		INNER JOIN [EDW_Outbound].[salesforce].[LOOKUP_PRODUCER] Producer
			ON SRC.CompanyCode_AgentNumber = Producer.EXTERNAL_ID__C
		LEFT JOIN [EDW_Outbound].[salesforce].[LOOKUP_PRODUCER] ProducerUpline
			ON SRC.CompanyCode_HierarchyAgentNumber = ProducerUpline.EXTERNAL_ID__C

		SELECT @ROWS = @@ROWCOUNT;
		--Logging
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
		END;
	/*END: Update staging table*/

	/*START: Insert new records into staging table*/
	IF (1=1)
		BEGIN;
		--Logging
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'ProducerUpline:Insert stg tbl');
		SELECT @LOGID = @@IDENTITY;

		INSERT [salesforce].[Producer_Upline]
			([External_Id__c], [Producer_SalesforceID], [Upline__c], [Created_Dt])
		SELECT SRC.CompanyCode_AgentNumber,
			Producer.ID,
			ProducerUpline.ID,
			CURRENT_TIMESTAMP
		FROM [work].[tmp_Producer_Upline_Hierarchy] AS SRC
		INNER JOIN [EDW_Outbound].[salesforce].[LOOKUP_PRODUCER] Producer
			ON SRC.CompanyCode_AgentNumber = Producer.EXTERNAL_ID__C
		LEFT JOIN [EDW_Outbound].[salesforce].[LOOKUP_PRODUCER] ProducerUpline
			ON SRC.CompanyCode_HierarchyAgentNumber = ProducerUpline.EXTERNAL_ID__C
		WHERE NOT EXISTS (SELECT 1 FROM [salesforce].[Producer_Upline] AS DEST 
						  WHERE DEST.[External_Id__c] = SRC.[CompanyCode_AgentNumber])

		SELECT @ROWS = @@ROWCOUNT;
		--Logging
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
		END;
	/*END: Insert new records into staging table*/

	--Update Settings
	UPDATE SETTINGS SET SETTING_VALUE = @END_VAL_HIER FROM [EDW_Audit].[dbo].[Delta_Settings]  AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_HIER AND SETTING_MODULE = @SETTING_MODULE;
	UPDATE SETTINGS SET SETTING_VALUE = @END_VAL_AGNT FROM [EDW_Audit].[dbo].[Delta_Settings]  AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_AGNT AND SETTING_MODULE = @SETTING_MODULE;
	UPDATE SETTINGS SET SETTING_VALUE = @END_VAL_LOOKUP_PRODUCER FROM [EDW_Audit].[dbo].[Delta_Settings]  AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_LOOKUP_PRODUCER AND SETTING_MODULE = @SETTING_MODULE;

	--Logging
	UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;   

END TRY
BEGIN CATCH

	DECLARE @ERROR_MSG          NVARCHAR(2000);
	DECLARE @ERROR_SEVERITY     INT;
	DECLARE @ERROR_STATE        INT;
 
	SET @ERROR_MSG              = ERROR_MESSAGE();
	SET @ERROR_SEVERITY         = ERROR_SEVERITY();
	SET @ERROR_STATE            = ERROR_STATE();
	--Logging
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'ProducerUpline:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
	UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;

	RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Producer_Policy_Assignment]    Script Date: 5/17/2022 2:04:43 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE           PROCEDURE [salesforce].[usp_Upsert_Producer_Policy_Assignment]
 	
AS
BEGIN;
-- =============================================

 -- Author: 			Jason Rippel
 -- CreationDate: 		2021-08-30
 -- Version: 			0.1.0
 -- Description: 		Refresh Producer Policy Assignment table for synchronization with SalesForce 
 -- Change Log: 		

 -- Author: 			Jason Rippel
 -- CreationDate: 		2021-11-02
 -- Version: 			0.1.0
 -- Description: 		Updated COMC_S delta lookup to not include if policy already exists to avoid duplicates
 --                     Also updated to a left join for the [EDW_Landing].[salesforce].[SF_AGENTAUTHORIZATIONS] table
 -- Change Log: 
 -- Author:				Anastasia Vogelaar
 -- Version:			0.1.2
 -- Description:		Deduplication - removed clustered index on the identity column

 -- Author:				Anastasia Vogelaar
 -- Version:			0.1.3
 -- Description:		Deduplication - Changed logic on retrieving data from the authorizations list, changed bus key table

 -- Author: 			Jason Rippel
 -- CreationDate: 		2021-11-10
 -- Version: 			0.1.4
 -- Description: 		Updated to Include Withdrawal in the picklist values for Authorized_To__c field. 

 -- Author: 			Anastasia Vogelaar
 -- CreationDate: 		2021-11-11
 -- Version: 			0.1.5
 -- Description: 		Addressed Producer Policy requirement sdefined in the mapping doc:
 --						Unique Key - Name_ID + Policy_Number + Relate_Code
 --						When records are deduplicated, the first record out of agent authorizations should be picked and the last record for Rela
 --						Set Authorization Date and Authorized To to NULL if Rela_Code Is 'WA'
 --						Agent number column is wrong in Rela
 --						Do not include any agents where Benefit_Seq_Num is not null or 0
 --						Added auditing logic
 
 -- Author: 			Anastasia Vogelaar
 -- CreationDate: 		2021-11-17
 -- Version: 			0.1.6
 -- Description: 		Make policy a required field

 -- Author: 			Steve Tangeman
 -- CreationDate: 		2021-12-10
 -- Version: 			0.1.7
 -- Description: 		Updated to handle nulls for the PWD field in the SF_AGENTAUTHORIZATIONS table

 -- Author: 			Jason Rippel
 -- CreationDate: 		2022-02-08
 -- Version: 			0.1.8
 -- Description: 		Updated to Remove AUTHORIZATIONDATE AND AUTHORIZED_TO For Agent Authorizations

 -- Author: 			Steve Tangeman
 -- CreationDate: 		2022-02-21
 -- Version: 			0.1.9
 -- Description: 		Replaced [EDW_DataLake].[lifepro_v].[RELA_Curr_Vw] with [EDW_DataLake].[lifepro_v].[RELA_BusKey_Vw] to handle deletes

 -- Author: 			Anastasia Vogelaar
 -- CreationDate: 		2022-02-23
 -- Version: 			0.1.10
 -- Description: 		Changed logic to use Rela sysdata as the key field (since business keys could currently be overwritten)
 --						Changed delta retrieval logic to look at full views instead of current views
 --						Changed link wtih Lookup_Producer to use the index
 -- Full reload:
/*
DECLARE @SETTING_NAME_COMC_S		NVARCHAR(50) = 'SYNC_Producer_Policy_Assignment_COMC_S';
DECLARE @SETTING_NAME_RELA			NVARCHAR(50) = 'SYNC_PRODUCER_POLICY_ASSIGNMENT_RELA_BUSKEY_VW';
DECLARE @SETTING_MODULE				NVARCHAR(50) = 'SF_SYNC';
UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_COMC_S AND SETTING_MODULE = @SETTING_MODULE;
UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME=  @SETTING_NAME_RELA AND SETTING_MODULE = @SETTING_MODULE;
TRUNCATE TABLE [salesforce].[Producer_Policy_Assignment];
EXEC [salesforce].[usp_Upsert_Producer_Policy_Assignment]
*/

-- =============================================

SET NOCOUNT ON;
DECLARE @SETTING_NAME_COMC_S		NVARCHAR(50) = 'SYNC_Producer_Policy_Assignment_COMC_S';
DECLARE @SETTING_NAME_RELA			NVARCHAR(50) = 'SYNC_PRODUCER_POLICY_ASSIGNMENT_RELA_BUSKEY_VW';
DECLARE @SETTING_MODULE				NVARCHAR(50) = 'SF_SYNC';
DECLARE @START_VAL_COMC_S           BIGINT;
DECLARE @END_VAL_COMC_S             BIGINT;
DECLARE @START_VAL_RELA				BIGINT;
DECLARE @END_VAL_RELA				BIGINT;
DECLARE @ROWS						BIGINT;		--Used for logging row counts
DECLARE @LOGID_START				BIGINT;		--Used for the first log id
DECLARE	@LOGID						BIGINT;		--Used for intermediate log ids


BEGIN TRY
--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'ProducerPolicyAssignment:Stat/End Indicator');
SELECT @LOGID_START = @@IDENTITY;

/* START: Create temporary tables.*/
IF (1=1)
	BEGIN;
	--This table will store all the unique business keys
	IF OBJECT_ID (N'[work].[stage_sf_Producer_Policy_Assignment_Bus_Keys]', N'U') IS NOT NULL
		BEGIN;
		TRUNCATE TABLE [work].[stage_sf_Producer_Policy_Assignment_Bus_Keys];
		END;
	ELSE
		BEGIN;
	    CREATE  TABLE [work].[stage_sf_Producer_Policy_Assignment_Bus_Keys]
		    (	SysData BIGINT NOT NULL PRIMARY KEY CLUSTERED
				, POLICY_NUMBER varchar(20) NOT NULL 
				, COMPANY_CODE VARCHAR(2) NOT NULL
				, NAME_ID INT NOT NULL
				, RELATE_CODE VARCHAR(2) NOT NULL
				, AGENT_NUMBER VARCHAR(12) NOT NULL
				, DELETE_FLAG bit NOT NULL);
		CREATE NONCLUSTERED INDEX IDX_UQ_STAGE_SF_PRODUCER_POLICY_ASSIGNMENT_BK ON [work].[stage_sf_Producer_Policy_Assignment_Bus_Keys] (NAME_ID,COMPANY_CODE,POLICY_NUMBER,RELATE_CODE,AGENT_NUMBER);
        
		END;

	--This table will contain all changed business keys for all dependencies
	IF OBJECT_ID (N'[work].[tmp_Producer_Policy_Assignment_Policies]', N'U') IS NOT NULL
	   BEGIN;
	       TRUNCATE TABLE [work].[tmp_Producer_Policy_Assignment_Policies];
	   END;
	ELSE
	   BEGIN;
	       CREATE TABLE [work].[tmp_Producer_Policy_Assignment_Policies]
		        ( 
				 POLICY_NUMBER varchar(20) NOT NULL PRIMARY KEY
				);
	   END;
	
    IF OBJECT_ID (N'[work].[tmp_Producer_Policy_Assignment_AGNT_COMM]', N'U') IS NOT NULL
	   BEGIN;
	       TRUNCATE TABLE [work].[tmp_Producer_Policy_Assignment_AGNT_COMM];
	   END;
	ELSE
	   BEGIN;
	       CREATE TABLE [work].[tmp_Producer_Policy_Assignment_AGNT_COMM]
		        (  POLICY_NUMBER varchar(20)
				, COMPANY_CODE varchar(2)
				, AGENT_NUM varchar(12)
				, COMM_PCNT decimal(5,2)
				, PROD_PCNT decimal(5,2)
                , PRIMARY KEY CLUSTERED (POLICY_NUMBER, COMPANY_CODE, AGENT_NUM));
	   END;
	END;

/* END: Create temporary tables.*/
/* START: Populate temporary tables.*/
IF (1=1)
	BEGIN;	
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'ProducerPolicyAssignment: Populate temp tbls');
	SELECT @LOGID = @@IDENTITY;
			
	     --Pick all new or changed records from [EDW_DataLake].[lifepro_v].[COMC_S_Curr_Vw]
	     SELECT @START_VAL_COMC_S	= CAST(SETTING_VALUE AS BIGINT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_COMC_S AND Setting_Module = @SETTING_MODULE;
         SELECT @END_VAL_COMC_S	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[COMC_S_Vw];
	     
	     IF @START_VAL_COMC_S < @END_VAL_COMC_S
	     	BEGIN;
	     	INSERT [work].[tmp_Producer_Policy_Assignment_Policies]
	     		([POLICY_NUMBER])
	     	SELECT TRIM(COMC_S.POLICY_NUMBER)
	     	FROM [EDW_DataLake].[lifepro_v].[COMC_S_Vw] AS COMC_S
	     	WHERE NOT EXISTS
	     		(SELECT 1 FROM  [work].[tmp_Producer_Policy_Assignment_Policies] AS DEST 
	     		 WHERE DEST.POLICY_NUMBER = TRIM(COMC_S.POLICY_NUMBER))
	     		   AND COMC_S.Row_ID > @START_VAL_COMC_S
	     		   AND COMC_S.Row_ID <= @END_VAL_COMC_S
			GROUP BY TRIM([COMC_S].[POLICY_NUMBER]);
			SELECT @ROWS = @ROWS + @@ROWCOUNT;
	     	END;

		SELECT  @START_VAL_RELA = CAST(SETTING_VALUE AS BIGINT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_RELA AND Setting_Module = @SETTING_MODULE;
		SELECT	@END_VAL_RELA = MAX([ROW_ID]) FROM [EDW_DataLake].[lifepro_v].[RELA_BusKey_Vw];

		IF @START_VAL_RELA < @END_VAL_RELA
			BEGIN;
			INSERT [work].[tmp_Producer_Policy_Assignment_Policies]
	     		([POLICY_NUMBER])
			SELECT	TRIM(RELA.POLICY_NUMBER)
			FROM	 [EDW_DataLake].[lifepro_v].[RELA_BusKey_Vw] AS RELA
			WHERE	NOT EXISTS
				(SELECT 1 FROM [work].[tmp_Producer_Policy_Assignment_Policies] AS DEST
					WHERE DEST.POLICY_NUMBER = TRIM(RELA.POLICY_NUMBER))
				AND RELA.[COMPANY_CODE] IN ('01', '09', '06')
				AND RELA.RELATE_CODE IN ('SA', 'WA')
				AND COALESCE(RELA.BENEFIT_SEQ_NUMBER,0)=0
				AND RELA.Row_ID > @START_VAL_RELA
				AND RELA.Row_ID <= @END_VAL_RELA
			GROUP BY TRIM(RELA.POLICY_NUMBER);
			SELECT @ROWS = @ROWS + @@ROWCOUNT;
			END;

		;WITH BusKeys AS
		(
			SELECT RELA.[SysData]
				, TRIM(RELA.[POLICY_NUMBER])	AS [POLICY_NUMBER]
				, TRIM(RELA.[COMPANY_CODE])		AS [COMPANY_CODE]
				, RELA.[NAME_ID]				AS [NAME_ID]
				, TRIM(RELA.[RELATE_CODE])		AS [RELATE_CODE]
				, TRIM(AGNT.[AGENT_NUMBER])		AS [AGENT_NUMBER]
				, CASE WHEN RELA.DXType = 'D' THEN 1 ELSE 0 END AS DELETE_FLAG
				, ROW_NUMBER() OVER (PARTITION BY RELA.[SysData] ORDER BY AGNT.STATUS_CODE ASC, RELA.ROW_ID DESC) AS RN
				--, ROW_NUMBER() OVER (PARTITION BY RELA.NAME_ID, RELA.COMPANY_CODE, RELA.POLICY_NUMBER, AGNT.AGENT_NUMBER ORDER BY AGNT.STATUS_CODE ASC, RELA.ROW_ID DESC) AS RN
			FROM [EDW_DataLake].[lifepro_V].[RELA_BusKey_Vw] AS RELA
			INNER JOIN [work].[tmp_Producer_Policy_Assignment_Policies] AS POLICIES ON 
				POLICIES.[POLICY_NUMBER] = RELA.[POLICY_NUMBER]
			INNER JOIN  [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGNT ON
				AGNT.[NAME_ID] = RELA.[NAME_ID]
				AND AGNT.[COMPANY_CODE]	= RELA.[COMPANY_CODE]
			WHERE RELA.[RELATE_CODE] IN ('SA', 'WA')
				AND RELA.[COMPANY_CODE]	IN ('01', '09', '06')
				AND COALESCE(RELA.BENEFIT_SEQ_NUMBER,0)	= 0
		)
		INSERT [work].[stage_sf_Producer_Policy_Assignment_Bus_Keys] ([SysData], [POLICY_NUMBER], [COMPANY_CODE], [NAME_ID], [RELATE_CODE], [AGENT_NUMBER], [DELETE_FLAG])
		SELECT [SysData], POLICY_NUMBER, COMPANY_CODE, NAME_ID, RELATE_CODE, AGENT_NUMBER, DELETE_FLAG
		FROM BusKeys
		WHERE RN = 1
		SELECT @ROWS = @ROWS + @@ROWCOUNT;

	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;

	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'ProducerPolicyAssignment: Unpivot Aggent Comm');
	SELECT @LOGID = @@IDENTITY;
	     /* INSERT Agent comm info into temp Agent comm table*/
         ;WITH AGENT_COMM AS		
		 (
           SELECT ROW_NUMBER() OVER (PARTITION BY TRIM(SRC.POLICY_NUMBER), SRC.COMPANY_CODE, UNPIV.AGENT_NUM ORDER BY ROW_ID DESC) AS RN
				, TRIM(SRC.POLICY_NUMBER) AS POLICY_NUMBER
                , SRC.COMPANY_CODE
				--, SRC.ISSUE_DATE
                , UNPIV.AGENT_NUM
                , UNPIV.COMM_PCNT
		 	    , UNPIV.PROD_PCNT
           FROM [EDW_DataLake].[lifepro_v].[COMC_S_Curr_Vw] AS SRC
           CROSS APPLY (
                VALUES   (TRIM([AGENT_1]),[COMM_PCNT_1], [PROD_PCNT_1])
                       , (TRIM([AGENT_2]),[COMM_PCNT_2], [PROD_PCNT_2])
                       , (TRIM([AGENT_3]),[COMM_PCNT_3], [PROD_PCNT_3])
                       , (TRIM([AGENT_4]),[COMM_PCNT_4], [PROD_PCNT_4])
                       , (TRIM([AGENT_5]),[COMM_PCNT_5], [PROD_PCNT_5])
                       , (TRIM([AGENT_6]),[COMM_PCNT_6], [PROD_PCNT_6])
                       , (TRIM([AGENT_7]),[COMM_PCNT_7], [PROD_PCNT_7])
                       , (TRIM([AGENT_8]),[COMM_PCNT_8], [PROD_PCNT_8])
                       , (TRIM([AGENT_9]),[COMM_PCNT_9], [PROD_PCNT_9])
                       , (TRIM([AGENT_10]),[COMM_PCNT_10], [PROD_PCNT_10]) 
                       ) UNPIV (AGENT_NUM, COMM_PCNT, PROD_PCNT)
           WHERE UNPIV.AGENT_NUM <> '            '
		     AND EXISTS(SELECT 1 FROM [work].[tmp_Producer_Policy_Assignment_Policies] BK WHERE BK.POLICY_NUMBER = TRIM(SRC.POLICY_NUMBER)  )
		)
	     INSERT [work].[tmp_Producer_Policy_Assignment_AGNT_COMM]
		 	(COMPANY_CODE, POLICY_NUMBER, AGENT_NUM, COMM_PCNT, PROD_PCNT)
	     SELECT COMPANY_CODE
		      , POLICY_NUMBER
		 	  , AGENT_NUM
		 	  , COMM_PCNT
		 	  , PROD_PCNT
		 FROM AGENT_COMM
		 WHERE RN = 1
		ORDER BY POLICY_NUMBER;
		SELECT @ROWS = @@ROWCOUNT;
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
	END;
/* END: Populate temporary tables.*/

/* START: Populate staging table.*/
IF (1=1)
	BEGIN;
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'ProducerPolicyAssignment: Update Existing');
	SELECT @LOGID = @@IDENTITY;
				
	UPDATE	DEST
	SET		  [InsurancePolicyId]               = POL.ID
	        , [ProducerId]				        = PRO.ID
	        , [Agent_Name_Id__c]                = SRC.NAME_ID
			, [Type__c]                         = SRC.RELATE_CODE
			, [Policy_Number__c]				= SRC.POLICY_NUMBER + '-' + SRC.COMPANY_CODE
			, [Agent__c]                        = SRC.AGENT_NUMBER
			, [Commission_Percent__c]           = AGNT_COMM.COMM_PCNT
			, [Production_Percent__c]           = AGNT_COMM.PROD_PCNT
			, [Modified_dt]						= CURRENT_TIMESTAMP
			, [Delete_Flag]						= SRC.DELETE_FLAG
	FROM [salesforce].[Producer_Policy_Assignment] AS	DEST 
		INNER JOIN [work].[stage_sf_Producer_Policy_Assignment_Bus_Keys] AS SRC
			ON SRC.[SysData] = DEST.[External_Id__c]
			--ON CONCAT(SRC.COMPANY_CODE, '-', SRC.NAME_ID, '-', SRC.AGENT_NUMBER, '-',  SRC.POLICY_NUMBER, '-', SRC.RELATE_CODE)  = DEST.[External_Id__c]
		INNER JOIN [EDW_Outbound].[salesforce].[LOOKUP_INSURANCEPOLICY] POL
			ON POL.[EXTERNAL_ID__C] = SRC.POLICY_NUMBER + '-' + SRC.COMPANY_CODE
		INNER JOIN [EDW_Outbound].[salesforce].[LOOKUP_PRODUCER] PRO
			ON TRIM(PRO.[NAME]) =SRC.[AGENT_NUMBER]
			AND PRO.COMPANY_CODE__C = SRC.COMPANY_CODE
			--AND PRO.NAME_ID__C = CONVERT(varchar(20), SRC.NAME_ID)
		INNER JOIN work.[tmp_Producer_Policy_Assignment_AGNT_COMM] AGNT_COMM
			ON AGNT_COMM.POLICY_NUMBER = SRC.[POLICY_NUMBER]
			AND AGNT_COMM.COMPANY_CODE = SRC.[COMPANY_CODE]
			AND AGNT_COMM.[AGENT_NUM] = SRC.[AGENT_NUMBER];	
		
	SELECT @ROWS = @@ROWCOUNT;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;

	--Insert all delta records into the staging table	
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'ProducerPolicyAssignment: Insert New');
	SELECT @LOGID = @@IDENTITY;

	INSERT INTO [salesforce].[Producer_Policy_Assignment]
	          ( [InsurancePolicyId]
			  , [ProducerId]
		      , [Agent_Name_Id__c]
		      , [Type__c]
		      , [Policy_Number__c]
			  , [Agent__c]
			  , [Commission_Percent__c]
			  , [Production_Percent__c]
		      , [External_Id__c]
	          , [Created_dt]
			  , [Delete_Flag]
		     )
	SELECT  [InsurancePolicyId]				= POL.ID
	        , [ProducerId]					= PRO.ID
	        , [Agent_Name_Id__c]			= SRC.NAME_ID
			, [Type__c]						= SRC.RELATE_CODE
			, [Policy_Number__c]			= SRC.POLICY_NUMBER + '-' + SRC.COMPANY_CODE
			, [Agent__c]                    = SRC.AGENT_NUMBER
			, [Commission_Percent__c]       = AGNT_COMM.COMM_PCNT
			, [Production_Percent__c]       = AGNT_COMM.PROD_PCNT
			, [External_Id__c]				= SRC.[SysData]
			--, [External_Id__c]				= CONCAT(SRC.COMPANY_CODE, '-', SRC.NAME_ID, '-', SRC.AGENT_NUMBER, '-',  SRC.POLICY_NUMBER, '-', SRC.RELATE_CODE) 
			, [Created_dt]					= CURRENT_TIMESTAMP
			, [Delete_Flag]					= SRC.DELETE_FLAG
	FROM [work].[stage_sf_Producer_Policy_Assignment_Bus_Keys] AS SRC
		INNER JOIN [EDW_Outbound].[salesforce].[LOOKUP_INSURANCEPOLICY] POL
			ON POL.[EXTERNAL_ID__C] = SRC.POLICY_NUMBER + '-' + SRC.COMPANY_CODE
		INNER JOIN [EDW_Outbound].[salesforce].[LOOKUP_PRODUCER] PRO
			ON TRIM(PRO.[NAME]) =SRC.[AGENT_NUMBER]
			--AND PRO.NAME_ID__C = CONVERT(varchar(20), SRC.NAME_ID)
			AND PRO.COMPANY_CODE__C = SRC.COMPANY_CODE
		INNER JOIN work.[tmp_Producer_Policy_Assignment_AGNT_COMM] AGNT_COMM
			ON AGNT_COMM.POLICY_NUMBER = SRC.[POLICY_NUMBER]
			AND AGNT_COMM.COMPANY_CODE = SRC.[COMPANY_CODE]
			AND AGNT_COMM.[AGENT_NUM] = SRC.[AGENT_NUMBER]	
	WHERE NOT EXISTS (SELECT 1 FROM [salesforce].[Producer_Policy_Assignment] AS DEST WHERE DEST.External_Id__c = SRC.[SysData]);
	--WHERE NOT EXISTS (SELECT 1 FROM  [salesforce].[Producer_Policy_Assignment] AS DEST WHERE DEST.External_Id__c = CONCAT(SRC.COMPANY_CODE, '-', SRC.NAME_ID, '-', SRC.AGENT_NUMBER, '-', SRC.POLICY_NUMBER, '-', SRC.RELATE_CODE) )

	SELECT @ROWS = @@ROWCOUNT;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;	
	
	END;


/* END: Populate staging table.*/
/* START: Update delta settings.*/
IF (1=1)
	BEGIN
	   UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_COMC_S AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_COMC_S AND Setting_Module = @SETTING_MODULE;
	   UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_RELA AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_RELA AND Setting_Module = @SETTING_MODULE;
	END;
 
 --Logging
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;  

END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;

--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'ProducerPolicyAssignment:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();


RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Producer_Address]    Script Date: 5/17/2022 2:04:43 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:          Darin Baarda
-- Create date:		08/30/2021
-- Description:     upload the producer address records
-- =============================================
-- Last Run Date : 08/30/2021
-- Last Run Exec : exec salesforce.usp_Upsert_Producer_Address 
-- Last Run Stat : 16 secs,455,081 records
-- =============================================
-- Maintenance 
-- =============================================
-- CX-1916     08/30/2021 Darin Baarda 
-- New Stored Procedure
-- =============================================
-- Modified By: Darin Baarda
-- Modified Date: 10/11/2021
-- Version: 0.1.1
-- Description: fixed the columns pulling
-- =============================================
-- Modified By: Darin Baarda
-- Modified Date: 11303/2021
-- Version: 0.1.2
-- Description: fixed to pull the history of addresses
-- =============================================
-- Modified By: Darin Baarda
-- Modified Date: 11303/2021
-- Version: 0.1.3
-- Description: change to see if not exists
-- =============================================
-- Modified By: Anastasia Vogelaar
-- Modified Date: 12/17/2021
-- Version: 0.1.4
-- Description: CX-3854 - hard code default Address Code
-- =============================================
-- Modified By:		Steve Tangeman
-- Modified Date:	1/4/2022
-- Version:			0.1.5
-- Description:		Updated to exclude e-mail address records based on address type.
--					Also updated effective date field to pull from the data lake.
-- =============================================
-- Modified By:		Anastasia Vogelaar
-- Modified Date:	01/04/2022
-- Version:			0.1.6
-- Description:		Changed LOOKUP_ACCOUNT to mapping_Account
-- =============================================
-- Modified By:		Steve Tangeman
-- Modified Date:	1/12/2022
-- Version:			0.1.7
-- Description:		Changed [work].[stage_sf_Producer_Address_addr_id] to use name id instead of SSN
-- =============================================
-- Modified By:		Steve Tangeman
-- Modified Date:	1/20/2022
-- Version:			0.1.8
-- Description:		Fixed bug with join to Address Lookup
-- =============================================
-- Modified By:		Steve Tangeman
-- Modified Date:	2/1/2022
-- Version:			0.1.9
-- Description:		Updated to use all name IDs for an agent, not just minimum name ID
-- =============================================
-- Modified By:		Anastasia Vogelaar
-- Modified Date:	2/21/2022
-- Version:			0.1.10
-- Description:		Altered tables to have matching data types, removed distinct
-- =============================================
-- Modified By:		Anastasia Vogelaar
-- Modified Date:	2/28/2022
-- Version:			0.2.0
-- Description:		Added Policy Number to the unique key
-- =============================================
-- Modified By:		Darin Baarda
-- Modified Date:	04/07/2022
-- Version:			0.2.1
-- Description:		Added delete flag for the NALK table
-- =============================================
-- Modified By:		Steve Tangeman
-- Modified Date:	04/22/2022
-- Version:			0.2.2
-- Description:		Fixed issues with the update statement
-- =============================================

/*

update [EDW_Audit].[dbo].[Delta_Settings]
set Setting_Value = cast(0 as varchar(20))
where setting_name = 'SYNC_PRODUCER_ADDR_NALK'

truncate table salesforce.producer_address
exec salesforce.usp_upsert_producer_address

select external_id__c, count(1)
from salesforce.producer_address
group by external_id__c
having count(1) > 1


select top 100 * from salesforce.account_address

select * from salesforce.producer_address
where external_id__c = '64| |50|   |01-SFH01|HI'



select * from salesforce.lookup_producer
where id in (
'0Yx7h0000006N9HCAU',
'0Yx8G000000135xSAA')

select count(1) from salesforce.producer_address

select * from [EDW_Audit].[dbo].[Delta_Settings]
where setting_name = 'SYNC_PRODUCER_ADDR_NALK'

select Address_External_Id__c, Type__c, Producer_External_Id__c, Address_Code__c, state__c, count(1)
from salesforce.producer_Address
group by Address_External_Id__c, Type__c, Producer_External_Id__c, Address_Code__c, state__c
having count(1) > 1
order by count(1) desc

select * from salesforce.producer_address
where address_external_id__c = 111015

select top 10 * From salesforce.lookup_producer
where name_id__c = 311119


select top 10 * From salesforce.lookup_address__c

*/
CREATE PROCEDURE [salesforce].[usp_Upsert_Producer_Address]


AS
BEGIN
SET NOCOUNT ON;

	BEGIN TRY



		/* code starts here for the procedure */
		DECLARE @SETTING_PRODUCER_ADDR_NALK			NVARCHAR(50) = 'SYNC_PRODUCER_ADDR_NALK';
		DECLARE @SETTING_MODULE						NVARCHAR(50) = 'SF_SYNC';
		DECLARE @START_VAL							INT;
		DECLARE @END_VAL							INT;
		DECLARE @NOW								DATETIME = CURRENT_TIMESTAMP		
		DECLARE @ROWS								INT;		--Used for logging row counts
		DECLARE @LOGID_START						INT;		--Used for the first log id
		DECLARE	@LOGID								INT;		--Used for intermediate log ids

		--Logging
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'ProducerAddress:Stat/End Indicator');
		SELECT @LOGID_START = @@IDENTITY;

		DECLARE @RecordTypeID			varchar(20) = (SELECT [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE DEVELOPERNAME = 'Account_Address' AND SOBJECTTYPE = 'Account_Address__c')
		SELECT @START_VAL = CAST(Setting_Value AS int) from [EDW_Audit].[dbo].[Delta_Settings]  WHERE Setting_Name = @SETTING_PRODUCER_ADDR_NALK AND Setting_Module = @SETTING_MODULE; 
		SELECT @END_VAL = MAX(ROW_ID) FROM [EDW_DataLake].[lifepro_v].[NALK_BusKey_Vw]


		IF NOT EXISTS(SELECT * FROM [EDW_Audit].[dbo].[Delta_Settings]   WHERE Setting_Name = @SETTING_PRODUCER_ADDR_NALK AND Setting_Module = @SETTING_MODULE)
		BEGIN
			INSERT INTO [EDW_Audit].[dbo].[Delta_Settings] VALUES (@SETTING_PRODUCER_ADDR_NALK, @SETTING_MODULE, CAST(0 AS VARCHAR(20)))
		END

	/* START: Create temporary tables.*/  
	IF (1=1)  
	 BEGIN;  
		IF OBJECT_ID (N'work.stage_sf_Producer_Address_min_name_id', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [work].[stage_sf_Producer_Address_min_name_id];
			END;
		ELSE
			BEGIN;
			CREATE table [work].[stage_sf_Producer_Address_min_name_id] (minnameid int NOT NULL PRIMARY KEY CLUSTERED) ;
			END;

		IF OBJECT_ID (N'work.stage_sf_Producer_Address_addr_id', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [work].[stage_sf_Producer_Address_addr_id];
			END;
		ELSE
			BEGIN;
			CREATE table [work].[stage_sf_Producer_Address_addr_id] (name_id int NOT NULL, addr_id int NOT NULL) ;
			CREATE unique clustered index [IX_ProducerAddressAddrID] on [EDW_Outbound].[work].[stage_sf_Producer_Address_addr_id] (name_id asc, addr_id asc);
			END;

	END
	/* END: Temporary Tables */



		IF (@END_VAL > @START_VAL) 
		BEGIN


		/* START: Populate staging tables.*/  
		IF (1=1)  
		 BEGIN;  

			insert into [work].[stage_sf_Producer_Address_min_name_id]
			select AGNT.NAME_ID
			from [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] as AGNT
			group by AGNT.NAME_ID

			insert into [work].[stage_sf_Producer_Address_addr_id]
			select NAME_ID, ADDRESS_ID
			from [work].[stage_sf_Producer_Address_min_name_id] AS PRDCR
			join [EDW_DataLake].[lifepro_v].[NALK_BusKey_Vw] AS NALK on
				PRDCR.minnameid = NALK.[NAME_ID] and
				NALK.ADDRESS_TYPE <> 'E'
			where NALK.[Row_ID] > @START_VAL
				and NALK.[Row_ID] <= @END_VAL
			group by NAME_ID, ADDRESS_ID

		END
		/* END: Staging Tables */

		/* START: Populate staging table.*/  
		IF (1=1)  
		 BEGIN;  
  
		 INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'ProducerAddress:Update Staging');  
		 SELECT @LOGID = @@IDENTITY;  

			UPDATE DEST  
			SET	[Modified_dt]					= @NOW
				, [Address_External_Id__c]		= ADDR.[ADDR_ID]
				, [Address__c]					= LADDR.[ID] 
				, [Type__c]						= NALK.[ADDRESS_TYPE]
				, [Producer_External_Id__c]		= PRDCR.[NAME_ID__C]
				, [Producer__c]					= PRDCR.[ID]
				, [Address_Code__c]				= CASE WHEN TRIM(NALK.[ADDRESS_CODE])='' THEN 'P' ELSE TRIM(NALK.[ADDRESS_CODE]) END
				, [Effective_Date__c]			= CASE WHEN NALK.[EFFECTIVE_DATE] < '1/1/1700' OR NALK.EFFECTIVE_DATE > '12/31/4000' THEN NULL ELSE NALK.[EFFECTIVE_DATE] END
				, [State__c]					= AGNT.[state_licensed_1]
				, [Delete_Flag]					= CASE WHEN NALK.DXType = 'D' THEN 1 ELSE 0 END
			FROM  [salesforce].[producer_address] as DEST
			INNER JOIN [EDW_Outbound].[work].[stage_sf_Producer_Address_addr_id] AS ADDR ON
				DEST.Address_External_Id__c = ADDR.addr_id AND
				DEST.Producer_External_Id__c = ADDR.name_id
			INNER JOIN [EDW_DataLake].[lifepro_v].[NALK_BusKey_Vw] as NALK on
				ADDR.name_id = NALK.NAME_ID and
				ADDR.addr_id = NALK.ADDRESS_ID
			INNER JOIN [EDW_Outbound].[salesforce].[LOOKUP_ADDRESS__C] AS LADDR ON 
				ADDR.addr_id = LADDR.[EXTERNAL_ID__C]
			INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NAME ON
				ADDR.name_id = NAME.[NAME_ID]
			INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGNT on 
				ADDR.name_id = AGNT.[NAME_ID]
			INNER JOIN [EDW_Outbound].[salesforce].[LOOKUP_PRODUCER] AS PRDCR on 
				PRDCR.EXTERNAL_ID__C = RTRIM(AGNT.COMPANY_CODE) + '-' + RTRIM(AGNT.AGENT_NUMBER)
			WHERE DEST.External_ID__c = cast(cast(ADDR.addr_id as varchar(20)) + '|'
										+ TRIM(NALK.[ADDRESS_TYPE]) + '|'
										+ cast(PRDCR.[NAME_ID__C] as varchar(20)) + '|'
										+ TRIM(NALK.[ADDRESS_CODE]) + '|'
										+ TRIM(NALK.[POLICY_NUMBER]) + '|'
										+ PRDCR.[EXTERNAL_ID__C] + '|'
										+ AGNT.[state_licensed_1] + '|'
										+ CASE WHEN NALK.[EFFECTIVE_DATE] IS NULL OR NALK.[EFFECTIVE_DATE] < '1/1/1700' OR NALK.EFFECTIVE_DATE > '12/31/4000' THEN '' ELSE FORMAT(NALK.[EFFECTIVE_DATE], 'MM-dd-yy') END
								as varchar(100))

		SELECT @ROWS = @@ROWCOUNT;  
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;  

			--Logging
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'ProducerAddress:Insert stg tbl');
		SELECT @LOGID = @@IDENTITY;

			insert into [EDW_Outbound].[salesforce].[producer_Address] 
			(
				LifePro_Last_Modified_DateTime__c
				, Created_dt
				, Address_External_Id__c
				, Address__c
				, Type__c
				, Producer_External_Id__c
				, Producer__c
				, Address_Code__c
				, Effective_Date__c
				, External_ID__c
				, State__c
				, [Delete_Flag]
			)
			select --distinct
				'0' AS 'LifePro_Last_Modified_DateTime__c'				--This will be mapped to VERSION_ID field that is not available at the time of this release
				 --case 
					--when [ADDR_Curr_Vw].VERSION_ID>=[NAME_Curr_Vw].VERSION_ID then [ADDR_Curr_Vw].VERSION_ID else [NAME_Curr_Vw].VERSION_ID end
					--AS 'LifePro_Last_Modified_DateTime__c'
				, @NOW					---When the record is created
				, addr.addr_id as 'Address_External_Id__c'
				, LADDR.[ID] as 'Address__c'
				, NALK.[ADDRESS_TYPE] as 'Type__c'
				, PRDCR.[NAME_ID__C] as 'Producer_External_Id__c'
				, PRDCR.[ID] as 'Producer__c'
				, CASE WHEN TRIM(NALK.[ADDRESS_CODE])='' THEN 'P' ELSE TRIM(NALK.[ADDRESS_CODE]) END as 'Address_Code__c'
				, CASE WHEN NALK.[EFFECTIVE_DATE] < '1/1/1700' OR NALK.EFFECTIVE_DATE > '12/31/4000' THEN NULL ELSE NALK.[EFFECTIVE_DATE] END as 'Effective_Date__c'
				, cast(addr.addr_id as varchar(20)) + '|'
					+ TRIM(NALK.[ADDRESS_TYPE]) + '|'
					+ cast(PRDCR.[NAME_ID__C] as varchar(20)) + '|'
					+ TRIM(NALK.[ADDRESS_CODE]) + '|'
					+ TRIM(NALK.[POLICY_NUMBER]) + '|'
					+ PRDCR.[EXTERNAL_ID__C] + '|'
					+ AGNT.[state_licensed_1] + '|'
					+ CASE WHEN NALK.[EFFECTIVE_DATE] IS NULL OR NALK.[EFFECTIVE_DATE] < '1/1/1700' OR NALK.EFFECTIVE_DATE > '12/31/4000' THEN '' ELSE FORMAT(NALK.[EFFECTIVE_DATE], 'MM-dd-yy') END
					as 'External_ID__c'
				, AGNT.[state_licensed_1] as 'State__c'
				, CASE WHEN NALK.DXType = 'D' THEN 1 ELSE 0 END
			FROM  [EDW_Outbound].[work].[stage_sf_Producer_Address_addr_id] AS ADDR
				INNER JOIN [EDW_DataLake].[lifepro_v].[NALK_BusKey_Vw] as NALK on
					ADDR.name_id = NALK.NAME_ID and
					ADDR.addr_id = NALK.ADDRESS_ID
				INNER JOIN [EDW_Outbound].[salesforce].[LOOKUP_ADDRESS__C] AS LADDR ON 
					ADDR.addr_id = LADDR.[EXTERNAL_ID__C]
				INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NAME ON
					ADDR.name_id = NAME.[NAME_ID]
				INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGNT on 
					ADDR.name_id = AGNT.[NAME_ID]
				INNER JOIN [EDW_Outbound].[salesforce].[LOOKUP_PRODUCER] AS PRDCR on 
					PRDCR.EXTERNAL_ID__C = RTRIM(AGNT.COMPANY_CODE) + '-' + RTRIM(AGNT.AGENT_NUMBER)
			where NALK.ADDRESS_TYPE <> 'E'
				and PRDCR.[company_code__c] <> '02'
				and not exists (select top 1 External_ID__c 
								from [EDW_Outbound].[salesforce].[producer_Address] as DEST
								where External_ID__c = cast(cast(ADDR.addr_id as varchar(20)) + '|'
										+ TRIM(NALK.[ADDRESS_TYPE]) + '|'
										+ cast(PRDCR.[NAME_ID__C] as varchar(20)) + '|'
										+ TRIM(NALK.[ADDRESS_CODE]) + '|'
										+ TRIM(NALK.[POLICY_NUMBER]) + '|'
										+ PRDCR.[EXTERNAL_ID__C] + '|'
										+ AGNT.[state_licensed_1] + '|'
										+ CASE WHEN NALK.[EFFECTIVE_DATE] IS NULL OR NALK.[EFFECTIVE_DATE] < '1/1/1700' OR NALK.EFFECTIVE_DATE > '12/31/4000' THEN '' ELSE FORMAT(NALK.[EFFECTIVE_DATE], 'MM-dd-yy') END
								as varchar(100))
								)


			--Logging
			SELECT @ROWS = @@ROWCOUNT;
			UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;

			UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_PRODUCER_ADDR_NALK AND Setting_Module = @SETTING_MODULE;
			END

		END

		/* code ends here for the procedure */


	--Logging
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP WHERE Row_ID = @LOGID_START;

	END TRY
	BEGIN CATCH
           
	DECLARE @ERROR_MSG          NVARCHAR(2000);
	DECLARE @ERROR_SEVERITY     INT;
	DECLARE @ERROR_STATE        INT;
 
	SET @ERROR_MSG              = ERROR_MESSAGE();
	SET @ERROR_SEVERITY         = ERROR_SEVERITY();
	SET @ERROR_STATE            = ERROR_STATE();


	RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

	END CATCH;

END

GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Producer_20220218]    Script Date: 5/17/2022 2:04:43 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE       PROCEDURE  [salesforce].[usp_Upsert_Producer_20220218]

AS
BEGIN;
-- =============================================
/*																							
 -- Author: 			Anastasia Vogelaar
 -- CreationDate: 		2021-07-21
 -- Version: 			0.1.0
 -- Description: 		Retrieve all unqique Producer records records 
 --						Bus key - Agent Number + Company Code
 --						Only get Agents that are marked as individual (not business)
 --						NAME_Curr_Vw.NAME_FORMAT_CODE  ='I'
 
 -- Change Log: 		 
 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		9/20/2021
 -- Version:			0.1.1
 -- Description:		Added reason code pick list values CX - 1691

 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		10/01/2021
 -- Version:			0.1.2
 -- Description:		Added [Status_Reason_Description__c]
  
 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		12/17/2021
 -- Version:			0.1.3
 -- Description:		Added [Status_Reason_Description__c]

 -- Modified By:		Darin Baarda
 -- Modified Date:		01/20/2022
 -- Version:			0.1.4
 -- Description:		Added logging

 -- Modified By:		Darin Baarda
 -- Modified Date:		02/02/2022
 -- Version:			0.1.5
 -- Description:		add mapping table and logic to group by ssn for contacts

 -- Modified By:		Darin Baarda
 -- Modified Date:		02/14/2022
 -- Version:			0.1.6
 -- Description:		changed logic for accounts to use mapping table not upline


 */


 
 -- Full reload:
--DECLARE @SETTING_NAME_HIER					NVARCHAR(50) = 'SYNC_Producer_HIER_CURR_VW';
--DECLARE @SETTING_NAME_AGNT					NVARCHAR(50) = 'SYNC_Producer_AGNT_CURR_VW';
--DECLARE @SETTING_NAME_EXTN_AGNT				NVARCHAR(50) = 'SYNC_Producer_EXTN_AGNT_CURR_VW';
--DECLARE @SETTING_NAME_NALK					NVARCHAR(50) = 'SYNC_Producer_NALK_CURR_VW';
--DECLARE @SETTING_NAME_BALC					NVARCHAR(50) = 'SYNC_Producer_BALC_CURR_VW';
--DECLARE @SETTING_MODULE						NVARCHAR(50) = 'SF_SYNC';
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings]  AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_HIER AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings]  AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_AGNT AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings]  AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_EXTN_AGNT AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings]  AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_NALK AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings]  AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_BALC AND SETTING_MODULE = @SETTING_MODULE;
--INSERT [EDW_Audit].[dbo].[Delta_Settings] (Setting_Name, Setting_Module, Setting_Value) VALUES (@SETTING_NAME_MGMTJ, @SETTING_MODULE, 0)
--(@SETTING_NAME_HIER, @SETTING_MODULE,0)
--, (@SETTING_NAME_AGNT, @SETTING_MODULE,0)
--, (@SETTING_NAME_EXTN_AGNT, @SETTING_MODULE,0)
--, (@SETTING_NAME_NALK, @SETTING_MODULE,0)
--, (@SETTING_NAME_NAME, @SETTING_MODULE,0);
-- =============================================

SET NOCOUNT ON;
DECLARE @SETTING_NAME_HIER			NVARCHAR(50) = 'SYNC_Producer_HIER_CURR_VW';
DECLARE @SETTING_NAME_AGNT			NVARCHAR(50) = 'SYNC_Producer_AGNT_CURR_VW';
DECLARE @SETTING_NAME_EXTN_AGNT		NVARCHAR(50) = 'SYNC_Producer_EXTN_AGNT_CURR_VW';
DECLARE @SETTING_NAME_NALK			NVARCHAR(50) = 'SYNC_Producer_NALK_CURR_VW';
DECLARE @SETTING_NAME_BALC			NVARCHAR(50) = 'SYNC_Producer_BALC_CURR_VW';
DECLARE @SETTING_MODULE				NVARCHAR(50) = 'SF_SYNC';
DECLARE @START_VAL_HIER				INT;
DECLARE @START_VAL_AGNT				INT;
DECLARE @START_VAL_EXTN_AGNT		INT;
DECLARE @START_VAL_NALK				INT;
DECLARE @START_VAL_BACL				INT;
DECLARE @END_VAL_HIER				INT;
DECLARE @END_VAL_AGNT				INT;
DECLARE @END_VAL_EXTN_AGNT			INT;
DECLARE @END_VAL_NALK				INT;
DECLARE @END_VAL_BALC				INT;
--The commented out variables were included for Status_Change_Reason, but the mapping is invalid
--DECLARE @SETTING_NAME_MGMTJ		NVARCHAR(50) = 'SYNC_Producer_MGMTJ_CURR_VW';
--DECLARE @START_VAL_MGMTJ			INT;
--DECLARE @END_VAL_MGMTJ			INT;
DECLARE	@PROCESS_DT					DATETIME2		= CURRENT_TIMESTAMP;

DECLARE @LOGID_START    INT;  --Used for the first log id          
DECLARE @LOGID      INT;  --Used for intermediate log ids          
DECLARE @ROWS      INT;  --Used for logging row counts          

BEGIN TRY
/*START: Assign variable values*/
--Logging          
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Producer:Start/End Indicator');          
SELECT @LOGID_START = @@IDENTITY;       

IF (1=1)
	BEGIN;
	
	SELECT	@START_VAL_AGNT			= CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_AGNT AND Setting_Module = @SETTING_MODULE;
	SELECT	@START_VAL_EXTN_AGNT	= CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_EXTN_AGNT AND Setting_Module = @SETTING_MODULE;
	SELECT	@START_VAL_HIER 		= CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_HIER AND Setting_Module = @SETTING_MODULE;
	SELECT	@START_VAL_NALK			= CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_NALK AND Setting_Module = @SETTING_MODULE;
	SELECT	@START_VAL_BACL			= CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_BALC AND Setting_Module = @SETTING_MODULE;
	SELECT	@END_VAL_EXTN_AGNT		= MAX(ROW_ID) FROM [EDW_DataLake].[lifepro_v].[EXTN_AGTT_Curr_Vw];
	SELECT	@END_VAL_AGNT			= MAX(ROW_ID) FROM [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw];
	SELECT	@END_VAL_HIER			= MAX(ROW_ID) FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw];
	SELECT	@END_VAL_NALK			= MAX(ROW_ID) FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw];
	SELECT	@END_VAL_BALC			= MAX(ROW_ID) FROM [EDW_DataLake].[lifepro_v].[BALC_Curr_Vw];
	--SELECT	@START_VAL_MGMTJ		= CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_MGMTJ AND Setting_Module = @SETTING_MODULE;
	--SELECT	@END_VAL_MGMTJ			= MAX(ROW_ID) FROM [EDW_DataLake].[lifepro_v].[MGMT_J_Curr_Vw];
	END;
/*END: Assign variable values*/
/*START: Create temporary tables*/
IF (1=1)
	BEGIN;

	-- hold the latest relationship data
	IF OBJECT_ID (N'work.tmp_Producer_Relationship', N'U') IS NOT NULL
		BEGIN;
		TRUNCATE TABLE [work].[tmp_Producer_Relationship];
		END;
	ELSE
		BEGIN;
		CREATE TABLE [work].[tmp_Producer_Relationship]
		(AGENT_ID			BIGINT NOT NULL PRIMARY KEY CLUSTERED		--Surrogate key (sysdata field) of agent hierarchy Salesforce mapping
		, UPLINE_ID			BIGINT NULL									--Surrogate key (sysdata field) of the agent's direct manager
		, ROOT_ID			BIGINT NULL									--Surrogate key (sysdata field) of the agent's top most uplevel manager
		, AGENT_NUMBER		NVARCHAR(12) NULL
		);
		END;


	--Table to store all changed records from the parent tables and dependencies
	IF OBJECT_ID (N'work.tmp_Producer_Bus_Key', N'U') IS NOT NULL
		BEGIN;
		TRUNCATE TABLE [work].[tmp_Producer_Bus_Key];
		END;
	ELSE
		BEGIN;
		CREATE TABLE [work].[tmp_Producer_Bus_Key]
			([Agent_Number]		NVARCHAR(12) NOT NULL
			, [Company_code]	NVARCHAR(2) NOT NULL
			, CONSTRAINT PK_tmp_producer_bus_key PRIMARY KEY CLUSTERED ([Agent_Number], [Company_code])
			);
		END;

	--This table will store IDs of all producers in scope
	IF OBJECT_ID (N'work.stage_sf_Producer_Bus_Key', N'U') IS NULL	
		BEGIN;
		CREATE TABLE [work].[stage_sf_Producer_Bus_Key] 
			([Agent_Number]		NVARCHAR(12) NOT NULL
			, [Company_code]	NVARCHAR(2) NOT NULL
			, [SSN]				NVARCHAR(12) NOT NULL
			, CONSTRAINT PK_stage_sf_Producer_Bus_Key PRIMARY KEY CLUSTERED ([Agent_Number], [Company_code], [SSN])
			);
		END;
	
	END;
/*END: Create temporary tables*/
/*START: Refresh producer list*/
IF (1=1)
	BEGIN;
 
 INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Producer:Refresh producer');          
 SELECT @LOGID = @@IDENTITY;  

 
	MERGE [work].[stage_sf_Producer_Bus_Key] AS TGT
		USING (SELECT AGNT.[AGENT_NUMBER]
					, AGNT.[COMPANY_CODE]
					, NAME.BUSINESS_TAX_CODE
			FROM	[EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGNT
			INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NAME ON
					AGNT.NAME_ID = NAME.NAME_ID) AS SRC
		ON (TGT.[AGENT_NUMBER]		= SRC.[AGENT_NUMBER]
			AND TGT.[COMPANY_CODE]	= SRC.[COMPANY_CODE]
			AND TGT.SSN		= SRC.BUSINESS_TAX_CODE)
		WHEN NOT MATCHED BY TARGET THEN
			INSERT	([Agent_Number], [Company_code], [SSN])
			VALUES	(SRC.AGENT_NUMBER, SRC.COMPANY_CODE, SRC.BUSINESS_TAX_CODE)
		WHEN NOT MATCHED BY SOURCE THEN
			DELETE;

SELECT @Rows = SUM(st.row_count) FROM    sys.dm_db_partition_stats st WHERE  object_name(object_id) = 'stage_sf_Producer_Bus_Key' AND OBJECT_SCHEMA_NAME(OBJECT_ID) = 'work' AND (index_id < 2);          
UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;      
	

	END;
/*END: Refresh producer list*/
/*START: Populate temporary objects */
IF (1=1)
	BEGIN;

 INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Producer:Get new and changed records');          
 SELECT @LOGID = @@IDENTITY;    

	--Retrieve all new agent hierarchy identifiers
	INSERT	[work].[tmp_Producer_Bus_Key]
		([Agent_Number]
		, [Company_code])
	SELECT	HIER.[AGENT_NUMBER]
		, HIER.[COMPANY_CODE]
	FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] AS HIER
	WHERE	EXISTS(SELECT 1 FROM [work].[stage_sf_Producer_Bus_Key] AS SRC 
				WHERE SRC.[Agent_Number]	= HIER.[AGENT_NUMBER]
					AND SRC.[Company_code]	= HIER.[COMPANY_CODE])			--Must be an individual
			AND HIER.Row_ID > @START_VAL_HIER
			AND HIER.Row_ID <= @END_VAL_HIER
	GROUP BY HIER.[AGENT_NUMBER]
		, HIER.[COMPANY_CODE];
	--Retrieve all new agent records
	INSERT	[work].[tmp_Producer_Bus_Key]
		([Agent_Number]
		, [Company_code])
	SELECT	AGNT.[AGENT_NUMBER]
		, AGNT.[COMPANY_CODE]
	FROM [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGNT
	WHERE NOT EXISTS (SELECT 1 FROM [work].[tmp_Producer_Bus_Key] AS DEST 
				WHERE DEST.Agent_Number = AGNT.AGENT_NUMBER 
					AND DEST.Company_code = AGNT.COMPANY_CODE)
		AND EXISTS (SELECT 1 FROM [work].[stage_sf_Producer_Bus_Key] AS SRC 
				WHERE SRC.[Agent_Number]	= AGNT.[AGENT_NUMBER]
					AND SRC.[Company_code]	= AGNT.[COMPANY_CODE])			--Must be an individual
		AND AGNT.Row_ID>@START_VAL_AGNT
		AND AGNT.Row_ID<=@END_VAL_AGNT
	GROUP BY AGNT.[AGENT_NUMBER]
		, AGNT.[COMPANY_CODE];
	--Retrieve all new NALK records
	INSERT	[work].[tmp_Producer_Bus_Key]
		([Agent_Number]
		, [Company_code])
	SELECT	NALK.[AGENT_NUMBER]
		, NALK.[COMPANY_CODE]
	FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] AS NALK
	WHERE NOT EXISTS (SELECT 1 FROM [work].[tmp_Producer_Bus_Key] AS DEST 
				WHERE DEST.Agent_Number = NALK.AGENT_NUMBER 
					AND DEST.Company_code = NALK.COMPANY_CODE)
		AND EXISTS (SELECT 1 FROM [work].[stage_sf_Producer_Bus_Key] AS SRC 
				WHERE SRC.[Agent_Number]	= NALK.[AGENT_NUMBER]
					AND SRC.[Company_code]	= NALK.[COMPANY_CODE])			--Must be an individual
		AND NALK.Row_ID>@START_VAL_NALK
		AND NALK.Row_ID<=@END_VAL_NALK
	GROUP BY NALK.[AGENT_NUMBER]
		, NALK.[COMPANY_CODE];
	--Retrieve all new EXTN_AGNT records
	INSERT	[work].[tmp_Producer_Bus_Key]
		([Agent_Number]
		, [Company_code])
	SELECT	SRC.[POLICY_NUMBER]												--Mislabeled column - both Policy Number and Product ID columns store AGENT_NUM
		, SRC.[COMPANY_CODE]
	FROM [EDW_DataLake].[lifepro_v].[EXTN_AGTT_Curr_Vw] AS SRC
	WHERE NOT EXISTS (SELECT 1 FROM [work].[tmp_Producer_Bus_Key] AS DEST 
				WHERE DEST.Agent_Number = SRC.[POLICY_NUMBER] 
					AND DEST.Company_code = SRC.COMPANY_CODE)
		AND EXISTS (SELECT 1 FROM [work].[stage_sf_Producer_Bus_Key] AS buskey 
				WHERE buskey.[Agent_Number]	= SRC.[POLICY_NUMBER]
					AND buskey.[Company_code]	= SRC.[COMPANY_CODE])		--Must be an individual
		AND SRC.Row_ID>@START_VAL_EXTN_AGNT
		AND SRC.Row_ID<=@END_VAL_EXTN_AGNT
	GROUP BY SRC.[POLICY_NUMBER]
		, SRC.[COMPANY_CODE];
	--Retrieve all new BALANCE records (only the latest record)
	;WITH LAST_SRC (RN, AGENT_NUMBER, COMPANY_CODE)
		AS
		(SELECT ROW_NUMBER() OVER (PARTITION BY [AGENT_NUMBER], [COMPANY_CODE] ORDER BY [LAST_CHANGE_DATE] DESC, [LAST_CHANGE_TIME] DESC) AS RN
			, [AGENT_NUMBER]
			, [COMPANY_CODE]
		FROM [EDW_DataLake].[lifepro_v].[BALC_Curr_Vw]
		WHERE	Row_ID>@START_VAL_BACL
			AND	Row_ID<=@END_VAL_BALC)
	INSERT	[work].[tmp_Producer_Bus_Key]
		([Agent_Number]
		, [Company_code])
	SELECT	SRC.[AGENT_NUMBER]												
		, SRC.[COMPANY_CODE]
	FROM LAST_SRC AS SRC
	WHERE NOT EXISTS (SELECT 1 FROM [work].[tmp_Producer_Bus_Key] AS DEST 
				WHERE DEST.Agent_Number = SRC.[AGENT_NUMBER] 
					AND DEST.Company_code = SRC.COMPANY_CODE)
		AND EXISTS (SELECT 1 FROM [work].[stage_sf_Producer_Bus_Key] AS SRC 
				WHERE SRC.[Agent_Number]	= SRC.Agent_Number
					AND SRC.[Company_code]	= SRC.[COMPANY_CODE])			--Must be an individual
		AND SRC.RN = 1;														--Pick the lastest version

	END;
	----Retrieve all new MGMT_J records
	--;WITH LAST_SRC (RN, AGENT_NUMBER, COMPANY_CODE)
	--	AS
	--	(SELECT ROW_NUMBER() OVER (PARTITION BY [AGENT_NUMBER], [COMPANY_CODE] ORDER BY [DXTimestamp] DESC) AS RN
	--		, [AGENT_NUMBER]
	--		, [COMPANY_CODE]
	--	FROM [EDW_DataLake].[lifepro_v].[MGMT_J_Curr_Vw]
	--	WHERE	Row_ID>@START_VAL_MGMTJ
	--		AND	Row_ID<=@END_VAL_MGMTJ)
	--INSERT	[work].[tmp_Producer_Bus_Key]
	--	([Agent_Number]
	--	, [Company_code])
	--SELECT	SRC.[AGENT_NUMBER]												
	--	, SRC.[COMPANY_CODE]
	--FROM LAST_SRC AS SRC
	--WHERE NOT EXISTS (SELECT 1 FROM [work].[tmp_Producer_Bus_Key] AS DEST 
	--			WHERE DEST.Agent_Number = SRC.[AGENT_NUMBER] 
	--				AND DEST.Company_code = SRC.COMPANY_CODE)
	--	AND EXISTS (SELECT 1 FROM [work].[stage_sf_Producer_Bus_Key] AS SRC 
	--			WHERE SRC.[Agent_Number]	= SRC.Agent_Number
	--				AND SRC.[Company_code]	= SRC.[COMPANY_CODE])			--Must be an individual
	--	AND SRC.RN = 1;														--Pick the lastest version


	--Retrieve hierarchy records
	--Get lowest hierarchy record
	;WITH LAST_RECORD
		AS
			(SELECT ROW_NUMBER() OVER(PARTITION BY src.AGENT_NUMBER, src.COMPANY_CODE ORDER BY COALESCE(src.STOP_DATE, '9999-12-31') DESC) AS RN
				, SRC.SysData, SRC.AGENT_NUMBER
			FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] AS SRC
			)
	INSERT	[work].[tmp_Producer_Relationship]
		([AGENT_ID], [Agent_Number])
	SELECT	LAST_RECORD.SysData, AGENT_NUMBER
	FROM	LAST_RECORD
	WHERE	LAST_RECORD.RN = 1;
	
	--Get top level
	UPDATE DEST
		SET DEST.[ROOT_ID] = HIER.SysData
	FROM	[work].[tmp_Producer_Relationship] AS DEST 
		INNER JOIN [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] AS PRODUCER ON
			DEST.[AGENT_ID]=PRODUCER.SysData
		LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] AS HIER ON
			PRODUCER.HIERARCHY_AGENT = HIER.AGENT_NUMBER
			AND PRODUCER.COMPANY_CODE = HIER.COMPANY_CODE
			--AND PRODUCER.HIERARCHY_MARKET_CODE = HIER.MARKETING_CODE
			--AND PRODUCER.HIERARCHY_AGENT_LEVEL = HIER.AGENT_LEVEL
			--AND COALESCE(PRODUCER.STOP_DATE,'9999-12-31') = COALESCE(HIER.STOP_DATE,'9999-12-31');



	--Get root level
	--;WITH  HIER(ROOT_ID, AGENT_ID, Hierarchy_id)
	--	AS
 --       (SELECT	tmp.AGENT_ID
	--		, tmp.AGENT_ID
	--		, CAST(NULL AS BIGINT)
	--	FROM	[work].[tmp_Producer_Relationship] AS tmp
	--	WHERE TMP.UPLINE_ID IS NULL													--Top most level
	--	UNION ALL
	--	SELECT (HIER.ROOT_ID + 0)
	--		, SRC.AGENT_ID
	--		, SRC.UPLINE_ID
	--	FROM [work].[tmp_Producer_Relationship] AS src
	--		INNER JOIN HIER ON
	--			HIER.AGENT_ID = SRC.UPLINE_ID)
	--UPDATE DEST
	--SET		ROOT_ID = CASE WHEN HIER.AGENT_ID = HIER.ROOT_ID THEN null 
	--					ELSE HIER.ROOT_ID
	--				END
	--FROM	[work].[tmp_Producer_Relationship] AS DEST
	--	INNER JOIN HIER ON
	--		HIER.AGENT_ID = DEST.AGENT_ID;


SELECT @Rows = SUM(st.row_count) FROM    sys.dm_db_partition_stats st WHERE  object_name(object_id) = 'tmp_Producer_Bus_Key' AND OBJECT_SCHEMA_NAME(OBJECT_ID) = 'work' AND (index_id < 2);          
UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;      
		
/*END: Populate temporary objects*/
/* START: populate the mapping objects */
if (1=1)
	BEGIN
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Producer:Update Mappings');
		SELECT @LOGID = @@IDENTITY;

		--update existing records
		;WITH HIER 
			AS
			(SELECT MAX([SYSDATA]) AS AGENT_ID
				, AGENT_NUMBER
				, COMPANY_CODE
			FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] 
			GROUP BY AGENT_NUMBER
				, COMPANY_CODE)
		UPDATE	DEST
		SET		[MODIFIED_DT]							= @PROCESS_DT
				, [MAPPINGCONTACT_SALESFORCEID]			= CONTACT.[SALESFORCE_ID]
				, [MAPPINGACCOUNT_SALESFORCEID]			= ACCOUNT.[SALESFORCE_ID]
				, [VERSION_ID]							= AGENT.VERSION_ID
				, [AGENT_COMPANYCODE]					= AGENT.COMPANY_CODE
				, [TMPPRODUCERBUSYKEY_AGENTNUMBER]		= SRC.[Agent_Number]
				, [AGENT_STATUSCODE]					= AGENT.[Status_Code]
				, [HIER_STARTDATE]						= CASE WHEN HIERALL.[START_DATE]>'12/31/4000' OR HIERALL.[START_DATE] < '1/1/1700' THEN NULL ELSE HIERALL.[START_DATE] END
				, [HIER_ENDDATE]						= CASE WHEN HIERALL.[STOP_DATE]>'12/31/4000' OR HIERALL.[STOP_DATE] < '1/1/1700' THEN NULL ELSE HIERALL.[STOP_DATE] END
				, [AGENT_NAMEID]						= AGENT.[Name_ID]
				, [PRODUCERRELTATIONSHIP_AGENTSYSDATA]	= RELATION.AGENT_ID
				, [PRODUCERRELATHIONSHIP_HIERSYSDATA]	= RELATION.ROOT_ID
		FROM	[salesforce].[mapping_Producer] AS DEST
				INNER JOIN [work].[tmp_Producer_Bus_Key] AS SRC ON	
					SRC.Agent_Number = DEST.[TMPPRODUCERBUSYKEY_AGENTNUMBER]
					AND SRC.Company_code = DEST.[AGENT_COMPANYCODE]
				INNER JOIN [work].[stage_sf_Producer_Bus_Key] as BUSKEY ON
					SRC.[Agent_Number] = BUSKEY.Agent_Number AND
					SRC.[Company_code] = BUSKEY.Company_code
				INNER JOIN HIER ON
					HIER.AGENT_NUMBER = SRC.Agent_Number
					AND HIER.COMPANY_CODE = SRC.Company_code
				INNER JOIN [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw]  AS HIERALL ON	
					HIERALL.[SysData] = HIER.AGENT_ID
				INNER JOIN [work].[tmp_Producer_Relationship] AS RELATION ON	
					RELATION.AGENT_ID = HIER.AGENT_ID
				INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGENT ON
					AGENT.[AGENT_NUMBER] = SRC.Agent_Number
					AND AGENT.[COMPANY_CODE]  = SRC.Company_code
				LEFT OUTER JOIN [salesforce].[mapping_contact] AS CONTACT ON	 
					TRY_CAST(CONTACT.[NAMERECORD_SSN] AS INT) = BUSKEY.SSN AND
					CONTACT.AGENTRECORD_AGENTNUMBER = BUSKEY.Agent_Number AND
					CONTACT.AGENTRECORD_COMPANY_CODE = BUSKEY.Company_code
				LEFT OUTER JOIN [salesforce].[mapping_account] AS ACCOUNT ON	 
					TRY_CAST(ACCOUNT.[NAMERECORD_SSN] AS INT) = BUSKEY.SSN AND
					ACCOUNT.AGENTRECORD_AGENTNUMBER = BUSKEY.Agent_Number AND
					ACCOUNT.AGENTRECORD_COMPANYCODE = BUSKEY.Company_code
				LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[EXTN_AGTT_Curr_Vw] AS EXTN ON	
					EXTN.POLICY_NUMBER = SRC.Agent_Number
					AND EXTN.COMPANY_CODE = SRC.Company_code


		SELECT @ROWS = @@ROWCOUNT;
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;

		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AdvisorContact:Insert Mappings');
		SELECT @LOGID = @@IDENTITY;
		--Insert new records
		;WITH HIER 
			AS
			(SELECT MAX([SYSDATA]) AS AGENT_ID
				, AGENT_NUMBER
				, COMPANY_CODE
			FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] 
			GROUP BY AGENT_NUMBER
				, COMPANY_CODE)
		INSERT 	[salesforce].[mapping_Producer] 
			( [Created_dt]
			, [MODIFIED_DT]
			, [MAPPINGCONTACT_SALESFORCEID]
			, [MAPPINGACCOUNT_SALESFORCEID]
			, [VERSION_ID]
			, [AGENT_COMPANYCODE]
			, [TMPPRODUCERBUSYKEY_AGENTNUMBER]
			, [AGENT_STATUSCODE]
			, [HIER_STARTDATE]						
			, [HIER_ENDDATE]						
			, [AGENT_NAMEID]						
			, [PRODUCERRELTATIONSHIP_AGENTSYSDATA]	
			, [PRODUCERRELATHIONSHIP_HIERSYSDATA]	
			) 
		SELECT
			@PROCESS_DT		--create date
			, @PROCESS_DT	--modified date
			, CONTACT.[SALESFORCE_ID]
			, ACCOUNT.[SALESFORCE_ID]
			, AGENT.VERSION_ID
			, AGENT.[COMPANY_CODE]
			, SRC.[Agent_Number]
			, AGENT.[STATUS_CODE]												--CX - 1691
			, CASE WHEN HIERALL.[START_DATE]>'12/31/4000' OR HIERALL.[START_DATE] < '1/1/1700' THEN NULL ELSE HIERALL.[START_DATE] END
			, CASE WHEN HIERALL.[STOP_DATE]>'12/31/4000' OR HIERALL.[STOP_DATE] < '1/1/1700' THEN NULL ELSE HIERALL.[STOP_DATE] END
			, AGENT.[Name_ID]
			, RELATION.AGENT_ID
			, RELATION.ROOT_ID
		FROM	[work].[tmp_Producer_Bus_Key] AS SRC 
				INNER JOIN [work].[stage_sf_Producer_Bus_Key] as BUSKEY ON
					SRC.[Agent_Number] = BUSKEY.Agent_Number AND
					SRC.[Company_code] = BUSKEY.Company_code
				INNER JOIN HIER ON
					HIER.AGENT_NUMBER = SRC.Agent_Number
					AND HIER.COMPANY_CODE = SRC.Company_code
				INNER JOIN [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw]  AS HIERALL ON	
					HIERALL.[SysData] = HIER.AGENT_ID
				INNER JOIN [work].[tmp_Producer_Relationship] AS RELATION ON	
					RELATION.AGENT_ID = HIER.AGENT_ID
				INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGENT ON
					AGENT.[AGENT_NUMBER] = SRC.Agent_Number
					AND AGENT.[COMPANY_CODE]  = SRC.Company_code
				LEFT OUTER JOIN [salesforce].[mapping_contact] AS CONTACT ON	 
					TRY_CAST(CONTACT.[NAMERECORD_SSN] AS INT) = BUSKEY.SSN AND
					CONTACT.AGENTRECORD_AGENTNUMBER = BUSKEY.Agent_Number AND
					CONTACT.AGENTRECORD_COMPANY_CODE = BUSKEY.Company_code
				LEFT OUTER JOIN [salesforce].[mapping_account] AS ACCOUNT ON	 
					TRY_CAST(ACCOUNT.[NAMERECORD_SSN] AS INT) = BUSKEY.SSN AND
					ACCOUNT.AGENTRECORD_AGENTNUMBER = BUSKEY.Agent_Number AND
					ACCOUNT.AGENTRECORD_COMPANYCODE = BUSKEY.Company_code
				LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[EXTN_AGTT_Curr_Vw] AS EXTN ON	
					EXTN.POLICY_NUMBER = SRC.Agent_Number
					AND EXTN.COMPANY_CODE = SRC.Company_code
		WHERE NOT EXISTS(SELECT 1 FROM [salesforce].[mapping_Producer] AS DEST WHERE DEST.[TMPPRODUCERBUSYKEY_AGENTNUMBER] = SRC.Agent_Number AND DEST.[AGENT_COMPANYCODE] = SRC.[Company_code]);
		

	END
/* END: populate the mapping objects */
/*START: If there are any new or changed entries in LifePro data lake, update Producer record */
IF EXISTS(SELECT 1 FROM [work].[tmp_Producer_Bus_Key])
	BEGIN;
 
 INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Producer:Update Staging');          
 SELECT @LOGID = @@IDENTITY;         

		--update existing records
		;WITH HIER 
			AS
			(SELECT MAX([SYSDATA]) AS AGENT_ID
				, AGENT_NUMBER
				, COMPANY_CODE
			FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] 
			GROUP BY AGENT_NUMBER
				, COMPANY_CODE)
		, BALANCE 
			AS
			(SELECT ROW_NUMBER() OVER (PARTITION BY BALC.[AGENT_NUMBER], BALC.[COMPANY_CODE] ORDER BY BALC.[LAST_CHANGE_DATE] DESC, BALC.[LAST_CHANGE_TIME] DESC) AS RN
				, BALC.[SysData]
				, BALC.[AGENT_NUMBER]
				, BALC.[COMPANY_CODE]
			FROM [EDW_DataLake].[lifepro_v].[BALC_Curr_Vw] AS BALC
			WHERE EXISTS (SELECT 1 FROM [work].[tmp_Producer_Bus_Key] AS TMP WHERE TMP.Agent_Number = BALC.AGENT_NUMBER AND TMP.Company_code = BALC.COMPANY_CODE))
		UPDATE	DEST
		SET		[ContactID]							= CONTACT.[SALESFORCE_ID]
				, [Account__c]						= ACCOUNT.[SALESFORCE_ID]
				, [Name]							= SRC.[Agent_Number]
				, [Type]							= AGENT.[Status_Code]			--CX - 1691
				, [Contract_Date__c]				= CASE WHEN AGENT.[Contract_Date]>'12/31/4000' OR AGENT.[Contract_Date] < '1/1/1700' THEN NULL ELSE AGENT.[CONTRACT_DATE] END
				, [Passcode__c]						= EXTN.[AGENT_PASSWORD]	
				, [Signing_Agent__c]				= HIERALL.[SA_AGENT]	
				, [Company_Code__c]					= SRC.[Company_code]
				, [Region__c]						= HIERALL.[REGION_CODE]
				, [Regular_Qualifying_Premium__c]	= NULL							--Not defined for W1
				, [Fax__c]							= NULL							--Not defined for W1
				, [Phone__c]						= NULL							--Not defined for W1
				, [Status]							= AGENT.[Status_Code]
				, [Start_Date__c]					= CASE WHEN HIERALL.[START_DATE]>'12/31/4000' OR HIERALL.[START_DATE] < '1/1/1700' THEN NULL ELSE HIERALL.[START_DATE] END
				, [End_Date__c]						= CASE WHEN HIERALL.[STOP_DATE]>'12/31/4000' OR HIERALL.[STOP_DATE] < '1/1/1700' THEN NULL ELSE HIERALL.[STOP_DATE] END
				, [Name_Id__c]						= AGENT.[Name_ID]
				, [Account_Name_Id__c]				= ACCOUNT.[NAMERECORD_NAMEID]
				, [Contact_Name_Id__c]				= CONTACT.[NAMERECORD_NAMEID]
				, [Debit_Balance__c]				= BLC.[COMMISSION_ON_HOLD]
				, [Status_Change_Reason__c]			= agent.[REASON_CODE]			--CX-1691
				, [Modified_dt]						= @PROCESS_DT
				, [Status_Reason_Description__c]	= MGMT.[DESCRIPTION]
		FROM	[salesforce].[Producer] AS DEST
				INNER JOIN [work].[tmp_Producer_Bus_Key] AS SRC ON	
					SRC.Agent_Number = DEST.[Name]
					AND SRC.Company_code = DEST.[Company_Code__c]
				INNER JOIN [work].[stage_sf_Producer_Bus_Key] as BUSKEY ON
					SRC.[Agent_Number] = BUSKEY.Agent_Number AND
					SRC.[Company_code] = BUSKEY.Company_code
				INNER JOIN HIER ON
					HIER.AGENT_NUMBER = SRC.Agent_Number
					AND HIER.COMPANY_CODE = SRC.Company_code
				INNER JOIN [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw]  AS HIERALL ON	
					HIERALL.[SysData] = HIER.AGENT_ID
				INNER JOIN [work].[tmp_Producer_Relationship] AS RELATION ON	
					RELATION.AGENT_ID = HIER.AGENT_ID
				INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGENT ON
					AGENT.[AGENT_NUMBER] = SRC.Agent_Number
					AND AGENT.[COMPANY_CODE]  = SRC.Company_code
				LEFT OUTER JOIN [salesforce].[mapping_contact] AS CONTACT ON	 
					TRY_CAST(CONTACT.[NAMERECORD_SSN] AS INT) = BUSKEY.SSN AND
					CONTACT.AGENTRECORD_AGENTNUMBER = BUSKEY.Agent_Number AND
					CONTACT.AGENTRECORD_COMPANY_CODE = BUSKEY.Company_code
				LEFT OUTER JOIN [salesforce].[mapping_account] AS ACCOUNT ON	 
					TRY_CAST(ACCOUNT.[NAMERECORD_SSN] AS INT) = BUSKEY.SSN AND
					ACCOUNT.AGENTRECORD_AGENTNUMBER = BUSKEY.Agent_Number AND
					ACCOUNT.AGENTRECORD_COMPANYCODE = BUSKEY.Company_code
				LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[EXTN_AGTT_Curr_Vw] AS EXTN ON	
					EXTN.POLICY_NUMBER = SRC.Agent_Number
					AND EXTN.COMPANY_CODE = SRC.Company_code
				LEFT OUTER JOIN BALANCE ON
					BALANCE.AGENT_NUMBER = SRC.Agent_Number
					AND BALANCE.COMPANY_CODE = SRC.Company_code
					AND BALANCE.RN = 1
				LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[BALC_Curr_Vw] AS BLC ON
					BLC.SysData = BALANCE.SysData
					AND BALANCE.RN = 1
				LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[MGMT_MNDRPG_Curr_Vw] AS MGMT ON
					MGMT.RECORD_TYPE = 'R' 
					AND MGMT.COMPANY_CODE = SRC.Company_code
					AND MGMT.REASON_CODE = AGENT.REASON_CODE
					AND MGMT.REASON_STATUS = AGENT.STATUS_CODE;
				--LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[MGMT_J_Curr_Vw] AS MGMTJ ON --mapping was created for Status change reason, but there is no REASON_CODE field in the extension
				--	MGMTJ.AGENT_NUMBER = SRC.Agent_Number
				--	AND MGMTJ.COMPANY_CODE = SRC.Company_code
				--	AND MGMTJ.RECORD_TYPE = 'R'
			--SELECT REASON_CODE, STATUS_CODE, COMPANY_CODE FROM  [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw]		
			--SELECT * FROM [EDW_DataLake].[lifepro_v].[MGMT_MNDRPG_Curr_Vw] WHERE RECORD_TYPE = 'R'

SELECT @ROWS = @@ROWCOUNT;          
UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;     

INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Producer:Insert Staging');          
SELECT @LOGID = @@IDENTITY;         


		--Insert new records
		;WITH HIER 
			AS
			(SELECT MAX([SYSDATA]) AS AGENT_ID
				, AGENT_NUMBER
				, COMPANY_CODE
			FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] 
			GROUP BY AGENT_NUMBER
				, COMPANY_CODE)
		, BALANCE 
			AS
			(SELECT ROW_NUMBER() OVER (PARTITION BY BALC.[AGENT_NUMBER], BALC.[COMPANY_CODE] ORDER BY BALC.[LAST_CHANGE_DATE] DESC, BALC.[LAST_CHANGE_TIME] DESC) AS RN
				, BALC.[SysData]
				, BALC.[AGENT_NUMBER]
				, BALC.[COMPANY_CODE]
			FROM [EDW_DataLake].[lifepro_v].[BALC_Curr_Vw] AS BALC
			WHERE EXISTS (SELECT 1 FROM [work].[tmp_Producer_Bus_Key] AS TMP WHERE TMP.Agent_Number = BALC.AGENT_NUMBER AND TMP.Company_code = BALC.COMPANY_CODE))
		INSERT 	[salesforce].[Producer] 
			([ContactID]
			, [Account__c]
			, [Name]
			, [Type]
			, [Contract_Date__c]
			, [Passcode__c]
			, [Signing_Agent__c]
			, [Company_Code__c]
			, [Region__c]
			, [Regular_Qualifying_Premium__c]
			, [Fax__c]
			, [Phone__c]
			, [Status]
			, [Start_Date__c]
			, [End_Date__c]
			, [Name_Id__c]
			, [Account_Name_Id__c]
			, [Contact_Name_Id__c]
			, [Debit_Balance__c]
			, [Status_Change_Reason__c]
			, [Created_dt]
			, [Status_Reason_Description__c]
			) 
		SELECT	
			CONTACT.[SALESFORCE_ID]
			, ACCOUNT.[SALESFORCE_ID]
			, SRC.[Agent_Number]
			, AGENT.[STATUS_CODE]												--CX - 1691
			, CASE WHEN AGENT.[Contract_Date]>'12/31/4000' OR AGENT.[Contract_Date] < '1/1/1700' THEN NULL ELSE AGENT.[CONTRACT_DATE] END
			, EXTN.[AGENT_PASSWORD]	
			, HIERALL.[SA_AGENT]	
			, SRC.[Company_code]
			, HIERALL.[REGION_CODE]
			, NULL	AS 	[Regular_Qualifying_Premium__c]							--Not defined for W1
			, NULL	AS	[Fax__c]												--Not defined for W1
			, NULL	AS	[Phone__c]												--Not defined for W1
			, AGENT.[STATUS_CODE]
			, CASE WHEN HIERALL.[START_DATE]>'12/31/4000' OR HIERALL.[START_DATE] < '1/1/1700' THEN NULL ELSE HIERALL.[START_DATE] END
			, CASE WHEN HIERALL.[STOP_DATE]>'12/31/4000' OR HIERALL.[STOP_DATE] < '1/1/1700' THEN NULL ELSE HIERALL.[STOP_DATE] END
			, AGENT.[Name_ID]
			, ACCOUNT.[NAMERECORD_NAMEID]
			, CONTACT.[NAMERECORD_NAMEID]
			, BLC.[COMMISSION_ON_HOLD]
			, agent.[REASON_CODE]												--CX - 1691
			, @PROCESS_DT
			, MGMT.[DESCRIPTION]
		FROM	[work].[tmp_Producer_Bus_Key] AS SRC 
				INNER JOIN [work].[stage_sf_Producer_Bus_Key] as BUSKEY ON
					SRC.[Agent_Number] = BUSKEY.Agent_Number AND
					SRC.[Company_code] = BUSKEY.Company_code
				INNER JOIN HIER ON
					HIER.AGENT_NUMBER = SRC.Agent_Number
					AND HIER.COMPANY_CODE = SRC.Company_code
				INNER JOIN [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw]  AS HIERALL ON	
					HIERALL.[SysData] = HIER.AGENT_ID
				INNER JOIN [work].[tmp_Producer_Relationship] AS RELATION ON	
					RELATION.AGENT_ID = HIER.AGENT_ID
				INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGENT ON
					AGENT.[AGENT_NUMBER] = SRC.Agent_Number
					AND AGENT.[COMPANY_CODE]  = SRC.Company_code
				LEFT OUTER JOIN [salesforce].[mapping_contact] AS CONTACT ON	 
					TRY_CAST(CONTACT.[NAMERECORD_SSN] AS INT) = BUSKEY.SSN AND
					CONTACT.AGENTRECORD_AGENTNUMBER = BUSKEY.Agent_Number AND
					CONTACT.AGENTRECORD_COMPANY_CODE = BUSKEY.Company_code
				LEFT OUTER JOIN [salesforce].[mapping_account] AS ACCOUNT ON	 
					TRY_CAST(ACCOUNT.[NAMERECORD_SSN] AS INT) = BUSKEY.SSN AND
					ACCOUNT.AGENTRECORD_AGENTNUMBER = BUSKEY.Agent_Number AND
					ACCOUNT.AGENTRECORD_COMPANYCODE = BUSKEY.Company_code
				LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[EXTN_AGTT_Curr_Vw] AS EXTN ON	
					EXTN.POLICY_NUMBER = SRC.Agent_Number
					AND EXTN.COMPANY_CODE = SRC.Company_code
				LEFT OUTER JOIN BALANCE ON
					BALANCE.AGENT_NUMBER = SRC.Agent_Number
					AND BALANCE.COMPANY_CODE = SRC.Company_code
					AND BALANCE.RN = 1
				LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[BALC_Curr_Vw] AS BLC ON
					BLC.SysData = BALANCE.SysData
					AND BALANCE.RN = 1
				LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[MGMT_MNDRPG_Curr_Vw] AS MGMT ON
					MGMT.RECORD_TYPE = 'R' 
					AND MGMT.COMPANY_CODE = SRC.Company_code
					AND MGMT.REASON_CODE = AGENT.REASON_CODE
					AND MGMT.REASON_STATUS = AGENT.STATUS_CODE
		WHERE NOT EXISTS(SELECT 1 FROM [salesforce].[Producer] AS DEST WHERE DEST.[Name] = SRC.Agent_Number AND DEST.[Company_Code__c] = SRC.[Company_code]);
		
SELECT @ROWS = @@ROWCOUNT;          
UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;     

		--update settings
		UPDATE SETTINGS SET SETTING_VALUE = @END_VAL_HIER FROM [EDW_Audit].[dbo].[Delta_Settings]  AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_HIER AND SETTING_MODULE = @SETTING_MODULE;
		UPDATE SETTINGS SET SETTING_VALUE = @END_VAL_AGNT FROM [EDW_Audit].[dbo].[Delta_Settings]  AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_AGNT AND SETTING_MODULE = @SETTING_MODULE;
		UPDATE SETTINGS SET SETTING_VALUE = @END_VAL_EXTN_AGNT FROM [EDW_Audit].[dbo].[Delta_Settings]  AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_EXTN_AGNT AND SETTING_MODULE = @SETTING_MODULE;
		UPDATE SETTINGS SET SETTING_VALUE = @END_VAL_NALK FROM [EDW_Audit].[dbo].[Delta_Settings]  AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_NALK AND SETTING_MODULE = @SETTING_MODULE;
		UPDATE SETTINGS SET SETTING_VALUE = @END_VAL_BALC FROM [EDW_Audit].[dbo].[Delta_Settings]  AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_BALC AND SETTING_MODULE = @SETTING_MODULE;
		END;
	/*END: Update staging table with new records */


    --Logging          
 UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;         

END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();

--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Producer:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;            

RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;


/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Product]    Script Date: 8/23/2021 2:08:08 PM ******/
SET ANSI_NULLS ON





GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Producer]    Script Date: 5/17/2022 2:04:43 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--SELECT * FROM EDW_Audit.dbo.Process_Log
CREATE       PROCEDURE  [salesforce].[usp_Upsert_Producer]

AS
BEGIN;
-- =============================================
/*																							
 -- Author: 			Anastasia Vogelaar
 -- CreationDate: 		2021-07-21
 -- Version: 			0.1.0
 -- Description: 		Retrieve all unqique Producer records records 
 --						Bus key - Agent Number + Company Code
 --						Only get Agents that are marked as individual (not business)
 --						NAME_Curr_Vw.NAME_FORMAT_CODE  ='I'
 
 -- Change Log: 		 
 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		9/20/2021
 -- Version:			0.1.1
 -- Description:		Added reason code pick list values CX - 1691

 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		10/01/2021
 -- Version:			0.1.2
 -- Description:		Added [Status_Reason_Description__c]
  
 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		12/17/2021
 -- Version:			0.1.3
 -- Description:		Added [Status_Reason_Description__c]

 -- Modified By:		Darin Baarda
 -- Modified Date:		01/20/2022
 -- Version:			0.1.4
 -- Description:		Added logging

 -- Modified By:		Darin Baarda
 -- Modified Date:		02/02/2022
 -- Version:			0.1.5
 -- Description:		add mapping table and logic to group by ssn for contacts

 -- Modified By:		Darin Baarda
 -- Modified Date:		02/14/2022
 -- Version:			0.1.6
 -- Description:		changed logic for accounts to use mapping table not upline


 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		02/18/2022
 -- Version:			0.1.7
 -- Description:		performance tuning:
						- Changed PK on [work].[stage_sf_Producer_Bus_Key]
						- Altered temp table data types to match Data Lake
						- Modified Producer refresh to Update/Insert/Delete instead of Merge
						- Removed relationship reference
						- Added delta settings for NAME record
						- Removed mapping_Producer logic, since it's not used yet and will need 
							to be reconfigured for bi-directional
						- Removed hierarchy retrieval since Producer record no longer displays 
							top most parent account
						- Changed contact join to only look at SSN
						- Changed account join to only look at SSN
						- Limited Balance join to CTE

 -- Modified By:		Jason Rippel
 -- Modified Date:		04/21/2022
 -- Version:			0.1.8
 -- Description:		Added Agent Paperless Annual Statements and 11 month summary:
                        - added Delta check for EXTN_NADRNA
						- added Temp table to retrieve the latest record for each NAME_ID analogous to Account_Person
						- Added Paperless_Annual_Statement__c and Paperless_11_Month_Summary__c to update and insert statements
						- Updated delta settings script to include the latest value from extn_nadrna
 */


 
 -- Full reload:
--DECLARE @SETTING_NAME_HIER					NVARCHAR(50) = 'SYNC_Producer_HIER_CURR_VW';
--DECLARE @SETTING_NAME_AGNT					NVARCHAR(50) = 'SYNC_Producer_AGNT_CURR_VW';
--DECLARE @SETTING_NAME_EXTN_AGNT				NVARCHAR(50) = 'SYNC_Producer_EXTN_AGNT_CURR_VW';
--DECLARE @SETTING_NAME_NALK					NVARCHAR(50) = 'SYNC_Producer_NALK_CURR_VW';
--DECLARE @SETTING_NAME_BALC					NVARCHAR(50) = 'SYNC_Producer_BALC_CURR_VW';
--DECLARE @SETTING_NAME_NM						NVARCHAR(50) = 'SYNC_Producer_NAME_CURR_VW';
--DECLARE @SETTING_NAME_EXTN_NADRNA	            NVARCHAR(50) = 'SYNC_Producer_EXTN_NADRNA_CURR_VW';
--DECLARE @SETTING_MODULE						NVARCHAR(50) = 'SF_SYNC';
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings]  AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_HIER AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings]  AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_AGNT AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings]  AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_EXTN_AGNT AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings]  AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_NALK AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings]  AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_BALC AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings]  AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_NM AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings]  AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_EXTN_NADRNA AND SETTING_MODULE = @SETTING_MODULE;
--INSERT [EDW_Audit].[dbo].[Delta_Settings] (Setting_Name, Setting_Module, Setting_Value) VALUES (@SETTING_NAME_MGMTJ, @SETTING_MODULE, 0)
--  (@SETTING_NAME_HIER, @SETTING_MODULE,0)
--, (@SETTING_NAME_AGNT, @SETTING_MODULE,0)
--, (@SETTING_NAME_EXTN_AGNT, @SETTING_MODULE,0)
--, (@SETTING_NAME_NALK, @SETTING_MODULE,0)
--, (@SETTING_NAME_NAME, @SETTING_MODULE,0)
--, (@SETTING_NAME_EXTN_NADRNA, @SETTING_MODULE,0);
-- =============================================

SET NOCOUNT ON;
DECLARE @SETTING_NAME_HIER			NVARCHAR(50) = 'SYNC_Producer_HIER_CURR_VW';
DECLARE @SETTING_NAME_AGNT			NVARCHAR(50) = 'SYNC_Producer_AGNT_CURR_VW';
DECLARE @SETTING_NAME_EXTN_AGNT		NVARCHAR(50) = 'SYNC_Producer_EXTN_AGNT_CURR_VW';
DECLARE @SETTING_NAME_NALK			NVARCHAR(50) = 'SYNC_Producer_NALK_CURR_VW';
DECLARE @SETTING_NAME_BALC			NVARCHAR(50) = 'SYNC_Producer_BALC_CURR_VW';
DECLARE @SETTING_NAME_NM			NVARCHAR(50) = 'SYNC_Producer_NAME_CURR_VW';
DECLARE @SETTING_NAME_EXTN_NADRNA	NVARCHAR(50) = 'SYNC_Producer_EXTN_NADRNA_CURR_VW';
DECLARE @SETTING_MODULE				NVARCHAR(50) = 'SF_SYNC';
DECLARE @START_VAL_HIER				BIGINT;
DECLARE @START_VAL_AGNT				BIGINT;
DECLARE @START_VAL_EXTN_AGNT		BIGINT;
DECLARE @START_VAL_NALK				BIGINT;
DECLARE @START_VAL_BACL				BIGINT;
DECLARE @START_VAL_NAME				BIGINT;
DECLARE @START_VAL_NADRNA			BIGINT;
DECLARE @END_VAL_HIER				BIGINT;
DECLARE @END_VAL_AGNT				BIGINT;
DECLARE @END_VAL_EXTN_AGNT			BIGINT;
DECLARE @END_VAL_NALK				BIGINT;
DECLARE @END_VAL_BALC				BIGINT;
DECLARE @END_VAL_NAME				BIGINT;
DECLARE @END_VAL_NADRNA				BIGINT;
--The commented out variables were included for Status_Change_Reason, but the mapping is invalid
--DECLARE @SETTING_NAME_MGMTJ		NVARCHAR(50) = 'SYNC_Producer_MGMTJ_CURR_VW';
--DECLARE @START_VAL_MGMTJ			INT;
--DECLARE @END_VAL_MGMTJ			INT;
DECLARE	@PROCESS_DT					DATETIME2		= CURRENT_TIMESTAMP;

DECLARE @LOGID_START    INT;  --Used for the first log id          
DECLARE @LOGID      INT;  --Used for intermediate log ids          
DECLARE @ROWS      INT;  --Used for logging row counts          

BEGIN TRY
/*START: Assign variable values*/
--Logging          
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Producer:Start/End Indicator');          
SELECT @LOGID_START = @@IDENTITY;       

IF (1=1)
	BEGIN;
	
	SELECT	@START_VAL_AGNT			= CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_AGNT AND Setting_Module = @SETTING_MODULE;
	SELECT	@START_VAL_EXTN_AGNT	= CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_EXTN_AGNT AND Setting_Module = @SETTING_MODULE;
	SELECT	@START_VAL_HIER 		= CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_HIER AND Setting_Module = @SETTING_MODULE;
	SELECT	@START_VAL_NALK			= CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_NALK AND Setting_Module = @SETTING_MODULE;
	SELECT	@START_VAL_BACL			= CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_BALC AND Setting_Module = @SETTING_MODULE;
	SELECT	@START_VAL_NAME			= CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_NM AND Setting_Module = @SETTING_MODULE;
	SELECT	@START_VAL_NADRNA		= CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_EXTN_NADRNA AND Setting_Module = @SETTING_MODULE;
	SELECT	@END_VAL_EXTN_AGNT		= MAX(ROW_ID) FROM [EDW_DataLake].[lifepro_v].[EXTN_AGTT_Curr_Vw];
	SELECT	@END_VAL_AGNT			= MAX(ROW_ID) FROM [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw];
	SELECT	@END_VAL_HIER			= MAX(ROW_ID) FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw];
	SELECT	@END_VAL_NALK			= MAX(ROW_ID) FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw];
	SELECT	@END_VAL_BALC			= MAX(ROW_ID) FROM [EDW_DataLake].[lifepro_v].[BALC_Curr_Vw];
	SELECT	@END_VAL_NAME			= MAX(ROW_ID) FROM [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw];
	SELECT	@END_VAL_NADRNA			= MAX(ROW_ID) FROM [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Curr_Vw];
	END;
/*END: Assign variable values*/
/*START: Create temporary tables*/
IF (1=1)
	BEGIN;

	
	--Table to store all changed records from the parent tables and dependencies
	IF OBJECT_ID (N'work.tmp_Producer_Bus_Key', N'U') IS NOT NULL
		BEGIN;
		TRUNCATE TABLE [work].[tmp_Producer_Bus_Key];
		END;
	ELSE
		BEGIN;
		CREATE TABLE [work].[tmp_Producer_Bus_Key]
			([Agent_Number]		VARCHAR(12) NOT NULL
			, [Company_code]	VARCHAR(2) NOT NULL
			, CONSTRAINT PK_tmp_producer_bus_key PRIMARY KEY CLUSTERED ([Agent_Number], [Company_code])
			);
		END;
	--Table to store hierarchy data
	IF OBJECT_ID (N'work.tmp_Producer_HIER', N'U') IS NOT NULL
		BEGIN;
		TRUNCATE TABLE [work].[tmp_Producer_HIER];
		END;
	ELSE
		BEGIN;
		CREATE TABLE [work].[tmp_Producer_HIER]
			([Agent_Number]		VARCHAR(12) NOT NULL
			, [Company_code]	VARCHAR(2) NOT NULL
			, [REGION_CODE]		VARCHAR(6) NULL
			, [SA_AGENT]		VARCHAR(12) NULL
			, [START_DATE]		DATETIME2 NULL
			, [STOP_DATE]		DATETIME2 NULL
			, CONSTRAINT PK_tmp_producer_HIER PRIMARY KEY CLUSTERED ([Agent_Number], [Company_code])
			);
		END;
	--This table will store IDs of all producers in scope
	IF OBJECT_ID (N'work.stage_sf_Producer_Bus_Key', N'U') IS NULL	
		BEGIN;
		CREATE TABLE [work].[stage_sf_Producer_Bus_Key] 
			([Agent_Number]		VARCHAR(12) NOT NULL
			, [Company_code]	VARCHAR(2) NOT NULL
			, [SSN]				VARCHAR(9) NOT NULL --For retrieving contact record
			, [NAME_ID]			INT NOT NULL		--For retrieving account record
			, CONSTRAINT PK_stage_sf_Producer_Bus_Key PRIMARY KEY CLUSTERED ([Agent_Number], [Company_code])
			);
		END;

	IF OBJECT_ID (N'work.tmp_Producer_NADRNA', N'U') IS NOT NULL
		BEGIN;
			TRUNCATE TABLE [work].[tmp_Producer_NADRNA];
		END;
	ELSE
		BEGIN;
		CREATE	TABLE [work].[tmp_Producer_NADRNA]
			( [NAME_ID] int not null primary key
			, [EXTENSIONRECORDNADR_FILEEXTENSION] varchar(4) NULL
			, [EXTENSIONRECORDNADR_SUBTYPERECORD] varchar(2) NULL
			, [EXTENSIONRECORDNADR_VERSIONID] BIGINT NULL
			, Paperless_Annual_Statement__c bit NULL
			, Paperless_11_Month_Summary__c bit NULL
			);
		END;
	
	END;
/*END: Create temporary tables*/
/*START: Refresh producer list*/
IF (1=1)
	BEGIN;
 
 INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Producer:Refresh producer');          
 SELECT @LOGID = @@IDENTITY;  

	UPDATE SRC
	SET		[SSN] = NM.BUSINESS_TAX_CODE
			, [NAME_ID]	= AGNT.[NAME_ID]
	FROM	[work].[stage_sf_Producer_Bus_Key]  AS SRC
			INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGNT ON
				AGNT.AGENT_NUMBER = SRC.Agent_Number
				AND AGNT.COMPANY_CODE = SRC.Company_code
			INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NM ON
				NM.NAME_ID = AGNT.NAME_ID
	WHERE ((AGNT.Row_ID>@START_VAL_AGNT
			AND AGNT.Row_ID <=@END_VAL_AGNT)
		OR
			(NM.Row_ID > @START_VAL_NAME
			AND NM.Row_ID <= @END_VAL_NAME));

	INSERT	[work].[stage_sf_Producer_Bus_Key] 
		([Agent_Number]		
		, [Company_code]
		, [SSN]	
		, [Name_ID])
	SELECT 
		AGNT.[AGENT_NUMBER]
		, AGNT.[COMPANY_CODE]
		, NM.BUSINESS_TAX_CODE
		, AGNT.[NAME_ID]
	FROM	[EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGNT
			INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NM ON
				AGNT.NAME_ID = NM.NAME_ID
			LEFT OUTER JOIN [work].[stage_sf_Producer_Bus_Key]  AS SRC ON 
				SRC.Agent_Number = AGNT.AGENT_NUMBER
				AND SRC.Company_code = AGNT.COMPANY_CODE
	WHERE	SRC.Agent_Number IS NULL
			AND 
			((AGNT.Row_ID>@START_VAL_AGNT
			AND AGNT.Row_ID <= @END_VAL_AGNT)
			OR
			(NM.Row_ID > @START_VAL_NAME
			AND NM.Row_ID <= @END_VAL_NAME)
			);
	
	SELECT @Rows = SUM(st.row_count) FROM    sys.dm_db_partition_stats st WHERE  object_name(object_id) = 'stage_sf_Producer_Bus_Key' AND OBJECT_SCHEMA_NAME(OBJECT_ID) = 'work' AND (index_id < 2);          
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;      
	
	END;
/*END: Refresh producer list*/
/*START: Populate temporary objects */
IF (1=1)
	BEGIN;

	 INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Producer:Get new and changed records');          
	 SELECT @LOGID = @@IDENTITY;    

	--Retrieve all new agent hierarchy identifiers
	INSERT	[work].[tmp_Producer_Bus_Key]
		([Agent_Number]
		, [Company_code])
	SELECT	HIER.[AGENT_NUMBER]
		, HIER.[COMPANY_CODE]
	FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] AS HIER
	WHERE	EXISTS(SELECT 1 FROM [work].[stage_sf_Producer_Bus_Key] AS SRC 
				WHERE SRC.[Agent_Number]	= HIER.[AGENT_NUMBER]
					AND SRC.[Company_code]	= HIER.[COMPANY_CODE])			--Must be an individual
			AND HIER.Row_ID > @START_VAL_HIER
			AND HIER.Row_ID <= @END_VAL_HIER
	GROUP BY HIER.[AGENT_NUMBER]
		, HIER.[COMPANY_CODE];
	--Retrieve all new agent records
	INSERT	[work].[tmp_Producer_Bus_Key]
		([Agent_Number]
		, [Company_code])
	SELECT	AGNT.[AGENT_NUMBER]
		, AGNT.[COMPANY_CODE]
	FROM [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGNT
	WHERE NOT EXISTS (SELECT 1 FROM [work].[tmp_Producer_Bus_Key] AS DEST 
				WHERE DEST.Agent_Number = AGNT.AGENT_NUMBER 
					AND DEST.Company_code = AGNT.COMPANY_CODE)
		AND EXISTS (SELECT 1 FROM [work].[stage_sf_Producer_Bus_Key] AS SRC 
				WHERE SRC.[Agent_Number]	= AGNT.[AGENT_NUMBER]
					AND SRC.[Company_code]	= AGNT.[COMPANY_CODE])			--Must be an individual
		AND AGNT.Row_ID>@START_VAL_AGNT
		AND AGNT.Row_ID<=@END_VAL_AGNT
	GROUP BY AGNT.[AGENT_NUMBER]
		, AGNT.[COMPANY_CODE];
	--Retrieve all new NALK records
	INSERT	[work].[tmp_Producer_Bus_Key]
		([Agent_Number]
		, [Company_code])
	SELECT	NALK.[AGENT_NUMBER]
		, NALK.[COMPANY_CODE]
	FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] AS NALK
	WHERE NOT EXISTS (SELECT 1 FROM [work].[tmp_Producer_Bus_Key] AS DEST 
				WHERE DEST.Agent_Number = NALK.AGENT_NUMBER 
					AND DEST.Company_code = NALK.COMPANY_CODE)
		AND EXISTS (SELECT 1 FROM [work].[stage_sf_Producer_Bus_Key] AS SRC 
				WHERE SRC.[Agent_Number]	= NALK.[AGENT_NUMBER]
					AND SRC.[Company_code]	= NALK.[COMPANY_CODE])			--Must be an individual
		AND NALK.Row_ID>@START_VAL_NALK
		AND NALK.Row_ID<=@END_VAL_NALK
	GROUP BY NALK.[AGENT_NUMBER]
		, NALK.[COMPANY_CODE];
	--Retrieve all new EXTN_AGNT records
	INSERT	[work].[tmp_Producer_Bus_Key]
		([Agent_Number]
		, [Company_code])
	SELECT	SRC.[POLICY_NUMBER]												--Mislabeled column - both Policy Number and Product ID columns store AGENT_NUM
		, SRC.[COMPANY_CODE]
	FROM [EDW_DataLake].[lifepro_v].[EXTN_AGTT_Curr_Vw] AS SRC
	WHERE NOT EXISTS (SELECT 1 FROM [work].[tmp_Producer_Bus_Key] AS DEST 
				WHERE DEST.Agent_Number = SRC.[POLICY_NUMBER] 
					AND DEST.Company_code = SRC.COMPANY_CODE)
		AND EXISTS (SELECT 1 FROM [work].[stage_sf_Producer_Bus_Key] AS buskey 
				WHERE buskey.[Agent_Number]	= SRC.[POLICY_NUMBER]
					AND buskey.[Company_code]	= SRC.[COMPANY_CODE])		--Must be an individual
		AND SRC.Row_ID>@START_VAL_EXTN_AGNT
		AND SRC.Row_ID<=@END_VAL_EXTN_AGNT
	GROUP BY SRC.[POLICY_NUMBER]
		, SRC.[COMPANY_CODE];
	--Retrieve all new BALANCE records (only the latest record)
	;WITH LAST_SRC (RN, AGENT_NUMBER, COMPANY_CODE)
		AS
		(SELECT ROW_NUMBER() OVER (PARTITION BY [AGENT_NUMBER], [COMPANY_CODE] ORDER BY [LAST_CHANGE_DATE] DESC, [LAST_CHANGE_TIME] DESC) AS RN
			, [AGENT_NUMBER]
			, [COMPANY_CODE]
		FROM [EDW_DataLake].[lifepro_v].[BALC_Curr_Vw]
		WHERE	Row_ID>@START_VAL_BACL
			AND	Row_ID<=@END_VAL_BALC)
	INSERT	[work].[tmp_Producer_Bus_Key]
		([Agent_Number]
		, [Company_code])
	SELECT	SRC.[AGENT_NUMBER]												
		, SRC.[COMPANY_CODE]
	FROM LAST_SRC AS SRC
	WHERE NOT EXISTS (SELECT 1 FROM [work].[tmp_Producer_Bus_Key] AS DEST 
				WHERE DEST.Agent_Number = SRC.[AGENT_NUMBER] 
					AND DEST.Company_code = SRC.COMPANY_CODE)
		AND EXISTS (SELECT 1 FROM [work].[stage_sf_Producer_Bus_Key] AS SRC 
				WHERE SRC.[Agent_Number]	= SRC.Agent_Number
					AND SRC.[Company_code]	= SRC.[COMPANY_CODE])			--Must be an individual
		AND SRC.RN = 1;														--Pick the lastest version
	--Retrieve all new name records
	INSERT	[work].[tmp_Producer_Bus_Key]
		([Agent_Number]
		, [Company_code])
	SELECT	SRC.[AGENT_NUMBER]												
		, SRC.[COMPANY_CODE]
	FROM [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS SRC
		INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NM ON
			NM.NAME_ID = SRC.NAME_ID
	WHERE	NOT EXISTS(SELECT 1 FROM [work].[tmp_Producer_Bus_Key] AS DEST WHERE DEST.Agent_Number = SRC.AGENT_NUMBER AND DEST.Company_code = SRC.COMPANY_CODE)
			AND NM.Row_ID> @START_VAL_NAME 
			AND NM.Row_ID <= @END_VAL_NAME;
	SELECT @Rows = SUM(st.row_count) FROM    sys.dm_db_partition_stats st WHERE  object_name(object_id) = 'tmp_Producer_Bus_Key' AND OBJECT_SCHEMA_NAME(OBJECT_ID) = 'work' AND (index_id < 2);          
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;

	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Producer:Retrieve hierarchy data');          
	SELECT @LOGID = @@IDENTITY; 
	--This will retrieve delta records from Hierarchy
	;WITH HIER
		AS
		(SELECT ROW_NUMBER() OVER (PARTITION BY [AGENT_NUMBER], [COMPANY_CODE] ORDER BY COALESCE([STOP_DATE],'12/31/9999') DESC) AS RN
			, [AGENT_NUMBER]
			, [COMPANY_CODE]
			, CASE WHEN ([START_DATE] >'12/31/4000' OR [START_DATE] < '1/1/1700') THEN NULL ELSE [START_DATE] END	AS [START_DATE]		--Salesforce datetime limitation
			, CASE WHEN ([STOP_DATE] >'12/31/4000' OR [STOP_DATE] < '1/1/1700') THEN NULL ELSE [STOP_DATE] END		AS [STOP_DATE]		--Salesforce datetime limitation
			, [REGION_CODE]
			, [SA_AGENT]
		FROM	[EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] AS HIER
		WHERE	EXISTS (SELECT 1 FROM [work].[tmp_Producer_Bus_Key] AS SRC WHERE SRC.Agent_Number = HIER.AGENT_NUMBER AND SRC.Company_code = HIER.COMPANY_CODE)
		)
	INSERT [work].[tmp_Producer_HIER]
		([Agent_Number]
		, [Company_code]
		, [REGION_CODE]
		, [SA_AGENT]
		, [START_DATE]
		, [STOP_DATE])
	SELECT 
		[Agent_Number]
		, [Company_code]
		, [REGION_CODE]
		, [SA_AGENT]
		, [START_DATE]
		, [STOP_DATE]
			
	FROM	HIER
	WHERE	RN = 1;
	SELECT @ROWS = @@ROWCOUNT;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
	END;

	--Pick all new or changed Name Ids from EXTN_NADRNA_Curr_Vw
	IF @START_VAL_NADRNA < @END_VAL_NADRNA
		BEGIN;
		WITH LAST_NADRNA (RN, NAME_ID, ROW_ID)
			AS
			(SELECT ROW_NUMBER() OVER (PARTITION BY SRC.NAME_ID ORDER BY SRC.[DATE] DESC, SRC.[TIME] DESC)	AS RN --THIS WILL GIVE US ORDER OF THE DATE AND TIME RECORD FOR EACH NAME_ID
			, SRC.NAME_ID
			, SRC.ROW_ID
			 FROM [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Curr_Vw] AS SRC
			 WHERE EXISTS (SELECT 1 FROM [work].[stage_sf_Producer_Bus_Key] AS FIRST_NAME_ID WHERE FIRST_NAME_ID.Name_ID = SRC.NAME_ID) --Only records in scope
			)
			INSERT	 [work].[stage_sf_Producer_Bus_Key]
					([Name_ID])
			SELECT  LAST_NADRNA.NAME_ID
			FROM LAST_NADRNA
			WHERE	RN = 1											--Only last available record for last Name ID
				AND NOT EXISTS(SELECT 1 FROM  [work].[stage_sf_Producer_Bus_Key] AS DEST WHERE DEST.[Name_id] = LAST_NADRNA.[Name_ID])	--Exclude name IDs that are already in the table
				AND (LAST_NADRNA.[Row_ID] > @START_VAL_NADRNA
				 AND LAST_NADRNA.[Row_ID] <=@END_VAL_NADRNA)		--Only changed or new records
			END;

		--Populate Extension records from NADRNA
	   	WITH NADRNA AS
		(SELECT ROW_NUMBER() OVER (PARTITION BY EXTN_NADRNA.NAME_ID ORDER BY EXTN_NADRNA.[DATE] DESC, EXTN_NADRNA.[TIME] DESC)	AS RN --THIS WILL GIVE US ORDER OF THE DATE AND TIME RECORD FOR EACH NAME_ID
				,EXTN_NADRNA.[NAME_ID]			AS	[EXTENSIONRECORDNADR_NAMEID]
				,EXTN_NADRNA.[FILE_EXTENTION]	AS  [EXTENSIONRECORDNADR_FILEEXTENSION]
				,EXTN_NADRNA.[SUB_TYPE_RECORD]	AS  [EXTENSIONRECORDNADR_SUBTYPERECORD]
				,EXTN_NADRNA.[VERSION_ID]		AS	[EXTENSIONRECORDNADR_VERSIONID]
				, CASE TRIM(EXTN_NADRNA.PPRLESS_ANN_STMT) WHEN 'Y' THEN 1 ELSE 0 END		AS Paperless_Annual_Statement__c
				, CASE TRIM(EXTN_NADRNA.PPRLESS_11_MONTH) WHEN 'Y' THEN 1 ELSE 0 END		AS Paperless_11_Month_Summary__c
		FROM [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Curr_Vw] AS EXTN_NADRNA
		WHERE EXISTS (SELECT 1 FROM [work].[stage_sf_Producer_Bus_Key] AS TMP WHERE TMP.Name_ID = EXTN_NADRNA.[NAME_ID])
		)

		INSERT INTO [work].[tmp_Producer_NADRNA]
		 (   NAME_ID
		   , [EXTENSIONRECORDNADR_FILEEXTENSION]
		   , [EXTENSIONRECORDNADR_SUBTYPERECORD]
		   , [EXTENSIONRECORDNADR_VERSIONID]
		   , [Paperless_Annual_Statement__c]
		   , [Paperless_11_Month_Summary__c])

		SELECT  [EXTENSIONRECORDNADR_NAMEID]
		       ,[EXTENSIONRECORDNADR_FILEEXTENSION]	 
			   ,[EXTENSIONRECORDNADR_SUBTYPERECORD]				
			   ,[EXTENSIONRECORDNADR_VERSIONID]	
			   ,Paperless_Annual_Statement__c
			   ,Paperless_11_Month_Summary__c
		FROM NADRNA
		WHERE RN = 1;

/*END: Populate temporary objects */	
	----Retrieve hierarchy records
	----Get lowest hierarchy record
	--;WITH LAST_RECORD
	--	AS
	--		(SELECT ROW_NUMBER() OVER(PARTITION BY src.AGENT_NUMBER, src.COMPANY_CODE ORDER BY COALESCE(src.STOP_DATE, '9999-12-31') DESC) AS RN
	--			, SRC.SysData, SRC.AGENT_NUMBER
	--		FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] AS SRC
	--		)
	--INSERT	[work].[tmp_Producer_Relationship]
	--	([AGENT_ID], [Agent_Number])
	--SELECT	LAST_RECORD.SysData, AGENT_NUMBER
	--FROM	LAST_RECORD
	--WHERE	LAST_RECORD.RN = 1;
	
	----Get top level
	--UPDATE DEST
	--	SET DEST.[ROOT_ID] = HIER.SysData
	--FROM	[work].[tmp_Producer_Relationship] AS DEST 
	--	INNER JOIN [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] AS PRODUCER ON
	--		DEST.[AGENT_ID]=PRODUCER.SysData
	--	LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] AS HIER ON
	--		PRODUCER.HIERARCHY_AGENT = HIER.AGENT_NUMBER
	--		AND PRODUCER.COMPANY_CODE = HIER.COMPANY_CODE
	--		--AND PRODUCER.HIERARCHY_MARKET_CODE = HIER.MARKETING_CODE
	--		--AND PRODUCER.HIERARCHY_AGENT_LEVEL = HIER.AGENT_LEVEL
	--		--AND COALESCE(PRODUCER.STOP_DATE,'9999-12-31') = COALESCE(HIER.STOP_DATE,'9999-12-31');



	--Get root level
	--;WITH  HIER(ROOT_ID, AGENT_ID, Hierarchy_id)
	--	AS
 --       (SELECT	tmp.AGENT_ID
	--		, tmp.AGENT_ID
	--		, CAST(NULL AS BIGINT)
	--	FROM	[work].[tmp_Producer_Relationship] AS tmp
	--	WHERE TMP.UPLINE_ID IS NULL													--Top most level
	--	UNION ALL
	--	SELECT (HIER.ROOT_ID + 0)
	--		, SRC.AGENT_ID
	--		, SRC.UPLINE_ID
	--	FROM [work].[tmp_Producer_Relationship] AS src
	--		INNER JOIN HIER ON
	--			HIER.AGENT_ID = SRC.UPLINE_ID)
	--UPDATE DEST
	--SET		ROOT_ID = CASE WHEN HIER.AGENT_ID = HIER.ROOT_ID THEN null 
	--					ELSE HIER.ROOT_ID
	--				END
	--FROM	[work].[tmp_Producer_Relationship] AS DEST
	--	INNER JOIN HIER ON
	--		HIER.AGENT_ID = DEST.AGENT_ID;


/*START: If there are any new or changed entries in LifePro data lake, update Producer record */
IF EXISTS(SELECT 1 FROM [work].[tmp_Producer_Bus_Key])
	BEGIN;
 
 INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Producer:Update Staging');          
 SELECT @LOGID = @@IDENTITY;         

		--update existing records
		;WITH BALANCE 
			AS
			(SELECT ROW_NUMBER() OVER (PARTITION BY BALC.[AGENT_NUMBER], BALC.[COMPANY_CODE] ORDER BY BALC.[LAST_CHANGE_DATE] DESC, BALC.[LAST_CHANGE_TIME] DESC) AS RN
				, BALC.[SysData]
				, BALC.[AGENT_NUMBER]
				, BALC.[COMPANY_CODE]
				, BALC.[COMMISSION_ON_HOLD]
			FROM [EDW_DataLake].[lifepro_v].[BALC_Curr_Vw] AS BALC
			WHERE EXISTS (SELECT 1 FROM [work].[tmp_Producer_Bus_Key] AS TMP WHERE TMP.Agent_Number = BALC.AGENT_NUMBER AND TMP.Company_code = BALC.COMPANY_CODE))
		UPDATE	DEST
		SET		[ContactID]							= CONTACT.[SALESFORCE_ID]
				, [Account__c]						= ACCOUNT.[SALESFORCE_ID]
				, [Name]							= SRC.[Agent_Number]
				, [Type]							= AGENT.[Status_Code]			--CX - 1691
				, [Contract_Date__c]				= CASE WHEN AGENT.[Contract_Date]>'12/31/4000' OR AGENT.[Contract_Date] < '1/1/1700' THEN NULL ELSE AGENT.[CONTRACT_DATE] END
				, [Passcode__c]						= EXTN.[AGENT_PASSWORD]	
				, [Signing_Agent__c]				= HIER.[SA_AGENT]	
				, [Company_Code__c]					= SRC.[Company_code]
				, [Region__c]						= HIER.[REGION_CODE]
				, [Regular_Qualifying_Premium__c]	= NULL							--Not defined for W1
				, [Fax__c]							= NULL							--Not defined for W1
				, [Phone__c]						= NULL							--Not defined for W1
				, [Status]							= AGENT.[Status_Code]
				, [Start_Date__c]					= HIER.[START_DATE]
				, [End_Date__c]						= HIER.[STOP_DATE]
				, [Name_Id__c]						= AGENT.[Name_ID]
				, [Account_Name_Id__c]				= ACCOUNT.[NAMERECORD_NAMEID]
				, [Contact_Name_Id__c]				= CONTACT.[NAMERECORD_NAMEID]
				, [Debit_Balance__c]				= BALANCE.[COMMISSION_ON_HOLD]
				, [Status_Change_Reason__c]			= agent.[REASON_CODE]			--CX-1691
				, [Paperless_Annual_Statement__c]   = NADRNA.[Paperless_Annual_Statement__c]
				, [Paperless_11_Month_Summary__c]   = NADRNA.[Paperless_11_Month_Summary__c]
				, [Modified_dt]						= CURRENT_TIMESTAMP
				, [Status_Reason_Description__c]	= MGMT.[DESCRIPTION]
		FROM	[salesforce].[Producer] AS DEST 
				INNER JOIN [work].[tmp_Producer_Bus_Key] AS SRC ON	
					SRC.Agent_Number = DEST.[Name]
					AND SRC.Company_code = DEST.[Company_Code__c]
				INNER JOIN [work].[stage_sf_Producer_Bus_Key] as BUSKEY ON
					SRC.[Agent_Number] = BUSKEY.Agent_Number AND
					SRC.[Company_code] = BUSKEY.Company_code
				INNER JOIN [work].[tmp_Producer_HIER] AS HIER ON
					HIER.AGENT_NUMBER = SRC.Agent_Number
					AND HIER.COMPANY_CODE = SRC.Company_code
			    LEFT OUTER JOIN [work].[tmp_Producer_NADRNA] AS NADRNA ON
				    NADRNA.NAME_ID = BUSKEY.NAME_ID
				INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGENT ON
					AGENT.[AGENT_NUMBER] = SRC.Agent_Number
					AND AGENT.[COMPANY_CODE]  = SRC.Company_code
				LEFT OUTER JOIN [salesforce].[mapping_contact] AS CONTACT ON	 
					CONTACT.NAMERECORD_SSN = BUSKEY.SSN
				LEFT OUTER JOIN [salesforce].[mapping_account] AS ACCOUNT ON	 
					ACCOUNT.[NAMERECORD_NAMEID] = BUSKEY.[Name_ID]
				LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[EXTN_AGTT_Curr_Vw] AS EXTN ON	
					EXTN.POLICY_NUMBER = SRC.Agent_Number
					AND EXTN.COMPANY_CODE = SRC.Company_code
				LEFT OUTER JOIN BALANCE ON
					BALANCE.AGENT_NUMBER = SRC.Agent_Number
					AND BALANCE.COMPANY_CODE = SRC.Company_code
					AND BALANCE.RN = 1
				LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[MGMT_MNDRPG_Curr_Vw] AS MGMT ON
					MGMT.RECORD_TYPE = 'R' 
					AND MGMT.COMPANY_CODE = SRC.Company_code
					AND MGMT.REASON_CODE = AGENT.REASON_CODE
					AND MGMT.REASON_STATUS = AGENT.STATUS_CODE;
			
SELECT @ROWS = @@ROWCOUNT;          
UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;     

INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Producer:Insert Staging');          
SELECT @LOGID = @@IDENTITY;         


		--Insert new records
		;WITH BALANCE 
			AS
			(SELECT ROW_NUMBER() OVER (PARTITION BY BALC.[AGENT_NUMBER], BALC.[COMPANY_CODE] ORDER BY BALC.[LAST_CHANGE_DATE] DESC, BALC.[LAST_CHANGE_TIME] DESC) AS RN
				, BALC.[SysData]
				, BALC.[AGENT_NUMBER]
				, BALC.[COMPANY_CODE]
				, BALC.[COMMISSION_ON_HOLD]
			FROM [EDW_DataLake].[lifepro_v].[BALC_Curr_Vw] AS BALC
			WHERE EXISTS (SELECT 1 FROM [work].[tmp_Producer_Bus_Key] AS TMP WHERE TMP.Agent_Number = BALC.AGENT_NUMBER AND TMP.Company_code = BALC.COMPANY_CODE)
			)
		INSERT 	[salesforce].[Producer] 
			([ContactID]
			, [Account__c]
			, [Name]
			, [Type]
			, [Contract_Date__c]
			, [Passcode__c]
			, [Signing_Agent__c]
			, [Company_Code__c]
			, [Region__c]
			, [Regular_Qualifying_Premium__c]
			, [Fax__c]
			, [Phone__c]
			, [Status]
			, [Start_Date__c]
			, [End_Date__c]
			, [Name_Id__c]
			, [Account_Name_Id__c]
			, [Contact_Name_Id__c]
			, [Debit_Balance__c]
			, [Status_Change_Reason__c]
			, [Paperless_Annual_Statement__c]
			, [Paperless_11_Month_Summary__c]
			, [Created_dt]
			, [Status_Reason_Description__c]
			) 
		SELECT	
			CONTACT.[SALESFORCE_ID]
			, ACCOUNT.[SALESFORCE_ID]
			, SRC.[Agent_Number]
			, AGENT.[STATUS_CODE]												--CX - 1691
			, CASE WHEN AGENT.[Contract_Date]>'12/31/4000' OR AGENT.[Contract_Date] < '1/1/1700' THEN NULL ELSE AGENT.[CONTRACT_DATE] END
			, EXTN.[AGENT_PASSWORD]	
			, HIER.[SA_AGENT]	
			, SRC.[Company_code]
			, HIER.[REGION_CODE]
			, NULL	AS 	[Regular_Qualifying_Premium__c]							--Not defined for W1
			, NULL	AS	[Fax__c]												--Not defined for W1
			, NULL	AS	[Phone__c]												--Not defined for W1
			, AGENT.[STATUS_CODE]
			, HIER.[START_DATE]
			, HIER.[STOP_DATE]
			, AGENT.[Name_ID]
			, ACCOUNT.[NAMERECORD_NAMEID]
			, CONTACT.[NAMERECORD_NAMEID]
			, BALANCE.[COMMISSION_ON_HOLD]
			, agent.[REASON_CODE]												--CX - 1691
			, NADRNA.[Paperless_Annual_Statement__c]
			, NADRNA.[Paperless_11_Month_Summary__c]
			, @PROCESS_DT
			, MGMT.[DESCRIPTION]

	FROM [work].[tmp_Producer_Bus_Key] AS SRC 	
				
			INNER JOIN [work].[stage_sf_Producer_Bus_Key] as BUSKEY ON
				SRC.[Agent_Number] = BUSKEY.Agent_Number AND
				SRC.[Company_code] = BUSKEY.Company_code
			INNER JOIN [work].[tmp_Producer_HIER] AS HIER ON
				HIER.AGENT_NUMBER = SRC.Agent_Number
				AND HIER.COMPANY_CODE = SRC.Company_code
			LEFT OUTER JOIN [work].[tmp_Producer_NADRNA] AS NADRNA ON
				NADRNA.NAME_ID = BUSKEY.NAME_ID
			INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGENT ON
				AGENT.[AGENT_NUMBER] = SRC.Agent_Number
				AND AGENT.[COMPANY_CODE]  = SRC.Company_code
			LEFT OUTER JOIN [salesforce].[mapping_contact] AS CONTACT ON	 
				CONTACT.NAMERECORD_SSN = BUSKEY.SSN
			LEFT OUTER JOIN [salesforce].[mapping_account] AS ACCOUNT ON	 
				ACCOUNT.[NAMERECORD_NAMEID] = BUSKEY.Name_ID
			LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[EXTN_AGTT_Curr_Vw] AS EXTN ON	
				EXTN.POLICY_NUMBER = SRC.Agent_Number
				AND EXTN.COMPANY_CODE = SRC.Company_code
			LEFT OUTER JOIN BALANCE ON
				BALANCE.AGENT_NUMBER = SRC.Agent_Number
				AND BALANCE.COMPANY_CODE = SRC.Company_code
				AND BALANCE.RN = 1
			LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[MGMT_MNDRPG_Curr_Vw] AS MGMT ON
				MGMT.RECORD_TYPE = 'R' 
				AND MGMT.COMPANY_CODE = SRC.Company_code
				AND MGMT.REASON_CODE = AGENT.REASON_CODE
				AND MGMT.REASON_STATUS = AGENT.STATUS_CODE
		WHERE NOT EXISTS(SELECT 1 FROM [salesforce].[Producer] AS DEST WHERE DEST.[Name] = SRC.Agent_Number AND DEST.[Company_Code__c] = SRC.[Company_code]);
		
SELECT @ROWS = @@ROWCOUNT;          
UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;     

		--update settings
		UPDATE SETTINGS SET SETTING_VALUE = @END_VAL_HIER FROM [EDW_Audit].[dbo].[Delta_Settings]  AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_HIER AND SETTING_MODULE = @SETTING_MODULE;
		UPDATE SETTINGS SET SETTING_VALUE = @END_VAL_AGNT FROM [EDW_Audit].[dbo].[Delta_Settings]  AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_AGNT AND SETTING_MODULE = @SETTING_MODULE;
		UPDATE SETTINGS SET SETTING_VALUE = @END_VAL_EXTN_AGNT FROM [EDW_Audit].[dbo].[Delta_Settings]  AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_EXTN_AGNT AND SETTING_MODULE = @SETTING_MODULE;
		UPDATE SETTINGS SET SETTING_VALUE = @END_VAL_NALK FROM [EDW_Audit].[dbo].[Delta_Settings]  AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_NALK AND SETTING_MODULE = @SETTING_MODULE;
		UPDATE SETTINGS SET SETTING_VALUE = @END_VAL_BALC FROM [EDW_Audit].[dbo].[Delta_Settings]  AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_BALC AND SETTING_MODULE = @SETTING_MODULE;
		UPDATE SETTINGS SET SETTING_VALUE = @END_VAL_NAME FROM [EDW_Audit].dbo.Delta_Settings AS SETTINGS WHERE SETTING_NAME = @SETTING_NAME_NM AND Setting_Module = @SETTING_MODULE;
		UPDATE SETTINGS SET SETTING_VALUE = @END_VAL_NADRNA FROM [EDW_Audit].dbo.Delta_Settings AS SETTINGS WHERE SETTING_NAME = @SETTING_NAME_EXTN_NADRNA AND Setting_Module = @SETTING_MODULE;
		END;
	/*END: Update staging table with new records */


    --Logging          
 UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;         

END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();

--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Producer:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;            

RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;


/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Product]    Script Date: 8/23/2021 2:08:08 PM ******/
SET ANSI_NULLS ON





GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Policy_Tax_Documents]    Script Date: 5/17/2022 2:04:44 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:          Darin Baarda
-- Create date:		08/10/2021
-- Description:     get documents for policies
-- =============================================
-- Last Run Date : 08/10/2021
-- Last Run Exec : exec salesforce.usp_Upsert_Policy_Tax_Documents 
-- Last Run Stat : 34 seconds, 3,814,556
-- =============================================
-- Maintenance 
-- =============================================
-- CX-311     08/10/2021 Darin Baarda 
-- New Stored Procedure
-- =============================================
-- CX-3076     09/27/2021 Darin Baarda 
-- Changed the source of the documents to be the EDW_Datalake
-- =============================================
-- CX-3787     11/30/2021 Darin Baarda 
-- change to pad the document number to 9 places

 -- Modified By:		Anastasia
 -- Modified Date:		12/03/2021
 -- Version:			0.1.5
 -- Description:		Added loging and indexing as performance suffered, added update logic

 -- Modified By:		Anastasia
 -- Modified Date:		12/15/2021
 -- Version:			0.1.6
 -- Description:		Chagned selection criteria for terminated policies - the old one didn't compared policy based on the LOOKUP table - changed it to POLC table
-- =============================================

CREATE PROCEDURE [salesforce].[usp_Upsert_Policy_Tax_Documents]
/*

update [EDW_Audit].[dbo].[Delta_Settings]
set Setting_Value = cast('1/1/1900' as varchar(20)) 
where Setting_Name = 'SYNC_POLICY_TAX_DOC'
and setting_Module = 'SF_SYNC'

truncate table salesforce.Policy_Tax_Document

exec salesforce.[usp_Upsert_Policy_Tax_Documents]

select * from salesforce.policy_Tax_document
select count(1) from [EDW_Landing].[salesforce].[AD_Documents]

select * from salesforce.policy_Tax_document


SELECT * FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE]
WHERE NAME LIKE '%dOCUMENT%'

select * From [EDW_Audit].[dbo].[Delta_Settings]

*/

AS
BEGIN
SET NOCOUNT ON;
DECLARE @SETTING_POLICY_DOC			NVARCHAR(50) = 'SYNC_POLICY_TAX_DOC';
DECLARE @SETTING_MODULE				NVARCHAR(50) = 'SF_SYNC';
DECLARE @RecordTypeID				VARCHAR(20);
DECLARE @START_VAL					datetime;
DECLARE @NOW						DATETIME = CURRENT_TIMESTAMP;	
DECLARE @ROWS						INT;		--Used for logging row counts
DECLARE @LOGID_START				iNT;		--Used for the first log id
DECLARE	@LOGID						INT;		--Used for intermediate log ids

BEGIN TRY
	--Logging
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'PolicyTaxDoc:Stat/End Indicator');
	SELECT @LOGID_START = @@IDENTITY;

			/* code starts here for the procedure */
	--Check if settings values for deltas exist
	IF NOT EXISTS(SELECT * FROM [EDW_Audit].[dbo].[Delta_Settings]   WHERE Setting_Name = @SETTING_POLICY_DOC AND Setting_Module = @SETTING_MODULE)
	BEGIN;
		INSERT INTO [EDW_Audit].[dbo].[Delta_Settings] VALUES (@SETTING_POLICY_DOC, @SETTING_MODULE, CAST('1/1/1900' AS VARCHAR(20)));
	END;

	--Retrieve delta settings
	SELECT @RecordTypeID	=  [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE DEVELOPERNAME = 'Tax_Document' AND SOBJECTTYPE = 'Document__c';
	SELECT @START_VAL		= CAST(Setting_Value AS datetime) from [EDW_Audit].[dbo].[Delta_Settings]  WHERE Setting_Name = @SETTING_POLICY_DOC AND Setting_Module = @SETTING_MODULE; 

	/* START: Check that lookup tables are indexed - these tables are being dropped and recreated by Informatica with no indexes*/
	IF (1=1)
	BEGIN;
	--Logging
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'PolicyTaxDoc:Index Lookup tbls');
	SELECT @LOGID = @@IDENTITY;
	--this code could be removed once we stop using Lookup tables
	IF EXISTS (SELECT 1  FROM sys.indexes  WHERE OBJECT_ID = OBJECT_ID('[salesforce].[LOOKUP_INSURANCEPOLICY]') AND type_desc = 'HEAP')
		BEGIN;
		CREATE CLUSTERED INDEX IDX_CL_LOOKUP_INSURANCEPOLICY ON [salesforce].[LOOKUP_INSURANCEPOLICY] ([EXTERNAL_ID__C]);
		END;
	--Logging
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP WHERE Row_ID = @LOGID;
	END;
	/* END: Check that lookup tables are indexed*/	
	/* START: update staging table*/		
	IF (1=1)
		BEGIN;
		--Logging
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'PolicyTaxDoc:Update stg tbl');
		SELECT @LOGID = @@IDENTITY;
		UPDATE	DEST
		SET		[RecordTypeID]					= @RecordTypeID
				, [Document_Type__c]			= OBJTYPE.Process
				, [Description__c]				= OBJTYPE.ObjectDesc
				, [Policy__c]					= LUINS.[ID]
				, [Policy_External_ID__c]		= RTRIM(POLINFO.[Policy]) + '-' + RTRIM(POLINFO.[Company])
				, [Contact__c]					= NULL
				, [Product_External_ID__c]		= NULL
				, [Product__c]					= NULL
				, [Order_Date__c]				= SRC.OrderDate
				, [Received_Date__c]			= SRC.ReceivedDate
				, [Review_Date__c]				= SRC.ReviewDate
				, [Document_Number__c]			= RIGHT('000000000' + CAST(SRC.DocNumber as varchar(9)), 9)
				, [Modified_dt]					= CURRENT_TIMESTAMP
		FROM [salesforce].[Policy_Tax_Document] AS DEST
			INNER JOIN [EDW_DataLake].[opusannuity_v].[Documents_Vw] AS SRC ON
				SRC.[ID] = DEST.[External_ID__c]
			INNER JOIN [EDW_DataLake].[opusannuity_v].[ObjectTypes_Vw]  AS OBJTYPE ON
				OBJTYPE.[ID] = SRC.[ObjectID]
			INNER JOIN [EDW_DataLake].[opusannuity_v].[PolicyInfo_Vw] AS POLINFO ON
				POLINFO.[ID] = SRC.[PolicyID]
			LEFT OUTER JOIN [EDW_Outbound].[salesforce].[LOOKUP_INSURANCEPOLICY] AS LUINS ON
				LUINS.[EXTERNAL_ID__C] = RTRIM(POLINFO.[Policy]) + '-' + RTRIM(POLINFO.[Company])
		WHERE (OBJTYPE.ObjectDesc	LIKE '%1099%' 
				OR ObjectDesc		LIKE '%5498%')
			AND (SRC.OrderDate		> @START_VAL 
				OR SRC.ReceivedDate > @START_VAL
				OR SRC.ReviewDate	> @START_VAL)
			AND NOT EXISTS(SELECT 1 FROM [EDW_DATALAKE].[lifepro_v].[Polc_Curr_Vw] as POLC 
							WHERE RTRIM(POLC.POLICY_NUMBER) + '-' + (POLC.COMPANY_CODE) = RTRIM(POLINFO.[Policy]) + '-' + RTRIM(POLINFO.[Company])
								AND POLC.CONTRACT_CODE = 'T'
								AND POLC.CONTRACT_DATE <= DATEADD(YEAR,-10, CURRENT_TIMESTAMP));

		SELECT @ROWS = @@ROWCOUNT;
		--Logging
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
		END;
		/*END: Update staging table*/
		/*START: Insert new records into staging table*/
	IF (1=1)
		BEGIN;
		--Logging
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'PolicyTaxDoc:Insert stg tbl');
		SELECT @LOGID = @@IDENTITY;
		-- SEE IF ANY DATES ARE NEWER THAN THE LAST TIME IT RAN AND IF SO THE ADD THEM TO THE LIST
		INSERT INTO [EDW_Outbound].[salesforce].[Policy_Tax_Document] 
		(
			[RecordTypeID]
			, [Document_Type__c]
			, [Description__c]
			, [Policy__c]
			, [Policy_External_ID__c]
			, [Contact__c]
			, [Product_External_ID__c]
			, [Product__c]
			, [External_ID__c]
			, [Order_Date__c]
			, [Received_Date__c]
			, [Review_Date__c]
			, [Document_Number__c]
			, [Created_dt]

		)
		select
			@RecordTypeID
			, OBJTYPE.Process
			, OBJTYPE.ObjectDesc
			, LUINS.[ID]
			, RTRIM(POLINFO.[Policy]) + '-' + RTRIM(POLINFO.[Company])
			, null as 'Contact__c'
			, null as 'Product_External_ID__c'
			, null as 'Product__c'
			, SRC.[ID]
			, SRC.OrderDate
			, SRC.ReceivedDate
			, SRC.ReviewDate
			, RIGHT('000000000' + CAST(SRC.DocNumber as varchar(9)), 9)
			, CURRENT_TIMESTAMP
		from [EDW_DataLake].[opusannuity_v].[Documents_Vw] AS SRC 
			INNER JOIN [EDW_DataLake].[opusannuity_v].[ObjectTypes_Vw] AS OBJTYPE ON
				SRC.[ObjectID] = OBJTYPE.[ID]
			INNER JOIN [EDW_DataLake].[opusannuity_v].[PolicyInfo_Vw] AS POLINFO ON
				SRC.[PolicyID] = POLINFO.[ID]
			LEFT OUTER JOIN [EDW_Outbound].[salesforce].[LOOKUP_INSURANCEPOLICY] AS LUINS ON
				LUINS.[EXTERNAL_ID__C] = RTRIM(POLINFO.[Policy]) + '-' + RTRIM(POLINFO.[Company])
		WHERE (OBJTYPE.ObjectDesc	LIKE '%1099%' 
				OR ObjectDesc		LIKE '%5498%')
			AND (SRC.OrderDate		> @START_VAL 
				OR SRC.ReceivedDate > @START_VAL
				OR SRC.ReviewDate	> @START_VAL)
			AND NOT EXISTS(SELECT 1 FROM [EDW_DATALAKE].[lifepro_v].[Polc_Curr_Vw] as POLC 
							WHERE RTRIM(POLC.POLICY_NUMBER) + '-' + RTRIM(POLC.COMPANY_CODE) = RTRIM(POLINFO.[Policy]) + '-' + RTRIM(POLINFO.[Company])
								AND POLC.CONTRACT_CODE = 'T'
								AND POLC.CONTRACT_DATE <= DATEADD(YEAR,-10, CURRENT_TIMESTAMP))
			AND NOT EXISTS(SELECT 1 FROM [EDW_Outbound].[salesforce].[Policy_Tax_Document]  AS DEST WHERE DEST.External_ID__c = SRC.ID);
		SELECT @ROWS = @@ROWCOUNT;
		--Logging
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
		END;
	/*END: Insert new records into staging table*/



		-- USE @NOW AS THE END DATE SINCE THREE COLUMNS COULD CHANGE THAT NEED UPDATED
		-- NEW ROWS WILL  STILL HAVE AN ORDER DATE GREATER THAT THE LAST RUN TIME
		UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@NOW AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_POLICY_DOC AND Setting_Module = @SETTING_MODULE;

--Logging
UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP WHERE Row_ID = @LOGID_START;
		/* code ends here for the procedure */

	END TRY
	BEGIN CATCH
           
	DECLARE @ERROR_MSG          NVARCHAR(2000);
	DECLARE @ERROR_SEVERITY     INT;
	DECLARE @ERROR_STATE        INT;
 
	SET @ERROR_MSG              = ERROR_MESSAGE();
	SET @ERROR_SEVERITY         = ERROR_SEVERITY();
	SET @ERROR_STATE            = ERROR_STATE();

	--Logging
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'AccountPerson:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
	UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;

	RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

	END CATCH;

END
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Policy_Documents_Full_Test]    Script Date: 5/17/2022 2:04:44 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:          Darin Baarda
-- Create date:		08/10/2021
-- Description:     get documents for policies
-- =============================================
-- Last Run Date : 08/10/2021
-- Last Run Exec : exec salesforce.usp_Upsert_Policy_Documents 
-- Last Run Stat : 8:03 minutes, 81,420,071
-- =============================================
-- Maintenance 
-- =============================================
-- CX-311     08/10/2021 Darin Baarda 
-- New Stored Procedure
-- =============================================
-- CX-3076     09/27/2021 Darin Baarda 
-- Changed the source of the documents to be the EDW_Datalake
-- =============================================
-- CX-3787     11/30/2021 Darin Baarda 
-- change to pad the document number to 9 places
-- =============================================

CREATE PROCEDURE [salesforce].[usp_Upsert_Policy_Documents_Full_Test]
/*

update [EDW_Audit].[dbo].[Delta_Settings]
set Setting_Value = cast('1/1/1900' as varchar(20)) 
where Setting_Name = 'SYNC_POLICY_DOC'
and setting_Module = 'SF_SYNC'

truncate table salesforce.Policy_Document

exec salesforce.[usp_Upsert_Policy_Documents]

select count(1) from salesforce.policy_document
select count(1) from [EDW_Landing].[salesforce].[AD_Documents]

SELECT * FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE]
WHERE NAME LIKE '%dOCUMENT%'

select * From [EDW_Audit].[dbo].[Delta_Settings]

select* FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE  SOBJECTTYPE = 'Document__c'

*/

AS
BEGIN
SET NOCOUNT ON;

	BEGIN TRY


		/* code starts here for the procedure */
		DECLARE @SETTING_POLICY_DOC			NVARCHAR(50) = 'SYNC_POLICY_DOC';
		DECLARE @SETTING_MODULE				NVARCHAR(50) = 'SF_SYNC';
		DECLARE @START_VAL					datetime;
		DECLARE @NOW						DATETIME = CURRENT_TIMESTAMP		



		DECLARE @RecordTypeID			varchar(20) = (SELECT [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE DEVELOPERNAME = 'Policy_Document' AND SOBJECTTYPE = 'Document__c')

	
		SELECT @START_VAL = '1/1/1900'
	
		

		-- SEE IF ANY DATES ARE NEWER THAN THE LAST TIME IT RAN AND IF SO THE ADD THEM TO THE LIST
		INSERT  [EDW_Outbound].[salesforce].[Policy_Document_Full_20211206] 
		(
			[RecordTypeID]
			, [Document_Type__c]
			, [Description__c]
			, [Policy__c]
			, [Policy_External_ID__c]
			, [Contact__c]
			, [Product_External_ID__c]
			, [Product__c]
			, [External_ID__c]
			, [Order_Date__c]
			, [Received_Date__c]
			, [Review_Date__c]
			, [Document_Number__c]
		)
		select
			@RecordTypeID as 'RecordTypeID'
			, process as 'Document_Type__c'
			, objectdesc as 'Description__c'
			, [LOOKUP_INSURANCEPOLICY].[ID] as 'Policy__c'
			, rtrim(Policy) + '-' + rtrim(Company) as 'Policy_External_ID__c'
			, null as 'Contact__c'
			, null as 'Product_External_ID__c'
			, null as 'Product__c'
			, [Documents_Vw].[ID] as 'External_ID__c'
			, OrderDate as 'Order_Date__c'
			, ReceivedDate as 'Received_Date__c'
			, ReviewDate as 'Review_Date__c'
			, RIGHT('000000000' + CAST(DocNumber as varchar(9)), 9) as 'Document_Number__c'
	
	from [EDW_DataLake].[opusannuity_v].[Documents_Vw] --87209948
		join [EDW_DataLake].[opusannuity_v].[ObjectTypes_Vw] on [Documents_Vw].[ObjectID] = [ObjectTypes_Vw].[ID] --87209948
		join [EDW_DataLake].[opusannuity_v].[PolicyInfo_Vw] on [Documents_Vw].[PolicyID] = [PolicyInfo_Vw].[ID] --87209948
		left join [EDW_Outbound].[salesforce].[LOOKUP_INSURANCEPOLICY] on [PolicyInfo_Vw].[COMPANY] = [LOOKUP_INSURANCEPOLICY].[COMPANY_CODE__C] AND RTRIM([PolicyInfo_Vw].[POLICY]) = RTRIM([LOOKUP_INSURANCEPOLICY].[NAME]) --87209948
		where (ObjectDesc not like '%1099%' and ObjectDesc not like '%5498%') --83342181
		and (ORDERDATE > @START_VAL or RECEIVEDDATE > @START_VAL or REVIEWDATE > @START_VAL)
		and NOT EXISTS (
				SELECT TOP 1 rtrim([DEST].[POLICY_NUMBER])
				FROM [EDW_DATALAKE].[lifepro_v].[Polc_Curr_Vw] as DEST
				where rtrim([PolicyInfo_Vw].[policy]) + '-' + rtrim([PolicyInfo_Vw].[company]) = rtrim(DEST.[POLICY_NUMBER]) + '-' + rtrim(DEST.[COMPANY_CODE])
				and DEST.CONTRACT_CODE = 'T'
				and DEST.CONTRACT_DATE <= DATEADD(YEAR, -10, GETDATE())
			)
		order by [Documents_Vw].[ID]


		-- USE @NOW AS THE END DATE SINCE THREE COLUMNS COULD CHANGE THAT NEED UPDATED
		-- NEW ROWS WILL  STILL HAVE AN ORDER DATE GREATER THAT THE LAST RUN TIME
	

		/* code ends here for the procedure */

	END TRY
	BEGIN CATCH
           
	DECLARE @ERROR_MSG          NVARCHAR(2000);
	DECLARE @ERROR_SEVERITY     INT;
	DECLARE @ERROR_STATE        INT;
 
	SET @ERROR_MSG              = ERROR_MESSAGE();
	SET @ERROR_SEVERITY         = ERROR_SEVERITY();
	SET @ERROR_STATE            = ERROR_STATE();


	RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

	END CATCH;

END
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Policy_Documents]    Script Date: 5/17/2022 2:04:44 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:          Darin Baarda
-- Create date:		08/10/2021
-- Description:     get documents for policies
-- =============================================
-- Last Run Date : 08/10/2021
-- Last Run Exec : exec salesforce.usp_Upsert_Policy_Documents 
-- Last Run Stat : 8:03 minutes, 81,420,071
-- =============================================
-- Maintenance 
-- =============================================
-- CX-311     08/10/2021 Darin Baarda 
-- New Stored Procedure
-- =============================================
-- CX-3076     09/27/2021 Darin Baarda 
-- Changed the source of the documents to be the EDW_Datalake
-- =============================================
-- CX-3787     11/30/2021 Darin Baarda 
-- change to pad the document number to 9 places
-- =============================================
-- CX-4464     03/28/2022 Darin Baarda 
-- CHANGE TO MAKE THE DATE GO 7 DAYS BACK FOR PROCESSING
-- =============================================
-- CX-4464     03/30/2022 Anastasia Vogelaar
-- Added Update/Insert and created_dt and Modified_dt, logging

-- =============================================

CREATE PROCEDURE [salesforce].[usp_Upsert_Policy_Documents]
/*

update [EDW_Audit].[dbo].[Delta_Settings]
set Setting_Value = cast('1/1/1900' as varchar(20)) 
where Setting_Name = 'SYNC_POLICY_DOC'
and setting_Module = 'SF_SYNC'

truncate table salesforce.Policy_Document

exec salesforce.[usp_Upsert_Policy_Documents]

select count(1) from salesforce.policy_document
select count(1) from [EDW_Landing].[salesforce].[AD_Documents]

SELECT * FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE]
WHERE NAME LIKE '%dOCUMENT%'

select * From [EDW_Audit].[dbo].[Delta_Settings]

select* FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE  SOBJECTTYPE = 'Document__c'


*/

AS
BEGIN
SET NOCOUNT ON;

	BEGIN TRY
DECLARE @ROWS						INT;		--Used for logging row counts
DECLARE @LOGID_START				INT;		--Used for the first log id
DECLARE	@LOGID						INT;		--Used for intermediate log ids

INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'PolicyDocs:Stat/End Indicator');
SELECT @LOGID_START = @@IDENTITY;
		/* code starts here for the procedure */
		DECLARE @SETTING_POLICY_DOC			NVARCHAR(50) = 'SYNC_POLICY_DOC';
		DECLARE @SETTING_MODULE				NVARCHAR(50) = 'SF_SYNC';
		DECLARE @START_VAL					datetime;
		DECLARE @BACKPROCESSING				DATETIME = DATEADD(DAY, -7, CURRENT_TIMESTAMP)

		IF NOT EXISTS(SELECT * FROM [EDW_Audit].[dbo].[Delta_Settings]   WHERE Setting_Name = @SETTING_POLICY_DOC AND Setting_Module = @SETTING_MODULE)
		BEGIN
			INSERT INTO [EDW_Audit].[dbo].[Delta_Settings] VALUES (@SETTING_POLICY_DOC, @SETTING_MODULE, CAST('1/1/1900' AS VARCHAR(20)))
		END


		DECLARE @RecordTypeID			varchar(20) = (SELECT [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE DEVELOPERNAME = 'Policy_Document' AND SOBJECTTYPE = 'Document__c')

	
		SELECT @START_VAL = CAST(Setting_Value AS datetime) from [EDW_Audit].[dbo].[Delta_Settings]  WHERE Setting_Name = @SETTING_POLICY_DOC AND Setting_Module = @SETTING_MODULE; 
	
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'PolicyDocs:Update Documents');
SELECT @LOGID = @@IDENTITY;

	UPDATE DEST
	SET [RecordTypeID]				= @RecordTypeID
		, [Document_Type__c]		= process
		, [Description__c]			= objectdesc
		, [Policy__c]				= [LOOKUP_INSURANCEPOLICY].[ID]
		, [Policy_External_ID__c]	= rtrim(Policy) + '-' + rtrim(Company)
		, [Contact__c]				= NULL
		, [Product_External_ID__c]	= NULL
		, [Product__c]				= NULL
		, [External_ID__c]			= [Documents_Vw].[ID]
		, [Order_Date__c]			= OrderDate
		, [Received_Date__c]		= ReceivedDate
		, [Review_Date__c]			= ReviewDate
		, [Document_Number__c]		= RIGHT('000000000' + CAST(DocNumber as varchar(9)), 9)
		, [MODIFIED_DT]				= CURRENT_TIMESTAMP
	from [EDW_Outbound].[salesforce].[Policy_Document] AS DEST 
		INNER JOIN [EDW_DataLake].[opusannuity_v].[Documents_Vw] ON Documents_Vw.ID = DEST.External_ID__c
		JOIN [EDW_DataLake].[opusannuity_v].[ObjectTypes_Vw] on [Documents_Vw].[ObjectID] = [ObjectTypes_Vw].[ID]
		join [EDW_DataLake].[opusannuity_v].[PolicyInfo_Vw] on [Documents_Vw].[PolicyID] = [PolicyInfo_Vw].[ID]
		left join [EDW_Outbound].[salesforce].[LOOKUP_INSURANCEPOLICY] on [PolicyInfo_Vw].[COMPANY] = [LOOKUP_INSURANCEPOLICY].[COMPANY_CODE__C] AND RTRIM([PolicyInfo_Vw].[POLICY]) = RTRIM([LOOKUP_INSURANCEPOLICY].[NAME])
	where (ObjectDesc not like '%1099%' and ObjectDesc not like '%5498%')
		and (ORDERDATE > @START_VAL or RECEIVEDDATE > @START_VAL or REVIEWDATE > @START_VAL)
		-- SEE IF ANY DATES ARE NEWER THAN THE LAST TIME IT RAN AND IF SO THE ADD THEM TO THE LIST
		and NOT EXISTS (
					SELECT TOP 1 rtrim([DEST].[POLICY_NUMBER])
					FROM [EDW_DATALAKE].[lifepro_v].[Polc_Curr_Vw] as DEST
					where rtrim([PolicyInfo_Vw].[policy]) + '-' + rtrim([PolicyInfo_Vw].[company]) = rtrim(DEST.[POLICY_NUMBER]) + '-' + rtrim(DEST.[COMPANY_CODE])
					and DEST.CONTRACT_CODE = 'T'
					and DEST.CONTRACT_DATE <= DATEADD(YEAR, -10, GETDATE())
				);
SELECT @ROWS = @@ROWCOUNT;
UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;

INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'PolicyDocs:Insert Documents');
SELECT @LOGID = @@IDENTITY;


		INSERT INTO [EDW_Outbound].[salesforce].[Policy_Document] 
		(
			[RecordTypeID]
			, [Document_Type__c]
			, [Description__c]
			, [Policy__c]
			, [Policy_External_ID__c]
			, [Contact__c]
			, [Product_External_ID__c]
			, [Product__c]
			, [External_ID__c]
			, [Order_Date__c]
			, [Received_Date__c]
			, [Review_Date__c]
			, [Document_Number__c]
			, [Created_DT]
		)
		select
			@RecordTypeID as 'RecordTypeID'
			, process as 'Document_Type__c'
			, objectdesc as 'Description__c'
			, [LOOKUP_INSURANCEPOLICY].[ID] as 'Policy__c'
			, rtrim(Policy) + '-' + rtrim(Company) as 'Policy_External_ID__c'
			, null as 'Contact__c'
			, null as 'Product_External_ID__c'
			, null as 'Product__c'
			, [Documents_Vw].[ID] as 'External_ID__c'
			, OrderDate as 'Order_Date__c'
			, ReceivedDate as 'Received_Date__c'
			, ReviewDate as 'Review_Date__c'
			, RIGHT('000000000' + CAST(DocNumber as varchar(9)), 9) as 'Document_Number__c'
			, CURRENT_TIMESTAMP
		from [EDW_DataLake].[opusannuity_v].[Documents_Vw]
		join [EDW_DataLake].[opusannuity_v].[ObjectTypes_Vw] on [Documents_Vw].[ObjectID] = [ObjectTypes_Vw].[ID]
		join [EDW_DataLake].[opusannuity_v].[PolicyInfo_Vw] on [Documents_Vw].[PolicyID] = [PolicyInfo_Vw].[ID]
		left join [EDW_Outbound].[salesforce].[LOOKUP_INSURANCEPOLICY] on [PolicyInfo_Vw].[COMPANY] = [LOOKUP_INSURANCEPOLICY].[COMPANY_CODE__C] AND RTRIM([PolicyInfo_Vw].[POLICY]) = RTRIM([LOOKUP_INSURANCEPOLICY].[NAME])
		where (ObjectDesc not like '%1099%' and ObjectDesc not like '%5498%')
		and (ORDERDATE > @START_VAL or RECEIVEDDATE > @START_VAL or REVIEWDATE > @START_VAL)
		and NOT EXISTS (
				SELECT TOP 1 rtrim([DEST].[POLICY_NUMBER])
				FROM [EDW_DATALAKE].[lifepro_v].[Polc_Curr_Vw] as DEST
				where rtrim([PolicyInfo_Vw].[policy]) + '-' + rtrim([PolicyInfo_Vw].[company]) = rtrim(DEST.[POLICY_NUMBER]) + '-' + rtrim(DEST.[COMPANY_CODE])
				and DEST.CONTRACT_CODE = 'T'
				and DEST.CONTRACT_DATE <= DATEADD(YEAR, -10, GETDATE())
			)
		AND NOT EXISTS (SELECT 1 FROM  [EDW_Outbound].[salesforce].[Policy_Document]  AS dest WHERE dest.[External_ID__c]  = [Documents_Vw].[ID]);
SELECT @ROWS = @@ROWCOUNT;
UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;



		-- USE @NOW AS THE END DATE SINCE THREE COLUMNS COULD CHANGE THAT NEED UPDATED
		-- NEW ROWS WILL  STILL HAVE AN ORDER DATE GREATER THAT THE LAST RUN TIME
		UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@BACKPROCESSING AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_POLICY_DOC AND Setting_Module = @SETTING_MODULE;


		/* code ends here for the procedure */
--Logging
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;   

	END TRY
	BEGIN CATCH
           
	DECLARE @ERROR_MSG          NVARCHAR(2000);
	DECLARE @ERROR_SEVERITY     INT;
	DECLARE @ERROR_STATE        INT;
 
	SET @ERROR_MSG              = ERROR_MESSAGE();
	SET @ERROR_SEVERITY         = ERROR_SEVERITY();
	SET @ERROR_STATE            = ERROR_STATE();

	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'PolicyDocs:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
	UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;


	RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

	END CATCH;

END
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Policy]    Script Date: 5/17/2022 2:04:44 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE       PROCEDURE [salesforce].[usp_Upsert_Policy]

AS
BEGIN;
-- =============================================

 -- Author: 			Chris Waggoner
 -- CreationDate: 		2021-07-19
 -- Version: 			0.1.1
 -- Description: 		Prototype - refresh Policy table for synchronization with SalesForce 

 -- Change Log: 		
 -- Modified By:		Steve Tangeman
 -- Modified Date:		8/9/2021
 -- Version:			0.1.2
 -- Description:		Updated to use sub account for NameInsuredId if it doesn't exist

 -- Modified By:		Steve Tangeman
 -- Modified Date:		8/23/2021
 -- Version:			0.1.3
 -- Description:		Updated to use correct table for suitability status

 -- Modified By:		Steve Tangeman
 -- Modified Date:		8/30/2021
 -- Version:			0.1.4
 -- Description:		Added Maturity Date

 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		8/31/2021
 -- Version:			0.1.5
 -- Description:		Added a check to ignore hard-coded values - they should not appear in Lookup
 
 -- Modified By:		Steve Tangeman
 -- Modified Date:		9/2/2021
 -- Version:			0.1.6
 -- Description:		Changed pending policy check to use status of P. Changed SaleDate to Issue_Date__c.  Changed Effective Date to use Contract Date.

 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		9/7/2021
 -- Version:			0.1.7
 -- Description:		Changed terminated date to be populated from contract date in LifePro (from terminated date - TID CX-2822)

 -- Modified By:		Steve Tangeman
 -- Modified Date:		9/16/2021
 -- Version:			0.1.8
 -- Description:		Added Producer ID

 -- Modified By:		Steve Tangeman
 -- Modified Date:		9/20/2021
 -- Version:			0.1.9
 -- Description:		Removed columns Trust_Name_Id__c and FinServ__Household__c.  Added logic for Sub_Account__c.

 -- Modified By:		Patricia Evans
 -- Modified Date:		9/21/2021
 -- Version:			0.1.10
 -- Description:		Added Commission_Option__c.

 -- Modified By:		Patricia Evans
 -- Modified Date:		9/27/2021
 -- Version:			0.1.11
 -- Description:		Added Inherited__c and LIBR_Choice__c.

 -- Modified By:		Patricia Evans
 -- Modified Date:		9/28/2021
 -- Version:			0.1.12
 -- Description:		Added Estimated_Premium__c and Issue_Age__c.

 -- Modified By:		Patricia Evans
 -- Modified Date:		9/29/2021
 -- Version:			0.1.13
 -- Description:		Added Service_Agent_Changed__c.

 -- Modified By:		Steve Tangeman
 -- Modified Date:		9/29/2021
 -- Version:			0.1.14
 -- Description:		Updated SuitabilityStatus to also check the POLM_028 table

 -- Modified By:		Patricia Evans
 -- Modified Date:		10/01/2021
 -- Version:			0.1.15
 -- Description:		Added BAV_Bonus_Percentage__c and changed selects to reference only needed fields instead of all fields for COMC_S, POLM_28, POLM_19, and PBEN_BF.
 
 -- Modified By:		Steve Tangeman
 -- Modified Date:		10/5/2021
 -- Version:			0.1.16
 -- Description:		Fixed the join to producer

 -- Modified By:		Steve Tangeman
 -- Modified Date:		10/11/2021
 -- Version:			0.1.17
 -- Description:		Added join to Policy_Status_Reason table

 -- Modified By:		Steve Tangeman
 -- Modified Date:		11/19/2021
 -- Version:			0.1.18
 -- Description:		Fix for record type ID

 -- Modified By:		Steve Tangeman
 -- Modified Date:		11/29/2021
 -- Version:			0.1.19
 -- Description:		Added block processing field
 
 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		12/17/2021
 -- Version:			0.2.0
 -- Description:		Replaced LOOKUP_Account with the mapping table

 -- Modified By:		Jason Rippel
 -- Modified Date:		01/04/2022
 -- Version:			0.2.1
 -- Description:		Updated Maturity Date to pull from PBEN_BA or PBEN_BF whichever is available

 -- Modified By:		Jason Rippel
 -- Modified Date:		01/05/2022
 -- Version:			0.2.2
 -- Description:		Updated to populate RIDERS

 -- Modified By:		Steve Tangeman
 -- Modified Date:		2/22/2022
 -- Version:			0.2.3
 -- Description:		Added new fields Payment_Mode__c, Period_Certain_Years__c, Payment_Method__c,  and Exclusion_Ratio__c

 -- Full reload:
--DECLARE @SETTING_POLICY				NVARCHAR(50) = 'SYNC_POLICY_CURR_VW';
--DECLARE @SETTING_POLICY_RELA			NVARCHAR(50) = 'SYNC_POLICY_RELA_CURR_VW';
--DECLARE @SETTING_POLICY_POLM_18		NVARCHAR(50) = 'SYNC_POLICY_POLM_18_CURR_VW';
--DECLARE @SETTING_POLICY_PBEN_BA		NVARCHAR(50) = 'SYNC_POLICY_PBEN_BA_CURR_VW';
--DECLARE @SETTING_POLICY_COMC  		NVARCHAR(50) = 'SYNC_POLICY_COMC_CURR_VW';
--DECLARE @SETTING_POLICY_POLM_28		NVARCHAR(50) = 'SYNC_POLICY_POLM_28_CURR_VW';
--DECLARE @SETTING_POLICY_POLM_19		NVARCHAR(50) = 'SYNC_POLICY_POLM_19_CURR_VW';
--DECLARE @SETTING_POLICY_PBEN_BF		NVARCHAR(50) = 'SYNC_POLICY_PBEN_BF_CURR_VW';
--DECLARE @SETTING_POLICY_PBEN_OR		NVARCHAR(50) = 'SYNC_POLICY_PBEN_OR_CURR_VW';
--DECLARE @SETTING_POLICY_ACON			NVARCHAR(50) = 'SYNC_POLICY_ACON_CURR_VW';
--DECLARE @SETTING_MODULE				NVARCHAR(50) = 'SF_SYNC';

--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_POLICY AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_POLICY_RELA AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_POLICY_POLM_18 AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_POLICY_PBEN_BA AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_POLICY_COMC AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_POLICY_POLM_28 AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_POLICY_POLM_19 AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_POLICY_PBEN_BF AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_POLICY_PBEN_OR AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_POLICY_ACON AND SETTING_MODULE = @SETTING_MODULE;

-- =============================================

SET NOCOUNT ON;
DECLARE @SETTING_POLICY				NVARCHAR(50) = 'SYNC_POLICY_CURR_VW';
DECLARE @SETTING_POLICY_RELA		NVARCHAR(50) = 'SYNC_POLICY_RELA_CURR_VW';
DECLARE @SETTING_POLICY_POLM_18		NVARCHAR(50) = 'SYNC_POLICY_POLM_18_CURR_VW';
DECLARE @SETTING_POLICY_PBEN_BA		NVARCHAR(50) = 'SYNC_POLICY_PBEN_BA_CURR_VW';
DECLARE @SETTING_POLICY_COMC		NVARCHAR(50) = 'SYNC_POLICY_COMC_CURR_VW';
DECLARE @SETTING_POLICY_POLM_28		NVARCHAR(50) = 'SYNC_POLICY_POLM_28_CURR_VW';
DECLARE @SETTING_POLICY_POLM_19		NVARCHAR(50) = 'SYNC_POLICY_POLM_19_CURR_VW';
DECLARE @SETTING_POLICY_PBEN_BF		NVARCHAR(50) = 'SYNC_POLICY_PBEN_BF_CURR_VW';
DECLARE @SETTING_POLICY_PBEN_OR		NVARCHAR(50) = 'SYNC_POLICY_PBEN_OR_CURR_VW';
DECLARE @SETTING_POLICY_ACON		NVARCHAR(50) = 'SYNC_POLICY_ACON_CURR_VW';

DECLARE @SETTING_MODULE				NVARCHAR(50) = 'SF_SYNC';

DECLARE @START_VAL_POLICY			INT;
DECLARE @END_VAL_POLICY				INT;
DECLARE @START_VAL_POLICY_RELA		INT;
DECLARE @END_VAL_POLICY_RELA		INT;
DECLARE @START_VAL_POLICY_POLM_18	INT;
DECLARE @END_VAL_POLICY_POLM_18		INT;
DECLARE @START_VAL_POLICY_PBEN_BA	INT;
DECLARE @END_VAL_POLICY_PBEN_BA		INT;
DECLARE @START_VAL_POLICY_COMC		INT;
DECLARE @END_VAL_POLICY_COMC		INT;
DECLARE @START_VAL_POLICY_POLM_28	INT;
DECLARE @END_VAL_POLICY_POLM_28		INT;
DECLARE @START_VAL_POLICY_POLM_19	INT;
DECLARE @END_VAL_POLICY_POLM_19		INT;
DECLARE @START_VAL_POLICY_PBEN_BF	INT;
DECLARE @END_VAL_POLICY_PBEN_BF		INT;
DECLARE @START_VAL_POLICY_PBEN_OR	INT;
DECLARE @END_VAL_POLICY_PBEN_OR		INT;
DECLARE @START_VAL_POLICY_ACON		INT;
DECLARE @END_VAL_POLICY_ACON		INT;


--	DROP TABLE IF EXISTS [work].[tmp_Policy_Bus_Keys];
IF NOT EXISTS(SELECT * FROM [EDW_Audit].[dbo].[Delta_Settings]   WHERE Setting_Name = @SETTING_POLICY AND Setting_Module = @SETTING_MODULE)
BEGIN
	INSERT INTO [EDW_Audit].[dbo].[Delta_Settings] VALUES (@SETTING_POLICY, @SETTING_MODULE, CAST(0 AS VARCHAR(20)))
END

IF NOT EXISTS(SELECT * FROM [EDW_Audit].[dbo].[Delta_Settings]   WHERE Setting_Name = @SETTING_POLICY_RELA AND Setting_Module = @SETTING_MODULE)
BEGIN
	INSERT INTO [EDW_Audit].[dbo].[Delta_Settings] VALUES (@SETTING_POLICY_RELA, @SETTING_MODULE, CAST(0 AS VARCHAR(20)))
END

IF NOT EXISTS(SELECT * FROM [EDW_Audit].[dbo].[Delta_Settings]   WHERE Setting_Name = @SETTING_POLICY_POLM_18 AND Setting_Module = @SETTING_MODULE)
BEGIN
	INSERT INTO [EDW_Audit].[dbo].[Delta_Settings] VALUES (@SETTING_POLICY_POLM_18, @SETTING_MODULE, CAST(0 AS VARCHAR(20)))
END

IF NOT EXISTS(SELECT * FROM [EDW_Audit].[dbo].[Delta_Settings]   WHERE Setting_Name = @SETTING_POLICY_PBEN_BA AND Setting_Module = @SETTING_MODULE)
BEGIN
	INSERT INTO [EDW_Audit].[dbo].[Delta_Settings] VALUES (@SETTING_POLICY_PBEN_BA, @SETTING_MODULE, CAST(0 AS VARCHAR(20)))
END

IF NOT EXISTS(SELECT * FROM [EDW_Audit].[dbo].[Delta_Settings]   WHERE Setting_Name = @SETTING_POLICY_COMC AND Setting_Module = @SETTING_MODULE)
BEGIN
	INSERT INTO [EDW_Audit].[dbo].[Delta_Settings] VALUES (@SETTING_POLICY_COMC, @SETTING_MODULE, CAST(0 AS VARCHAR(20)))
END

IF NOT EXISTS(SELECT * FROM [EDW_Audit].[dbo].[Delta_Settings]   WHERE Setting_Name = @SETTING_POLICY_POLM_28 AND Setting_Module = @SETTING_MODULE)
BEGIN
	INSERT INTO [EDW_Audit].[dbo].[Delta_Settings] VALUES (@SETTING_POLICY_POLM_28, @SETTING_MODULE, CAST(0 AS VARCHAR(20)))
END

IF NOT EXISTS(SELECT * FROM [EDW_Audit].[dbo].[Delta_Settings]   WHERE Setting_Name = @SETTING_POLICY_POLM_19 AND Setting_Module = @SETTING_MODULE)
BEGIN
	INSERT INTO [EDW_Audit].[dbo].[Delta_Settings] VALUES (@SETTING_POLICY_POLM_19, @SETTING_MODULE, CAST(0 AS VARCHAR(20)))
END

IF NOT EXISTS(SELECT * FROM [EDW_Audit].[dbo].[Delta_Settings]   WHERE Setting_Name = @SETTING_POLICY_PBEN_BF AND Setting_Module = @SETTING_MODULE)
BEGIN
	INSERT INTO [EDW_Audit].[dbo].[Delta_Settings] VALUES (@SETTING_POLICY_PBEN_BF, @SETTING_MODULE, CAST(0 AS VARCHAR(20)))
END

IF NOT EXISTS(SELECT * FROM [EDW_Audit].[dbo].[Delta_Settings]   WHERE Setting_Name = @SETTING_POLICY_PBEN_OR AND Setting_Module = @SETTING_MODULE)
BEGIN
	INSERT INTO [EDW_Audit].[dbo].[Delta_Settings] VALUES (@SETTING_POLICY_PBEN_OR, @SETTING_MODULE, CAST(0 AS VARCHAR(20)))
END

IF NOT EXISTS(SELECT * FROM [EDW_Audit].[dbo].[Delta_Settings]   WHERE Setting_Name = @SETTING_POLICY_ACON AND Setting_Module = @SETTING_MODULE)
BEGIN
	INSERT INTO [EDW_Audit].[dbo].[Delta_Settings] VALUES (@SETTING_POLICY_ACON, @SETTING_MODULE, CAST(0 AS VARCHAR(20)))
END

BEGIN TRY
delete salesforce.LOOKUP_SUB_ACCOUNT__C WHERE isnumeric(name_id__c )=0; --AV 8/31/2021 - remove hard coded values

/* START: Create temporary tables.*/
IF (1=1)
	BEGIN;
	--Name Ids - this table will contain all changed business keys for all dependencies
	IF OBJECT_ID (N'work.tmp_Policy_Bus_Keys', N'U') IS NOT NULL
		BEGIN;
		TRUNCATE TABLE [work].[tmp_Policy_Bus_Keys];
		END;
	ELSE
		BEGIN;
		CREATE	TABLE [work].[tmp_Policy_Bus_Keys]
			([CompanyCode] varchar(2) NOT NULL,
			 [PolicyNumber] varchar(12) NOT NULL PRIMARY KEY CLUSTERED ( [CompanyCode] ASC, [PolicyNumber] ASC) ON [PRIMARY] );
		END;

	IF OBJECT_ID(N'work.tmp_Policy_Riders', N'U') IS NOT NULL
       BEGIN;
       TRUNCATE TABLE [work].[tmp_Policy_Riders];
       END;
	ELSE
	   BEGIN;
       CREATE TABLE [work].[tmp_Policy_Riders]
       (
         COMPANY_CODE VARCHAR(2),
         POLICY_NUMBER VARCHAR(12),
		 RIDERS VARCHAR(MAX)
       );
	   END;

	IF OBJECT_ID(N'work.tmp_Policy_Plan_Codes', N'U') IS NOT NULL
       BEGIN;
       TRUNCATE TABLE [work].[tmp_Policy_Plan_Codes];
       END;
	ELSE
	   BEGIN;
       CREATE TABLE [work].[tmp_Policy_Plan_Codes]
       (
         COMPANY_CODE VARCHAR(2),
         POLICY_NUMBER VARCHAR(12),
         BENEFIT_SEQ SMALLINT,
         PLAN_CODE VARCHAR(10)
       );
	   END;
	END;
/* END: Create temporary tables.*/

DECLARE @PolicyRecordTypeID varchar(20) = (SELECT [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE DEVELOPERNAME = 'Policy' AND SOBJECTTYPE = 'InsurancePolicy')
DECLARE @PendingPolicyRecordTypeID varchar(20) = (SELECT [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE DEVELOPERNAME = 'Pending_Policy' AND SOBJECTTYPE = 'InsurancePolicy')
DECLARE @EmployeePolicyRecordTypeID varchar(20) = (SELECT [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE DEVELOPERNAME = 'Employee_Contract' AND SOBJECTTYPE = 'InsurancePolicy')
DECLARE @EstateShieldPolicyRecordTypeID varchar(20) = (SELECT [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE DEVELOPERNAME = 'EstateShield' AND SOBJECTTYPE = 'InsurancePolicy')

IF (1=1)
	BEGIN;
	--Pick all new or changed Name Ids from NAME_Curr_Vw
	SELECT @START_VAL_POLICY	= CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_POLICY AND Setting_Module = @SETTING_MODULE;
	SELECT @END_VAL_POLICY	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[POLC_Curr_Vw];
	
	IF @START_VAL_POLICY < @END_VAL_POLICY
		BEGIN;
		INSERT [work].[tmp_Policy_Bus_Keys]
			([CompanyCode], [PolicyNumber])
		SELECT 
			DISTINCT COMPANY_CODE, POLICY_NUMBER
		FROM	 [EDW_DataLake].[lifepro_v].[POLC_Curr_Vw]	AS POLC_CURR
		WHERE	POLC_CURR.Row_ID > @START_VAL_POLICY																							-- Only changed records
			AND POLC_CURR.Row_ID <= @END_VAL_POLICY
			AND POLC_CURR.COMPANY_CODE <> '' 
			AND POLC_CURR.POLICY_NUMBER <> '';
		END;

	SELECT @START_VAL_POLICY_RELA	= CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_POLICY_RELA AND Setting_Module = @SETTING_MODULE;
	SELECT @END_VAL_POLICY_RELA	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[RELA_Curr_Vw];
	
	IF @START_VAL_POLICY_RELA < @END_VAL_POLICY_RELA
		BEGIN;
		INSERT [work].[tmp_Policy_Bus_Keys]
			([CompanyCode], [PolicyNumber])
		SELECT 
			DISTINCT COMPANY_CODE, POLICY_NUMBER
		FROM	 [EDW_DataLake].[lifepro_v].[RELA_Curr_Vw]	AS RELA_CURR
		WHERE	RELA_CURR.Row_ID > @START_VAL_POLICY_RELA																							-- Only changed records
			AND RELA_CURR.Row_ID <= @END_VAL_POLICY_RELA			
			AND RELA_CURR.COMPANY_CODE <> '' 
			AND RELA_CURR.POLICY_NUMBER <> ''
			AND NOT EXISTS(SELECT 1 FROM [work].[tmp_Policy_Bus_Keys] AS DEST WHERE DEST.CompanyCode = RELA_CURR.COMPANY_CODE AND DEST.PolicyNumber = RELA_CURR.POLICY_NUMBER);
		END;

	SELECT @START_VAL_POLICY_POLM_18	= CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_POLICY_POLM_18 AND Setting_Module = @SETTING_MODULE;
	SELECT @END_VAL_POLICY_POLM_18	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[POLM_018_Curr_Vw];
	
	IF @START_VAL_POLICY_POLM_18 < @END_VAL_POLICY_POLM_18
		BEGIN;
		INSERT [work].[tmp_Policy_Bus_Keys]
			([CompanyCode], [PolicyNumber])
		SELECT 
			DISTINCT COMPANY_CODE, POLICY_NUMBER
		FROM	 [EDW_DataLake].[lifepro_v].[POLM_018_Curr_Vw]	AS POLM_18_CURR
		WHERE	POLM_18_CURR.Row_ID > @START_VAL_POLICY_POLM_18																						-- Only changed records
			AND POLM_18_CURR.Row_ID <= @END_VAL_POLICY_POLM_18
			AND POLM_18_CURR.COMPANY_CODE <> '' 
			AND POLM_18_CURR.POLICY_NUMBER <> ''
			AND NOT EXISTS(SELECT 1 FROM [work].[tmp_Policy_Bus_Keys] AS DEST WHERE DEST.CompanyCode = POLM_18_CURR.COMPANY_CODE AND DEST.PolicyNumber = POLM_18_CURR.POLICY_NUMBER);
		END;

	SELECT @START_VAL_POLICY_PBEN_BA	= CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_POLICY_PBEN_BA AND Setting_Module = @SETTING_MODULE;
	SELECT @END_VAL_POLICY_PBEN_BA	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[PBEN_BA_Curr_Vw];
	
	IF @START_VAL_POLICY_PBEN_BA < @END_VAL_POLICY_PBEN_BA
		BEGIN;
		INSERT [work].[tmp_Policy_Bus_Keys]
			([CompanyCode], [PolicyNumber])
		SELECT 
			DISTINCT COMPANY_CODE, POLICY_NUMBER
		FROM	 [EDW_DataLake].[lifepro_v].[PBEN_BA_Curr_Vw]	AS PBEN_BA_CURR
		WHERE	PBEN_BA_CURR.Row_ID > @START_VAL_POLICY_PBEN_BA																						-- Only changed records
			AND PBEN_BA_CURR.Row_ID <= @END_VAL_POLICY_PBEN_BA
			AND PBEN_BA_CURR.COMPANY_CODE <> '' 
			AND PBEN_BA_CURR.POLICY_NUMBER <> ''
			AND NOT EXISTS(SELECT 1 FROM [work].[tmp_Policy_Bus_Keys] AS DEST WHERE DEST.CompanyCode = PBEN_BA_CURR.COMPANY_CODE AND DEST.PolicyNumber = PBEN_BA_CURR.POLICY_NUMBER);
		END;

	SELECT @START_VAL_POLICY_COMC	= CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_POLICY_COMC AND Setting_Module = @SETTING_MODULE;
	SELECT @END_VAL_POLICY_COMC	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[COMC_S_Curr_Vw];
	
	IF @START_VAL_POLICY_COMC < @END_VAL_POLICY_COMC
		BEGIN;
		INSERT [work].[tmp_Policy_Bus_Keys]
			([CompanyCode], [PolicyNumber])
		SELECT 
			DISTINCT COMPANY_CODE, POLICY_NUMBER
		FROM	 [EDW_DataLake].[lifepro_v].[COMC_S_Curr_Vw]	AS COMC_CURR
		WHERE	COMC_CURR.Row_ID > @START_VAL_POLICY_COMC																						-- Only changed records
			AND COMC_CURR.Row_ID <= @END_VAL_POLICY_COMC
			AND COMC_CURR.COMPANY_CODE <> '' 
			AND COMC_CURR.POLICY_NUMBER <> ''
			AND NOT EXISTS(SELECT 1 FROM [work].[tmp_Policy_Bus_Keys] AS DEST WHERE DEST.CompanyCode = COMC_CURR.COMPANY_CODE AND DEST.PolicyNumber = COMC_CURR.POLICY_NUMBER);
		END;

	SELECT @START_VAL_POLICY_POLM_28	= CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_POLICY_POLM_28 AND Setting_Module = @SETTING_MODULE;
	SELECT @END_VAL_POLICY_POLM_28	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[POLM_028_Curr_Vw];
	
	IF @START_VAL_POLICY_POLM_28 < @END_VAL_POLICY_POLM_28
		BEGIN;
		INSERT [work].[tmp_Policy_Bus_Keys]
			([CompanyCode], [PolicyNumber])
		SELECT 
			DISTINCT COMPANY_CODE, POLICY_NUMBER
		FROM	 [EDW_DataLake].[lifepro_v].[POLM_028_Curr_Vw]	AS POLM_28_CURR
		WHERE	POLM_28_CURR.Row_ID > @START_VAL_POLICY_POLM_28																						-- Only changed records
			AND POLM_28_CURR.Row_ID <= @END_VAL_POLICY_POLM_28
			AND POLM_28_CURR.COMPANY_CODE <> '' 
			AND POLM_28_CURR.POLICY_NUMBER <> ''
			AND NOT EXISTS(SELECT 1 FROM [work].[tmp_Policy_Bus_Keys] AS DEST WHERE DEST.CompanyCode = POLM_28_CURR.COMPANY_CODE AND DEST.PolicyNumber = POLM_28_CURR.POLICY_NUMBER);
		END;

	SELECT @START_VAL_POLICY_POLM_19	= CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_POLICY_POLM_19 AND Setting_Module = @SETTING_MODULE;
	SELECT @END_VAL_POLICY_POLM_19	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[POLM_019_Curr_Vw];
	
	IF @START_VAL_POLICY_POLM_19 < @END_VAL_POLICY_POLM_19
		BEGIN;
		INSERT [work].[tmp_Policy_Bus_Keys]
			([CompanyCode], [PolicyNumber])
		SELECT 
			DISTINCT COMPANY_CODE, POLICY_NUMBER
		FROM	 [EDW_DataLake].[lifepro_v].[POLM_019_Curr_Vw]	AS POLM_19_CURR
		WHERE	POLM_19_CURR.Row_ID > @START_VAL_POLICY_POLM_19																						-- Only changed records
			AND POLM_19_CURR.Row_ID <= @END_VAL_POLICY_POLM_19
			AND POLM_19_CURR.COMPANY_CODE <> '' 
			AND POLM_19_CURR.POLICY_NUMBER <> ''
			AND NOT EXISTS(SELECT 1 FROM [work].[tmp_Policy_Bus_Keys] AS DEST WHERE DEST.CompanyCode = POLM_19_CURR.COMPANY_CODE AND DEST.PolicyNumber = POLM_19_CURR.POLICY_NUMBER);
		END;

	SELECT @START_VAL_POLICY_PBEN_BF	= CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_POLICY_PBEN_BF AND Setting_Module = @SETTING_MODULE;
	SELECT @END_VAL_POLICY_PBEN_BF	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[PBEN_BF_Curr_Vw];
	
	IF @START_VAL_POLICY_PBEN_BF < @END_VAL_POLICY_PBEN_BF
		BEGIN;
		INSERT [work].[tmp_Policy_Bus_Keys]
			([CompanyCode], [PolicyNumber])
		SELECT 
			DISTINCT COMPANY_CODE, POLICY_NUMBER
		FROM	 [EDW_DataLake].[lifepro_v].[PBEN_BF_Curr_Vw]	AS PBEN_BF_CURR
		WHERE	PBEN_BF_CURR.Row_ID > @START_VAL_POLICY_PBEN_BF																						-- Only changed records
			AND PBEN_BF_CURR.Row_ID <= @END_VAL_POLICY_PBEN_BF
			AND PBEN_BF_CURR.COMPANY_CODE <> '' 
			AND PBEN_BF_CURR.POLICY_NUMBER <> ''
			AND NOT EXISTS(SELECT 1 FROM [work].[tmp_Policy_Bus_Keys] AS DEST WHERE DEST.CompanyCode = PBEN_BF_CURR.COMPANY_CODE AND DEST.PolicyNumber = PBEN_BF_CURR.POLICY_NUMBER);
		END;

	SELECT @START_VAL_POLICY_PBEN_OR	= CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_POLICY_PBEN_OR AND Setting_Module = @SETTING_MODULE;
	SELECT @END_VAL_POLICY_PBEN_OR	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[PBEN_OR_Curr_Vw];
	
	IF @START_VAL_POLICY_PBEN_OR < @END_VAL_POLICY_PBEN_OR
		BEGIN;
		INSERT [work].[tmp_Policy_Bus_Keys]
			([CompanyCode], [PolicyNumber])
		SELECT 
			DISTINCT COMPANY_CODE, POLICY_NUMBER
		FROM	 [EDW_DataLake].[lifepro_v].[PBEN_OR_Curr_Vw]	AS PBEN_OR_CURR
		WHERE	PBEN_OR_CURR.Row_ID > @START_VAL_POLICY_PBEN_OR																						-- Only changed records
			AND PBEN_OR_CURR.Row_ID <= @END_VAL_POLICY_PBEN_OR
			AND PBEN_OR_CURR.COMPANY_CODE <> '' 
			AND PBEN_OR_CURR.POLICY_NUMBER <> ''
			AND NOT EXISTS(SELECT 1 FROM [work].[tmp_Policy_Bus_Keys] AS DEST WHERE DEST.CompanyCode = PBEN_OR_CURR.COMPANY_CODE AND DEST.PolicyNumber = PBEN_OR_CURR.POLICY_NUMBER);
		END;
		
	SELECT @START_VAL_POLICY_ACON = CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_POLICY_ACON AND Setting_Module = @SETTING_MODULE;
	SELECT @END_VAL_POLICY_ACON	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[ACON_Curr_Vw];
	
	IF @START_VAL_POLICY_ACON < @END_VAL_POLICY_ACON
		BEGIN;
		INSERT [work].[tmp_Policy_Bus_Keys]
			([CompanyCode], [PolicyNumber])
		SELECT 
			DISTINCT COMPANY_CODE, POLICY_NUMBER
		FROM	 [EDW_DataLake].[lifepro_v].[ACON_Curr_Vw]	AS ACON_CURR
		WHERE	ACON_CURR.Row_ID > @START_VAL_POLICY_ACON																						-- Only changed records
			AND ACON_CURR.Row_ID <= @END_VAL_POLICY_ACON
			AND ACON_CURR.COMPANY_CODE <> '' 
			AND ACON_CURR.POLICY_NUMBER <> ''
			AND NOT EXISTS(SELECT 1 FROM [work].[tmp_Policy_Bus_Keys] AS DEST WHERE DEST.CompanyCode = ACON_CURR.COMPANY_CODE AND DEST.PolicyNumber = ACON_CURR.POLICY_NUMBER);
		END;

    INSERT INTO [work].[tmp_Policy_Plan_Codes] (COMPANY_CODE, POLICY_NUMBER, BENEFIT_SEQ, PLAN_CODE)
    SELECT [COMPANY_CODE]
          ,RTRIM([POLICY_NUMBER])
          ,[BENEFIT_SEQ]
          ,RTRIM([PLAN_CODE])
    FROM [EDW_DataLake].[lifepro_v].[PBEN_OR_Curr_Vw] PBEN_OR_CURR
	JOIN [work].[tmp_Policy_Bus_Keys] POL_BUS_KEY
	     ON POL_BUS_KEY.CompanyCode = PBEN_OR_CURR.COMPANY_CODE AND POL_BUS_KEY.PolicyNumber = PBEN_OR_CURR.POLICY_NUMBER
	WHERE NOT EXISTS(SELECT 1 FROM [work].[tmp_Policy_Plan_Codes] AS DEST WHERE DEST.COMPANY_CODE = PBEN_OR_CURR.COMPANY_CODE AND DEST.POLICY_NUMBER = PBEN_OR_CURR.POLICY_NUMBER)
    --WHERE POLICY_NUMBER IN ('845845', '1055555')
    ORDER BY COMPANY_CODE, POLICY_NUMBER, BENEFIT_SEQ
      
	INSERT INTO [work].[tmp_Policy_Riders] (COMPANY_CODE, POLICY_NUMBER, RIDERS)
	SELECT  [COMPANY_CODE], 
            [POLICY_NUMBER],
            (STUFF(( SELECT ',' + CONVERT(NVARCHAR(256), PLAN_CODE) AS [text()]
                     FROM [work].[tmp_Policy_Plan_Codes] R1
                     WHERE R1.COMPANY_CODE = R2.COMPANY_CODE
                     AND R1.POLICY_NUMBER = R2.POLICY_NUMBER
                     ORDER BY R1.BENEFIT_SEQ
                     FOR XML PATH ,TYPE).value('.[1]','nvarchar(max)')
                     , 1, 1, '')
             )
    FROM [work].[tmp_Policy_Plan_Codes] R2
    GROUP BY [COMPANY_CODE], [POLICY_NUMBER]

END;
/* END: Populate temporary tables.*/


UPDATE DEST
SET	[RecordTypeId] = CASE
						WHEN POLC.CONTRACT_CODE = 'P' THEN @PendingPolicyRecordTypeID
						WHEN POLC.POLICY_CODE = '7' THEN @EmployeePolicyRecordTypeID
						WHEN POLC.PRODUCT_ID = 'I-ESTATE' THEN @EstateShieldPolicyRecordTypeID
						ELSE @PolicyRecordTypeID
					 END,
	[NameInsuredId] = FirstNameInsured.AccountID,
	[Name] = POLC.POLICY_NUMBER,
	[ProductId] = PRODUCT.ID,
	[Issue_Date__c] = CASE 
						WHEN POLC.ISSUE_DATE > '12/31/4000' THEN NULL
						WHEN POLC.ISSUE_DATE < '1/1/1700' THEN NULL
						ELSE POLC.ISSUE_DATE
					END,
	[Status] = POLC.CONTRACT_CODE,
	[Status_Reason__c] = POLC.CONTRACT_REASON,
	[ProducerId] = producer.ID,
	[Product_External_Id__c] = POLC.PRODUCT_ID,
	[External_Id__c] = TRIM(POLC.POLICY_NUMBER) + '-' + TRIM(POLC.COMPANY_CODE),
	[Sub_Account__c] = FirstNameInsured.SubAccountID,
	[SuitabilityStatus] = ISNULL(POLM_18.SUIT_STATUS, POLM_28.S2_STATUS),
	[Policy_Holder_Name_Id__c] = FirstNameInsured.RelaNameID,
	[Service_Agent_Name_Id__c] = FirstProducer.RelaNameID,
	[Company_Code__c] = POLC.COMPANY_CODE,
	[Policy_Code__c] = POLC.POLICY_CODE,
	[Line_of_Business__c] = POLC.LINE_OF_BUSINESS,
	[Application_Date__c] = CASE 
								WHEN POLC.APPLICATION_DATE > '12/31/4000' THEN NULL
								WHEN POLC.APPLICATION_DATE < '1/1/1700' THEN NULL
								ELSE POLC.APPLICATION_DATE
							END,
	[Application_Received_Date] = CASE 
										WHEN POLC.APP_RECEIVED_DATE > '12/31/4000' THEN NULL
										WHEN POLC.APP_RECEIVED_DATE < '1/1/1700' THEN NULL
										ELSE POLC.APP_RECEIVED_DATE
									END,
	[Effective_Date__c] = CASE 
								WHEN POLC.CONTRACT_DATE > '12/31/4000' THEN NULL
								WHEN POLC.CONTRACT_DATE < '1/1/1700' THEN NULL
								ELSE POLC.CONTRACT_DATE
							END,
	[Terminated_Date__c] =  CASE 
								WHEN POLC.CONTRACT_DATE > '12/31/4000' THEN NULL
								WHEN POLC.CONTRACT_DATE < '1/1/1700' THEN NULL
								ELSE POLC.CONTRACT_DATE
							END,
	[Delivery_Receipt_Date__c] = CASE 
										WHEN POLC.DELIVERY_DATE > '12/31/4000' THEN NULL
										WHEN POLC.DELIVERY_DATE < '1/1/1700' THEN NULL
										ELSE POLC.DELIVERY_DATE
									END,
	[Issue_State__c] = POLC.ISSUE_STATE,
	[Contract_Year] = POLC.DURATION,
	[Tax_Status__c] = POLC.TAX_QUALIFY_CODE,
	[Out_Of_Surrender_Date__c] = CASE 
										WHEN POLC.SURR_PER_DATE > '12/31/4000' THEN NULL
										WHEN POLC.SURR_PER_DATE < '1/1/1700' THEN NULL
										ELSE POLC.SURR_PER_DATE
									END,
	[PAC_PlannedPremiumAmount__c] = POLC.MODE_PREMIUM,
	[PAC_PremiumMode__c] = POLC.BILLING_MODE,
	[PAC_PlannedDateOfDebit__c] = POLC.POLICY_BILL_DAY,
	[Modified_dt] = CURRENT_TIMESTAMP,
	[LifePro_CompanyCode] = POLC.COMPANY_CODE,
	[LifePro_PolicyNumber] = POLC.POLICY_NUMBER,
    [Maturity_Date] = CASE
                          WHEN PBEN_BA.MATURE_EXPIRE_DATE IS NOT NULL THEN
                               CASE WHEN PBEN_BA.MATURE_EXPIRE_DATE > '12/31/4000' THEN NULL
                                    WHEN PBEN_BA.MATURE_EXPIRE_DATE < '1/1/1700' THEN NULL
                                    ELSE PBEN_BA.MATURE_EXPIRE_DATE
                               END
                          WHEN PBEN_BF.MATURE_EXPIRE_DATE IS NOT NULL THEN
						       CASE WHEN PBEN_BF.MATURE_EXPIRE_DATE > '12/31/4000' THEN NULL
                                    WHEN PBEN_BF.MATURE_EXPIRE_DATE < '1/1/1700' THEN NULL
                                    ELSE PBEN_BF.MATURE_EXPIRE_DATE
                               END
                          ELSE NULL
                      END,
	--[Maturity_Date] = PBEN_BA.MATURE_EXPIRE_DATE,
	[Riders__c] = Riders.RIDERS,
	[Commission_Option__c] = COMC_S.AGENT_COMM_OPTION_1,
	[Inherited__c] = CASE TRIM(POLC.IRA_TYPE)
						WHEN 'I' THEN 1
						ELSE 0
						END,
	[LIBR_Choice__C] = COVR.DESCRIPTION,
	[Estimated_Premium__c] = CASE
								WHEN POLM_18.SUIT_EXPECTED_PREM IS NOT NULL AND POLM_18.SUIT_EXPECTED_PREM > 0 THEN POLM_18.SUIT_EXPECTED_PREM
								WHEN POLM_18.SUIT_EXPECTED_PREM = 0 AND POLM_28.S1_EXPECTED_PREM IS NULL THEN POLM_18.SUIT_EXPECTED_PREM
								WHEN POLM_19.EXPECTED_PREMIUM IS NOT NULL AND POLM_19.EXPECTED_PREMIUM > 0 THEN POLM_19.EXPECTED_PREMIUM
								WHEN POLM_19.EXPECTED_PREMIUM = 0 AND POLM_28.S1_EXPECTED_PREM IS NULL THEN POLM_19.EXPECTED_PREMIUM
								ELSE POLM_28.S1_EXPECTED_PREM
								END,
	[Issue_Age__c] = PBEN_BF.ISSUE_AGE,
	[Service_Agent_Changed__c] = CASE
									WHEN COMC_S.SERVICE_AGENT_IND_1 = 'P' THEN 1
									WHEN COMC_S.SERVICE_AGENT_IND_2 = 'P' THEN 1
									WHEN COMC_S.SERVICE_AGENT_IND_3 = 'P' THEN 1
									WHEN COMC_S.SERVICE_AGENT_IND_4 = 'P' THEN 1
									WHEN COMC_S.SERVICE_AGENT_IND_5 = 'P' THEN 1
									WHEN COMC_S.SERVICE_AGENT_IND_6 = 'P' THEN 1
									WHEN COMC_S.SERVICE_AGENT_IND_7 = 'P' THEN 1
									WHEN COMC_S.SERVICE_AGENT_IND_8 = 'P' THEN 1
									WHEN COMC_S.SERVICE_AGENT_IND_9 = 'P' THEN 1
									WHEN COMC_S.SERVICE_AGENT_IND_10 = 'P' THEN 1
									ELSE 0
									END,
	[BAV_Bonus_Percentage__c] = PBEN_OR.CONSTANT_RATE,
	[Status_Reason_Description__c] = psr.ReasonCodeDesc,
	[Block_Indicator__c] = CASE TRIM(POLC.BLOCK_PROCESS_FLAG)
						WHEN 'Y' THEN 1
						ELSE 0
						END,
	[Payment_Mode__c] = CASE WHEN TRIM(ACON.PAYMENT_MODE) = '' THEN NULL ELSE ACON.PAYMENT_MODE END,
	[Period_Certain_Years__c] = ACON.PERIOD_CERTAIN_YEARS,
	[Payment_Method__c] = CASE WHEN TRIM(ACON.PAYMENT_METHOD) = '' THEN NULL ELSE ACON.PAYMENT_METHOD END,
	[Exclusion_Ratio__c] = ACON.EXCLUSION_PCT
FROM EDW_Outbound.salesforce.Policy DEST
JOIN [work].[tmp_Policy_Bus_Keys] AS TMP ON TMP.CompanyCode = DEST.LifePro_CompanyCode AND TMP.PolicyNumber = DEST.LifePro_PolicyNumber
JOIN (	select *		
		, ROW_NUMBER() OVER 
					(PARTITION BY COMPANY_CODE, POLICY_NUMBER ORDER BY sysdata desc )    AS RN
		from [EDW_DataLake].[lifepro_v].[POLC_Curr_Vw]) AS POLC ON POLC.COMPANY_CODE = TMP.CompanyCode AND POLC.POLICY_NUMBER = TMP.PolicyNumber and POLC.RN = 1
LEFT JOIN ( 			
			select  ROW_NUMBER() OVER 
					(PARTITION BY RELA.POLICY_NUMBER, RELA.COMPANY_CODE ORDER BY RELA.NAME_ID ASC)    AS RN
					, RELA.POLICY_NUMBER, RELA.COMPANY_CODE, RELA.[NAME_ID] as RelaNameID
					, ISNULL(AccountLookupForNameInsured.[SALESFORCE_ID], SubAccountLookupForNameInsured.PARENT_ACCOUNT__C) as AccountID
					, SubAccountLookupForNameInsured.ID AS SubAccountID
			from [EDW_DataLake].[lifepro_v].[RELA_Curr_Vw] RELA
			LEFT JOIN [salesforce].[mapping_Account] AccountLookupForNameInsured on AccountLookupForNameInsured.[NAMERECORD_NAMEID] = rela.NAME_ID
			--LEFT JOIN [EDW_Outbound].[salesforce].[LOOKUP_ACCOUNT] AccountLookupForNameInsured on AccountLookupForNameInsured.LIFEPRO_ID__C = rela.NAME_ID
			LEFT JOIN [EDW_Outbound].[salesforce].[LOOKUP_SUB_ACCOUNT__C] SubAccountLookupForNameInsured on SubAccountLookupForNameInsured.NAME_ID__C = rela.NAME_ID
			where relate_code = 'PO' 
			) AS FirstNameInsured ON FirstNameInsured.POLICY_NUMBER = POLC.POLICY_NUMBER AND FirstNameInsured.COMPANY_CODE = POLC.COMPANY_CODE AND FirstNameInsured.RN = 1
LEFT JOIN ( 			
			select  ROW_NUMBER() OVER 
					(PARTITION BY RELA.POLICY_NUMBER, RELA.COMPANY_CODE ORDER BY RELA.NAME_ID ASC)    AS RN
					, RELA.POLICY_NUMBER, RELA.COMPANY_CODE, RELA.[NAME_ID] as RelaNameID
					, AccountLookupForServiceAgent.[SALESFORCE_ID] as AccountID
			from [EDW_DataLake].[lifepro_v].[RELA_Curr_Vw] RELA
			LEFT JOIN [salesforce].[mapping_Account] AccountLookupForServiceAgent on AccountLookupForServiceAgent.[NAMERECORD_NAMEID] = rela.NAME_ID
			--LEFT JOIN [EDW_Outbound].[salesforce].[LOOKUP_ACCOUNT] AccountLookupForServiceAgent on AccountLookupForServiceAgent.LIFEPRO_ID__C = rela.NAME_ID
			where relate_code = 'SA'
			) AS FirstProducer ON FirstProducer.POLICY_NUMBER = POLC.POLICY_NUMBER AND FirstProducer.COMPANY_CODE = POLC.COMPANY_CODE AND FirstProducer.RN = 1
LEFT JOIN (
			SELECT *,
			 ROW_NUMBER() OVER 
					(PARTITION BY COMPANY_CODE, POLICY_NUMBER ORDER BY sysdata desc )    AS RN		
			FROM [EDW_DataLake].[lifepro_v].[POLM_018_Curr_Vw]
		  ) AS POLM_18 ON POLM_18.COMPANY_CODE = POLC.COMPANY_CODE AND POLM_18.POLICY_NUMBER = POLC.POLICY_NUMBER AND POLM_18.RN = 1
LEFT JOIN (
			select *,
			 ROW_NUMBER() OVER 
					(PARTITION BY COMPANY_CODE, POLICY_NUMBER ORDER BY sysdata desc )    AS RN			
			FROM [EDW_DataLake].[lifepro_v].[PBEN_BA_Curr_Vw]
			) AS PBEN_BA ON PBEN_BA.COMPANY_CODE = POLC.COMPANY_CODE AND PBEN_BA.POLICY_NUMBER = POLC.POLICY_NUMBER AND PBEN_BA.RN = 1
LEFT JOIN (
			select ROW_NUMBER() OVER 
					(PARTITION BY COMPANY_CODE, POLICY_NUMBER ORDER BY sysdata desc )    AS RN	
				, COMPANY_CODE
				, POLICY_NUMBER
				, AGENT_COMM_OPTION_1
				, SERVICE_AGENT_IND_1 
				, SERVICE_AGENT_IND_2 
				, SERVICE_AGENT_IND_3 
				, SERVICE_AGENT_IND_4 
				, SERVICE_AGENT_IND_5 
				, SERVICE_AGENT_IND_6 
				, SERVICE_AGENT_IND_7 
				, SERVICE_AGENT_IND_8 
				, SERVICE_AGENT_IND_9 
				, SERVICE_AGENT_IND_10
				, AGENT_1
			FROM [EDW_DataLake].[lifepro_v].[COMC_S_Curr_Vw]
			) AS COMC_S ON COMC_S.COMPANY_CODE = POLC.COMPANY_CODE AND COMC_S.POLICY_NUMBER = POLC.POLICY_NUMBER AND COMC_S.RN = 1
LEFT JOIN (
			select DESCRIPTION, COVERAGE_ID,
			 ROW_NUMBER() OVER 
					(PARTITION BY COVERAGE_ID ORDER BY DESCRIPTION )    AS RN			
			FROM [EDW_DataLake].[lifepro_v].[COVR_Curr_Vw]
			) AS COVR ON COVR.COVERAGE_ID = POLC.PRODUCT_ID AND COVR.RN = 1
LEFT JOIN (
			SELECT ROW_NUMBER() OVER 
					(PARTITION BY COMPANY_CODE, POLICY_NUMBER ORDER BY sysdata desc )    AS RN
				, COMPANY_CODE
				, POLICY_NUMBER
				, S1_EXPECTED_PREM
				, S2_STATUS
			FROM [EDW_DataLake].[lifepro_v].[POLM_028_Curr_Vw]
		  ) AS POLM_28 ON POLM_28.COMPANY_CODE = POLC.COMPANY_CODE AND POLM_28.POLICY_NUMBER = POLC.POLICY_NUMBER AND POLM_28.RN = 1
LEFT JOIN (
			SELECT ROW_NUMBER() OVER 
					(PARTITION BY COMPANY_CODE, POLICY_NUMBER ORDER BY sysdata desc )    AS RN	
				, COMPANY_CODE
				, POLICY_NUMBER
				, EXPECTED_PREMIUM
			FROM [EDW_DataLake].[lifepro_v].[POLM_019_Curr_Vw]
		  ) AS POLM_19 ON POLM_19.COMPANY_CODE = POLC.COMPANY_CODE AND POLM_19.POLICY_NUMBER = POLC.POLICY_NUMBER AND POLM_19.RN = 1
LEFT JOIN (
			select ROW_NUMBER() OVER 
					(PARTITION BY COMPANY_CODE, POLICY_NUMBER ORDER BY sysdata desc )    AS RN	
				, COMPANY_CODE
				, POLICY_NUMBER
				, ISSUE_AGE
				, MATURE_EXPIRE_DATE
			FROM [EDW_DataLake].[lifepro_v].[PBEN_BF_Curr_Vw]
			) AS PBEN_BF ON PBEN_BF.COMPANY_CODE = POLC.COMPANY_CODE AND PBEN_BF.POLICY_NUMBER = POLC.POLICY_NUMBER AND PBEN_BF.RN = 1
LEFT OUTER JOIN (
			SELECT ROW_NUMBER() OVER 
					(PARTITION BY COMPANY_CODE, POLICY_NUMBER ORDER BY PBEN_OR_CURR.sysdata desc )    AS RN	
				, COMPANY_CODE
				, POLICY_NUMBER
				, SEGT_B1.CONSTANT_RATE
			FROM [EDW_DataLake].[lifepro_v].[PBEN_OR_Curr_Vw] AS PBEN_OR_CURR
			INNER JOIN [EDW_DataLake].[lifepro_v].[SEGT_BN_Curr_Vw] SEGT_BN ON
					PBEN_OR_CURR.PLAN_CODE = SEGT_BN.SEGMENT_ID
			INNER JOIN [EDW_DataLake].[lifepro_v].[SEGT_B1_Curr_Vw] SEGT_B1 ON
					SEGT_BN.BN_BONUS_RATE_ID_1 = SEGT_B1.SEGMENT_ID
		  ) AS PBEN_OR ON PBEN_OR.COMPANY_CODE = POLC.COMPANY_CODE AND PBEN_OR.POLICY_NUMBER = POLC.POLICY_NUMBER AND PBEN_OR.RN = 1
LEFT OUTER JOIN (
			SELECT ROW_NUMBER() OVER 
					(PARTITION BY COMPANY_CODE, POLICY_NUMBER ORDER BY ACON_CURR.sysdata desc )    AS RN	
				, COMPANY_CODE
				, POLICY_NUMBER
				, PAYMENT_MODE
				, PERIOD_CERTAIN_YEARS
				, PAYMENT_METHOD
				, EXCLUSION_PCT
			FROM [EDW_DataLake].[lifepro_v].[ACON_Curr_Vw] AS ACON_CURR
		  ) AS ACON ON ACON.COMPANY_CODE = POLC.COMPANY_CODE AND ACON.POLICY_NUMBER = POLC.POLICY_NUMBER AND ACON.RN = 1
LEFT JOIN (
			select *,
			ROW_NUMBER() OVER
				(PARTITION BY PRODUCTCODE ORDER BY PRODUCTCODE ) AS RN
				FROM [EDW_Outbound].salesforce.[LOOKUP_PRODUCT2]
				) AS PRODUCT ON PRODUCT.PRODUCTCODE = POLC.PRODUCT_ID AND PRODUCT.RN = 1
LEFT JOIN [EDW_Outbound].[salesforce].[LOOKUP_PRODUCER] producer
	ON COMC_S.AGENT_1 = producer.NAME
	AND COMC_S.COMPANY_CODE = producer.COMPANY_CODE__C
LEFT JOIN [EDW_Outbound].[salesforce].[Policy_Status_Reason] psr
	ON POLC.CONTRACT_CODE = psr.StatusCode
	AND POLC.CONTRACT_REASON = psr.ReasonCode
LEFT JOIN work.tmp_Policy_Riders Riders
    ON POLC.COMPANY_CODE = Riders.COMPANY_CODE
	AND POLC.POLICY_NUMBER = Riders.POLICY_NUMBER
WHERE FirstNameInsured.AccountID IS NOT NULL
	AND EXISTS(SELECT 1 FROM [salesforce].[Policy] AS DEST WHERE DEST.LifePro_CompanyCode = TMP.CompanyCode AND DEST.LifePro_PolicyNumber = TMP.PolicyNumber);



INSERT INTO EDW_Outbound.salesforce.Policy (	
												[RecordTypeId],
												[NameInsuredId],
												[Name],
												[ProductId],
												[Issue_Date__c],
												[Status],
												[Status_Reason__c],
												[ProducerId],
												[Product_External_Id__c],
												[External_Id__c],
												[Sub_Account__c],
												[SuitabilityStatus],
												[Policy_Holder_Name_Id__c],
												[Service_Agent_Name_Id__c],
												[Company_Code__c],
												[Policy_Code__c],
												[Line_of_Business__c],
												[Application_Date__c],
												[Application_Received_Date],
												[Effective_Date__c],
												[Terminated_Date__c],
												[Delivery_Receipt_Date__c],
												[Issue_State__c],
												[Contract_Year],
												[Tax_Status__c],
												[Out_Of_Surrender_Date__c],
												[PAC_PlannedPremiumAmount__c],
												[PAC_PremiumMode__c],
												[PAC_PlannedDateOfDebit__c],
												[Created_dt],
												[LifePro_CompanyCode],
												[LifePro_PolicyNumber],
												[Maturity_Date],
												[Riders__c],
												[Commission_Option__c],
												[Inherited__c],
												[LIBR_Choice__c],
												[Estimated_Premium__c],
												[Issue_Age__c],
												[Service_Agent_Changed__c],
												[BAV_Bonus_Percentage__c],
												[Status_Reason_Description__c],
												[Block_Indicator__c],
												[Payment_Mode__c],
												[Period_Certain_Years__c],
												[Payment_Method__c],
												[Exclusion_Ratio__c])
select 
CASE
	WHEN POLC.CONTRACT_CODE = 'P' THEN @PendingPolicyRecordTypeID
	WHEN POLC.POLICY_CODE = '7' THEN @EmployeePolicyRecordTypeID
	WHEN POLC.PRODUCT_ID = 'I-ESTATE' THEN @EstateShieldPolicyRecordTypeID
	ELSE @PolicyRecordTypeID
END AS [RecordTypeId]
, FirstNameInsured.AccountID AS [NameInsuredId]
, POLC.POLICY_NUMBER AS [Name]
, PRODUCT.ID AS [ProductId]
, CASE 
	  WHEN POLC.ISSUE_DATE > '12/31/4000' THEN NULL
	  WHEN POLC.ISSUE_DATE < '1/1/1700' THEN NULL
	  ELSE POLC.ISSUE_DATE
  END AS [Issue_Date__c]
, POLC.CONTRACT_CODE AS [Status]
, POLC.CONTRACT_REASON AS [Status_Reason__c]
, producer.ID AS [ProducerId] 
, POLC.PRODUCT_ID AS [Product_External_Id__c]
, TRIM(POLC.POLICY_NUMBER) + '-' + TRIM(POLC.COMPANY_CODE) AS [External_Id__c]
, FirstNameInsured.SubAccountID AS [Sub_Account__c]
, ISNULL(POLM_18.SUIT_STATUS, POLM_28.S2_STATUS) AS [SuitabilityStatus]
, FirstNameInsured.RelaNameID AS [Policy_Holder_Name_Id__c]
, FirstProducer.RelaNameID AS [Service_Agent_Name_Id__c]
, POLC.COMPANY_CODE AS [Company_Code__c]
, POLC.POLICY_CODE AS [Policy_Code__c]  
, POLC.LINE_OF_BUSINESS AS [Line_of_Business__c]
, CASE 
	  WHEN POLC.APPLICATION_DATE > '12/31/4000' THEN NULL
	  WHEN POLC.APPLICATION_DATE < '1/1/1700' THEN NULL
	  ELSE POLC.APPLICATION_DATE
  END AS [Application_Date__c]
, CASE 
	  WHEN POLC.APP_RECEIVED_DATE > '12/31/4000' THEN NULL
	  WHEN POLC.APP_RECEIVED_DATE < '1/1/1700' THEN NULL
	  ELSE POLC.APP_RECEIVED_DATE
  END AS [Application_Received_Date]
, CASE 
	  WHEN POLC.CONTRACT_DATE > '12/31/4000' THEN NULL
	  WHEN POLC.CONTRACT_DATE < '1/1/1700' THEN NULL
	  ELSE POLC.CONTRACT_DATE
  END AS [Effective_Date__c]
, CASE 
	WHEN POLC.CONTRACT_DATE > '12/31/4000' THEN NULL
	WHEN POLC.CONTRACT_DATE < '1/1/1700' THEN NULL
	ELSE POLC.CONTRACT_DATE
	END AS [Terminated_Date__c]
, CASE 
	  WHEN POLC.DELIVERY_DATE > '12/31/4000' THEN NULL
	  WHEN POLC.DELIVERY_DATE < '1/1/1700' THEN NULL
	  ELSE POLC.DELIVERY_DATE
  END AS [Delivery_Receipt_Date__c]
, POLC.ISSUE_STATE AS [Issue_State__c]
, POLC.DURATION AS [Contract_Year]
, POLC.TAX_QUALIFY_CODE AS [Tax_Status__c]
, CASE 
	  WHEN POLC.SURR_PER_DATE > '12/31/4000' THEN NULL
	  WHEN POLC.SURR_PER_DATE < '1/1/1700' THEN NULL
	  ELSE POLC.SURR_PER_DATE
  END AS [Out_Of_Surrender_Date__c]
, POLC.MODE_PREMIUM AS [PAC_PlannedPremiumAmount__c]
, POLC.BILLING_MODE AS [PAC_PremiumMode__c]
, POLC.POLICY_BILL_DAY AS [PAC_PlannedDateOfDebit__c]
, [Created_dt] = CURRENT_TIMESTAMP
, POLC.COMPANY_CODE AS [LifePro_CompanyID]
, POLC.POLICY_NUMBER AS [LifePro_PolicyID]
,  CASE
      WHEN PBEN_BA.MATURE_EXPIRE_DATE IS NOT NULL THEN
           CASE WHEN PBEN_BA.MATURE_EXPIRE_DATE > '12/31/4000' THEN NULL
                WHEN PBEN_BA.MATURE_EXPIRE_DATE < '1/1/1700' THEN NULL
                ELSE PBEN_BA.MATURE_EXPIRE_DATE
           END
      WHEN PBEN_BF.MATURE_EXPIRE_DATE IS NOT NULL THEN
           CASE WHEN PBEN_BF.MATURE_EXPIRE_DATE > '12/31/4000' THEN NULL
                WHEN PBEN_BF.MATURE_EXPIRE_DATE < '1/1/1700' THEN NULL
                ELSE PBEN_BF.MATURE_EXPIRE_DATE
           END
      ELSE NULL
  END AS [Maturity_Date]
--, PBEN_BA.MATURE_EXPIRE_DATE AS [Maturity_Date]
, Riders.RIDERS AS [Riders__c]
, COMC_S.AGENT_COMM_OPTION_1 AS [COMMISSION_OPTION__C]
, CASE TRIM(POLC.IRA_TYPE)
	WHEN 'I' THEN 1
	ELSE 0
  END AS [Inherited__C]
, COVR.DESCRIPTION AS [LIBR_Choice__c]
, CASE WHEN POLM_18.SUIT_EXPECTED_PREM IS NOT NULL AND POLM_18.SUIT_EXPECTED_PREM > 0 THEN POLM_18.SUIT_EXPECTED_PREM
	   WHEN POLM_18.SUIT_EXPECTED_PREM = 0 AND POLM_28.S1_EXPECTED_PREM IS NULL THEN POLM_18.SUIT_EXPECTED_PREM
	   WHEN POLM_19.EXPECTED_PREMIUM IS NOT NULL AND POLM_19.EXPECTED_PREMIUM > 0 THEN POLM_19.EXPECTED_PREMIUM
	   WHEN POLM_19.EXPECTED_PREMIUM = 0 AND POLM_28.S1_EXPECTED_PREM IS NULL THEN POLM_19.EXPECTED_PREMIUM
	   ELSE POLM_28.S1_EXPECTED_PREM
  END AS [Estimated_Premium__c]
, PBEN_BF.ISSUE_AGE AS [Issue_Age__c]
, CASE
		WHEN SERVICE_AGENT_IND_1 = 'P' THEN 1
		WHEN SERVICE_AGENT_IND_2 = 'P' THEN 1
		WHEN SERVICE_AGENT_IND_3 = 'P' THEN 1
		WHEN SERVICE_AGENT_IND_4 = 'P' THEN 1
		WHEN SERVICE_AGENT_IND_5 = 'P' THEN 1
		WHEN SERVICE_AGENT_IND_6 = 'P' THEN 1
		WHEN SERVICE_AGENT_IND_7 = 'P' THEN 1
		WHEN SERVICE_AGENT_IND_8 = 'P' THEN 1
		WHEN SERVICE_AGENT_IND_9 = 'P' THEN 1
		WHEN SERVICE_AGENT_IND_10 = 'P' THEN 1
		ELSE 0
  END AS [Service_Agent_Changed__c]
, PBEN_OR.CONSTANT_RATE AS [BAV_Bonus_Percentage__c]
, psr.ReasonCodeDesc AS [Status_Reason_Description__c]
, CASE TRIM(POLC.BLOCK_PROCESS_FLAG)
	WHEN 'Y' THEN 1
	ELSE 0
  END AS [Block_Indicator__c]
, CASE WHEN TRIM(ACON.PAYMENT_MODE) = '' THEN NULL ELSE ACON.PAYMENT_MODE END AS [Payment_Mode__c]
, ACON.PERIOD_CERTAIN_YEARS AS [Period_Certain_Years__c]
, CASE WHEN TRIM(ACON.PAYMENT_METHOD) = '' THEN NULL ELSE ACON.PAYMENT_METHOD END AS [Payment_Method__c]
, ACON.EXCLUSION_PCT AS [Exclusion_Ratio__c]
FROM [work].[tmp_Policy_Bus_Keys] AS TMP
JOIN (	select *		
		, ROW_NUMBER() OVER 
					(PARTITION BY COMPANY_CODE, POLICY_NUMBER ORDER BY sysdata desc )    AS RN
		from [EDW_DataLake].[lifepro_v].[POLC_Curr_Vw]) AS POLC ON POLC.COMPANY_CODE = TMP.CompanyCode AND POLC.POLICY_NUMBER = TMP.PolicyNumber and POLC.RN = 1
LEFT JOIN ( 			
			select  ROW_NUMBER() OVER 
					(PARTITION BY RELA.POLICY_NUMBER, RELA.COMPANY_CODE ORDER BY RELA.NAME_ID ASC)    AS RN
					, RELA.POLICY_NUMBER, RELA.COMPANY_CODE, RELA.[NAME_ID] as RelaNameID
					, ISNULL(AccountLookupForNameInsured.[SALESFORCE_ID], SubAccountLookupForNameInsured.PARENT_ACCOUNT__C) as AccountID
					, SubAccountLookupForNameInsured.ID AS SubAccountID
			from [EDW_DataLake].[lifepro_v].[RELA_Curr_Vw] RELA
			LEFT JOIN [salesforce].[mapping_Account] AccountLookupForNameInsured on AccountLookupForNameInsured.[NAMERECORD_NAMEID] = rela.NAME_ID
			--LEFT JOIN [EDW_Outbound].[salesforce].[LOOKUP_ACCOUNT] AccountLookupForNameInsured on AccountLookupForNameInsured.LIFEPRO_ID__C = rela.NAME_ID
			LEFT JOIN [EDW_Outbound].[salesforce].[LOOKUP_SUB_ACCOUNT__C] SubAccountLookupForNameInsured on SubAccountLookupForNameInsured.NAME_ID__C = rela.NAME_ID
			where relate_code = 'PO' 
			) AS FirstNameInsured ON FirstNameInsured.POLICY_NUMBER = POLC.POLICY_NUMBER AND FirstNameInsured.COMPANY_CODE = POLC.COMPANY_CODE AND FirstNameInsured.RN = 1
LEFT JOIN ( 			
			select  ROW_NUMBER() OVER 
					(PARTITION BY RELA.POLICY_NUMBER, RELA.COMPANY_CODE ORDER BY RELA.NAME_ID ASC)    AS RN
					, RELA.POLICY_NUMBER, RELA.COMPANY_CODE, RELA.[NAME_ID] as RelaNameID
					, AccountLookupForServiceAgent.[SALESFORCE_ID] as AccountID
			from [EDW_DataLake].[lifepro_v].[RELA_Curr_Vw] RELA
			LEFT JOIN [salesforce].[mapping_Account] AccountLookupForServiceAgent on AccountLookupForServiceAgent.[NAMERECORD_NAMEID] = rela.NAME_ID
			--LEFT JOIN [EDW_Outbound].[salesforce].[LOOKUP_ACCOUNT] AccountLookupForServiceAgent on AccountLookupForServiceAgent.LIFEPRO_ID__C = rela.NAME_ID
			where relate_code = 'SA'
			) AS FirstProducer ON FirstProducer.POLICY_NUMBER = POLC.POLICY_NUMBER AND FirstProducer.COMPANY_CODE = POLC.COMPANY_CODE AND FirstProducer.RN = 1
LEFT JOIN (
			select *,
			 ROW_NUMBER() OVER 
					(PARTITION BY COMPANY_CODE, POLICY_NUMBER ORDER BY sysdata desc )    AS RN			
			FROM [EDW_DataLake].[lifepro_v].[POLM_018_Curr_Vw]
			) AS POLM_18 ON POLM_18.COMPANY_CODE = POLC.COMPANY_CODE AND POLM_18.POLICY_NUMBER = POLC.POLICY_NUMBER AND POLM_18.RN = 1
LEFT JOIN (
			select *,
			 ROW_NUMBER() OVER 
					(PARTITION BY COMPANY_CODE, POLICY_NUMBER ORDER BY sysdata desc )    AS RN			
			FROM [EDW_DataLake].[lifepro_v].[PBEN_BA_Curr_Vw]
			) AS PBEN_BA ON PBEN_BA.COMPANY_CODE = POLC.COMPANY_CODE AND PBEN_BA.POLICY_NUMBER = POLC.POLICY_NUMBER AND PBEN_BA.RN = 1
LEFT JOIN (
			select ROW_NUMBER() OVER 
					(PARTITION BY COMPANY_CODE, POLICY_NUMBER ORDER BY sysdata desc )    AS RN	
				, COMPANY_CODE
				, POLICY_NUMBER
				, AGENT_COMM_OPTION_1
				, SERVICE_AGENT_IND_1 
				, SERVICE_AGENT_IND_2 
				, SERVICE_AGENT_IND_3 
				, SERVICE_AGENT_IND_4 
				, SERVICE_AGENT_IND_5 
				, SERVICE_AGENT_IND_6 
				, SERVICE_AGENT_IND_7 
				, SERVICE_AGENT_IND_8 
				, SERVICE_AGENT_IND_9 
				, SERVICE_AGENT_IND_10
				, AGENT_1
			FROM [EDW_DataLake].[lifepro_v].[COMC_S_Curr_Vw]
			) AS COMC_S ON COMC_S.COMPANY_CODE = POLC.COMPANY_CODE AND COMC_S.POLICY_NUMBER = POLC.POLICY_NUMBER AND COMC_S.RN = 1
LEFT JOIN (
			select DESCRIPTION, COVERAGE_ID,
			 ROW_NUMBER() OVER 
					(PARTITION BY COVERAGE_ID ORDER BY DESCRIPTION )    AS RN			
			FROM [EDW_DataLake].[lifepro_v].[COVR_Curr_Vw]
			) AS COVR ON COVR.COVERAGE_ID = POLC.PRODUCT_ID AND COVR.RN = 1
LEFT JOIN (
			SELECT ROW_NUMBER() OVER 
					(PARTITION BY COMPANY_CODE, POLICY_NUMBER ORDER BY sysdata desc )    AS RN
				, COMPANY_CODE
				, POLICY_NUMBER
				, S1_EXPECTED_PREM
				, S2_STATUS
			FROM [EDW_DataLake].[lifepro_v].[POLM_028_Curr_Vw]
		  ) AS POLM_28 ON POLM_28.COMPANY_CODE = POLC.COMPANY_CODE AND POLM_28.POLICY_NUMBER = POLC.POLICY_NUMBER AND POLM_28.RN = 1
LEFT JOIN (
			SELECT ROW_NUMBER() OVER 
					(PARTITION BY COMPANY_CODE, POLICY_NUMBER ORDER BY sysdata desc )    AS RN	
				, COMPANY_CODE
				, POLICY_NUMBER
				, EXPECTED_PREMIUM
			FROM [EDW_DataLake].[lifepro_v].[POLM_019_Curr_Vw]
		  ) AS POLM_19 ON POLM_19.COMPANY_CODE = POLC.COMPANY_CODE AND POLM_19.POLICY_NUMBER = POLC.POLICY_NUMBER AND POLM_19.RN = 1
LEFT JOIN (
			select ROW_NUMBER() OVER 
					(PARTITION BY COMPANY_CODE, POLICY_NUMBER ORDER BY sysdata desc )    AS RN	
				, COMPANY_CODE
				, POLICY_NUMBER
				, ISSUE_AGE
				, MATURE_EXPIRE_DATE
			FROM [EDW_DataLake].[lifepro_v].[PBEN_BF_Curr_Vw]
			) AS PBEN_BF ON PBEN_BF.COMPANY_CODE = POLC.COMPANY_CODE AND PBEN_BF.POLICY_NUMBER = POLC.POLICY_NUMBER AND PBEN_BF.RN = 1
LEFT OUTER JOIN (
			SELECT ROW_NUMBER() OVER 
					(PARTITION BY COMPANY_CODE, POLICY_NUMBER ORDER BY PBEN_OR_CURR.sysdata desc )    AS RN	
				, COMPANY_CODE
				, POLICY_NUMBER
				, SEGT_B1.CONSTANT_RATE
			FROM [EDW_DataLake].[lifepro_v].[PBEN_OR_Curr_Vw] AS PBEN_OR_CURR
			INNER JOIN [EDW_DataLake].[lifepro_v].[SEGT_BN_Curr_Vw] SEGT_BN ON
					PBEN_OR_CURR.PLAN_CODE = SEGT_BN.SEGMENT_ID
			INNER JOIN [EDW_DataLake].[lifepro_v].[SEGT_B1_Curr_Vw] SEGT_B1 ON
					SEGT_BN.BN_BONUS_RATE_ID_1 = SEGT_B1.SEGMENT_ID
		  ) AS PBEN_OR ON PBEN_OR.COMPANY_CODE = POLC.COMPANY_CODE AND PBEN_OR.POLICY_NUMBER = POLC.POLICY_NUMBER AND PBEN_OR.RN = 1
LEFT OUTER JOIN (
			SELECT ROW_NUMBER() OVER 
					(PARTITION BY COMPANY_CODE, POLICY_NUMBER ORDER BY ACON_CURR.sysdata desc )    AS RN	
				, COMPANY_CODE
				, POLICY_NUMBER
				, PAYMENT_MODE
				, PERIOD_CERTAIN_YEARS
				, PAYMENT_METHOD
				, EXCLUSION_PCT
			FROM [EDW_DataLake].[lifepro_v].[ACON_Curr_Vw] AS ACON_CURR
		  ) AS ACON ON ACON.COMPANY_CODE = POLC.COMPANY_CODE AND ACON.POLICY_NUMBER = POLC.POLICY_NUMBER AND ACON.RN = 1
LEFT JOIN (
			select *,
			ROW_NUMBER() OVER
				(PARTITION BY PRODUCTCODE ORDER BY PRODUCTCODE ) AS RN
				FROM [EDW_Outbound].salesforce.[LOOKUP_PRODUCT2]
				) AS PRODUCT ON PRODUCT.PRODUCTCODE = POLC.PRODUCT_ID AND PRODUCT.RN = 1
LEFT JOIN [EDW_Outbound].[salesforce].[LOOKUP_PRODUCER] producer
	ON COMC_S.AGENT_1 = producer.NAME
	AND COMC_S.COMPANY_CODE = producer.COMPANY_CODE__C
LEFT JOIN [EDW_Outbound].[salesforce].[Policy_Status_Reason] psr
	ON POLC.CONTRACT_CODE = psr.StatusCode
	AND POLC.CONTRACT_REASON = psr.ReasonCode
LEFT JOIN work.tmp_Policy_Riders Riders
    ON POLC.COMPANY_CODE = Riders.COMPANY_CODE
	AND POLC.POLICY_NUMBER = Riders.POLICY_NUMBER
WHERE FirstNameInsured.AccountID IS NOT NULL
	AND NOT EXISTS(SELECT 1 FROM [salesforce].[Policy] AS DEST WHERE DEST.LifePro_CompanyCode = TMP.CompanyCode AND DEST.LifePro_PolicyNumber = TMP.PolicyNumber);




/* START: Update delta settings.*/
IF (1=1)
	BEGIN;
	UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_POLICY AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_POLICY AND Setting_Module = @SETTING_MODULE;
	UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_POLICY_RELA AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_POLICY_RELA AND Setting_Module = @SETTING_MODULE;
	UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_POLICY_POLM_18 AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_POLICY_POLM_18 AND Setting_Module = @SETTING_MODULE;
	UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_POLICY_PBEN_BA AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_POLICY_PBEN_BA AND Setting_Module = @SETTING_MODULE;
	UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_POLICY_COMC AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_POLICY_COMC AND Setting_Module = @SETTING_MODULE;
	UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_POLICY_POLM_28 AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_POLICY_POLM_28 AND Setting_Module = @SETTING_MODULE;
	UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_POLICY_POLM_19 AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_POLICY_POLM_19 AND Setting_Module = @SETTING_MODULE;
	UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_POLICY_PBEN_BF AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_POLICY_PBEN_BF AND Setting_Module = @SETTING_MODULE;
	UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_POLICY_PBEN_OR AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_POLICY_PBEN_OR AND Setting_Module = @SETTING_MODULE;
	UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_POLICY_ACON AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_POLICY_ACON AND Setting_Module = @SETTING_MODULE;
	END;



END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();


RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_PhoneNumber]    Script Date: 5/17/2022 2:04:44 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/****** Object:  StoredProcedure [salesforce].[usp_Insert_PhoneNumber_Initial]    Script Date: 9/1/2021 7:06:32 AM ******/

-- =============================================
-- Author:		Steve Tangeman
-- Create date: 06/09/2021
-- Modified:	08/25/2021 - Anastasia Vogelaar - Altered procedure so it only runs for the initial load
-- Description:	Insert data from EDW_DataLake into EDW_Outbound for PhoneNumber 

 -- Change Log: 		
 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		9/1/2021
 -- Version:			0.1.2
 -- Description:		Converted Insert into Upsert

 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		9/16/2021
 -- Version:			0.1.3
 -- Description:		Added data lake record ID for bi-directional sync

 -- Modified By:		Jason Rippel
 -- Modified Date:		3/24/2022
 -- Version:			0.1.4
 -- Description:		Updated to account for EFFECTIVE_DATE = NULL and for bi-directional sync

 --DROP TABLE [EDW_Outbound].[work].[tmp_PhoneNumber_Delta];

 -- =============================================
CREATE        PROCEDURE [salesforce].[usp_Upsert_PhoneNumber] 
AS
BEGIN
SET NOCOUNT ON;

BEGIN TRY
--Declare variables for delta loading
DECLARE @SETTING_MODULE								VARCHAR(20) = 'SF_SYNC';
DECLARE @SETTING_PHONENUMBER_NALK					VARCHAR(50) = 'SYNC_PhoneNumber_NALK';
DECLARE @START_NALK									BIGINT;
DECLARE @END_NALK									BIGINT;
DECLARE	@MINID										BIGINT;
DECLARE @MAXID										BIGINT;
DECLARE @BATCHSIZE									INT			= 100000;


--RESET LOGIC
--UPDATE [EDW_Audit].DBO.Delta_Settings SET Setting_Value = '0' WHERE Setting_Module = @SETTING_MODULE AND Setting_Name IN ('SYNC_PhoneNumber_NALK');

--INSERT LOGIC
--INSERT [EDW_Audit].DBO.Delta_Settings (SETTING_NAME, SETTING_VALUE, SETTING_MODULE) VALUES (@SETTING_PHONENUMBER_NALK, '0', @SETTING_MODULE);

--Retrieve delta settings
SELECT @START_NALK = CAST([SETTING_VALUE] AS INT) FROM [EDW_Audit].[DBO].[Delta_Settings] WHERE [Setting_Module]= @SETTING_MODULE AND [Setting_Name] = @SETTING_PHONENUMBER_NALK;
SELECT @END_NALK = MAX([ROW_ID]) FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw];

--Check if there are any new records
IF @START_NALK< @END_NALK
	BEGIN;
	/*START: Create temporary objects*/
	IF (1=1)
		BEGIN;
		IF OBJECT_ID (N'work.tmp_PhoneNumber_NAMEID', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [EDW_Outbound].[work].[tmp_PhoneNumber_NAMEID];
			END;
		ELSE 
			BEGIN;
			CREATE TABLE [EDW_Outbound].[work].[tmp_PhoneNumber_NAMEID](
					  [NAME_ID] INT NOT NULL PRIMARY KEY CLUSTERED
					
				);
			END;
		IF OBJECT_ID (N'work.tmp_PhoneNumber_Delta', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [EDW_Outbound].[work].[tmp_PhoneNumber_Delta];
			END;
		ELSE 
			BEGIN;
			CREATE TABLE [EDW_Outbound].[work].[tmp_PhoneNumber_Delta](
					  [Row_ID]	BIGINT NOT NULL IDENTITY
					, [NAME_ID] INT NOT NULL PRIMARY KEY CLUSTERED
					, [PHONE_NUMBER] BIGINT NULL
					, [EFFECTIVE_DATE] [datetime2](7) NULL
					, [ADDRESS_CODE] [varchar](3) NULL
					, [COMPANY_CODE] [varchar](2) NULL
					, [POLICY_NUMBER] [varchar](12) NULL
					, [ADDRESS_ID] [int] NULL
					, [VERSION_ID] BIGINT NULL
				);
			CREATE NONCLUSTERED INDEX IDX_PhoneNumber_RowID ON [EDW_Outbound].[work].[tmp_PhoneNumber_Delta] (Row_ID) INCLUDE (NAME_ID, PHONE_NUMBER);
			END;
		--Check constraints

		END;
	/*END: Create temporary objects*/
	/*START: Populate temporary objects*/
	IF (1=1)
		BEGIN;
		--Get all changed name id-s
		INSERT [EDW_Outbound].[work].[tmp_PhoneNumber_NAMEID]
			(NAME_ID)
		SELECT	NAME_ID
		FROM	EDW_DataLake.lifepro_v.NALK_Curr_Vw
		WHERE	Row_ID>@START_NALK
				AND Row_ID <= @END_NALK
		GROUP BY NAME_ID;

		;WITH LATEST_BUS_PHONE
			AS
			(SELECT ROW_NUMBER() OVER (PARTITION BY NALK.[NAME_ID] ORDER BY COALESCE(NALK.[EFFECTIVE_DATE],'1/1/1753') DESC, NALK.[ADDRESS_ID] DESC, COALESCE(TRIM(NALK.[ADDRESS_CODE]),'') DESC) AS RN
				, NALK.[NAME_ID]
				, NALK.[PHONE_NUMBER]
				, NALK.[EFFECTIVE_DATE]
				, NALK.[ADDRESS_CODE]
				, NALK.[COMPANY_CODE]
				, NALK.[POLICY_NUMBER]
				, NALK.[ADDRESS_ID]
				, NALK.[VERSION_ID]
			 FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] AS NALK
			 WHERE COALESCE(TRIM(NALK.[ADDRESS_CODE]),'') IN ('BUS', '')
			   AND COALESCE(NALK.[PHONE_NUMBER],0)>0
			   AND EXISTS (SELECT 1 FROM [work].[tmp_PhoneNumber_NAMEID] AS CHANGEDNAMEDIDS WHERE CHANGEDNAMEDIDS.NAME_ID = NALK.NAME_ID)
			)
		INSERT [EDW_Outbound].[work].[tmp_PhoneNumber_Delta]
			 ( [NAME_ID]
			 , [PHONE_NUMBER]
			 , [EFFECTIVE_DATE]
			 , [ADDRESS_CODE]
			 , [COMPANY_CODE]
			 , [POLICY_NUMBER]
			 , [ADDRESS_ID]
			 , [VERSION_ID]
			 )
		SELECT [NAME_ID]
			 , [PHONE_NUMBER]
			 , [EFFECTIVE_DATE]
			 , [ADDRESS_CODE]
			 , [COMPANY_CODE]
			 , [POLICY_NUMBER]
			 , [ADDRESS_ID]
			 , [VERSION_ID]
		FROM LATEST_BUS_PHONE
		WHERE RN = 1
		END;
	/*END: Populate temporary objects*/

	/*START: Update existing records*/
	IF (1=1)
		BEGIN;
		--Set variables for batch udpates
		SELECT	@MINID		= MIN([Row_ID])
				, @MAXID	= MAX([Row_ID])
		FROM [EDW_Outbound].[work].[tmp_PhoneNumber_Delta];
		WHILE @MINID <= @MAXID
			BEGIN;
			UPDATE	DEST
			SET	DEST.PhoneNumber = '(' + SUBSTRING(CAST(SRC.PHONE_NUMBER AS NVARCHAR), 1, 3) + ') ' + SUBSTRING(CAST(SRC.PHONE_NUMBER AS NVARCHAR), 4, 3) + '-' + SUBSTRING(CAST(SRC.PHONE_NUMBER AS NVARCHAR), 7, 4) 
			  , DEST.EFFECTIVE_DATE = SRC.EFFECTIVE_DATE
			  , DEST.ADDRESS_CODE = SRC.ADDRESS_CODE
			  , DEST.COMPANY_CODE = SRC.COMPANY_CODE
			  , DEST.POLICY_NUMBER = SRC.POLICY_NUMBER
			  , DEST.ADDRESS_ID = SRC.ADDRESS_ID
			  , DEST.MODIFIED_DT = CURRENT_TIMESTAMP
			  , DEST.[VERSION_ID] = COALESCE(SRC.[VERSION_ID],0)
			FROM [salesforce].[PhoneNumber] DEST 
				INNER JOIN [EDW_Outbound].[work].[tmp_PhoneNumber_Delta] AS SRC ON	
					SRC.[NAME_ID] = DEST.[NameID]
			WHERE --DEST.PhoneNumber<>'(' + SUBSTRING(CAST(SRC.PHONE_NUMBER AS NVARCHAR), 1, 3) + ') ' + SUBSTRING(CAST(SRC.PHONE_NUMBER AS NVARCHAR), 4, 3) + '-' + SUBSTRING(CAST(SRC.PHONE_NUMBER AS NVARCHAR), 7, 4) 
					--AND 
					SRC.[Row_ID] >= @MINID 
					AND SRC.[Row_ID] < @MINID + @BATCHSIZE;
			SELECT @MINID = @MINID + @BATCHSIZE;
			END;
			
		END;
	/*END: Update existing records*/
	/*START: Insert new records*/
	INSERT [salesforce].[PhoneNumber]
		( [NameID]
		, [PhoneNumber]
		, [EFFECTIVE_DATE]
		, [ADDRESS_CODE]
		, [COMPANY_CODE]
		, [POLICY_NUMBER]
		, [ADDRESS_ID]
		, [CREATED_DT]
		, [VERSION_ID])
	SELECT	SRC.NAME_ID
		  , '(' + SUBSTRING(CAST(SRC.PHONE_NUMBER AS NVARCHAR), 1, 3) + ') ' + SUBSTRING(CAST(SRC.PHONE_NUMBER AS NVARCHAR), 4, 3) + '-' + SUBSTRING(CAST(SRC.PHONE_NUMBER AS NVARCHAR), 7, 4) 
		  , SRC.EFFECTIVE_DATE
		  , SRC.ADDRESS_CODE
		  , SRC.COMPANY_CODE
		  , SRC.POLICY_NUMBER
		  , SRC.ADDRESS_ID
		  , CURRENT_TIMESTAMP
		  , COALESCE(SRC.VERSION_ID,0)
	FROM	 [EDW_Outbound].[work].[tmp_PhoneNumber_Delta] AS SRC
	WHERE	NOT EXISTS(SELECT 1 FROM [salesforce].[PhoneNumber] AS DEST WHERE DEST.[NameID] = SRC.[NAME_ID]);
	/*END: Insert new records*/
	/*START: Update setting values*/
	IF (1=1)
		BEGIN;
		UPDATE [EDW_Audit].[DBO].[Delta_Settings] SET Setting_Value = @END_NALK WHERE [Setting_Name] = @SETTING_PHONENUMBER_NALK AND [Setting_Module] = @SETTING_MODULE;
		END;
	/*END: Update setting values*/
	END;



END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();


RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;

GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Insurance_Policy_Participant]    Script Date: 5/17/2022 2:04:45 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE       PROCEDURE [salesforce].[usp_Upsert_Insurance_Policy_Participant]
 	
AS
BEGIN;
-- =============================================

 -- Author: 			Steve Tangeman
 -- CreationDate: 		2021-07-12
 -- Version: 			0.1.0
 -- Description: 		Refresh Policy Participant table for synchronization with SalesForce 

 -- Change Log: 		
 -- Modified By:		Steve Tangeman
 -- Modified Date:		9/29/2021
 -- Version:			0.1.1
 -- Description:		Added name fields for non-owners, Primary_Participant_SubAccount_Id, and e-mail check

 -- Modified By:		Steve Tangeman
 -- Modified Date:		10/13/2021
 -- Version:			0.1.2
 -- Description:		Added address fields for non-owners

 -- Modified By:		Steve Tangeman
 -- Modified Date:		10/26/2021
 -- Version:			0.1.3
 -- Description:		Date validation for DOB

 -- Modified By:		Darin Baarda
 -- Modified Date:		11/16/2021
 -- Version:			0.1.4
 -- Description:		Logic to not send relationships that are spaces

 -- Modified By:		Steve Tangeman
 -- Modified Date:		11/18/2021
 -- Version:			0.1.5
 -- Description:		Refactoring for performance by removing unnecessary RELA joins
 
 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		11/22/2021
 -- Version:			0.1.6
 -- Description:		Added index lookup for Insurance Policy

 -- Modified By:		Darin Baarda
 -- Modified Date:		11/24/2021
 -- Version:			0.1.7
 -- Description:		changed lookup_insurancepolicy to be inner join 

 -- Modified By:		Steve Tangeman
 -- Modified Date:		11/30/2021
 -- Version:			0.1.8
 -- Description:		Updated the join in the update section to include all unique fields

 -- Modified By:		Steve Tangeman
 -- Modified Date:		12/3/2021
 -- Version:			0.1.9
 -- Description:		Excluding contracts that were terminated over 10 years ago

 -- Modified By:		Steve Tangeman
 -- Modified Date:		12/13/2021
 -- Version:			0.1.10
 -- Description:		Fix for duplicate issue on tmp_Policy_Participant_Name_Bus_Keys

 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		12/17/2021
 -- Version:			0.2.0
 -- Description:		Replaced LOOKUP_Account with the mapping table

 -- Modified By:		Jason Rippel
 -- Modified Date:		12/20/2021
 -- Version:			0.2.1
 -- Description:		Added Logic for Invalid email

 -- Modified By:		Steve Tangeman
 -- Modified Date:		2/15/2022
 -- Version:			0.2.2
 -- Description:		Replaced [EDW_DataLake].[lifepro_v].[RELA_Curr_Vw] with [EDW_DataLake].[lifepro_v].[RELA_BusKey_Vw] to handle deletes

 -- Modified By:		Steve Tangeman
 -- Modified Date:		2/23/2022
 -- Version:			0.2.3
 -- Description:		Updated to use SysData for the external ID since RELA business keys can change

  -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		3/1/2022
 -- Version:			0.2.4
 -- Description:		Performance tuning, added logging
 --						DROP TABLE IF EXISTS [work].[tmp_Policy_Participant_Bene_Percent];
 --						CREATE NONCLUSTERED INDEX idx_NAME_ID ON [salesforce].[LOOKUP_SUB_ACCOUNT__C] ([NAME_ID__C]) INCLUDE ([ID]) WITH (FILLFACTOR =90);

 -- Modified By:	    Jason Rippel    
 -- Modified Date:	    3/15/2022
 -- Version:		    0.2.5
 -- Description:	    Updated Email address to Address Code = Business and Address Type = Email and Highest Effective Date

 -- Modified By:	    Steve Tangeman    
 -- Modified Date:	    3/24/2022
 -- Version:		    0.2.6
 -- Description:	    Fixed join to LOOKUP_INSURANCEPOLICY table by trimming policy number

 -- Modified By:	    Steve Tangeman    
 -- Modified Date:	    3/30/2022
 -- Version:		    0.2.7
 -- Description:	    Updated to not populate Primary_Participant_SubAccount_Id if a PrimaryParticipantAccountId exists

 -- Modified By:	    Anastasia Vogelaar
 -- Modified Date:	    04/07/2022
 -- Version:		    0.2.8
 -- Description:	    Added Phone Number check, removed indexing lookup tables since it's no longer needed

-- Full reload:
--DECLARE @SETTING_NAME_RELA			NVARCHAR(50) = 'SYNC_POLICY PARTICIPANT_RELA_BUSKEY_VW';
--DECLARE @SETTING_NAME_EXTN_RELABP		NVARCHAR(50) = 'SYNC_POLICY PARTICIPANT_EXTN_RELABP_CURR_VW';
--DECLARE @SETTING_NAME_NAME			NVARCHAR(50) = 'SYNC_POLICY PARTICIPANT_NAME_CURR_VW';
--DECLARE @SETTING_NAME_NALK			NVARCHAR(50) = 'SYNC_POLICY PARTICIPANT_NALK_CURR_VW';
--DECLARE @SETTING_NAME_ADDR			NVARCHAR(50) = 'SYNC_POLICY PARTICIPANT_ADDR_CURR_VW';
--DECLARE @SETTING_NAME_PHONE			NVARCHAR(50) = 'SYNC_POLICY PARTICIPANT_PHONE';
--DECLARE @SETTING_MODULE				NVARCHAR(50) = 'SF_SYNC';
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_RELA AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_EXTN_RELABP AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_NAME AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_NALK AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_ADDR AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '1/1/1753' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_PHONE AND SETTING_MODULE = @SETTING_MODULE;
-- =============================================

SET NOCOUNT ON;
DECLARE @SETTING_NAME_RELA			NVARCHAR(50) = 'SYNC_POLICY PARTICIPANT_RELA_BUSKEY_VW';
DECLARE @SETTING_NAME_EXTN_RELABP	NVARCHAR(50) = 'SYNC_POLICY PARTICIPANT_EXTN_RELABP_CURR_VW';
DECLARE @SETTING_NAME_NAME			NVARCHAR(50) = 'SYNC_POLICY PARTICIPANT_NAME_CURR_VW';
DECLARE @SETTING_NAME_NALK			NVARCHAR(50) = 'SYNC_POLICY PARTICIPANT_NALK_CURR_VW';
DECLARE @SETTING_NAME_ADDR			NVARCHAR(50) = 'SYNC_POLICY PARTICIPANT_ADDR_CURR_VW';
DECLARE @SETTING_NAME_PHONE			NVARCHAR(50) = 'SYNC_POLICY PARTICIPANT_PHONE'
DECLARE @SETTING_MODULE				NVARCHAR(50) = 'SF_SYNC';
DECLARE @START_VAL					BIGINT;
DECLARE @START_VAL_ADDR				BIGINT;
DECLARE @END_VAL_RELA				BIGINT;
DECLARE @END_VAL_EXTN_RELABP		BIGINT;
DECLARE @END_VAL_NAME				BIGINT;
DECLARE @END_VAL_NALK				BIGINT;
DECLARE @END_VAL_ADDR				BIGINT;
DECLARE @START_VAL_PHONE			DATETIME2;
DECLARE @END_VAL_PHONE				DATETIME2;
DECLARE @RecordTypeID				varchar(20);
DECLARE @ROWS						INT;		--Used for logging row counts
DECLARE @LOGID_START				INT;		--Used for the first log id
DECLARE	@LOGID						INT;		--Used for intermediate log ids

BEGIN TRY
IF NOT EXISTS(SELECT 1 FROM EDW_Audit.[dbo].[Delta_Settings] WHERE SETTING_NAME = @SETTING_NAME_PHONE AND SETTING_MODULE = @SETTING_MODULE)
	BEGIN;
	INSERT EDW_Audit.[dbo].[Delta_Settings] (Setting_Value, Setting_Module, Setting_Name) VALUES ('1/1/1753', @SETTING_MODULE, @SETTING_NAME_PHONE);
	END;

--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'PolicyParticipant:Start/End Indicator');
SELECT @LOGID_START = @@IDENTITY;

SELECT	@RecordTypeID = [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE DEVELOPERNAME = 'Policy_Participant' AND SOBJECTTYPE = 'InsurancePolicyParticipant';
--Retrieve delta variables
SELECT @START_VAL_PHONE= CAST([SETTING_VALUE] AS DATETIME2) FROM EDW_Audit.[dbo].[Delta_Settings] WHERE [Setting_Name]= @SETTING_NAME_PHONE AND [Setting_Module]= @SETTING_MODULE;
SELECT @END_VAL_PHONE = MAX(COALESCE([MODIFIED_DT], [CREATED_DT],'1/1/1753')) FROM [salesforce].[PhoneNumber];

/* START: Create temporary tables.*/
IF (1=1)
	BEGIN;
	--These tables will contain all changed business keys for all dependencies

	IF OBJECT_ID (N'work.tmp_Policy_Participant_Bus_Keys', N'U') IS NOT NULL
		BEGIN;
		TRUNCATE TABLE [work].[tmp_Policy_Participant_Bus_Keys];
		END;
	ELSE
		BEGIN;
			CREATE	TABLE [work].[tmp_Policy_Participant_Bus_Keys]
				(COMPANY_CODE VARCHAR(2) NOT NULL
			   , POLICY_NUMBER VARCHAR(12) NOT NULL
			   , NAME_ID INT NOT NULL
			   , BENEFIT_SEQ_NUMBER SMALLINT NOT NULL
			   , RELATE_CODE VARCHAR(2) NOT NULL
			   , DELETE_FLAG BIT NOT NULL
			   , SYSDATA BIGINT NOT NULL
			   , CONSTRAINT TMP_POLICY_PARTICIPANT PRIMARY KEY CLUSTERED (SYSDATA));
		END;

	IF OBJECT_ID (N'work.tmp_Policy_Participant_Bene_Percent', N'U') IS NOT NULL
		BEGIN;
		TRUNCATE TABLE [work].[tmp_Policy_Participant_Bene_Percent];
		END;
	ELSE
		BEGIN;
			CREATE	TABLE [work].[tmp_Policy_Participant_Bene_Percent]
				(COMPANY_CODE VARCHAR(2) NOT NULL
			   , POLICY_NUMBER VARCHAR(12) NOT NULL
			   , BP_NAME_ID INT NOT NULL
			   , BENEFIT_SEQ SMALLINT NOT NULL
			   , BP_BENE_CODE VARCHAR(2) NOT NULL
			   , BP_BENE_PCT VARCHAR(6) NOT NULL
			   , CONSTRAINT POLICY_PARTICIPANT_BENE_PERCENT PRIMARY KEY CLUSTERED (COMPANY_CODE, POLICY_NUMBER, BP_NAME_ID, BENEFIT_SEQ, BP_BENE_CODE));
		END;

	IF OBJECT_ID (N'work.tmp_Policy_Participant_Name_Bus_Keys', N'U') IS NOT NULL
		BEGIN;
		TRUNCATE TABLE [work].[tmp_Policy_Participant_Name_Bus_Keys];
		END;
	ELSE
		BEGIN;
			CREATE	TABLE [work].[tmp_Policy_Participant_Name_Bus_Keys]
				([Name_ID] INT NOT NULL PRIMARY KEY CLUSTERED);
		END;

    IF OBJECT_ID (N'work.tmp_Policy_Participant_EmailAddressIds_NALK', N'U') IS NOT NULL
	    BEGIN;
		     TRUNCATE TABLE [work].[tmp_Policy_Participant_EmailAddressIds_NALK];
	    END;
    ELSE
	    BEGIN;
		     CREATE	TABLE [work].[tmp_Policy_Participant_EmailAddressIds_NALK]
		             ( NAME_ID int NOT NULL PRIMARY KEY CLUSTERED
		             , ADDRESS_ID int NULL
		             , EFFECTIVE_DATE datetime2(7) NULL
		             , EMAIL nvarchar(105) NULL);
        END;

	IF OBJECT_ID (N'work.tmp_Policy_Participant_AddressIds', N'U') IS NOT NULL
		BEGIN;
		TRUNCATE TABLE [work].[tmp_Policy_Participant_AddressIds];
		END;
	ELSE
		BEGIN;
			CREATE	TABLE [work].[tmp_Policy_Participant_AddressIds]
				([Name_ID] INT NOT NULL PRIMARY KEY CLUSTERED
				, [Address_ID] INT NOT NULL
				);
		END;

	IF OBJECT_ID (N'work.tmp_Policy_Participant_Address', N'U') IS NOT NULL
		BEGIN;
		TRUNCATE TABLE [EDW_Outbound].[work].[tmp_Policy_Participant_Address];
		END;
	ELSE 
		BEGIN;
		CREATE TABLE [work].[tmp_Policy_Participant_Address]
			([Name_ID] INT NOT NULL PRIMARY KEY CLUSTERED
			, [Address1] VARCHAR(50) NULL
			, [Address2] VARCHAR(50) NULL
			, [Address3] VARCHAR(50) NULL
			, [City] VARCHAR(24) NULL
			, [Country] VARCHAR(30) NULL
			, [State] VARCHAR(2) NULL
			, [Zip] VARCHAR(10) NULL
			, [ForeignAddressFlag] BIT NULL
			);
		END;

	END;


/* END: Create temporary tables.*/

/* START: Populate temporary tables.*/

IF (1=1)
	BEGIN;
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'PolicyParticipant:Retrieve bus key deltas');
	SELECT @LOGID = @@IDENTITY;
	--Pick all new or changed records from RELA_BusKey_Vw
	SELECT @START_VAL = CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_RELA AND Setting_Module = @SETTING_MODULE;
	SELECT @END_VAL_RELA = MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[RELA_BusKey_Vw];
	
	IF @START_VAL < @END_VAL_RELA
		BEGIN;
		INSERT [work].[tmp_Policy_Participant_Bus_Keys]
			(COMPANY_CODE, POLICY_NUMBER, NAME_ID, BENEFIT_SEQ_NUMBER, RELATE_CODE, DELETE_FLAG, SYSDATA)
		SELECT 
			 rela.COMPANY_CODE, rela.POLICY_NUMBER, rela.NAME_ID, rela.BENEFIT_SEQ_NUMBER, rela.RELATE_CODE, CASE WHEN rela.DXType = 'D' THEN 1 ELSE 0 END AS DELETE_FLAG, rela.SysData
		FROM [EDW_DataLake].[lifepro_v].[RELA_BusKey_Vw] AS rela
		WHERE rela.Row_ID > @START_VAL
			AND rela.Row_ID <= @END_VAL_RELA
			AND rela.NAME_ID IS NOT NULL
			AND RTRIM(rela.RELATE_CODE) <> '';
		END;

	--Pick all new or changed records from EXTN_RELABP_Curr_Vw
	SELECT @START_VAL = CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_EXTN_RELABP AND Setting_Module = @SETTING_MODULE;
	SELECT @END_VAL_EXTN_RELABP	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[EXTN_RELABP_Vw];
	
	IF @START_VAL < @END_VAL_EXTN_RELABP
		BEGIN;
			INSERT [work].[tmp_Policy_Participant_Bus_Keys]
			(COMPANY_CODE, POLICY_NUMBER, NAME_ID, BENEFIT_SEQ_NUMBER, RELATE_CODE, DELETE_FLAG, SYSDATA)
		SELECT 
			 rela.COMPANY_CODE
			 , rela.POLICY_NUMBER
			 , rela.NAME_ID
			 , rela.BENEFIT_SEQ_NUMBER
			 , rela.RELATE_CODE
			 , CASE WHEN rela.DXType = 'D' THEN 1 ELSE 0 END AS DELETE_FLAG
			 , rela.SysData
		FROM [EDW_DataLake].[lifepro_v].[RELA_BusKey_Vw] rela
		WHERE EXISTS( SELECT 1 FROM [EDW_DataLake].[lifepro_v].[EXTN_RELABP_Vw] AS relabp
					WHERE rela.COMPANY_CODE = relabp.COMPANY_CODE
					AND rela.POLICY_NUMBER = relabp.POLICY_NUMBER
					AND rela.NAME_ID = relabp.BP_NAME_ID
					AND rela.BENEFIT_SEQ_NUMBER = relabp.BENEFIT_SEQ
					AND rela.RELATE_CODE = relabp.BP_BENE_CODE
					AND relabp.Row_ID > @START_VAL
					AND relabp.Row_ID <= @END_VAL_EXTN_RELABP
					)
				AND NOT EXISTS(SELECT 1 FROM [work].[tmp_Policy_Participant_Bus_Keys] AS DEST WHERE DEST.SYSDATA = RELA.SysData)
				AND RTRIM(rela.RELATE_CODE) <> '';

		END;

	--Pick all new or changed Name Ids from NAME_Curr_Vw and from Phone_number
	SELECT @START_VAL	= CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_NAME AND Setting_Module = @SETTING_MODULE;
	SELECT @END_VAL_NAME	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[NAME_Vw];
	
	IF (@START_VAL < @END_VAL_NAME) OR (@START_VAL_PHONE < @END_VAL_PHONE)
		BEGIN;
		--All new or changed name IDs from Name record
		INSERT [work].[tmp_Policy_Participant_Name_Bus_Keys]
			([Name_ID])
		SELECT 
			 NAME_CURR.[NAME_ID] AS [Name_ID]
		FROM	 [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw]	AS NAME_CURR
		WHERE NAME_CURR.Row_ID > @START_VAL
			AND NAME_CURR.Row_ID <= @END_VAL_NAME;
		--All new or changed name IDs from Phone list
		INSERT [work].[tmp_Policy_Participant_Name_Bus_Keys]
			([Name_ID])
		SELECT SRC.[NameID]
		FROM [salesforce].[PhoneNumber] AS SRC
		WHERE COALESCE(SRC.[MODIFIED_DT], SRC.[CREATED_DT]) > @START_VAL_PHONE
			AND COALESCE (SRC.[MODIFIED_DT], SRC.[CREATED_DT]) <= @END_VAL_PHONE
			AND NOT EXISTS (SELECT 1 FROM  [work].[tmp_Policy_Participant_Name_Bus_Keys] AS DEST WHERE DEST.Name_ID = SRC.NameID);
		END;

	SELECT @START_VAL		= CAST(SETTING_VALUE as INT)	FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_NALK AND Setting_Module = @SETTING_MODULE;
	SELECT @START_VAL_ADDR	= CAST(SETTING_VALUE as INT)	FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_ADDR AND Setting_Module = @SETTING_MODULE;
	SELECT @END_VAL_NALK	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[NALK_Vw];
	SELECT @END_VAL_ADDR	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[ADDR_BusKey_Vw];
	
	IF @START_VAL<@END_VAL_NALK
		BEGIN;
		INSERT	[work].[tmp_Policy_Participant_Name_Bus_Keys]
				([Name_ID])
		SELECT	NALK.[Name_id]
		FROM	[EDW_DataLake].[lifepro_v].[NALK_Vw] AS NALK 
				LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[ADDR_Vw] AS ADDR ON
					ADDR.[ADDRESS_ID] = NALK.ADDRESS_ID
		WHERE	NOT EXISTS(SELECT 1 FROM [work].[tmp_Policy_Participant_Name_Bus_Keys] AS DEST WHERE DEST.[NAME_ID] = NALK.[NAME_ID])
				AND 
					((NALK.[Row_id] > @START_VAL
					AND NALK.[Row_id] <=@END_VAL_NALK)
					OR
					(ADDR.[Row_id] > @START_VAL_ADDR
					AND ADDR.[Row_ID] <= @END_VAL_ADDR))
		GROUP BY NALK.[Name_id];
		
		END;

	--Find RELA records for changed NAME, NALK, and ADDR records
	INSERT [work].[tmp_Policy_Participant_Bus_Keys]
		(COMPANY_CODE, POLICY_NUMBER, NAME_ID, BENEFIT_SEQ_NUMBER, RELATE_CODE, DELETE_FLAG, SYSDATA)
	SELECT 
		rela.COMPANY_CODE, rela.POLICY_NUMBER, rela.NAME_ID, rela.BENEFIT_SEQ_NUMBER, rela.RELATE_CODE, CASE WHEN rela.DXType = 'D' THEN 1 ELSE 0 END AS DELETE_FLAG, rela.SysData
	FROM [EDW_DataLake].[lifepro_v].[RELA_BusKey_Vw] AS rela 
	WHERE	EXISTS (SELECT 1 FROM [work].[tmp_Policy_Participant_Name_Bus_Keys] AS NAMEIDS WHERE NAMEIDS.Name_ID = RELA.NAME_ID)
		AND RTRIM(rela.RELATE_CODE)<>''
		AND NOT EXISTS (SELECT 1 FROM [work].[tmp_Policy_Participant_Bus_Keys] AS DEST WHERE DEST.SYSDATA = RELA.SysData);
		SELECT @ROWS = SUM(st.row_count) FROM    sys.dm_db_partition_stats st WHERE  object_name(object_id) = 'tmp_Policy_Participant_Name_Bus_Keys'  AND OBJECT_SCHEMA_NAME(OBJECT_ID) = 'work' 	AND (index_id < 2);
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;
	
	
	
	-- Get Email IDs
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'PolicyParticipant:Retrieve email ids');
	SELECT @LOGID = @@IDENTITY;

	WITH EmailList AS
    (SELECT ROW_NUMBER() OVER (PARTITION BY NALK.NAME_ID ORDER BY COALESCE(NALK.EFFECTIVE_DATE, '1/1/1753') DESC) AS RN
        , NALK.NAME_ID
	    , NALK.ADDRESS_ID
	    , NALK.EFFECTIVE_DATE
	    , LEFT(RTRIM(ADDR.ADDR_LINE_1) + RTRIM(ADDR.ADDR_LINE_2) + RTRIM(ADDR.ADDR_LINE_3) + ';', CHARINDEX(';', RTRIM(ADDR.ADDR_LINE_1) + RTRIM(ADDR.ADDR_LINE_2) + RTRIM(ADDR.ADDR_LINE_3) + ';') - 1) AS EMAIL
    FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] NALK 
    INNER JOIN [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw] AS ADDR ON 
              NALK.ADDRESS_ID = ADDR.ADDRESS_ID 
    WHERE ADDRESS_TYPE = 'E'
	  )

    INSERT INTO [work].[tmp_Policy_Participant_EmailAddressIds_NALK]
		   ( NAME_ID
		   , ADDRESS_ID
		   , EFFECTIVE_DATE
		   , EMAIL)

    SELECT  NAME_ID
		  , ADDRESS_ID	 
		  , EFFECTIVE_DATE				
		  , EMAIL	
    FROM EmailList
    WHERE RN = 1;
	
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;

	-- Get Address IDs
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'PolicyParticipant:Retrieve address ids');
	SELECT @LOGID = @@IDENTITY;
	INSERT [work].[tmp_Policy_Participant_AddressIds] (Name_ID, Address_ID)
	SELECT  nalk.NAME_ID, MAX(nalk.ADDRESS_ID) AS ADDRESS_ID
	FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] nalk
	WHERE ADDRESS_TYPE <> 'E'
		AND (rtrim(ADDRESS_CODE) = 'BUS' OR rtrim(ADDRESS_CODE) = '')
		AND NAME_ID IN (SELECT NAME_ID FROM [work].[tmp_Policy_Participant_Bus_Keys])
	GROUP BY nalk.NAME_ID;
	SELECT @ROWS = @@ROWCOUNT;
	-- Get Addresses
	INSERT [work].[tmp_Policy_Participant_Address] (Name_ID, Address1, Address2, Address3, City, Country, State, Zip, ForeignAddressFlag)
	SELECT ppa.Name_ID,
		RTRIM(ADDR.ADDR_LINE_1),
		RTRIM(ADDR.ADDR_LINE_2),
		RTRIM(ADDR.ADDR_LINE_3),
		RTRIM(ADDR.CITY),
		RTRIM(ADDR.COUNTRY),
		RTRIM(ADDR.STATE),
		RTRIM(ADDR.ZIP),
		CASE WHEN RTRIM(ISNULL(ADDR.FOREIGN_ADDR_FLAG, '')) = 'Y' THEN 1 ELSE 0 END
	FROM [work].[tmp_Policy_Participant_AddressIds] ppa
	JOIN [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw] ADDR
		ON ADDR.ADDRESS_ID = ppa.Address_ID;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;

	--retrieve Bene PCT
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'PolicyParticipant:Retrieve bene pct');
	SELECT @LOGID = @@IDENTITY;
	
	;WITH BENE AS
		(
		SELECT relabp.COMPANY_CODE, 
			relabp.POLICY_NUMBER,
			relabp.BP_NAME_ID,
			relabp.BENEFIT_SEQ,
			relabp.BP_BENE_CODE,
			relabp.BP_BENE_PCT,
			ROW_NUMBER() OVER (PARTITION BY relabp.COMPANY_CODE, relabp.POLICY_NUMBER, relabp.BP_NAME_ID, relabp.BENEFIT_SEQ, relabp.BP_BENE_CODE ORDER BY relabp.SEQUENCE DESC) AS RN
		FROM work.[tmp_Policy_Participant_Bus_Keys] AS SRC
		INNER JOIN [EDW_DataLake].[lifepro_v].[EXTN_RELABP_Curr_Vw] relabp
			ON SRC.COMPANY_CODE = relabp.COMPANY_CODE
			AND SRC.POLICY_NUMBER = relabp.POLICY_NUMBER
			AND SRC.NAME_ID = relabp.BP_NAME_ID
			AND SRC.BENEFIT_SEQ_NUMBER = relabp.BENEFIT_SEQ
			AND SRC.RELATE_CODE = relabp.BP_BENE_CODE)
		INSERT [work].[tmp_Policy_Participant_Bene_Percent] (COMPANY_CODE, POLICY_NUMBER, BP_NAME_ID, BENEFIT_SEQ, BP_BENE_CODE, BP_BENE_PCT)
		SELECT COMPANY_CODE
			, POLICY_NUMBER
			, BP_NAME_ID
			, BENEFIT_SEQ
			, BP_BENE_CODE
			, BP_BENE_PCT
		FROM BENE
		WHERE RN = 1;
	SELECT @ROWS = @@ROWCOUNT;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;
	END
/* END: Populate temporary tables.*/

/* START: Populate staging table.*/
IF (1=1)
	BEGIN;
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'PolicyParticipant:Update staging');
	SELECT @LOGID = @@IDENTITY;
	--If previous execution was successful, this table will be empty.
	UPDATE	DEST
	SET		  [External_Id__c]					= SRC.SYSDATA
			, [RecordTypeId]					= @RecordTypeID
			, [CompanyCode]						= TRIM(SRC.COMPANY_CODE)
			, [PolicyNumber]					= TRIM(SRC.POLICY_NUMBER)
			, [InsurancePolicyId]				= pol.ID
			, [Beneficiary_Share__c]			= CASE WHEN BP.BP_BENE_PCT IS NULL
													  THEN ''
													  ELSE
													  CASE TRIM(BP.BP_BENE_PCT)
															 WHEN 'EQ' THEN 'Equal'
															 WHEN 'AMT' THEN 'Amount'
															 WHEN '' THEN ''
															 ELSE TRIM(BP.BP_BENE_PCT) + '%'
													  END
												  END
			, [PrimaryParticipantAccountId]		= act.[SALESFORCE_ID]
			, [Role__c]							= SRC.RELATE_CODE
			, [Beneficiary_Type__c]				= CASE SRC.RELATE_CODE
													  WHEN 'B1' THEN 'B1'
													  WHEN 'B2' THEN 'B2'
													  ELSE ''
											      END
			, [Primary_Participant_Name_Id__c]	= SRC.NAME_ID
			, [Benefit_Sequence__c]				= SRC.BENEFIT_SEQ_NUMBER
			, [Modified_dt]						= CURRENT_TIMESTAMP
			, [Name__c]							= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  CASE NAME_VW.NAME_FORMAT_CODE
															  WHEN 'I' THEN NULL
															  ELSE TRIM(NAME_VW.BUSINESS_NAME)
														  END
												  END	
			, [First_Name__c]					= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  CASE NAME_VW.NAME_FORMAT_CODE
															  WHEN 'I' THEN TRIM(NAME_VW.INDIVIDUAL_FIRST) 
															  ELSE NULL
														  END
												  END
			, [Last_Name__c]					= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  CASE NAME_VW.NAME_FORMAT_CODE
															  WHEN 'I' THEN TRIM(NAME_VW.INDIVIDUAL_LAST)
															  ELSE NULL
														  END
												  END
			, [Middle_Name__c]					= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  CASE NAME_VW.NAME_FORMAT_CODE
															  WHEN 'I' THEN TRIM(NAME_VW.INDIVIDUAL_MIDDLE)
															  ELSE NULL
														  END
												  END
			, [DOB__c]							= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  CASE NAME_VW.NAME_FORMAT_CODE
															  WHEN 'I' THEN 
																CASE 
																	WHEN NAME_VW.DATE_OF_BIRTH > '12/31/4000' THEN NULL
																	WHEN NAME_VW.DATE_OF_BIRTH < '1/1/1700' THEN NULL
																	ELSE NAME_VW.DATE_OF_BIRTH
																END
															  ELSE NULL
														  END
												  END
			, [Gender__c]						= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  CASE NAME_VW.NAME_FORMAT_CODE
															  WHEN 'I' THEN NAME_VW.SEX_CODE
															  ELSE NULL
														  END
												  END
			, [SSN__c]							= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  CASE NAME_VW.NAME_FORMAT_CODE
															  WHEN 'I' THEN STUFF(STUFF(RIGHT('000000000' + CONVERT(varchar(11), NAME_VW.SOC_SEC_NUMBER), 9), 4, 0, '-'), 7, 0, '-')
															  ELSE NULL
														  END
												  END
			, [Phone__c]						= phone.PhoneNumber
			, [Email__c]						= EMAIL_ADDR.Email	
			, [Deceased__c]						= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  CASE NAME_VW.NAME_FORMAT_CODE
															  WHEN 'I' THEN CASE TRIM(NAME_VW.DECEASED_FLAG) WHEN 'Y' THEN 1 ELSE 0 END
															  ELSE NULL
														  END
												  END
			, [TIN__c]							= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  CASE NAME_VW.NAME_FORMAT_CODE
															  WHEN 'I' THEN NULL
															  ELSE STUFF(RIGHT('000000000' + TRIM(NAME_VW.BUSINESS_TAX_CODE), 9), 3, 0, '-')
														  END
												  END
			, [Primary_Participant_SubAccount_Id] = CASE WHEN act.[SALESFORCE_ID] IS NULL THEN subact.ID ELSE NULL END
			, [Address1__c]						= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  ADDR.Address1
												  END
			, [Address2__c]						= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  ADDR.Address2
												  END
			, [Address3__c]						= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  ADDR.Address3
												  END
			, [City__c]							= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  ADDR.City
												  END
			, [Country__c]						= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  ADDR.Country
												  END
			, [State__c]						= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  ADDR.State
												  END
			, [Zip__c]							= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  ADDR.Zip
												  END
			, [ForeignAddressFlag__c]			= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  ADDR.ForeignAddressFlag
												  END
			, [Delete_Flag]						= SRC.DELETE_FLAG
	FROM [salesforce].[Insurance_Policy_Participant] AS DEST 
	INNER JOIN work.[tmp_Policy_Participant_Bus_Keys] AS SRC
		ON DEST.External_Id__c = SRC.SYSDATA
	INNER JOIN [EDW_Outbound].[salesforce].[LOOKUP_INSURANCEPOLICY] pol
		ON pol.EXTERNAL_ID__C = TRIM(src.POLICY_NUMBER) + '-' + src.COMPANY_CODE
	INNER JOIN [EDW_DataLake].[lifepro_v].[POLC_Curr_Vw] POLC
		ON POLC.COMPANY_CODE = SRC.COMPANY_CODE
		AND POLC.POLICY_NUMBER = SRC.POLICY_NUMBER
	LEFT JOIN [work].[tmp_Policy_Participant_Bene_Percent] BP
		ON SRC.COMPANY_CODE = BP.COMPANY_CODE
		AND SRC.POLICY_NUMBER = BP.POLICY_NUMBER
		AND SRC.NAME_ID = BP.BP_NAME_ID
		AND SRC.BENEFIT_SEQ_NUMBER = BP.BENEFIT_SEQ
		AND SRC.RELATE_CODE = BP.BP_BENE_CODE
	LEFT OUTER JOIN [salesforce].[mapping_Account] AS ACT
		ON ACT.[NAMERECORD_NAMEID] = SRC.NAME_ID
	LEFT JOIN [EDW_Outbound].[salesforce].[LOOKUP_SUB_ACCOUNT__C] subact
		ON subact.NAME_ID__C = SRC.NAME_ID
	LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NAME_VW ON
		NAME_VW.[Name_ID] = SRC.[Name_ID]
	LEFT OUTER JOIN [work].[tmp_Policy_Participant_EmailAddressIds_NALK] EMAIL_ADDR ON
	    EMAIL_ADDR.[Name_id] = SRC.[Name_id]
	LEFT OUTER JOIN [work].[tmp_Policy_Participant_Address] ADDR ON
		ADDR.[Name_id] = SRC.[Name_id]
	LEFT OUTER JOIN [EDW_Outbound].[salesforce].[PhoneNumber] AS phone ON
		phone.[Nameid] = SRC.[Name_id]  
	WHERE (POLC.CONTRACT_CODE <> 'T' OR (POLC.CONTRACT_CODE = 'T' AND POLC.CONTRACT_DATE > DATEADD(year, -10, GETDATE())));
	SELECT @ROWS = @@ROWCOUNT;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;


	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'PolicyParticipant:Insert staging');
	SELECT @LOGID = @@IDENTITY;
	--Insert all delta records into the staging table	
	INSERT INTO [salesforce].[Insurance_Policy_Participant]
           ([External_Id__c]
		   ,[RecordTypeId]
		   ,[CompanyCode]
		   ,[PolicyNumber]
		   ,[InsurancePolicyId]
           ,[Beneficiary_Share__c]
           ,[PrimaryParticipantAccountId]
		   ,[PrimaryParticipantContactId]
           ,[Role__c]
           ,[Beneficiary_Type__c]
           ,[Primary_Participant_Name_Id__c]
           ,[Benefit_Sequence__c]
           ,[Created_dt]
           ,[Modified_dt]
		   ,[Name__c]
		   ,[First_Name__c]
		   ,[Last_Name__c]
		   ,[Middle_Name__c]
		   ,[DOB__c]
		   ,[Gender__c]
		   ,[SSN__c]
		   ,[Phone__c]
		   ,[Email__c]
		   ,[Deceased__c]
		   ,[TIN__c]
		   ,[Primary_Participant_SubAccount_Id]
		   ,[Address1__c]
		   ,[Address2__c]
		   ,[Address3__c]
		   ,[City__c]
		   ,[Country__c]
		   ,[State__c]
		   ,[Zip__c]
		   ,[ForeignAddressFlag__c]
		   ,[Delete_Flag])
	SELECT [External_Id__c]						= SRC.SYSDATA
			, [RecordTypeId]					= @RecordTypeID
			, [CompanyCode]						= TRIM(SRC.COMPANY_CODE)
			, [PolicyNumber]					= TRIM(SRC.POLICY_NUMBER)
			, [InsurancePolicyId]				= pol.ID
			, [Beneficiary_Share__c]			= CASE WHEN BP.BP_BENE_PCT IS NULL
													  THEN ''
													  ELSE
													  CASE TRIM(BP.BP_BENE_PCT)
															 WHEN 'EQ' THEN 'Equal'
															 WHEN 'AMT' THEN 'Amount'
															 WHEN '' THEN ''
															 ELSE TRIM(BP.BP_BENE_PCT) + '%'
													  END
												  END
			, [PrimaryParticipantAccountId]		= act.[SALESFORCE_ID]
			, [PrimaryParticipantContactId]		= ''
			, [Role__c]							= SRC.RELATE_CODE
			, [Beneficiary_Type__c]				= CASE SRC.RELATE_CODE
													  WHEN 'B1' THEN 'B1'
													  WHEN 'B2' THEN 'B2'
													  ELSE ''
											      END
			, [Primary_Participant_Name_Id__c]	= SRC.NAME_ID
			, [Benefit_Sequence__c]				= SRC.BENEFIT_SEQ_NUMBER
			, [Created_dt]						= CURRENT_TIMESTAMP
			, [Modified_dt]						= NULL
			, [Name__c]							= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  CASE NAME_VW.NAME_FORMAT_CODE
															  WHEN 'I' THEN NULL
															  ELSE TRIM(NAME_VW.BUSINESS_NAME)
														  END
												  END	
			, [First_Name__c]					= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  CASE NAME_VW.NAME_FORMAT_CODE
															  WHEN 'I' THEN TRIM(NAME_VW.INDIVIDUAL_FIRST) 
															  ELSE NULL
														  END
												  END
			, [Last_Name__c]					= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  CASE NAME_VW.NAME_FORMAT_CODE
															  WHEN 'I' THEN TRIM(NAME_VW.INDIVIDUAL_LAST)
															  ELSE NULL
														  END
												  END
			, [Middle_Name__c]					= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  CASE NAME_VW.NAME_FORMAT_CODE
															  WHEN 'I' THEN TRIM(NAME_VW.INDIVIDUAL_MIDDLE)
															  ELSE NULL
														  END
												  END
			, [DOB__c]							= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  CASE NAME_VW.NAME_FORMAT_CODE
															  WHEN 'I' THEN 
																CASE 
																	WHEN NAME_VW.DATE_OF_BIRTH > '12/31/4000' THEN NULL
																	WHEN NAME_VW.DATE_OF_BIRTH < '1/1/1700' THEN NULL
																	ELSE NAME_VW.DATE_OF_BIRTH
																END
															  ELSE NULL
														  END
												  END
			, [Gender__c]						= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  CASE NAME_VW.NAME_FORMAT_CODE
															  WHEN 'I' THEN NAME_VW.SEX_CODE
															  ELSE NULL
														  END
												  END
			, [SSN__c]							= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  CASE NAME_VW.NAME_FORMAT_CODE
															  WHEN 'I' THEN STUFF(STUFF(RIGHT('000000000' + CONVERT(varchar(11), NAME_VW.SOC_SEC_NUMBER), 9), 4, 0, '-'), 7, 0, '-')
															  ELSE NULL
														  END
												  END
			, [Phone__c]						= phone.PhoneNumber
			, [Email__c]						= EMAIL_ADDR.Email	
			, [Deceased__c]						= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  CASE NAME_VW.NAME_FORMAT_CODE
															  WHEN 'I' THEN CASE TRIM(NAME_VW.DECEASED_FLAG) WHEN 'Y' THEN 1 ELSE 0 END
															  ELSE NULL
														  END
												  END
			, [TIN__c]							= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  CASE NAME_VW.NAME_FORMAT_CODE
															  WHEN 'I' THEN NULL
															  ELSE STUFF(RIGHT('000000000' + TRIM(NAME_VW.BUSINESS_TAX_CODE), 9), 3, 0, '-')
														  END
												  END
			, [Primary_Participant_SubAccount_Id] = CASE WHEN act.[SALESFORCE_ID] IS NULL THEN subact.ID ELSE NULL END
			, [Address1__c]						= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  ADDR.Address1
												  END
			, [Address2__c]						= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  ADDR.Address2
												  END
			, [Address3__c]						= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  ADDR.Address3
												  END
			, [City__c]							= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  ADDR.City
												  END
			, [Country__c]						= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  ADDR.Country
												  END
			, [State__c]						= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  ADDR.State
												  END
			, [Zip__c]							= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  ADDR.Zip
												  END
			, [ForeignAddressFlag__c]			= CASE SRC.RELATE_CODE
													  WHEN 'PO' THEN NULL
													  WHEN 'O1' THEN NULL
													  ELSE
														  ADDR.ForeignAddressFlag
												  END
			, [Delete_Flag]						= SRC.DELETE_FLAG
	FROM work.[tmp_Policy_Participant_Bus_Keys] AS SRC
	INNER JOIN [EDW_Outbound].[salesforce].[LOOKUP_INSURANCEPOLICY] pol
		ON pol.EXTERNAL_ID__C = TRIM(src.POLICY_NUMBER) + '-' + src.COMPANY_CODE
	INNER JOIN [EDW_DataLake].[lifepro_v].[POLC_Curr_Vw] POLC
		ON POLC.COMPANY_CODE = SRC.COMPANY_CODE
		AND POLC.POLICY_NUMBER = SRC.POLICY_NUMBER
	LEFT JOIN [work].[tmp_Policy_Participant_Bene_Percent] BP
		ON SRC.COMPANY_CODE = BP.COMPANY_CODE
		AND SRC.POLICY_NUMBER = BP.POLICY_NUMBER
		AND SRC.NAME_ID = BP.BP_NAME_ID
		AND SRC.BENEFIT_SEQ_NUMBER = BP.BENEFIT_SEQ
		AND SRC.RELATE_CODE = BP.BP_BENE_CODE
	LEFT OUTER JOIN [salesforce].[mapping_Account] AS ACT
		ON ACT.[NAMERECORD_NAMEID] = SRC.NAME_ID
	LEFT JOIN [EDW_Outbound].[salesforce].[LOOKUP_SUB_ACCOUNT__C] subact
		ON subact.NAME_ID__C = SRC.NAME_ID
	LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NAME_VW ON
		NAME_VW.[Name_ID] = SRC.[Name_ID]
	LEFT OUTER JOIN [work].[tmp_Policy_Participant_EmailAddressIds_NALK] EMAIL_ADDR ON
	    EMAIL_ADDR.[Name_id] = SRC.[Name_id]
	LEFT OUTER JOIN [work].[tmp_Policy_Participant_Address] ADDR ON
		ADDR.[Name_id] = SRC.[Name_id]
	LEFT OUTER JOIN [EDW_Outbound].[salesforce].[PhoneNumber] AS phone ON
		phone.[Nameid] = SRC.[Name_id]  
	WHERE NOT EXISTS
		(SELECT 1 FROM [salesforce].[Insurance_Policy_Participant] AS DEST  WHERE dest.[External_Id__c] = SRC.SYSDATA)
		AND (POLC.CONTRACT_CODE <> 'T' OR (POLC.CONTRACT_CODE = 'T' AND POLC.CONTRACT_DATE > DATEADD(year, -10, GETDATE())));
	SELECT @ROWS = @@ROWCOUNT;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;
	END;
/* END: Populate staging table.*/
/* START: Add invalid email check */
IF (1=1)
	BEGIN;
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'PolicyParticipant:Check invalid emails');
	SELECT @LOGID = @@IDENTITY;
	;WITH INVALID_EMAILS AS
	(SELECT [Email__c] AS [Email__c]
		, [Reject_Flag]
		, [Reject_Dt]
		, [Reject_Reason]
	FROM	[salesforce].[Insurance_Policy_Participant]
	WHERE	[Email__c] = '' 
		OR [Email__c] like '% %' 
		OR [Email__c] like ('%["(),:;<>\]%') 
		OR substring([Email__c] ,charindex('@',[Email__c]),len([Email__c])) like ('%[!#$%&*+/=?^`_{|]%') 
		OR (left([Email__c],1) like ('[-_.+]') or right([Email__c],1) like ('[-_.+]'))                                                                               
		OR ([Email__c] like '%[%' or [Email__c] like '%]%') 
		OR [Email__c] LIKE '%@%@%' 
		OR [Email__c] NOT LIKE '_%@_%._%' 
		OR [Email__c] LIKE '%..%'
		OR [Email__c] LIKE '%-.%'
		OR [Email__c] LIKE '%.@%' 
		OR [Email__c] LIKE '%@.%' 
		OR [Email__c] LIKE '%@%.-%' 
		OR [Email__c] LIKE '%@%-.%' 
		OR [Email__c] LIKE '%@-%' 
		OR CHARINDEX(CHAR(39),[EMAIL__c] )=1
		OR CHARINDEX(' ',LTRIM(RTRIM([Email__c]))) > 0)
	UPDATE INVALID_EMAILS SET [Email__c] = NULL
		, [Reject_Flag]		= 1
		, [Reject_Dt]		= CURRENT_TIMESTAMP
		, [Reject_Reason]	= 'Invalid email format';
	SELECT @ROWS = @@ROWCOUNT;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;
	END;
/* END: Add invalid email check */
/* START: Update delta settings.*/
IF (1=1)
	BEGIN;
	UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_RELA AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_RELA AND Setting_Module = @SETTING_MODULE;
	UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_EXTN_RELABP AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_EXTN_RELABP AND Setting_Module = @SETTING_MODULE;
	UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_NAME AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_NAME AND Setting_Module = @SETTING_MODULE;
	UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_NALK AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_NALK AND Setting_Module = @SETTING_MODULE;
	UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_ADDR AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_ADDR AND Setting_Module = @SETTING_MODULE;
	UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_PHONE AS NVARCHAR(150)) WHERE Setting_Name = @SETTING_NAME_PHONE AND Setting_Module = @SETTING_MODULE;
	END;
/* END: Update delta settings.*/
UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE Row_ID = @LOGID_START;   

END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();
--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'PolicyParticipant:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;


RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Insurance_Policy_Authorization]    Script Date: 5/17/2022 2:04:45 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO











CREATE                      PROCEDURE [salesforce].[usp_Upsert_Insurance_Policy_Authorization]
 	
AS
BEGIN;
-- =============================================

 -- Author: 			Jason Rippel
 -- CreationDate: 		2021-08-03
 -- Version: 			0.1.0
 -- Description: 		Refresh Policy Authorization table for synchronization with SalesForce 

 -- Change Log: 		
 -- Modified By:		Jason Rippel
 -- Modified Date:		9/27/2021
 -- Version:			0.1.1
 -- Description:		Updated to add Role__c and truncate temp table

 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		10/7/2021
 -- Version:			0.1.2
 -- Description:		Changed landing table name to SF_Famxxxx, since that's how replication task creates it

 -- Modified By:		Jason Rippel
 -- Modified Date:		10/25/2021
 -- Version:			0.1.3
 -- Description:		Changed the join for the InsurancePolicy lookup to include company code

 -- Full reload:
 /*
DECLARE @SETTING_NAME_GFA			NVARCHAR(50) = 'SYNC_POLICY_AUTHORIZATION_GFA';
DECLARE @SETTING_MODULE				NVARCHAR(50) = 'SF_SYNC';
UPDATE SETTINGS SET SETTING_VALUE = '1900-01-01' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_GFA AND SETTING_MODULE = @SETTING_MODULE;
truncate table [salesforce].[Insurance_Policy_Authorization]
EXEC [salesforce].[usp_Upsert_Insurance_Policy_Authorization]

select * from salesforce.insurance_policy_Authorization
*/
-- =============================================

SET NOCOUNT ON;
DECLARE @SETTING_NAME_GFA			NVARCHAR(50) = 'SYNC_POLICY_AUTHORIZATION_GFA';
DECLARE @SETTING_MODULE				NVARCHAR(50) = 'SF_SYNC';
DECLARE @START_VAL_GFA              NVARCHAR(20);
DECLARE @END_VAL_GFA                DATETIME;
DECLARE @RecordTypeID				VARCHAR(20);


BEGIN TRY
SELECT	@RecordTypeID = [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE DEVELOPERNAME = 'Policy_Authorization' AND SOBJECTTYPE = 'InsurancePolicyParticipant'

/* START: Create temporary tables.*/
IF (1=1)
	BEGIN;
	--This table will contain all changed business keys for all dependencies
	IF OBJECT_ID (N'[work].[tmp_Policy_Authorization_Bus_Keys]', N'U') IS NOT NULL
	   BEGIN;
	       TRUNCATE TABLE [work].[tmp_Policy_Authorization_Bus_Keys];
	   END;
	ELSE
	   BEGIN;
	       CREATE TABLE [work].[tmp_Policy_Authorization_Bus_Keys]
		        (ID INT NOT NULL
               , CONSTRAINT TMP_POLICY_AUTHORIZATION PRIMARY KEY CLUSTERED (ID));
	   END;
	END;
/* END: Create temporary tables.*/

/* START: Populate temporary tables.*/

IF (1=1)
	BEGIN;	     
	     --Pick all new or changed records from [EDW_Landing].[salesforce].[SF_FAMILYAUTHORIZATIONS]
	     SELECT @START_VAL_GFA = CAST(SETTING_VALUE AS DATETIME) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_GFA AND Setting_Module = @SETTING_MODULE;
	     SELECT @END_VAL_GFA	= CURRENT_TIMESTAMP;
	     
	     IF @START_VAL_GFA < @END_VAL_GFA
	     	BEGIN;
	     	INSERT [work].[tmp_Policy_Authorization_Bus_Keys]
	     		(ID)
	     	SELECT 
	     		 DISTINCT GFA.ID
	     	FROM [EDW_Landing].[salesforce].[SF_FAMILYAUTHORIZATIONS] AS GFA
	     	WHERE NOT EXISTS
	     		(SELECT 1 FROM  [work].[tmp_Policy_Authorization_Bus_Keys] AS DEST 
	     		 WHERE DEST.ID = GFA.ID)
	     		AND GFA.AUTHORIZATIONDATE > @START_VAL_GFA
	     		AND GFA.AUTHORIZATIONDATE <= @END_VAL_GFA;
	     	END;
	END;
/* END: Populate temporary tables.*/

/* START: Populate staging table.*/
IF (1=1)
	BEGIN;

	UPDATE	DEST
	SET		  [RecordTypeId]					= @RecordTypeID
			, [InsurancePolicyId]				= pol.ID
			, [Role__c]                         = 'FA'
			, [Policy_Number__c]				= TRIM(GFA.POLICYNUMBER)
			, [Authorization_Date__c]           = GFA.AUTHORIZATIONDATE
			, [Relationship__c]                 = GFA.RELATIONSHIP
			, [Authorized_Person_Name__c]       = GFA.NAME
			, [External_Id__c]					= GFA.ID
			, [Modified_dt]						= CURRENT_TIMESTAMP
	FROM [salesforce].[Insurance_Policy_Authorization] AS DEST 
	INNER JOIN work.[tmp_Policy_Authorization_Bus_Keys] AS SRC
		ON DEST.External_Id__c = SRC.ID
	INNER JOIN [EDW_Outbound].[salesforce].[LOOKUP_INSURANCEPOLICY] pol
		ON pol.NAME = DEST.Policy_Number__c
	   AND pol.COMPANY_CODE__C IN ('01', '09', '06')
    INNER JOIN [EDW_Landing].[salesforce].[SF_FAMILYAUTHORIZATIONS] GFA
		ON GFA.ID = SRC.ID

	--Insert all delta records into the staging table	
	INSERT INTO [salesforce].[Insurance_Policy_Authorization]
             (  [RecordTypeId]
		      , [InsurancePolicyId]
			  , [Role__c]
		      , [Policy_Number__c]
		      , [Authorization_Date__c]
		      , [Relationship__c]
		      , [Authorized_Person_Name__c]
		      , [External_Id__c]
              , [Created_dt]
              , [Modified_dt]
		     )
	SELECT DISTINCT [RecordTypeId]					= @RecordTypeID
			      , [InsurancePolicyId]				= pol.ID
				  , [Role__c]                       = 'FA'
			      , [Policy_Number__c]				= TRIM(GFA.POLICYNUMBER)
			      , [Authorization_Date__c]         = GFA.AUTHORIZATIONDATE
			      , [Relationship__c]               = GFA.RELATIONSHIP
			      , [Authorized_Person_Name__c]     = GFA.NAME
			      , [External_Id__c]				= GFA.ID
			      , [Created_dt]					= CURRENT_TIMESTAMP
				  , [Modified_dt]                   = NULL
	FROM work.[tmp_Policy_Authorization_Bus_Keys] AS SRC
	INNER JOIN [EDW_Landing].[salesforce].[SF_FAMILYAUTHORIZATIONS] GFA
		ON GFA.ID = SRC.ID
	INNER JOIN [EDW_Outbound].[salesforce].[LOOKUP_INSURANCEPOLICY] pol
		ON pol.NAME = GFA.POLICYNUMBER
       AND pol.COMPANY_CODE__C IN ('01', '09', '06')
	WHERE NOT EXISTS
		( SELECT 1 FROM [salesforce].[Insurance_Policy_Authorization] AS DEST 
		  WHERE DEST.External_Id__c = SRC.ID
		)
	END;
/* END: Populate staging table.*/
/* START: Update delta settings.*/
IF (1=1)
	BEGIN
	   UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CONVERT(NVARCHAR(20), @END_VAL_GFA, 23) WHERE Setting_Name = @SETTING_NAME_GFA AND Setting_Module = @SETTING_MODULE;
	END;
   
END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();


RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Contact_Name_ID]    Script Date: 5/17/2022 2:04:45 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE     PROCEDURE  [salesforce].[usp_Upsert_Contact_Name_ID]

AS
BEGIN;
/* ===================================================================================

  Author: 			Anastasia Vogelaar
  Creation Date: 	01/06/2022
  Version: 			1.0.0
  Description: 	    Upsert deltas into Contact_Name_ID staging table 
					This table could be used for easy reference by SSN 
  Exceptions: 		
	
 -- Change Log:		
  Modified By:		Anastasia Vogelaar
  Modified Date:	01/25/2022		
  Version:			1.0.1
  Description:		Only include "individual" records that are "producer"records


  --Enter reset code here for full refreshes
  DELETE edw_audit.dbo.Delta_Settings where setting_name in ('SYNC_CONTACT_NAMEID_NAME', 'SYNC_CONTACT_NAMEID_AGNT') and setting_module ='SF_SYNC' ;
  truncate table [work].[stage_sf_Contact_Name_ID];
  DROP TABLE IF EXISTS [work].[tmp_ContactNameId_Agnt];
  DROP TABLE IF EXISTS [work].[stage_sf_Contact_Name_ID];
-- =================================================================================== 
*/

SET NOCOUNT ON;
DECLARE @ROWS							INT;		--Used for logging row counts
DECLARE @LOGID_START					INT;		--Used for the first log id
DECLARE	@LOGID							INT;		--Used for intermediate log ids

BEGIN TRY
--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'ContactNameID:Stat/End Indicator');
SELECT @LOGID_START = @@IDENTITY;



/*	START: Create temporary tables */	
	IF (1=1)
		BEGIN;
		IF OBJECT_ID (N'work.stage_sf_Contact_Name_ID', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [work].[stage_sf_Contact_Name_ID];
			END;
			ELSE
			BEGIN;
			CREATE	TABLE [work].[stage_sf_Contact_Name_ID]
				([SSN] NVARCHAR(9) NOT NULL PRIMARY KEY CLUSTERED
				, [LAST_NAMEID] INT NOT NULL 
				, [AGENT_NAMEID] INT NOT NULL
				, [AGENT_NUMBER] NVARCHAR(12) NOT NULL
				, [AGENT_COMPANY_CODE] NVARCHAR(2) NOT NULL
				);
			CREATE UNIQUE NONCLUSTERED INDEX IDX_LASTNAMEID ON [work].[stage_sf_Contact_Name_ID] (LAST_NAMEID) INCLUDE (SSN);
			CREATE UNIQUE NONCLUSTERED INDEX IDX_AGNTNAMEID ON [work].[stage_sf_Contact_Name_ID] (AGENT_NAMEID) INCLUDE (SSN);
			END;
		IF OBJECT_ID (N'work.tmp_sf_Contact_Name_ID_Name', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE TABLE [work].[tmp_sf_Contact_Name_ID_Name];
			END;
			ELSE
			BEGIN;
				CREATE	TABLE [work].[tmp_sf_Contact_Name_ID_Name]
					([SSN] NVARCHAR(9) NOT NULL PRIMARY KEY CLUSTERED
					, [LAST_NAMEID] INT NOT NULL 
					);
			END;		
		IF OBJECT_ID (N'work.tmp_sf_Contact_Name_ID_Agnt', N'U') IS NOT NULL
			BEGIN;
			TRUNCATE  TABLE [work].[tmp_sf_Contact_Name_ID_Agnt];
			END;
			ELSE
			BEGIN;
				CREATE	TABLE [work].[tmp_sf_Contact_Name_ID_Agnt]
					([SSN] NVARCHAR(9) NOT NULL PRIMARY KEY CLUSTERED
					, [AGENT_NAMEID] INT NOT NULL 
					, [AGENT_NUMBER] NVARCHAR(12) NOT NULL
					, [COMPANY_CODE] NVARCHAR(2) NOT NULL
					);

			END;	
		END;
/*	END: Create temporary tables */	
/*	START: Populate temporary tables */	
	IF (1=1)
		BEGIN;
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'ContactNameID:Populate temp Name');
		SELECT @LOGID = @@IDENTITY;

		INSERT [work].[tmp_sf_Contact_Name_ID_Name]
			([SSN]
			, [LAST_NAMEID] 
			)
		SELECT	NM.[BUSINESS_TAX_CODE]
			,MAX(NM.[NAME_ID])
		FROM [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NM
		WHERE	NM.[NAME_FORMAT_CODE]='i' --Only pick "individuals"
			AND TRIM(NM.[BUSINESS_TAX_CODE])<>'' 
			AND TRIM(NM.[BUSINESS_TAX_CODE])<>'0'--Remove invalid SSNs
			AND EXISTS(SELECT 1 FROM [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGNT WHERE AGNT.[NAME_ID] = NM.[NAME_ID]) --Only pick records that are pertaining to an agent
		GROUP BY NM.[BUSINESS_TAX_CODE];
		SELECT @ROWS = @@ROWCOUNT;
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Row_Count = @ROWS, Stop_Dt = CURRENT_TIMESTAMP WHERE Row_ID = @LOGID;
		
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'ContactNameID:Populate temp Agnt');
		SELECT @LOGID = @@IDENTITY;
		;WITH AGNT AS
			(SELECT ROW_NUMBER() OVER (PARTITION BY NM.BUSINESS_TAX_CODE ORDER BY AGV.STATUS_CODE ASC, COALESCE(AGV.STATUS_DATE,'12/31/9999') DESC) AS RN
				, AGV.[AGENT_NUMBER]
				, AGV.[COMPANY_CODE]
				, AGV.[NAME_ID]
				, NM.[BUSINESS_TAX_CODE] AS SSN 
			FROM [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AGV
				INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NM ON
					NM.[NAME_ID] = AGV.[NAME_ID]
					AND NM.[NAME_FORMAT_CODE] = 'i' --Only select agents that are "Individuals"
			WHERE TRIM(NM.[BUSINESS_TAX_CODE])<>'' 
			AND TRIM(NM.[BUSINESS_TAX_CODE])<>'0'--Remove invalid SSNs
			)
		INSERT	[work].[tmp_sf_Contact_Name_ID_Agnt]
			([SSN]
			, [AGENT_NAMEID]
			, [AGENT_NUMBER]
			, [COMPANY_CODE])
		SELECT AGNT.[SSN]
			, AGNT.NAME_ID
			, AGNT.AGENT_NUMBER
			, AGNT.COMPANY_CODE
		FROM AGNT
		WHERE RN = 1;
		SELECT @ROWS = @@ROWCOUNT;
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Row_Count = @ROWS, Stop_Dt = CURRENT_TIMESTAMP WHERE Row_ID = @LOGID;

		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'ContactNameID:Populate Agnt Bus Keys');
		SELECT @LOGID = @@IDENTITY;
		INSERT [work].[stage_sf_Contact_Name_ID]
				([SSN] 
				, [LAST_NAMEID] 
				, [AGENT_NAMEID]
				, [AGENT_NUMBER]
				, [AGENT_COMPANY_CODE])
		SELECT NM.[SSN]
			, NM.[LAST_NAMEID]
			, AGNT.AGENT_NAMEID
			, AGNT.[AGENT_NUMBER]
			, AGNT.[COMPANY_CODE]
		FROM [work].[tmp_sf_Contact_Name_ID_Name] AS NM
			INNER JOIN [work].[tmp_sf_Contact_Name_ID_Agnt] AS AGNT ON
				AGNT.[SSN] = NM.[SSN];
		SELECT @ROWS = @@ROWCOUNT;
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Row_Count = @ROWS, Stop_Dt = CURRENT_TIMESTAMP WHERE Row_ID = @LOGID;
		END;

/*	END: Populate temporary tables */	

--Logging
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;   

END TRY
BEGIN CATCH

DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();
--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'ContactNameID:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;

RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;

  

GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Allocation_Rates]    Script Date: 5/17/2022 2:04:45 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE       PROCEDURE [salesforce].[usp_Upsert_Allocation_Rates]
 	
AS
BEGIN;
-- =============================================

 -- Author: 			Jason Rippel
 -- CreationDate: 		2021-09-29
 -- Version: 			0.1.0
 -- Description: 		Refresh Allocation table for synchronization with SalesForce 

 -- Change Log:	
 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		10/12/2021
 -- Version:			0.1.1
 -- Description:		Split the procedure in two	
 --	Allocation rates:	1 - Participation Rate
 --						2 - Asset Fee
 --						3 - CAP
 --						4 - PT RATE
 --						5 - FUND DESCRIPTION

 -- Full reload:
--DECLARE @SETTING_NAME_SEGT_F_EQUIAL 		NVARCHAR(50) = 'SYNC_ALLOCATION_PRODUCT_SEGT_F_EQUIAL';
--DECLARE @SETTING_NAME_SEGT_BU 				NVARCHAR(50) = 'SYNC_ALLOCATION_PRODUCT_SEGT_BU';
--DECLARE @SETTING_NAME_DINT 					NVARCHAR(50) = 'SYNC_ALLOCATION_PRODUCT_DINT';
--DECLARE @SETTING_NAME_SEGT_BV				NVARCHAR(50) = 'SYNC_ALLOCATION_PRODUCT_SEGT_BV';
--DECLARE @SETTING_NAME_SEGT_FM				NVARCHAR(50) = 'SYNC_ALLOCATION_PRODUCT_SEGT_FM';
--DECLARE @SETTING_NAME_SEGT_Fmin				NVARCHAR(50) = 'SYNC_ALLOCATION_PRODUCT_SEGT_Fmin';
--DECLARE @SETTING_MODULE						NVARCHAR(50) = 'SF_SYNC';
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_MODULE = @SETTING_MODULE AND Setting_Name IN
--	(@SETTING_NAME_SEGT_F_EQUIAL, @SETTING_NAME_SEGT_BU,@SETTING_NAME_DINT,@SETTING_NAME_SEGT_BV,@SETTING_NAME_SEGT_FM ,@SETTING_NAME_SEGT_Fmin) ;
-- =============================================

SET NOCOUNT ON;
DECLARE @SETTING_NAME_SEGT_F_EQUIAL 		NVARCHAR(50) = 'SYNC_ALLOCATION_PRODUCT_SEGT_F_EQUIAL';
DECLARE @SETTING_NAME_SEGT_BU 				NVARCHAR(50) = 'SYNC_ALLOCATION_PRODUCT_SEGT_BU';
DECLARE @SETTING_NAME_DINT 					NVARCHAR(50) = 'SYNC_ALLOCATION_PRODUCT_DINT';
DECLARE @SETTING_NAME_SEGT_BV				NVARCHAR(50) = 'SYNC_ALLOCATION_PRODUCT_SEGT_BV';
DECLARE @SETTING_NAME_SEGT_FM				NVARCHAR(50) = 'SYNC_ALLOCATION_PRODUCT_SEGT_FM';
DECLARE @SETTING_NAME_SEGT_Fmin				NVARCHAR(50) = 'SYNC_ALLOCATION_PRODUCT_SEGT_Fmin';
DECLARE @SETTING_MODULE						NVARCHAR(50) = 'SF_SYNC';
DECLARE @SEGT_F_EQUIL_START					INT;
DECLARE @SEGT_F_EQUIL_END					INT;
DECLARE @SEGT_BU_START						INT;
DECLARE @SEGT_BU_END						INT;
DECLARE @SEGT_BV_START						INT;
DECLARE @SEGT_BV_END						INT;
DECLARE @SEGT_FM_START						INT;
DECLARE @SEGT_FM_END						INT;
DECLARE @SEGT_FMin_START					INT;
DECLARE @SEGT_Fmin_END						INT;
DECLARE @DINT_START							INT;
DECLARE @DINT_END							INT;

--DECLARE @RecordTypeID				    varchar(20);


BEGIN TRY
/* START:	Retreive delta variables */
IF (1=1)
	BEGIN;
	IF NOT EXISTS (SELECT 1 FROM [EDW_Audit].[DBO].[Delta_Settings] WHERE [SETTING_MODULE] = @SETTING_MODULE AND [SETTING_NAME] = @SETTING_NAME_SEGT_F_EQUIAL)
		BEGIN;
		INSERT [EDW_Audit].[DBO].[Delta_Settings] (Setting_Name, Setting_Module, Setting_Value) VALUES (@SETTING_NAME_SEGT_F_EQUIAL, @SETTING_MODULE, '0');
		END;
	IF NOT EXISTS (SELECT 1 FROM [EDW_Audit].[DBO].[Delta_Settings] WHERE [SETTING_MODULE] = @SETTING_MODULE AND [SETTING_NAME] = @SETTING_NAME_SEGT_BU)
		BEGIN;
		INSERT [EDW_Audit].[DBO].[Delta_Settings] (Setting_Name, Setting_Module, Setting_Value) VALUES (@SETTING_NAME_SEGT_BU, @SETTING_MODULE, '0');
		END;
	IF NOT EXISTS (SELECT 1 FROM [EDW_Audit].[DBO].[Delta_Settings] WHERE [SETTING_MODULE] = @SETTING_MODULE AND [SETTING_NAME] = @SETTING_NAME_DINT)
		BEGIN;
		INSERT [EDW_Audit].[DBO].[Delta_Settings] (Setting_Name, Setting_Module, Setting_Value) VALUES (@SETTING_NAME_DINT, @SETTING_MODULE, '0');
		END;
	IF NOT EXISTS (SELECT 1 FROM [EDW_Audit].[DBO].[Delta_Settings] WHERE [SETTING_MODULE] = @SETTING_MODULE AND [SETTING_NAME] = @SETTING_NAME_SEGT_BV)
		BEGIN;
		INSERT [EDW_Audit].[DBO].[Delta_Settings] (Setting_Name, Setting_Module, Setting_Value) VALUES (@SETTING_NAME_SEGT_BV, @SETTING_MODULE, '0');
		END;
	IF NOT EXISTS (SELECT 1 FROM [EDW_Audit].[DBO].[Delta_Settings] WHERE [SETTING_MODULE] = @SETTING_MODULE AND [SETTING_NAME] = @SETTING_NAME_SEGT_FM)
		BEGIN;
		INSERT [EDW_Audit].[DBO].[Delta_Settings] (Setting_Name, Setting_Module, Setting_Value) VALUES (@SETTING_NAME_SEGT_FM, @SETTING_MODULE, '0');
		END;
	SELECT @SEGT_F_EQUIL_START	= CAST([SETTING_VALUE] AS INT) FROM [EDW_Audit].[DBO].[Delta_Settings] WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_NAME_SEGT_F_EQUIAL;
	SELECT @SEGT_BU_START		= CAST([SETTING_VALUE] AS INT) FROM [EDW_Audit].[DBO].[Delta_Settings] WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_NAME_SEGT_BU;
	SELECT @DINT_START			= CAST([SETTING_VALUE] AS INT) FROM [EDW_Audit].[DBO].[Delta_Settings] WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_NAME_DINT;
	SELECT @SEGT_BV_START		= CAST([SETTING_VALUE] AS INT) FROM [EDW_Audit].[DBO].[Delta_Settings] WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_NAME_SEGT_BV;
	SELECT @SEGT_FM_START		= CAST([SETTING_VALUE] AS INT) FROM [EDW_Audit].[DBO].[Delta_Settings] WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_NAME_SEGT_FM;
	SELECT @SEGT_FMin_START		= CAST([SETTING_VALUE] AS INT) FROM [EDW_Audit].[DBO].[Delta_Settings] WHERE [Setting_Module] = @SETTING_MODULE AND [Setting_Name] = @SETTING_NAME_SEGT_FMin;
	SELECT @SEGT_F_EQUIL_END	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[SEGT_F=_Curr_Vw];
	SELECT @SEGT_BU_END			= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[SEGT_BU_Curr_Vw];
	SELECT @SEGT_BV_END			= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[SEGT_BV_Curr_Vw];
	SELECT @SEGT_FM_END			= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[SEGT_FM_Curr_Vw];
	SELECT @SEGT_Fmin_END		= MAX([ROW_ID]) FROM [EDW_DataLake].[lifepro_v].[SEGT_F-_Curr_Vw];
	SELECT @DINT_END			= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[DINT_Curr_Vw];
	END;
/* END:	Retreive delta variables */

/* START: Create intermediate table if it doesn't exist.*/
IF (1=1)
	BEGIN;
	--This table will contain all changed business keys for all dependencies
	IF OBJECT_ID (N'[salesforce].[Allocation_Rates]', N'U') IS  NULL
	   BEGIN;
		CREATE TABLE [salesforce].[Allocation_Rates]
			([PLAN_CODE] NVARCHAR(10) NOT NULL
			,[RECORD_TYPE] SMALLINT NOT NULL
			, [RECORD_VAL] DECIMAL (10,5) NULL
			, [RECORD_DESCR] NVARCHAR(40) NULL
			, PRIMARY KEY CLUSTERED (PLAN_CODE, RECORD_TYPE));
	   END;
	END;
/* END: Create intermediate table if it doesn't exist.*/

/* START: Populate allocation rates.*/

IF (1=1)
	BEGIN;
	--Upsert latest participation rates
	;WITH SRC (RN, PLAN_CODE,  RECORD_VAL, RECORD_TYPE)
		AS (
			SELECT ROW_NUMBER() OVER (PARTITION BY SEGT_F_EQUIAL.FNDR_NDXB_SEGMENT_ID ORDER BY DINT.LOW_DATE DESC ) AS RN
				, SEGT_F_EQUIAL.FNDR_NDXB_SEGMENT_ID
				, DINT.DECLARED_RATE_1 AS RECORD_VAL		
				, 1 AS RECORD_TYPE						--Participation Rate
			FROM	[EDW_DataLake].[lifepro_v].[SEGT_F=_Curr_Vw] AS SEGT_F_EQUIAL
					INNER JOIN [EDW_DataLake].[lifepro_v].[SEGT_BU_Curr_Vw] SEGT_BU ON 
						SEGT_F_EQUIAL.FNDR_NDXB_SEGMENT_ID = SEGT_BU.SEGMENT_ID
					INNER JOIN [EDW_DataLake].[lifepro_v].[DINT_Curr_Vw] DINT ON
						SEGT_BU.BU_PART_RATE_ID = DINT.ID
			WHERE	(SEGT_F_EQUIAL.Row_ID >@SEGT_F_EQUIL_START AND SEGT_F_EQUIAL.[Row_ID]<=@SEGT_F_EQUIL_END)
					OR (SEGT_BU.[Row_ID]>@SEGT_BU_START AND SEGT_BU.[Row_ID]<=@SEGT_BU_END)
					OR (DINT.[Row_ID]> @DINT_START AND DINT.[Row_ID]<=@DINT_END)
			)
		MERGE [salesforce].[Allocation_Rates] AS TGT
		USING (	SELECT PLAN_CODE
						, RECORD_VAL 
						, RECORD_TYPE
				FROM SRC
				WHERE RN = 1) AS LAST_SRC (PLAN_CODE,  RECORD_VAL, RECORD_TYPE)
		ON (TGT.PLAN_CODE= LAST_SRC.PLAN_CODE AND 
			TGT.RECORD_TYPE = LAST_SRC.RECORD_TYPE)
		WHEN MATCHED THEN 
			UPDATE SET TGT.RECORD_VAL = LAST_SRC.RECORD_VAL
		WHEN NOT MATCHED THEN 
			INSERT (PLAN_CODE, RECORD_VAL, RECORD_TYPE)
			VALUES (LAST_SRC.PLAN_CODE, LAST_SRC.RECORD_VAL, LAST_SRC.RECORD_TYPE);
	--Upsert latest asset fee
	;WITH SRC (RN, PLAN_CODE,  RECORD_VAL, RECORD_TYPE)
		AS (
			SELECT ROW_NUMBER() OVER (PARTITION BY SEGT_F_EQUIAL.FNDR_NDXB_SEGMENT_ID ORDER BY DINT.LOW_DATE DESC ) AS RN
				, SEGT_F_EQUIAL.FNDR_NDXB_SEGMENT_ID
				, DINT.DECLARED_RATE_1 AS RECORD_VAL
				, 2 AS RECORD_TYPE						--Asset fee				
			FROM	[EDW_DataLake].[lifepro_v].[SEGT_F=_Curr_Vw] AS SEGT_F_EQUIAL
					INNER JOIN [EDW_DataLake].[lifepro_v].[SEGT_BU_Curr_Vw] SEGT_BU ON 
						SEGT_F_EQUIAL.FNDR_NDXB_SEGMENT_ID = SEGT_BU.SEGMENT_ID
					INNER JOIN [EDW_DataLake].[lifepro_v].[DINT_Curr_Vw] DINT ON
						SEGT_BU.BU_ASSET_FEE_ID = DINT.ID
			WHERE	(SEGT_F_EQUIAL.Row_ID >@SEGT_F_EQUIL_START AND SEGT_F_EQUIAL.[Row_ID]<=@SEGT_F_EQUIL_END)
					OR (SEGT_BU.[Row_ID]>@SEGT_BU_START AND SEGT_BU.[Row_ID]<=@SEGT_BU_END)
					OR (DINT.[Row_ID]> @DINT_START AND DINT.[Row_ID]<=@DINT_END)
			)
		MERGE [salesforce].[Allocation_Rates] AS TGT
		USING (	SELECT PLAN_CODE
						, RECORD_VAL 
						, RECORD_TYPE
				FROM SRC
				WHERE RN = 1) AS LAST_SRC (PLAN_CODE,  RECORD_VAL, RECORD_TYPE)
		ON (TGT.PLAN_CODE= LAST_SRC.PLAN_CODE AND 
			TGT.RECORD_TYPE = LAST_SRC.RECORD_TYPE)
		WHEN MATCHED THEN 
			UPDATE SET TGT.RECORD_VAL = LAST_SRC.RECORD_VAL
		WHEN NOT MATCHED THEN 
			INSERT (PLAN_CODE, RECORD_VAL, RECORD_TYPE)
			VALUES (LAST_SRC.PLAN_CODE, LAST_SRC.RECORD_VAL, LAST_SRC.RECORD_TYPE);
	--Upsert latest CAP
	;WITH SRC (RN, PLAN_CODE,  RECORD_VAL, RECORD_TYPE)
		AS (
			SELECT ROW_NUMBER() OVER (PARTITION BY SEGT_F_EQUIAL.FNDR_NDXB_SEGMENT_ID ORDER BY DINT.LOW_DATE DESC ) AS RN
				, SEGT_F_EQUIAL.FNDR_NDXB_SEGMENT_ID
				, DINT.DECLARED_RATE_1 AS RECORD_VAL
				, 3 AS RECORD_TYPE						--CAP
			FROM	[EDW_DataLake].[lifepro_v].[SEGT_F=_Curr_Vw] AS SEGT_F_EQUIAL
					INNER JOIN [EDW_DataLake].[lifepro_v].[SEGT_BU_Curr_Vw] SEGT_BU ON 
						SEGT_F_EQUIAL.FNDR_NDXB_SEGMENT_ID = SEGT_BU.SEGMENT_ID
					INNER JOIN [EDW_DataLake].[lifepro_v].[DINT_Curr_Vw] DINT ON
						SEGT_BU.BU_INDEX_CAP_ID = DINT.ID
			WHERE	(SEGT_F_EQUIAL.Row_ID >@SEGT_F_EQUIL_START AND SEGT_F_EQUIAL.[Row_ID]<=@SEGT_F_EQUIL_END)
					OR (SEGT_BU.[Row_ID]>@SEGT_BU_START AND SEGT_BU.[Row_ID]<=@SEGT_BU_END)
					OR (DINT.[Row_ID]> @DINT_START AND DINT.[Row_ID]<=@DINT_END)
			)
		MERGE [salesforce].[Allocation_Rates] AS TGT
		USING (	SELECT PLAN_CODE
						, RECORD_VAL 
						, RECORD_TYPE
				FROM SRC
				WHERE RN = 1) AS LAST_SRC (PLAN_CODE,  RECORD_VAL, RECORD_TYPE)
		ON (TGT.PLAN_CODE= LAST_SRC.PLAN_CODE AND 
			TGT.RECORD_TYPE = LAST_SRC.RECORD_TYPE)
		WHEN MATCHED THEN 
			UPDATE SET TGT.RECORD_VAL = LAST_SRC.RECORD_VAL
		WHEN NOT MATCHED THEN 
			INSERT (PLAN_CODE, RECORD_VAL, RECORD_TYPE)
			VALUES (LAST_SRC.PLAN_CODE, LAST_SRC.RECORD_VAL, LAST_SRC.RECORD_TYPE);
	--Upsert latest PT Rate
	;WITH SRC (RN, PLAN_CODE,  RECORD_VAL, RECORD_TYPE)
		AS (
			SELECT ROW_NUMBER() OVER (PARTITION BY SEGT_F_EQUIAL.FNDR_NDXB_SEGMENT_ID ORDER BY DINT.LOW_DATE DESC ) AS RN
				, SEGT_F_EQUIAL.FNDR_NDXB_SEGMENT_ID
				, DECLARED_RATE_1 AS RECORD_VAL
				, 4 AS RECORD_TYPE						--PT Rate
			FROM	[EDW_DataLake].[lifepro_v].[SEGT_F=_Curr_Vw] AS SEGT_F_EQUIAL
					INNER JOIN [EDW_DataLake].[lifepro_v].[SEGT_BV_Curr_Vw] SEGT_BV ON 
						SEGT_F_EQUIAL.FNDR_NDXB_SEGMENT_ID = SEGT_BV.SEGMENT_ID
					INNER JOIN [EDW_DataLake].[lifepro_v].[DINT_Curr_Vw] DINT ON
						SEGT_BV.BV_PT_RATE_ID = DINT.ID
			WHERE	(SEGT_F_EQUIAL.Row_ID >@SEGT_F_EQUIL_START AND SEGT_F_EQUIAL.[Row_ID]<=@SEGT_F_EQUIL_END)
					OR (SEGT_BV.[Row_ID]>@SEGT_BV_START AND SEGT_BV.[Row_ID]<=@SEGT_BV_END)
					OR (DINT.[Row_ID]> @DINT_START AND DINT.[Row_ID]<=@DINT_END)
			)
		MERGE [salesforce].[Allocation_Rates] AS TGT
		USING (	SELECT PLAN_CODE
						, RECORD_VAL 
						, RECORD_TYPE
				FROM SRC
				WHERE RN = 1) AS LAST_SRC (PLAN_CODE,  RECORD_VAL, RECORD_TYPE)
		ON (TGT.PLAN_CODE= LAST_SRC.PLAN_CODE AND 
			TGT.RECORD_TYPE = LAST_SRC.RECORD_TYPE)
		WHEN MATCHED THEN 
			UPDATE SET TGT.RECORD_VAL = LAST_SRC.RECORD_VAL
		WHEN NOT MATCHED THEN 
			INSERT (PLAN_CODE, RECORD_VAL, RECORD_TYPE)
			VALUES (LAST_SRC.PLAN_CODE, LAST_SRC.RECORD_VAL, LAST_SRC.RECORD_TYPE);
	--Upsert fund description
	;WITH SRC (RN, PLAN_CODE,  RECORD_DESCR, RECORD_TYPE)
		AS (
			SELECT ROW_NUMBER() OVER (PARTITION BY SEGT_F_MIN.SEGMENT_ID ORDER BY SEGT_FM.[DXTimestamp] DESC ) AS RN
				, SEGT_F_MIN.SEGMENT_ID
				, SEGT_FM.FM_FUND_DESCRIPTION AS RECORD_DESCR
				, 5 AS RECORD_TYPE				--Fund Description
			FROM	[EDW_DataLake].[lifepro_v].[SEGT_F-_Curr_Vw] AS SEGT_F_MIN
					INNER JOIN [EDW_DataLake].[lifepro_v].[SEGT_FM_Curr_Vw] SEGT_FM ON
						SEGT_FM.SEGMENT_ID = SEGT_F_MIN.FNDR_MISC_SEGMENT_ID
			WHERE	(SEGT_F_MIN.Row_ID >@SEGT_FMin_START AND SEGT_F_MIN.[Row_ID]<=@SEGT_Fmin_END)
					OR (SEGT_FM.[Row_ID]>@SEGT_FM_START AND SEGT_FM.[Row_ID]<=@SEGT_FM_END)
			)
		MERGE [salesforce].[Allocation_Rates] AS TGT
		USING (	SELECT PLAN_CODE
						, SRC.RECORD_DESCR 
						, RECORD_TYPE
				FROM SRC
				WHERE RN = 1) AS LAST_SRC (PLAN_CODE,  RECORD_DESCR, RECORD_TYPE)
		ON (TGT.PLAN_CODE= LAST_SRC.PLAN_CODE AND 
			TGT.RECORD_TYPE = LAST_SRC.RECORD_TYPE)
		WHEN MATCHED THEN 
			UPDATE SET TGT.[RECORD_DESCR] = LAST_SRC.RECORD_DESCR
		WHEN NOT MATCHED THEN 
			INSERT (PLAN_CODE, [RECORD_DESCR], RECORD_TYPE)
			VALUES (LAST_SRC.PLAN_CODE, LAST_SRC.RECORD_DESCR, LAST_SRC.RECORD_TYPE);
    
	END;
/* END: Populate allocation rates.*/

/* START: Update delta settings.*/
IF (1=1)
	BEGIN;
	UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@SEGT_F_EQUIL_END AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_SEGT_F_EQUIAL AND Setting_Module = @SETTING_MODULE;
	UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@SEGT_BU_END AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_SEGT_BU AND Setting_Module = @SETTING_MODULE;
	UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@SEGT_BV_END AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_SEGT_BV AND Setting_Module = @SETTING_MODULE;
	UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@DINT_END AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_DINT AND Setting_Module = @SETTING_MODULE;
	END;
/* END: Update delta settings.*/   
END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();


RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Agent_Tax_Documents]    Script Date: 5/17/2022 2:04:46 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:          Darin Baarda
-- Create date:		08/10/2021
-- Description:     get documents for policies
-- =============================================
-- Last Run Date : 08/10/2021
-- Last Run Exec : exec salesforce.usp_Upsert_Agent_Tax_Documents 
-- Last Run Stat : 34 seconds, 3,814,556
-- =============================================
-- Maintenance 
-- =============================================
-- CX-311     08/10/2021 Darin Baarda 
-- New Stored Procedure
-- =============================================
-- CX-3787     11/30/2021 Darin Baarda 
-- change to pad the document number to 9 places
-- =============================================

CREATE PROCEDURE [salesforce].[usp_Upsert_Agent_Tax_Documents]

AS
BEGIN
SET NOCOUNT ON;

	BEGIN TRY


		/* code starts here for the procedure */
		DECLARE @SETTING_Agent_DOC			NVARCHAR(50) = 'SYNC_AGENT_TAX_DOC';
		DECLARE @SETTING_MODULE				NVARCHAR(50) = 'SF_SYNC';
		DECLARE @START_VAL					datetime;
		DECLARE @NOW						DATETIME = CURRENT_TIMESTAMP		

		IF NOT EXISTS(SELECT * FROM [EDW_Audit].[dbo].[Delta_Settings]   WHERE Setting_Name = @SETTING_Agent_DOC AND Setting_Module = @SETTING_MODULE)
		BEGIN
			INSERT INTO [EDW_Audit].[dbo].[Delta_Settings] VALUES (@SETTING_Agent_DOC, @SETTING_MODULE, CAST('1/1/1900' AS VARCHAR(20)))
		END

		DECLARE @RecordTypeID			varchar(20) = (SELECT [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE DEVELOPERNAME = 'Tax_Document' AND SOBJECTTYPE = 'Document__c')

		SELECT @START_VAL = CAST(Setting_Value AS datetime) from [EDW_Audit].[dbo].[Delta_Settings]  WHERE Setting_Name = @SETTING_Agent_DOC AND Setting_Module = @SETTING_MODULE; 
	
		

		-- SEE IF ANY DATES ARE NEWER THAN THE LAST TIME IT RAN AND IF SO THE ADD THEM TO THE LIST
		INSERT INTO [EDW_Outbound].[salesforce].[Agent_Tax_Document] 
		(
			[RecordTypeID]
			, [Document_Type__c]
			, [Description__c]
			, [Policy__c]
			, [Policy_External_ID__c]
			, [Contact__c]
			, [Product_External_ID__c]
			, [Product__c]
			, [External_ID__c]
			, [Order_Date__c]
			, [Received_Date__c]
			, [Review_Date__c]
			, [Document_Number__c]
			, [Agent_Number]
			, [Company_Code]
		)
		select
			@RecordTypeID as 'RecordTypeID'
			, process as 'Document_Type__c'
			, objectdesc as 'Description__c'
			, null as 'Policy__c'
			, null as 'Policy_External_ID__c'
			, [LOOKUP_CONTACT].[ID] as 'Contact__c'
			, null as 'Product_External_ID__c'
			, null as 'Product__c'
			, [Documents_Vw].[ID] as 'External_ID__c'
			, OrderDate as 'Order_Date__c'
			, ReceivedDate as 'Received_Date__c'
			, ReviewDate as 'Review_Date__c'
			, RIGHT('000000000' + CAST(DocNumber as varchar(9)), 9) as 'Document_Number__c'
			, [AgentInfo_Vw].[Agent] as 'Agent_Number'
			, [AgentInfo_Vw].[Company] as 'Company_Code'
		from [EDW_DataLake].[opusagent_v].[Documents_Vw]
		join [EDW_DataLake].[opusagent_v].[ObjectTypes_Vw] on [Documents_Vw].[ObjectID] = [ObjectTypes_Vw].[ID]
		join [EDW_DataLake].[opusagent_v].[AgentInfo_Vw] on [Documents_Vw].[AgentID] = [AgentInfo_Vw].[ID]
		join [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] on [AgentInfo_Vw].[COMPANY] = [AGNT_Curr_Vw].[COMPANY_CODE] and [AgentInfo_Vw].[AGENT] = [AGNT_Curr_Vw].[AGENT_NUMBER]
		join [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] on [AGNT_Curr_Vw].[NAME_ID] = [NAME_Curr_Vw].[NAME_ID]
		join [EDW_Outbound].[salesforce].[Lookup_Contact] on NAME_Curr_Vw.NAME_ID = LOOKUP_CONTACT.NAME_ID__C
		where ([ObjectTypes_Vw].[OBJECTDESC] like '%1099%' or [ObjectTypes_Vw].[OBJECTDESC] like '%5498%')
		and ([Documents_Vw].ORDERDATE > @START_VAL or [Documents_Vw].RECEIVEDDATE > @START_VAL or [Documents_Vw].REVIEWDATE > @START_VAL)
		order by [Documents_Vw].[ID]


		-- USE @NOW AS THE END DATE SINCE THREE COLUMNS COULD CHANGE THAT NEED UPDATED
		-- NEW ROWS WILL  STILL HAVE AN ORDER DATE GREATER THAT THE LAST RUN TIME
		UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@NOW AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_Agent_DOC AND Setting_Module = @SETTING_MODULE;


		/* code ends here for the procedure */

	END TRY
	BEGIN CATCH
           
	DECLARE @ERROR_MSG          NVARCHAR(2000);
	DECLARE @ERROR_SEVERITY     INT;
	DECLARE @ERROR_STATE        INT;
 
	SET @ERROR_MSG              = ERROR_MESSAGE();
	SET @ERROR_SEVERITY         = ERROR_SEVERITY();
	SET @ERROR_STATE            = ERROR_STATE();


	RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

	END CATCH;

END
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Producer_Address]    Script Date: 5/17/2022 2:04:46 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE   PROCEDURE  [salesforce].[usp_Truncate_Producer_Address]
 	
AS
BEGIN;
-- =============================================

 -- Author: 			Anastasia Vogelaar
 -- CreationDate: 		2021-08-10
 -- Version: 			0.1.0
 -- Description: 		Truncate Producer_Address synct table - 
 --						this stored proc is to be called upon successful 
 --						sync of the staging table with Salesforce dest list
 -- Change Log: 		
 -- =============================================

SET NOCOUNT ON;

BEGIN TRY

TRUNCATE TABLE [EDW_Outbound].[salesforce].[Producer_Address];

END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();


RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Account_Business]    Script Date: 5/17/2022 2:04:46 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE     PROCEDURE  [salesforce].[usp_Truncate_Account_Business]
 	
AS
BEGIN;
/* ===================================================================================

  Author: 			Anastasia Vogelaar
  Creation Date: 	12/18/2021
  Version: 			0.2.0
  Description: 	    Truncate Account_Business synct table - 
 					this stored proc is to be called upon successful 
 					sync of the staging table with salesforce dest list	
  Exceptions: 		
	
 -- Change Log: 		
  Modified By:		
  Modified Date:		
  Version:			
  Description:		

-- =================================================================================== 
*/


SET NOCOUNT ON;
DECLARE @ROWS						INT;		--Used for logging row counts
DECLARE @LOGID_START				INT;		--Used for the first log id
DECLARE	@LOGID						INT;		--Used for intermediate log ids

BEGIN TRY
--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'TruncateAccount_Business:Start/End Indicator');
SELECT @LOGID_START = @@IDENTITY;
/*START: Flag records rejected by Salesforce*/
IF (1=1)
	BEGIN;
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'TruncateAccount_Business:Flag Salesforce Rejections');
	SELECT @LOGID = @@IDENTITY;
	;WITH FAILS 
		AS
		(SELECT [Reject_Flag]
			, [Reject_Dt]
			, [Reject_Reason]
		FROM  [salesforce].[Account_Business] 
		WHERE	COALESCE([Reject_Flag],0)=0
			AND EXISTS(SELECT 1 FROM [salesforce].[mapping_Account] AS MAPPING WHERE MAPPING.[ID] = [salesforce].[Account_Business].[LifePro_ID__c] AND MAPPING.[SALESFORCE_ID] IS NULL)
		)
	UPDATE FAILS SET 
		[Reject_Flag] = 2
		, [Reject_Dt] = CURRENT_TIMESTAMP
		, [FAILS].[Reject_Reason] = 'Rejected by Salesforce';

	SELECT @ROWS = @@ROWCOUNT;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;
	END;
/*END: Flag records rejected by Salesforce*/
/*START: Move rejected rows to reject table*/
IF (1=1)
	BEGIN;
  IF EXISTS(SELECT 1 FROM [salesforce].[Account_Business] WHERE COALESCE([Reject_Flag],0)<>0)
    BEGIN;
    INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'TruncateAccount_Business:Log Rejections');
    SELECT @LOGID = @@IDENTITY;
    INSERT [salesforce].[reject_Account_Business]
      ([Name]
		,[Phone]
		,[OwnerId]
		,[RecordTypeId]
		,[LifePro_Last_Modified_DateTime__c]
		,[X2017_Activity_Premium__c]
		,[X2017_Effective_Premium__c]
		,[X2018_Activity_Premium__c]
		,[X2018_Effective_Premium__c]
		,[X2019_Activity_Premium__c]
		,[X2019_Effective_Premium__c]
		,[Agent_Number__c]
		,[Company_Code__c]
		,[Email__c]
		,[LifePro_ID__c]
		,[Region__c]
		,[Status__c]
		,[Status_Date__c]
		,[Suitability__c]
		,[TIN__c]
		,[Social_Security_Number__c]
		,[Tax_Status__c]
		,[Tax_Witholding_Option__c]
		,[Created_dt]
		,[Modified_dt]
		,[LifePro_NameID]
		,[Reject_Flag]
		,[Reject_Dt]
		,[Reject_Reason]) --destination columns
    SELECT 
          [Name]
		,[Phone]
		,[OwnerId]
		,[RecordTypeId]
		,[LifePro_Last_Modified_DateTime__c]
		,[X2017_Activity_Premium__c]
		,[X2017_Effective_Premium__c]
		,[X2018_Activity_Premium__c]
		,[X2018_Effective_Premium__c]
		,[X2019_Activity_Premium__c]
		,[X2019_Effective_Premium__c]
		,[Agent_Number__c]
		,[Company_Code__c]
		,[Email__c]
		,[LifePro_ID__c]
		,[Region__c]
		,[Status__c]
		,[Status_Date__c]
		,[Suitability__c]
		,[TIN__c]
		,[Social_Security_Number__c]
		,[Tax_Status__c]
		,[Tax_Witholding_Option__c]
		,[Created_dt]
		,[Modified_dt]
		,[LifePro_NameID]
		,[Reject_Flag]
		,[Reject_Dt]
		,[Reject_Reason]--source columns
    FROM [salesforce].[Account_Business] 
    WHERE COALESCE([Reject_Flag],0)<>0;
    SELECT @ROWS = @@ROWCOUNT;
    UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;
    END;
	END;
/*END: Move rejected rows to reject table*/
/*START: Truncate staging*/
IF (1=1)
	BEGIN;
  SELECT @ROWS = SUM(st.row_count) FROM    sys.dm_db_partition_stats st WHERE object_name(object_id) = 'Account_Business' AND OBJECT_SCHEMA_NAME(OBJECT_ID) = 'salesforce' AND (index_id < 2);
  TRUNCATE TABLE [EDW_Outbound].[salesforce].[Account_Business];
  UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID_START;
  END;
/*END: Truncate staging*/
END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();

--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account_Business:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;

RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;

  

GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Policy_Tax_Document]    Script Date: 5/17/2022 2:04:46 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:          Darin Baarda
-- Create date:		08/10/2021
-- Description:     truncate the policy documents
-- =============================================
-- Last Run Date : 08/10/2021
-- Last Run Exec : exec salesforce.usp_Truncate_Policy_Tax_Document 
-- Last Run Stat : 
-- =============================================
-- Maintenance 
-- =============================================
-- CX-311     08/10/2021 Darin Baarda 
-- New Stored Procedure
-- =============================================

CREATE PROCEDURE [salesforce].[usp_Truncate_Policy_Tax_Document]


AS
BEGIN
SET NOCOUNT ON;

	BEGIN TRY


		/* code starts here for the procedure */

		TRUNCATE TABLE [EDW_Outbound].[salesforce].[Policy_Tax_Document]

		/* code ends here for the procedure */

	END TRY
	BEGIN CATCH
           
	DECLARE @ERROR_MSG          NVARCHAR(2000);
	DECLARE @ERROR_SEVERITY     INT;
	DECLARE @ERROR_STATE        INT;
 
	SET @ERROR_MSG              = ERROR_MESSAGE();
	SET @ERROR_SEVERITY         = ERROR_SEVERITY();
	SET @ERROR_STATE            = ERROR_STATE();


	RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

	END CATCH;

END
GO

/****** Object:  StoredProcedure [salesforce].[usp_Insert_Product_Initial]    Script Date: 5/17/2022 2:04:46 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Chris Waggoner and Steve Tangeman
-- Create date: 05/11/2021
-- Description:	Insert data from EDW_DataLake into EDW_Outbound for Product 
-- =============================================
CREATE     PROCEDURE [salesforce].[usp_Insert_Product_Initial] 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	TRUNCATE TABLE [EDW_Outbound].[salesforce].[Product]

	INSERT INTO EDW_Outbound.salesforce.Product (IsActive, ProductCode, [Name], Product_Type__c, External_Id__c)
	SELECT  
      IIF([END_DATE] >=  '2099-01-01', 1, 0) AS IsActive
	  ,[PRODUCT_ID] AS ProductCode
	  ,[MARKET_NAME] AS [Name]
	  ,[PRODUCT_TYPE] AS Product_Type__c
	  ,[PRODUCT_ID] AS External_Id__c
  FROM [EDW_DataLake].[lifepro_v].[PRDF_Curr_Vw]

END
GO

/****** Object:  StoredProcedure [salesforce].[usp_Insert_Hierarchy]    Script Date: 5/17/2022 2:04:47 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE     PROCEDURE  [salesforce].[usp_Insert_Hierarchy]
 	
AS
BEGIN;
/* ===================================================================================

  Author: 			Anastasia Vogelaar
  Creation Date: 	01/12/2022
  Version: 			1.0.0
  Description: 	    Refreshes hierarchy recrods for each nameid
  Exceptions: 		
	
 -- Change Log: 		
  Modified By:		
  Modified Date:		
  Version:			
  Description:	
  --Enter reset code here for full refreshes	

-- =================================================================================== 
*/

SET NOCOUNT ON;
DECLARE @ROWS						INT;		--Used for logging row counts
DECLARE @LOGID_START				INT;		--Used for the first log id
DECLARE	@LOGID						INT;		--Used for intermediate log ids

BEGIN TRY
--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Hierarchy:Stat/End Indicator');
SELECT @LOGID_START = @@IDENTITY;

/* START: Create temporary tables.*/
IF (1=1)
	BEGIN;
	IF OBJECT_ID (N'work.stage_sf_AdvisorContactHierarchy', N'U') IS NOT NULL
		BEGIN;
		TRUNCATE TABLE [EDW_Outbound].[work].[stage_sf_AdvisorContactHierarchy];
		END;
	ELSE 
		BEGIN;
		CREATE  TABLE [EDW_Outbound].[work].[stage_sf_AdvisorContactHierarchy]
			([NAME_ID]	INT PRIMARY KEY CLUSTERED
			, [REGION_CODE] VARCHAR(6) NULL
			, [NAME_IND] NVARCHAR(1) NULL
			, [UPLINE_ID] INT NULL
			, [UPLINE_IND] NVARCHAR(1) NULL
			, [TOPUPLINE_ID] INT NULL
			, [TOPUPLINE_IND] NVARCHAR(1) NULL
			);
		END;
	END;
/* END: Create temporary tables.*/

/* START: Populate temporary tables.*/
IF (1=1)
	BEGIN;
    INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Hierarchy:Recursive Hierarchy');
	SELECT @LOGID = @@IDENTITY;
		
	;WITH LAST_HIER AS
		(SELECT ROW_NUMBER() OVER (PARTITION BY SRC.NAME_ID ORDER BY COALESCE(HIER.STOP_DATE,'12/31/9999') DESC) AS RN
			, SRC.NAME_ID
			, SRC.NAME_FORMAT_CODE AS NAME_IND
			, HIER.AGENT_NUMBER
			, HIER.HIERARCHY_AGENT
			, HIER.COMPANY_CODE
			, HIER.STOP_DATE
			, HIER.REGION_CODE
		FROM	[EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS SRC
			INNER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS AGNT ON
				AGNT.[NAME_ID] = SRC.[NAME_ID]
			LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] AS HIER ON
				HIER.AGENT_NUMBER = AGNT.AGENT_NUMBER
				AND HIER.COMPANY_CODE = AGNT.COMPANY_CODE
		)
	INSERT [work].[stage_sf_AdvisorContactHierarchy]
		([NAME_ID]
		, [NAME_IND]
		, [UPLINE_ID]
		, [UPLINE_IND]
		, [REGION_CODE])
	SELECT	LAST_HIER.NAME_ID 
		, LAST_HIER.NAME_IND
		, UPLINENM.NAME_ID AS UPLINE_ID
		, UPLINENM.NAME_FORMAT_CODE AS UPLINE_IND
		, LAST_HIER.REGION_CODE
	FROM	LAST_HIER
			LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] AS UPLINEAGNT ON
				UPLINEAGNT.AGENT_NUMBER = LAST_HIER.HIERARCHY_AGENT
				AND UPLINEAGNT.COMPANY_CODE = LAST_HIER.COMPANY_CODE
			LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS UPLINENM ON
				UPLINEAGNT.NAME_ID = UPLINENM.NAME_ID
	WHERE	LAST_HIER.RN = 1;

	;WITH HIER(name_id, upline_id, TOPLINE_ID, lvl)
		AS
		--ROOT
		(SELECT TMP.NAME_ID, TMP.NAME_ID, TMP.NAME_ID, 0 AS LVL
		FROM [work].[stage_sf_AdvisorContactHierarchy] AS TMP
		WHERE TMP.NAME_IND = 'B'
		UNION ALL
		--RECURSIVE
		SELECT TMP.NAME_ID, TMP.UPLINE_ID, (REC.TOPLINE_ID+0), LVL+1
		FROM [work].[stage_sf_AdvisorContactHierarchy] AS TMP
			INNER JOIN HIER AS REC ON	
				REC.name_id = TMP.UPLINE_ID
				AND TMP.NAME_IND = 'I')
	UPDATE	DEST
	SET		[TOPUPLINE_ID] = HIER.TOPLINE_ID
		, [TOPUPLINE_IND] = 'B'
	FROM	[work].[stage_sf_AdvisorContactHierarchy] AS DEST
		INNER JOIN HIER ON
			HIER.NAME_ID = DEST.NAME_ID;
	SELECT @ROWS = @@ROWCOUNT;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
    END;
/* END: Populate temporary tables.*/


--Logging
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;   

END TRY
BEGIN CATCH

DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();
--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Hierarchy:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;

RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;

  

GO

/****** Object:  StoredProcedure [salesforce].[usp_insert_Advisor_Contact_Initial]    Script Date: 5/17/2022 2:04:47 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:           Darin Baarda
-- Create date: 06/16/2021
-- Description:      initial insert of AE Advisor Contact data
-- =============================================
-- Last Run Date : 06/16/2021
-- Last Run Exec : exec [salesforce].usp_insert_Advisor_Contact_Initial select * From salesforce.advisor_contact
-- =============================================
-- Maintenance 
-- =============================================
-- CE-302     06/16/2021 Darin Baarda 
-- New Stored Procedure
-- =============================================

CREATE   PROCEDURE  [salesforce].[usp_insert_Advisor_Contact_Initial]


AS
BEGIN
       SET NOCOUNT ON;

truncate table salesforce.advisor_contact


DECLARE @AEContactRecordTypeID varchar(20) = (SELECT [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE NAME = 'AE Advisor Contact' AND SOBJECTTYPE = 'Contact')
DECLARE @ELContactRecordTypeID varchar(20) = (SELECT [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE NAME = 'EL Advisor Contact' AND SOBJECTTYPE = 'Contact')
DECLARE @NYContactRecordTypeID varchar(20) = (SELECT [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE NAME = 'NY Advisor Contact' AND SOBJECTTYPE = 'Contact')

Declare @Now datetime
set @Now = GETDATE()

;with
	AgentNumbers as (
		SELECT DISTINCT COMPANY_CODE, AGENT_NUMBER
		FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw]
	),
	MinNameIDs AS
	(
		SELECT [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].COMPANY_CODE, [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].AGENT_NUMBER,REGION_CODE, MIN([NAME_ID]) AS NAME_ID
		FROM [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw]
		JOIN AgentNumbers 
			ON AgentNumbers.COMPANY_CODE = [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].COMPANY_CODE
			AND AgentNumbers.AGENT_NUMBER = [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].AGENT_NUMBER
		left join EDW_DataLake.lifepro_v.AEXP_08_Curr_Vw on AGNT_Curr_Vw.COMPANY_CODE = AEXP_08_Curr_Vw.COMPANY_CODE and AGNT_Curr_Vw.AGENT_NUMBER = AEXP_08_Curr_Vw.AGENT_NUMBER
		GROUP BY [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].COMPANY_CODE, [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].AGENT_NUMBER,REGION_CODE
	),
	EmailAddressIds AS
	(
		SELECT nalk.NAME_ID, MAX(nalk.ADDRESS_ID) AS EMAIL_ADDRESS_ID
		FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] nalk
		JOIN MinNameIDs ON MinNameIDs.NAME_ID = nalk.NAME_ID
		WHERE ADDRESS_TYPE = 'E'
		GROUP BY nalk.NAME_ID
	),
	AddressIds as (
		SELECT nalk.NAME_ID, MAX(nalk.ADDRESS_ID) AS MAIL_ADDRESS_ID
		FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] nalk
		JOIN MinNameIDs ON MinNameIDs.NAME_ID = nalk.NAME_ID
		WHERE ADDRESS_TYPE != 'E'
		AND (rtrim(ADDRESS_CODE) = 'BUS' OR rtrim(ADDRESS_CODE) = '')
		GROUP BY nalk.NAME_ID
	),
	GeoAddressIds as (
			SELECT nalk.NAME_ID, MAX(nalk.ADDRESS_ID) AS GEO_ADDRESS_ID
			FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] nalk
			JOIN MinNameIDs ON MinNameIDs.NAME_ID = nalk.NAME_ID
			WHERE ADDRESS_TYPE != 'E'
			AND ADDRESS_CODE = 'GEO'
			GROUP BY nalk.NAME_ID
	),
	AMLDates as (
		select NAME_ID, COMPANY_CODE, AML_DATE
		from EDW_DataLake.lifepro_v.EXTN_AGTT_Curr_Vw
	),
	PerferredNames as (
		select NAME_ID, PERFERRED_NAME, CRD_NUM, NPN_NUM 
		from [EDW_DataLake].[lifepro_v].EXTN_NADRNA_Vw 
		where rtrim(PERFERRED_NAME) <> ''
	),
	SuitabilityTraining as (
		select COMPANY_CODE, AGENT_NUMBER, SUITABLTY_TRNING
		from [EDW_DataLake].lifepro_V.AEXP_12_Curr_Vw
	),
	LicenseState as (
		Select Company_Code, Agent_Number, State_1
		from [EDW_DataLake].[lifepro_v].[AEXP_04_Curr_Vw]
	) ,
	Phone as (
		select
		ADDRESS_ID, PHONE_NUMBER, BLOCK_IND
		FROM [EDW_DataLake].[lifepro_v].NALK_Curr_Vw
		join MinNameIDs on NALK_Curr_Vw.NAME_ID = MinNameIDs.NAME_ID
		where (rtrim(ADDRESS_CODE) = 'BUS' or rtrim(ADDRESS_CODE) = '')
		and rtrim(PHONE_NUMBER) <> '0'
	),
	EmailBlock as (
		select
		ADDRESS_ID, BLOCK_IND
		FROM [EDW_DataLake].[lifepro_v].NALK_Curr_Vw
		join MinNameIDs on NALK_Curr_Vw.NAME_ID = MinNameIDs.NAME_ID
		where (rtrim(ADDRESS_CODE) = 'BUS' or rtrim(ADDRESS_CODE) = '')
		and ADDRESS_TYPE = 'E'
	)
	insert into [EDW_Outbound].[salesforce].advisor_contact (
		AccountID,
		BirthDate,
		BusinessPhone,
		DoNotCall,
		Email,
		HasOptedOutOfEmail,
		HasOptedOutOfFax,
		OwnerID,
		FirstName,
		LastName,
		MailingAddress,
		MailingCity,
		MailingCountry,
		MailingState,
		MailingStreet,
		MailingPostalCode,
		MiddleName,
		OtherPhone,
		OtherAddress,
		OtherCity,
		OtherCountry,
		OtherState,
		OtherStreet,
		OtherPostalCode,
		RecordType,
		Salutation,
		Suffix,
		LifePro_Last_Modified_DateTime__c,
		DLRS_2020_Fall_Conference_Premium__c,
		DLRS_2021_Fall_Conference_Premium__c,
		All_Time_Premium__c,
		AML_Training__c,
		Total_Production__c,
		DLRS_August_Premium_Total__c,
		Company_Code__c,
		Contact_Record_Type__c,
		First_App_Date__c,
		Gender__c,
		Last_App_Date__c,
		Last_Status_Date__c,
		Last_Terminated_Date__c,
		LifePro_ID__c,
		LO_Agent__c,
		Name_Format__c,
		Preferred_Name__c,
		Region__c,
		SSN__c,
		State__c,
		Suitability__c,
		Terminated_Amount__c,
		YTD_Activity_Amount__c,
		YTD_Apps_Received__c,
		YTD_Effective_Amount__c,
		DLRS_YTD_FIA_Premium__c,
		YTD_Issue_Amount__c,
		Parent_Name_Id__c,
		Name_Id__c,
		NPN__c,
		CRD__c)
	select distinct 
	[LOOKUP_ACCOUNT].ID as 'AccountID'
	, DATE_OF_BIRTH as 'BirthDate'
	, '(' + SUBSTRING(RIGHT('0000000000' + CONVERT(varchar(11), PHONE_NUMBER), 10), 1, 3) + ') ' + SUBSTRING(RIGHT('0000000000' + CONVERT(varchar(11), PHONE_NUMBER), 10), 4, 3) + '-' + SUBSTRING(RIGHT('0000000000' + CONVERT(varchar(11), PHONE_NUMBER), 10), 7, 4) as 'Phone'
	, case when (
					rtrim(Phone.block_ind) = 'A'
					OR rtrim(Phone.block_ind) = 'B'
					OR rtrim(Phone.block_ind) = 'D'
					OR rtrim(Phone.block_ind) = 'E'
					OR rtrim(Phone.block_ind) = 'G'
					OR rtrim(Phone.block_ind) = 'I'
				)
	then 1 else 0 end as 'DoNotCall'
	, rtrim(emailAddr.ADDR_LINE_1) + rtrim(emailAddr.ADDR_LINE_2) + rtrim(emailAddr.ADDR_LINE_3) as 'Email'
	, case when (
					rtrim(EmailBlock.block_ind) = 'A'
					OR rtrim(EmailBlock.block_ind) = 'B'
					OR rtrim(EmailBlock.block_ind) = 'C'
					OR rtrim(EmailBlock.block_ind) = 'D'
					OR rtrim(EmailBlock.block_ind) = 'F'
					OR rtrim(EmailBlock.block_ind) = 'G'
					OR rtrim(EmailBlock.block_ind) = 'H'
					OR rtrim(EmailBlock.block_ind) = 'L'
				)
	then 1 else 0 end as 'HasOptedOutOfEmail'
	, case when (
					rtrim(EmailBlock.block_ind) = 'A'
					OR rtrim(EmailBlock.block_ind) = 'B'
					OR rtrim(EmailBlock.block_ind) = 'C'
					OR rtrim(EmailBlock.block_ind) = 'E'
					OR rtrim(EmailBlock.block_ind) = 'F'
					OR rtrim(EmailBlock.block_ind) = 'I'
					OR rtrim(EmailBlock.block_ind) = 'J'
					OR rtrim(EmailBlock.block_ind) = 'M'
				)
	then 1 else 0 end as 'HasOptedOutOfFax'
	, null as 'OwnerID'
	, INDIVIDUAL_FIRST as 'FirstName'
	, INDIVIDUAL_LAST as 'LastName'
    , RTRIM(ISNULL(mailAddr.[ADDR_LINE_1],'')) + CASE WHEN RTRIM(ISNULL(mailAddr.[ADDR_LINE_2], '')) <> '' THEN ' ' + RTRIM(mailAddr.[ADDR_LINE_2]) ELSE '' END +  CASE WHEN RTRIM(ISNULL(mailAddr.[ADDR_LINE_3], '')) <> '' THEN ' ' + RTRIM(mailAddr.[ADDR_LINE_3]) ELSE '' END as  'MailingAddress'
	, mailAddr.City as 'MailingCity'
	, mailAddr.Country as 'MailingCountry'
	, mailAddr.STATE as 'MailingState'
	, RTRIM(ISNULL(mailAddr.[ADDR_LINE_1],'')) + CASE WHEN RTRIM(ISNULL(mailAddr.[ADDR_LINE_2], '')) <> '' THEN ' ' + RTRIM(mailAddr.[ADDR_LINE_2]) ELSE '' END +  CASE WHEN RTRIM(ISNULL(mailAddr.[ADDR_LINE_3], '')) <> '' THEN ' ' + RTRIM(mailAddr.[ADDR_LINE_3]) ELSE '' END as 'MailingStreet'
	, mailAddr.ZIP as 'MailingPostalCode'
	, INDIVIDUAL_MIDDLE as 'MiddleName'
	, null as 'OtherPhone'
	, RTRIM(ISNULL(mailAddr.[ADDR_LINE_1],'')) + CASE WHEN RTRIM(ISNULL(mailAddr.[ADDR_LINE_2], '')) <> '' THEN ' ' + RTRIM(mailAddr.[ADDR_LINE_2]) ELSE '' END +  CASE WHEN RTRIM(ISNULL(mailAddr.[ADDR_LINE_3], '')) <> '' THEN ' ' + RTRIM(mailAddr.[ADDR_LINE_3]) ELSE '' END as 'OtherAddress'
	, geoAddr.City as 'OtherCity'
	, geoAddr.COUNTRY as 'OtherCountry'
	, geoAddr.State as 'OtherState'
	, RTRIM(ISNULL(mailAddr.[ADDR_LINE_1],'')) + CASE WHEN RTRIM(ISNULL(mailAddr.[ADDR_LINE_2], '')) <> '' THEN ' ' + RTRIM(mailAddr.[ADDR_LINE_2]) ELSE '' END +  CASE WHEN RTRIM(ISNULL(mailAddr.[ADDR_LINE_3], '')) <> '' THEN ' ' + RTRIM(mailAddr.[ADDR_LINE_3]) ELSE '' END as 'OtherStreet'
	, geoAddr.ZIP as 'OtherPostalCode'
	, MinNameIDs.COMPANY_CODE + MinNameIDs.REGION_CODE as 'RecordTypeID'
	, case when rtrim(INDIVIDUAL_PREFIX) <> '' then INDIVIDUAL_PREFIX else BUSINESS_PREFIX end as 'Saluation'
	, case when rtrim(INDIVIDUAL_SUFFIX) <> '' THEN INDIVIDUAL_SUFFIX ELSE BUSINESS_SUFFIX END as 'Suffix'
	, @Now as 'LifePro_Last_Modified_DateTime__c'
	, null as 'DLRS_2020_Fall_Conference_Premium__c'
	, null as 'DLRS_2021_Fall_Conference_Premium__c'
	, null as 'All_Time_Premium__c'
	, AML_DATE as 'AML_Training__c'
	, null as 'Total_Production__c'
	, null as 'DLRS_August_Premium_Total__c'
	, AMLDates.COMPANY_CODE as 'Company_Code__c'
	, CASE WHEN MinNameIDs.COMPANY_CODE = '01'
		THEN @AEContactRecordTypeID
		ELSE
			CASE WHEN MinNameIDs.Company_Code = '09'
			THEN @ELContactRecordTypeID
			ELSE @NYContactRecordTypeID
			END
		END AS 'Contact_Record_Type__c'
	, [contact_vw].FIRST_APP_DATE__C as 'First_App_Date__c'
	, NAME_Curr_Vw.SEX_CODE as 'Gender__c'
	, null as 'Last_App_Date__c'
	, null as 'Last_Status_Date__c'
	, null as 'Last_Terminated_Date__c'
	, NAME_Curr_Vw.NAME_ID as 'LifePro_ID__c'
	, null as 'LO_Agent__c'
	, NAME_Curr_Vw.NAME_FORMAT_CODE as 'Name_Format__c'
	, PerferredNames.PERFERRED_NAME as 'Preferred_Name__c'
	, MinNameIDs.REGION_CODE as 'Region__c'
	, CASE WHEN NAME_Curr_Vw.NAME_FORMAT_CODE = 'B'
		THEN STUFF(RIGHT('000000000' + TRIM(NAME_Curr_Vw.BUSINESS_TAX_CODE), 9), 3, 0, '-')
		ELSE STUFF(STUFF(RIGHT('000000000' + CONVERT(varchar(11), NAME_Curr_Vw.SOC_SEC_NUMBER), 9), 4, 0, '-'), 7, 0, '-')
		END as 'SSN__c'
	, null as 'State__c'
	, SuitabilityTraining.SUITABLTY_TRNING as 'Suitability__c'
	, null as 'Terminated_Amount__c'
	, null as 'YTD_Activity_Amount__c'
	, null as 'YTD_Apps_Received__c'
	, null as 'YTD_Effective_Amount__c'
	, null as 'DLRS_YTD_FIA_Premium__c'
	, null as 'YTD_Issue_Amount__c'
	, null as 'Parent_Name_Id__c'
	, NAME_Curr_Vw.NAME_ID as 'Name_Id__c'
	, PerferredNames.NPN_NUM as 'NPN__c'
	, PerferredNames.CRD_NUM as 'CRD__c'
	FROM [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw]
	JOIN [EDW_Outbound].[salesforce].[LOOKUP_ACCOUNT] on [NAME_Curr_Vw].[NAME_ID] = [LOOKUP_ACCOUNT].LIFEPRO_ID__C
	JOIN MinNameIDs ON [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw].NAME_ID = MinNameIDs.NAME_ID
	LEFT JOIN EmailAddressIds on MinNameIDs.NAME_ID = EmailAddressIds.NAME_ID
	LEFT JOIN AddressIds on MinNameIDs.NAME_ID = AddressIds.NAME_ID
	LEFT JOIN GeoAddressIds on MinNameIDs.NAME_ID = GeoAddressIds.NAME_ID
	LEFT JOIN AMLDates on MinNameIDs.NAME_ID = AMLDates.NAME_ID
	LEFT JOIN PerferredNames on MinNameIDs.NAME_ID = PerferredNames.NAME_ID
	LEFT JOIN LicenseState on MinNameIDs.COMPANY_CODE = LicenseState.COMPANY_CODE and MinNameIDs.AGENT_NUMBER = LicenseState.AGENT_NUMBER
	LEFT JOIN EDW_Outbound.salesforce.PhoneNumber sPhoneNumber on MinNameIDs.NAME_ID = sPhoneNumber.NameID
	LEFT JOIN Phone ON  AddressIds.MAIL_ADDRESS_ID = Phone.ADDRESS_ID  and sPhoneNumber.PhoneNumber = '(' + SUBSTRING(RIGHT('0000000000' + CONVERT(varchar(11), PHONE_NUMBER), 10), 1, 3) + ') ' + SUBSTRING(RIGHT('0000000000' + CONVERT(varchar(11), PHONE_NUMBER), 10), 4, 3) + '-' + SUBSTRING(RIGHT('0000000000' + CONVERT(varchar(11), PHONE_NUMBER), 10), 7, 4)
	LEFT JOIN EmailBlock ON EmailAddressIds.EMAIL_ADDRESS_ID = EmailBlock.ADDRESS_ID
	LEFT JOIN SuitabilityTraining on MinNameIDs.AGENT_NUMBER = SuitabilityTraining.AGENT_NUMBER and MinNameIDs.COMPANY_CODE = SuitabilityTraining.COMPANY_CODE
	LEFT JOIN [EDW_DataLake].[salesforce_v].[CONTACT_Vw] on MinNameIDs.COMPANY_CODE + '-' + MinNameIDs.AGENT_NUMBER = [CONTACT_Vw].LIFEPRO_ID__C
	LEFT JOIN [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw] emailAddr ON emailAddr.ADDRESS_ID = EmailAddressIds.EMAIL_ADDRESS_ID
	LEFT JOIN [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw] mailAddr ON mailAddr.ADDRESS_ID = AddressIds.MAIL_ADDRESS_ID
	LEFT JOIN [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw] geoAddr ON geoAddr.ADDRESS_ID = GeoAddressIds.GEO_ADDRESS_ID
where NAME_Curr_Vw.NAME_FORMAT_CODE = 'I'
and MinNameIDs.company_code + MinNameIDs.agent_number not in (select company_code + agent_number FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] where COMPANY_CODE = '01' AND REGION_CODE = 'BD')
			and MinNameIDs.company_code + MinNameIDs.agent_number not in (select company_code + agent_number FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] where COMPANY_CODE = '09' AND REGION_CODE = 'RAYJAY' AND SALES_REGION = 'SE')
			and MinNameIDs.company_code + MinNameIDs.agent_number not in (select company_code + agent_number FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] where COMPANY_CODE = '09' AND SALES_REGION = 'BD')
			and MinNameIDs.company_code + MinNameIDs.agent_number not in (select company_code + agent_number FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw] where REGION_CODE = 'WHOLE')




END
GO

/****** Object:  StoredProcedure [salesforce].[usp_Insert_Address_Initial]    Script Date: 5/17/2022 2:04:47 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:           Darin Baarda
-- Create date: 05/11/2021
-- Description:      Insert address records to the staging table for salesforce
-- =============================================
-- Last Run Date : 05/12/2021
-- Last Run Exec : exec salesforce.usp_Insert_Address_Initial 
-- Run Stats: 00:00:13 3,347,504 records
-- =============================================
-- Maintenance 
-- =============================================
-- CX-305     05/11/2021 Darin Baarda 
-- New Stored Procedure
-- =============================================

CREATE PROCEDURE [salesforce].[usp_Insert_Address_Initial]


AS
BEGIN
       SET NOCOUNT ON;

	   truncate table [salesforce].[Address]

		DECLARE @Now datetime
		set @Now = GETDATE()	   

	   insert into [salesforce].[Address] ([External_Id__c],[Street_Name__c],[City__c],[Country__c],[State__c],[Zip__c],[ForeignAddressFlag__c], LifePro_Last_Modified_DateTime__c)
	   SELECT 
      [ADDRESS_ID] as External_Id__c
      , RTRIM(ISNULL([ADDR_LINE_1],'')) + CASE WHEN RTRIM(ISNULL([ADDR_LINE_2], '')) <> '' THEN ' ' + RTRIM([ADDR_LINE_2]) ELSE '' END +  CASE WHEN RTRIM(ISNULL([ADDR_LINE_3], '')) <> '' THEN ' ' + RTRIM([ADDR_LINE_3]) ELSE '' END as Street_Name__c
	  ,RTRIM([CITY]) as City__c
      ,RTRIM([COUNTRY]) as Country__c
      ,RTRIM([STATE]) as State__c
      ,RTRIM([ZIP]) as Zip__c
      ,CASE WHEN RTRIM(ISNULL([FOREIGN_ADDR_FLAG], '')) = 'Y' THEN 1 ELSE 0 END as ForeignAddressFlag__c
	  , @Now as 'LifePro_Last_Modified_DateTime__c'
	  FROM [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw]
	  WHERE ADDR_LINE_1 not like '%@%'





END
GO

/****** Object:  StoredProcedure [salesforce].[usp_Insert_Account_Wholesaler_Initial]    Script Date: 5/17/2022 2:04:47 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		Steve Tangeman
-- Create date: 05/10/2021
-- Description:	Insert data from EDW_DataLake into EDW_Outbound for Account_Wholesaler 
-- =============================================
CREATE   PROCEDURE [salesforce].[usp_Insert_Account_Wholesaler_Initial] 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @RecordTypeID varchar(20) = (SELECT [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE NAME = 'Wholesaler' AND SOBJECTTYPE = 'Account')

    -- Insert statements for procedure here
	TRUNCATE TABLE [EDW_Outbound].[salesforce].[Account_Wholesaler]
	;WITH WholesalerAgentNumbers AS
	(
		SELECT DISTINCT COMPANY_CODE, AGENT_NUMBER
		FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw]
		WHERE REGION_CODE = 'WHOLE'
	),
	MinNameIDs AS
	(
		SELECT [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].COMPANY_CODE, [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].AGENT_NUMBER, MIN([NAME_ID]) AS NAME_ID
		FROM [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw]
		JOIN WholesalerAgentNumbers 
			ON WholesalerAgentNumbers.COMPANY_CODE = [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].COMPANY_CODE
			AND WholesalerAgentNumbers.AGENT_NUMBER = [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].AGENT_NUMBER
		GROUP BY [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].COMPANY_CODE, [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].AGENT_NUMBER
	),
	EmailAddressIds AS
	(
		SELECT nalk.NAME_ID, MAX(nalk.ADDRESS_ID) AS EMAIL_ADDRESS_ID
		FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] nalk
		JOIN MinNameIDs ON MinNameIDs.NAME_ID = nalk.NAME_ID
		WHERE ADDRESS_TYPE = 'E'
		GROUP BY nalk.NAME_ID
	)
	INSERT INTO EDW_Outbound.salesforce.Account_Wholesaler
		([Name],
		Phone,
		OwnerId,
		RecordTypeId,
		X2017_Activity_Premium__c,
		X2017_Effective_Premium__c,
		X2018_Activity_Premium__c,
		X2018_Effective_Premium__c,
		X2019_Activity_Premium__c,
		X2019_Effective_Premium__c,
		Agent_Number__c,
		Company_Code__c,
		Contract_Date__c,
		Email__c,
		LifePro_ID__c,
		Region__c,
		Status__c,
		Status_Date__c,
		Suitability__c,
		TIN__c,
		Social_Security_Number__c,
		Tax_Status__c,
		Tax_Witholding_Option__c)
	SELECT
		CASE WHEN NAME_Curr_Vw.NAME_FORMAT_CODE = 'I'
			THEN TRIM(INDIVIDUAL_FIRST) + IIF(LEN(TRIM(INDIVIDUAL_FIRST)) > 0, ' ', '') + TRIM(INDIVIDUAL_MIDDLE) + IIF(LEN(TRIM(INDIVIDUAL_MIDDLE)) > 0, ' ', '') + TRIM(INDIVIDUAL_LAST)
			ELSE TRIM(BUSINESS_NAME)
		END AS Name,
		phone.PhoneNumber,
		'' AS OwnerId,
		@RecordTypeID AS RecordTypeId,
		premium.ActivityPremium2017 AS X2017_Activity_Premium__c,
		premium.EffectivePremium2017 AS X2017_Effective_Premium__c,
		premium.ActivityPremium2018 AS X2018_Activity_Premium__c,
		premium.EffectivePremium2018 AS X2018_Effective_Premium__c,
		premium.ActivityPremium2019 AS X2019_Activity_Premium__c,
		premium.EffectivePremium2019 AS X2019_Effective_Premium__c,
		MinNameIDs.AGENT_NUMBER AS Agent_Number__c,
		MinNameIDs.COMPANY_CODE AS Company_Code__c,
		agnt.CONTRACT_DATE AS Contract_Date__c,
		ISNULL(TRIM(emailAddr.ADDR_LINE_1), '') + ISNULL(TRIM(emailAddr.ADDR_LINE_2), '') + ISNULL(TRIM(emailAddr.ADDR_LINE_3), '') AS Email__c,
		MinNameIDs.NAME_ID AS LifePro_ID__c,
		regions.REGION_CODE AS Region__c,
		agnt.STATUS_CODE AS Status__c,
		agnt.STATUS_DATE AS Status_Date__c,
		CASE TRIM(suitability.SUITABILITY_FLAG)
			WHEN 'Y' THEN 1
			ELSE 0
		END AS Suitability__c,
		CASE WHEN NAME_Curr_Vw.NAME_FORMAT_CODE = 'B'
			THEN STUFF(RIGHT('000000000' + TRIM(NAME_Curr_Vw.BUSINESS_TAX_CODE), 9), 3, 0, '-')
			ELSE ''
		END AS TIN__c,
		CASE WHEN NAME_Curr_Vw.NAME_FORMAT_CODE = 'I'
			THEN STUFF(STUFF(RIGHT('000000000' + CONVERT(varchar(11), NAME_Curr_Vw.SOC_SEC_NUMBER), 9), 4, 0, '-'), 7, 0, '-')
			ELSE ''
		END AS Social_Security_Number__c,
		NAME_Curr_Vw.TAX_STATUS AS Tax_Status__c,
		NAME_Curr_Vw.TAX_WITHHOLDING_FLAG AS Tax_Witholding_Option__c
	FROM [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw]
	JOIN MinNameIDs 
		ON [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw].NAME_ID = MinNameIDs.NAME_ID
	JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] agnt
		ON MinNameIDs.COMPANY_CODE = agnt.COMPANY_CODE
		AND MinNameIDs.AGENT_NUMBER = agnt.AGENT_NUMBER
	LEFT JOIN EmailAddressIds 
		ON [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw].NAME_ID = EmailAddressIds.NAME_ID
	LEFT JOIN [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw] emailAddr 
		ON emailAddr.ADDRESS_ID = EmailAddressIds.EMAIL_ADDRESS_ID
	LEFT JOIN [EDW_DataLake].[lifepro_v].[AEXP_10_Curr_Vw] regions
		ON MinNameIDs.COMPANY_CODE = regions.COMPANY_CODE
		AND MinNameIDs.AGENT_NUMBER = regions.AGENT_NUMBER
	LEFT JOIN [EDW_DataLake].[lifepro_v].[AEXP_03_Curr_Vw] suitability
		ON MinNameIDs.COMPANY_CODE = suitability.COMPANY_CODE
		AND MinNameIDs.AGENT_NUMBER = suitability.AGENT_NUMBER
	LEFT JOIN [EDW_Outbound].[salesforce].[AgentYearlyPremiumTotals] premium
		ON MinNameIDs.COMPANY_CODE = premium.CompanyCode
		AND MinNameIDs.AGENT_NUMBER = premium.AgentNumber
	LEFT JOIN [EDW_Outbound].[salesforce].[PhoneNumber] phone
		ON [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw].NAME_ID = phone.NameID

END
GO

/****** Object:  StoredProcedure [salesforce].[usp_Insert_Account_Person_Initial]    Script Date: 5/17/2022 2:04:48 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		Chris Waggoner and Steve Tangeman
-- Create date: 04/28/2021
-- Description:	Insert data from EDW_DataLake into EDW_Outbound for Account_Person 
-- =============================================
CREATE   PROCEDURE  [salesforce].[usp_Insert_Account_Person_Initial] 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @RecordTypeID varchar(20) = (SELECT [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE NAME = 'Person Account' AND SOBJECTTYPE = 'Account')

    -- Insert statements for procedure here
	TRUNCATE TABLE [EDW_Outbound].[salesforce].[Account_Person]
	;WITH MinNameIDs AS
	(
		SELECT DISTINCT SOC_SEC_NUMBER, MIN(l_NAME.NAME_ID) AS NAME_ID
		FROM [EDW_DataLake].[lifepro_v].[RELA_Curr_Vw] l_RELA
		JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] l_NAME ON l_RELA.NAME_ID = l_NAME.NAME_ID
		WHERE l_RELA.RELATE_CODE IN ('PO', 'O1') AND NAME_FORMAT_CODE = 'I'
		GROUP BY l_NAME.SOC_SEC_NUMBER
	),
	EmailAddressIds AS
	(
		SELECT nalk.NAME_ID, MAX(nalk.ADDRESS_ID) AS EMAIL_ADDRESS_ID
		FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] nalk
		JOIN MinNameIDs ON MinNameIDs.NAME_ID = nalk.NAME_ID
		WHERE ADDRESS_TYPE = 'E'
		GROUP BY nalk.NAME_ID
	),
	NameAddressExtensionsMaxDate AS
	(
		SELECT nadrna.NAME_ID, MAX(nadrna.DATE) AS NADRNA_MAX_DATE
		FROM [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Curr_Vw] nadrna
		JOIN MinNameIDs ON MinNameIDs.NAME_ID = nadrna.NAME_ID
		GROUP BY nadrna.NAME_ID
	),
	NameAddressExtensionsMaxDateTime AS
	(
		SELECT nadrna.NAME_ID, nadrna.DATE AS NADRNA_MAX_DATE, MAX(nadrna.TIME) AS NADRNA_MAX_TIME
		FROM NameAddressExtensionsMaxDate maxDate
		JOIN [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Curr_Vw] nadrna
			ON maxDate.NAME_ID = nadrna.NAME_ID
			AND maxDate.NADRNA_MAX_DATE = nadrna.DATE
		GROUP BY nadrna.NAME_ID, nadrna.DATE
	)
	INSERT INTO [salesforce].[Account_Person]
           ([FirstName]
           ,[LastName]
           ,[MiddleName]
		   ,[Phone]
           ,[OwnerId]
           ,[RecordTypeId]
           ,[PersonEmail]
           ,[LifePro_ID__c]
           ,[Is_Deceased__c]
           ,[Client_Passcode__c]
           ,[Paperless_Annual_Statement__c]
           ,[Paperless_11_Month_Summary__c]
           ,[Social_Security_Number__c]
           ,[Gender__c]
           ,[Date_of_Birth__c]
           ,[Tax_Status__c]
           ,[Tax_Witholding_Option__c])
	SELECT TRIM(INDIVIDUAL_FIRST) AS FirstName,
		TRIM(INDIVIDUAL_LAST) AS LastName,
		TRIM(INDIVIDUAL_MIDDLE) AS MiddleName,
		phone.PhoneNumber,
		'' AS OwnerId,
		@RecordTypeID AS RecordTypeId,
		ISNULL(TRIM(emailAddr.ADDR_LINE_1), '') + ISNULL(TRIM(emailAddr.ADDR_LINE_2), '') + ISNULL(TRIM(emailAddr.ADDR_LINE_3), '') AS PersonEmail,
		MinNameIDs.NAME_ID AS LifePro_ID__c,
		CASE TRIM(NAME_Curr_Vw.DECEASED_FLAG)
			WHEN 'Y' THEN 1
			ELSE 0
		END AS Is_Deceased__c,
		ISNULL(TRIM(nadrna.NADR_PASSWORD) + TRIM(nadrna.NADR_PASSWORD2), '') AS Client_Passcode__c,
		CASE TRIM(nadrna.PPRLESS_ANN_STMT)
			WHEN 'Y' THEN 1
			ELSE 0
		END AS Paperless_Annual_Statement__c,
		CASE TRIM(nadrna.PPRLESS_11_MONTH)
			WHEN 'Y' THEN 1
			ELSE 0
		END AS Paperless_11_Month_Summary__c,
		STUFF(STUFF(RIGHT('000000000' + CONVERT(varchar(11), NAME_Curr_Vw.SOC_SEC_NUMBER), 9), 4, 0, '-'), 7, 0, '-') AS Social_Security_Number__c,
		NAME_Curr_Vw.SEX_CODE AS Gender__c,
		NAME_Curr_Vw.DATE_OF_BIRTH AS Date_of_Birth__c,
		NAME_Curr_Vw.TAX_STATUS AS Tax_Status__c,
		NAME_Curr_Vw.TAX_WITHHOLDING_FLAG AS Tax_Witholding_Option__c
	FROM [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw]
	JOIN MinNameIDs 
		ON [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw].NAME_ID = MinNameIDs.NAME_ID
	LEFT JOIN EmailAddressIds 
		ON [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw].NAME_ID = EmailAddressIds.NAME_ID
	LEFT JOIN [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw] emailAddr 
		ON emailAddr.ADDRESS_ID = EmailAddressIds.EMAIL_ADDRESS_ID
	LEFT JOIN NameAddressExtensionsMaxDateTime 
		ON [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw].NAME_ID = NameAddressExtensionsMaxDateTime.NAME_ID
	LEFT JOIN [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Curr_Vw] nadrna 
		ON NameAddressExtensionsMaxDateTime.NAME_ID = nadrna.NAME_ID 
		AND NameAddressExtensionsMaxDateTime.NADRNA_MAX_DATE = nadrna.DATE
		AND NameAddressExtensionsMaxDateTime.NADRNA_MAX_TIME = nadrna.TIME
	LEFT JOIN [EDW_Outbound].[salesforce].[PhoneNumber] phone
		ON [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw].NAME_ID = phone.NameID

END
GO

/****** Object:  StoredProcedure [salesforce].[usp_Insert_Account_NMO_Initial]    Script Date: 5/17/2022 2:04:48 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		Steve Tangeman and Chris Waggoner
-- Create date: 05/07/2021
-- Description:	Insert data from EDW_DataLake into EDW_Outbound for Account_NMO 
-- =============================================
CREATE    PROCEDURE [salesforce].[usp_Insert_Account_NMO_Initial] 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @RecordTypeID varchar(20) = (SELECT [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE NAME = 'NMO' AND SOBJECTTYPE = 'Account')

    -- Insert statements for procedure here
	TRUNCATE TABLE [EDW_Outbound].[salesforce].[Account_NMO]
	;WITH NMOAgentNumbers AS
	(
		SELECT DISTINCT COMPANY_CODE, AGENT_NUMBER
		FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw]
		WHERE REPORT_DESC = 'NMO'
			AND CAST(AGENT_LEVEL AS int) >= 90
	),
	MinNameIDs AS
	(
		SELECT [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].COMPANY_CODE, [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].AGENT_NUMBER, MIN([NAME_ID]) AS NAME_ID
		FROM [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw]
		JOIN NMOAgentNumbers 
			ON NMOAgentNumbers.COMPANY_CODE = [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].COMPANY_CODE
			AND NMOAgentNumbers.AGENT_NUMBER = [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].AGENT_NUMBER
		GROUP BY [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].COMPANY_CODE, [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].AGENT_NUMBER
	),
	EmailAddressIds AS
	(
		SELECT nalk.NAME_ID, MAX(nalk.ADDRESS_ID) AS EMAIL_ADDRESS_ID
		FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] nalk
		JOIN MinNameIDs ON MinNameIDs.NAME_ID = nalk.NAME_ID
		WHERE ADDRESS_TYPE = 'E'
		GROUP BY nalk.NAME_ID
	)
	INSERT INTO EDW_Outbound.salesforce.Account_NMO
		([Name],
		Phone,
		OwnerId,
		RecordTypeId,
		X2017_Activity_Premium__c,
		X2017_Effective_Premium__c,
		X2018_Activity_Premium__c,
		X2018_Effective_Premium__c,
		X2019_Activity_Premium__c,
		X2019_Effective_Premium__c,
		Agent_Number__c,
		Company_Code__c,
		Email__c,
		LifePro_ID__c,
		Region__c,
		Status__c,
		Status_Date__c,
		Suitability__c,
		TIN__c,
		Social_Security_Number__c,
		Tax_Status__c,
		Tax_Witholding_Option__c)
	SELECT
		CASE WHEN NAME_Curr_Vw.NAME_FORMAT_CODE = 'I'
			THEN TRIM(INDIVIDUAL_FIRST) + IIF(LEN(TRIM(INDIVIDUAL_FIRST)) > 0, ' ', '') + TRIM(INDIVIDUAL_MIDDLE) + IIF(LEN(TRIM(INDIVIDUAL_MIDDLE)) > 0, ' ', '') + TRIM(INDIVIDUAL_LAST)
			ELSE TRIM(BUSINESS_NAME)
		END AS Name,
		phone.PhoneNumber,
		'' AS OwnerId,
		@RecordTypeID AS RecordTypeId,
		premium.ActivityPremium2017 AS X2017_Activity_Premium__c,
		premium.EffectivePremium2017 AS X2017_Effective_Premium__c,
		premium.ActivityPremium2018 AS X2018_Activity_Premium__c,
		premium.EffectivePremium2018 AS X2018_Effective_Premium__c,
		premium.ActivityPremium2019 AS X2019_Activity_Premium__c,
		premium.EffectivePremium2019 AS X2019_Effective_Premium__c,
		MinNameIDs.AGENT_NUMBER AS Agent_Number__c,
		MinNameIDs.COMPANY_CODE AS Company_Code__c,
		ISNULL(TRIM(emailAddr.ADDR_LINE_1), '') + ISNULL(TRIM(emailAddr.ADDR_LINE_2), '') + ISNULL(TRIM(emailAddr.ADDR_LINE_3), '') AS Email__c,
		MinNameIDs.NAME_ID AS LifePro_ID__c,
		regions.REGION_CODE AS Region__c,
		agnt.STATUS_CODE AS Status__c,
		agnt.STATUS_DATE AS Status_Date__c,
		CASE TRIM(suitability.SUITABILITY_FLAG)
			WHEN 'Y' THEN 1
			ELSE 0
		END AS Suitability__c,
		CASE WHEN NAME_Curr_Vw.NAME_FORMAT_CODE = 'B'
			THEN STUFF(RIGHT('000000000' + TRIM(NAME_Curr_Vw.BUSINESS_TAX_CODE), 9), 3, 0, '-')
			ELSE ''
		END AS TIN__c,
		CASE WHEN NAME_Curr_Vw.NAME_FORMAT_CODE = 'I'
			THEN STUFF(STUFF(RIGHT('000000000' + CONVERT(varchar(11), NAME_Curr_Vw.SOC_SEC_NUMBER), 9), 4, 0, '-'), 7, 0, '-')
			ELSE ''
		END AS Social_Security_Number__c,
		NAME_Curr_Vw.TAX_STATUS AS Tax_Status__c,
		NAME_Curr_Vw.TAX_WITHHOLDING_FLAG AS Tax_Witholding_Option__c
	FROM [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw]
	JOIN MinNameIDs 
		ON [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw].NAME_ID = MinNameIDs.NAME_ID
	JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] agnt
		ON MinNameIDs.COMPANY_CODE = agnt.COMPANY_CODE
		AND MinNameIDs.AGENT_NUMBER = agnt.AGENT_NUMBER
	LEFT JOIN EmailAddressIds 
		ON [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw].NAME_ID = EmailAddressIds.NAME_ID
	LEFT JOIN [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw] emailAddr 
		ON emailAddr.ADDRESS_ID = EmailAddressIds.EMAIL_ADDRESS_ID
	LEFT JOIN [EDW_DataLake].[lifepro_v].[AEXP_10_Curr_Vw] regions
		ON MinNameIDs.COMPANY_CODE = regions.COMPANY_CODE
		AND MinNameIDs.AGENT_NUMBER = regions.AGENT_NUMBER
	LEFT JOIN [EDW_DataLake].[lifepro_v].[AEXP_03_Curr_Vw] suitability
		ON MinNameIDs.COMPANY_CODE = suitability.COMPANY_CODE
		AND MinNameIDs.AGENT_NUMBER = suitability.AGENT_NUMBER
	LEFT JOIN [EDW_Outbound].[salesforce].[AgentYearlyPremiumTotals] premium
		ON MinNameIDs.COMPANY_CODE = premium.CompanyCode
		AND MinNameIDs.AGENT_NUMBER = premium.AgentNumber
	LEFT JOIN [EDW_Outbound].[salesforce].[PhoneNumber] phone
		ON [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw].NAME_ID = phone.NameID

END
GO

/****** Object:  StoredProcedure [salesforce].[usp_Insert_Account_Institution_Initial]    Script Date: 5/17/2022 2:04:48 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		Steve Tangeman
-- Create date: 04/28/2021
-- Description:	Insert data from EDW_DataLake into EDW_Outbound for Account_Institution 
-- =============================================
CREATE     PROCEDURE [salesforce].[usp_Insert_Account_Institution_Initial] 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @RecordTypeID varchar(20) = (SELECT [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE NAME = 'Institution' AND SOBJECTTYPE = 'Account')

    -- Insert statements for procedure here
	TRUNCATE TABLE [EDW_Outbound].[salesforce].[Account_Institution]
	;WITH MinNameIDs AS
	(
		SELECT DISTINCT SOC_SEC_NUMBER, MIN(l_NAME.NAME_ID) AS NAME_ID
		FROM [EDW_DataLake].[lifepro_v].[RELA_Curr_Vw] l_RELA
		JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] l_NAME ON l_RELA.NAME_ID = l_NAME.NAME_ID
		WHERE l_RELA.RELATE_CODE IN ('PO', 'O1') AND NAME_FORMAT_CODE = 'B'
		GROUP BY l_NAME.SOC_SEC_NUMBER
	),
	EmailAddressIds AS
	(
		SELECT nalk.NAME_ID, MAX(nalk.ADDRESS_ID) AS EMAIL_ADDRESS_ID
		FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] nalk
		JOIN MinNameIDs ON MinNameIDs.NAME_ID = nalk.NAME_ID
		WHERE ADDRESS_TYPE = 'E'
		GROUP BY nalk.NAME_ID
	),
	NameAddressExtensionsMaxDate AS
	(
		SELECT nadrna.NAME_ID, MAX(nadrna.DATE) AS NADRNA_MAX_DATE
		FROM [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Curr_Vw] nadrna
		JOIN MinNameIDs ON MinNameIDs.NAME_ID = nadrna.NAME_ID
		GROUP BY nadrna.NAME_ID
	),
	NameAddressExtensionsMaxDateTime AS
	(
		SELECT nadrna.NAME_ID, nadrna.DATE AS NADRNA_MAX_DATE, MAX(nadrna.TIME) AS NADRNA_MAX_TIME
		FROM NameAddressExtensionsMaxDate maxDate
		JOIN [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Curr_Vw] nadrna
			ON maxDate.NAME_ID = nadrna.NAME_ID
			AND maxDate.NADRNA_MAX_DATE = nadrna.DATE
		GROUP BY nadrna.NAME_ID, nadrna.DATE
	)
	INSERT INTO [EDW_Outbound].[salesforce].[Account_Institution]
		([Name],
		Phone,
		OwnerId,
		RecordTypeId,
		Email__c,
		LifePro_ID__c,
		TIN__c,
		Client_Passcode__c,
		Paperless_Annual_Statement__c,
		Paperless_11_Month_Summary__c,
		Tax_Status__c,
		Tax_Witholding_Option__c)
	SELECT TRIM(BUSINESS_NAME) AS Name,
		phone.PhoneNumber,
		'' AS OwnerId,
		@RecordTypeID AS RecordTypeId,
		ISNULL(TRIM(emailAddr.ADDR_LINE_1), '') + ISNULL(TRIM(emailAddr.ADDR_LINE_2), '') + ISNULL(TRIM(emailAddr.ADDR_LINE_3), '') AS Email__c,
		MinNameIDs.NAME_ID AS LifePro_ID__c,
		STUFF(RIGHT('000000000' + TRIM(NAME_Curr_Vw.BUSINESS_TAX_CODE), 9), 3, 0, '-') AS TIN__c,
		ISNULL(TRIM(nadrna.NADR_PASSWORD) + TRIM(nadrna.NADR_PASSWORD2), '') AS Client_Passcode__c,
		CASE TRIM(nadrna.PPRLESS_ANN_STMT)
			WHEN 'Y' THEN 1
			ELSE 0
		END AS Paperless_Annual_Statement__c,
		CASE TRIM(nadrna.PPRLESS_11_MONTH)
			WHEN 'Y' THEN 1
			ELSE 0
		END AS Paperless_11_Month_Summary__c,
		NAME_Curr_Vw.TAX_STATUS AS Tax_Status__c,
		NAME_Curr_Vw.TAX_WITHHOLDING_FLAG AS Tax_Witholding_Option__c
	FROM [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw]
	JOIN MinNameIDs 
		ON [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw].NAME_ID = MinNameIDs.NAME_ID
	LEFT JOIN EmailAddressIds 
		ON [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw].NAME_ID = EmailAddressIds.NAME_ID
	LEFT JOIN [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw] emailAddr 
		ON emailAddr.ADDRESS_ID = EmailAddressIds.EMAIL_ADDRESS_ID
	LEFT JOIN NameAddressExtensionsMaxDateTime 
		ON [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw].NAME_ID = NameAddressExtensionsMaxDateTime.NAME_ID
	LEFT JOIN [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Curr_Vw] nadrna 
		ON NameAddressExtensionsMaxDateTime.NAME_ID = nadrna.NAME_ID 
		AND NameAddressExtensionsMaxDateTime.NADRNA_MAX_DATE = nadrna.DATE
		AND NameAddressExtensionsMaxDateTime.NADRNA_MAX_TIME = nadrna.TIME
	LEFT JOIN [EDW_Outbound].[salesforce].[PhoneNumber] phone
		ON [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw].NAME_ID = phone.NameID

END
GO

/****** Object:  StoredProcedure [salesforce].[usp_Insert_Account_Business_Initial]    Script Date: 5/17/2022 2:04:48 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		Jason Rippel/Chris Waggoner
-- Create date: 06/09/2021
-- Description:	Insert data from EDW_DataLake into EDW_Outbound for Account_Business 
-- =============================================
CREATE PROCEDURE [salesforce].[usp_Insert_Account_Business_Initial] 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @RecordTypeID varchar(20) = (SELECT [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE NAME = 'Business' AND SOBJECTTYPE = 'Account')


    -- Insert statements for procedure here
	TRUNCATE TABLE [EDW_Outbound].[salesforce].[Account_Business]
	;WITH BusinessAgentNumbers AS
	(
		SELECT DISTINCT [HIER_Curr_Vw].COMPANY_CODE , [HIER_Curr_Vw].AGENT_NUMBER
	FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw]
	LEFT JOIN (	
					-- Exclude Broker Dealer Records
					SELECT DISTINCT COMPANY_CODE, AGENT_NUMBER
					FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw]
					WHERE COMPANY_CODE = '01' 
						AND REGION_CODE = 'BD'
					UNION
					SELECT DISTINCT COMPANY_CODE, AGENT_NUMBER
					FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw]
					WHERE COMPANY_CODE = '09' 
						AND REGION_CODE = 'RAYJAY' 
						AND SALES_REGION = 'SE'
					UNION
					SELECT DISTINCT COMPANY_CODE, AGENT_NUMBER
					FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw]
					WHERE COMPANY_CODE = '09' 
						AND SALES_REGION = 'BD'
						AND REGION_CODE <> 'WHOLE'
					UNION
					SELECT DISTINCT COMPANY_CODE, AGENT_NUMBER
					FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw]
					WHERE COMPANY_CODE = '06' 
						AND SALES_REGION = 'BD'
						AND REGION_CODE <> 'WHOLE'
					UNION
					-- Exclude NMO
					SELECT DISTINCT COMPANY_CODE, AGENT_NUMBER
					FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw]
					WHERE REPORT_DESC = 'NMO'
						AND CAST(AGENT_LEVEL AS int) >= 90
					UNION
					--Exclude WholeSaler
					SELECT DISTINCT COMPANY_CODE, AGENT_NUMBER
					FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw]
					WHERE REGION_CODE = 'WHOLE' 
				) AS AgentsToExclude on AgentsToExclude.COMPANY_CODE = [HIER_Curr_Vw].COMPANY_CODE AND AgentsToExclude.AGENT_NUMBER = [HIER_Curr_Vw].AGENT_NUMBER 
				WHERE AgentsToExclude.COMPANY_CODE IS NULL AND AgentsToExclude.AGENT_NUMBER IS NULL
	),
	MinNameIDs AS
	(
		SELECT [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].COMPANY_CODE, [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].AGENT_NUMBER, MIN([NAME_ID]) AS NAME_ID
		FROM [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw]
		JOIN BusinessAgentNumbers 
			ON BusinessAgentNumbers.COMPANY_CODE = [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].COMPANY_CODE
			AND BusinessAgentNumbers.AGENT_NUMBER = [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].AGENT_NUMBER
		GROUP BY [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].COMPANY_CODE, [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].AGENT_NUMBER
	),
	EmailAddressIds AS
	(
		SELECT nalk.NAME_ID, MAX(nalk.ADDRESS_ID) AS EMAIL_ADDRESS_ID
		FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] nalk
		JOIN MinNameIDs ON MinNameIDs.NAME_ID = nalk.NAME_ID
		WHERE ADDRESS_TYPE = 'E'
		GROUP BY nalk.NAME_ID
	)
	INSERT INTO EDW_Outbound.salesforce.Account_Business
			(
			[Name],
			Phone,
			OwnerId,
			RecordTypeId,
			X2017_Activity_Premium__c,
			X2017_Effective_Premium__c,
			X2018_Activity_Premium__c,
			X2018_Effective_Premium__c,
			X2019_Activity_Premium__c,
			X2019_Effective_Premium__c,
			Agent_Number__c,
			Company_Code__c,
			Email__c,
			LifePro_ID__c,
			Region__c,
			Status__c,
			Status_Date__c,
			Suitability__c,
			TIN__c,
			Social_Security_Number__c,
			Tax_Status__c,
			Tax_Witholding_Option__c
			)
	SELECT DISTINCT
		CASE WHEN NAME_Curr_Vw.NAME_FORMAT_CODE = 'I'
			THEN TRIM(INDIVIDUAL_FIRST) + IIF(LEN(TRIM(INDIVIDUAL_FIRST)) > 0, ' ', '') + TRIM(INDIVIDUAL_MIDDLE) + IIF(LEN(TRIM(INDIVIDUAL_MIDDLE)) > 0, ' ', '') + TRIM(INDIVIDUAL_LAST)
			ELSE TRIM(BUSINESS_NAME)
		END AS Name,
		phone.PhoneNumber,
		'' AS OwnerId,
		@RecordTypeID AS RecordTypeId,
		premium.ActivityPremium2017 AS X2017_Activity_Premium__c,
		premium.EffectivePremium2017 AS X2017_Effective_Premium__c,
		premium.ActivityPremium2018 AS X2018_Activity_Premium__c,
		premium.EffectivePremium2018 AS X2018_Effective_Premium__c,
		premium.ActivityPremium2019 AS X2019_Activity_Premium__c,
		premium.EffectivePremium2019 AS X2019_Effective_Premium__c,
		MinNameIDs.AGENT_NUMBER AS Agent_Number__c,
		MinNameIDs.COMPANY_CODE AS Company_Code__c,
		ISNULL(TRIM(emailAddr.ADDR_LINE_1), '') + ISNULL(TRIM(emailAddr.ADDR_LINE_2), '') + ISNULL(TRIM(emailAddr.ADDR_LINE_3), '') AS Email__c,
		MinNameIDs.NAME_ID AS LifePro_ID__c,
		regions.REGION_CODE AS Region__c,
		agnt.STATUS_CODE AS Status__c,
		agnt.STATUS_DATE AS Status_Date__c,
		CASE TRIM(suitability.SUITABILITY_FLAG)
			WHEN 'Y' THEN 1
			ELSE 0
		END AS Suitability__c,
		CASE WHEN NAME_Curr_Vw.NAME_FORMAT_CODE = 'B'
			THEN STUFF(RIGHT('000000000' + TRIM(NAME_Curr_Vw.BUSINESS_TAX_CODE), 9), 3, 0, '-')
			ELSE ''
		END AS TIN__c,
		CASE WHEN NAME_Curr_Vw.NAME_FORMAT_CODE = 'I'
			THEN STUFF(STUFF(RIGHT('000000000' + CONVERT(varchar(11), NAME_Curr_Vw.SOC_SEC_NUMBER), 9), 4, 0, '-'), 7, 0, '-')
			ELSE ''
		END AS Social_Security_Number__c,
		NAME_Curr_Vw.TAX_STATUS AS Tax_Status__c,
		NAME_Curr_Vw.TAX_WITHHOLDING_FLAG AS Tax_Witholding_Option__c
	FROM [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw]
	JOIN MinNameIDs 
		ON [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw].NAME_ID = MinNameIDs.NAME_ID
	JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] agnt
		ON MinNameIDs.COMPANY_CODE = agnt.COMPANY_CODE
		AND MinNameIDs.AGENT_NUMBER = agnt.AGENT_NUMBER
	LEFT JOIN EmailAddressIds 
		ON [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw].NAME_ID = EmailAddressIds.NAME_ID
	LEFT JOIN [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw] emailAddr 
		ON emailAddr.ADDRESS_ID = EmailAddressIds.EMAIL_ADDRESS_ID
	LEFT JOIN [EDW_DataLake].[lifepro_v].[AEXP_10_Curr_Vw] regions
		ON MinNameIDs.COMPANY_CODE = regions.COMPANY_CODE
		AND MinNameIDs.AGENT_NUMBER = regions.AGENT_NUMBER
	LEFT JOIN [EDW_DataLake].[lifepro_v].[AEXP_03_Curr_Vw] suitability
		ON MinNameIDs.COMPANY_CODE = suitability.COMPANY_CODE
		AND MinNameIDs.AGENT_NUMBER = suitability.AGENT_NUMBER
	LEFT JOIN [EDW_Outbound].[salesforce].[AgentYearlyPremiumTotals] premium
		ON MinNameIDs.COMPANY_CODE = premium.CompanyCode
		AND MinNameIDs.AGENT_NUMBER = premium.AgentNumber
	LEFT JOIN [EDW_Outbound].[salesforce].[PhoneNumber] phone
		ON [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw].NAME_ID = phone.NameID
	WHERE [NAME_Curr_Vw].NAME_FORMAT_CODE = 'B'

END
GO

/****** Object:  StoredProcedure [salesforce].[usp_Insert_Account_BrokerDealer_Initial]    Script Date: 5/17/2022 2:04:48 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		Steve Tangeman
-- Create date: 05/10/2021
-- Description:	Insert data from EDW_DataLake into EDW_Outbound for Account_BrokerDealer 
-- =============================================
CREATE    PROCEDURE [salesforce].[usp_Insert_Account_BrokerDealer_Initial] 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @RecordTypeID varchar(20) = (SELECT [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE NAME = 'Broker Dealer' AND SOBJECTTYPE = 'Account')


    -- Insert statements for procedure here
	TRUNCATE TABLE [EDW_Outbound].[salesforce].[Account_BrokerDealer]
	;WITH BrokerDealerAgentNumbers AS
	(
		SELECT DISTINCT COMPANY_CODE, AGENT_NUMBER
		FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw]
		WHERE COMPANY_CODE = '01' 
			AND REGION_CODE = 'BD'

		UNION

		SELECT DISTINCT COMPANY_CODE, AGENT_NUMBER
		FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw]
		WHERE COMPANY_CODE = '09' 
			AND REGION_CODE = 'RAYJAY' 
			AND SALES_REGION = 'SE'

		UNION

		SELECT DISTINCT COMPANY_CODE, AGENT_NUMBER
		FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw]
		WHERE COMPANY_CODE = '09' 
			AND SALES_REGION = 'BD'
			AND REGION_CODE <> 'WHOLE'

		UNION

		SELECT DISTINCT COMPANY_CODE, AGENT_NUMBER
		FROM [EDW_DataLake].[lifepro_v].[HIER_Curr_Vw]
		WHERE COMPANY_CODE = '06' 
			AND SALES_REGION = 'BD'
			AND REGION_CODE <> 'WHOLE'
	),
	MinNameIDs AS
	(
		SELECT [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].COMPANY_CODE, [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].AGENT_NUMBER, MIN([NAME_ID]) AS NAME_ID
		FROM [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw]
		JOIN BrokerDealerAgentNumbers 
			ON BrokerDealerAgentNumbers.COMPANY_CODE = [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].COMPANY_CODE
			AND BrokerDealerAgentNumbers.AGENT_NUMBER = [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].AGENT_NUMBER
		GROUP BY [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].COMPANY_CODE, [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw].AGENT_NUMBER
	),
	EmailAddressIds AS
	(
		SELECT nalk.NAME_ID, MAX(nalk.ADDRESS_ID) AS EMAIL_ADDRESS_ID
		FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] nalk
		JOIN MinNameIDs ON MinNameIDs.NAME_ID = nalk.NAME_ID
		WHERE ADDRESS_TYPE = 'E'
		GROUP BY nalk.NAME_ID
	)
	INSERT INTO EDW_Outbound.salesforce.Account_BrokerDealer
			([Name],
			Phone,
			OwnerId,
			RecordTypeId,
			X2017_Activity_Premium__c,
			X2017_Effective_Premium__c,
			X2018_Activity_Premium__c,
			X2018_Effective_Premium__c,
			X2019_Activity_Premium__c,
			X2019_Effective_Premium__c,
			Agent_Number__c,
			Company_Code__c,
			Email__c,
			LifePro_ID__c,
			Region__c,
			Status__c,
			Status_Date__c,
			Suitability__c,
			TIN__c,
			Social_Security_Number__c,
			Tax_Status__c,
			Tax_Witholding_Option__c)
	SELECT
		CASE WHEN NAME_Curr_Vw.NAME_FORMAT_CODE = 'I'
			THEN TRIM(INDIVIDUAL_FIRST) + IIF(LEN(TRIM(INDIVIDUAL_FIRST)) > 0, ' ', '') + TRIM(INDIVIDUAL_MIDDLE) + IIF(LEN(TRIM(INDIVIDUAL_MIDDLE)) > 0, ' ', '') + TRIM(INDIVIDUAL_LAST)
			ELSE TRIM(BUSINESS_NAME)
		END AS Name,
		phone.PhoneNumber,
		'' AS OwnerId,
		@RecordTypeID AS RecordTypeId,
		premium.ActivityPremium2017 AS X2017_Activity_Premium__c,
		premium.EffectivePremium2017 AS X2017_Effective_Premium__c,
		premium.ActivityPremium2018 AS X2018_Activity_Premium__c,
		premium.EffectivePremium2018 AS X2018_Effective_Premium__c,
		premium.ActivityPremium2019 AS X2019_Activity_Premium__c,
		premium.EffectivePremium2019 AS X2019_Effective_Premium__c,
		MinNameIDs.AGENT_NUMBER AS Agent_Number__c,
		MinNameIDs.COMPANY_CODE AS Company_Code__c,
		ISNULL(TRIM(emailAddr.ADDR_LINE_1), '') + ISNULL(TRIM(emailAddr.ADDR_LINE_2), '') + ISNULL(TRIM(emailAddr.ADDR_LINE_3), '') AS Email__c,
		MinNameIDs.NAME_ID AS LifePro_ID__c,
		regions.REGION_CODE AS Region__c,
		agnt.STATUS_CODE AS Status__c,
		agnt.STATUS_DATE AS Status_Date__c,
		CASE TRIM(suitability.SUITABILITY_FLAG)
			WHEN 'Y' THEN 1
			ELSE 0
		END AS Suitability__c,
		CASE WHEN NAME_Curr_Vw.NAME_FORMAT_CODE = 'B'
			THEN STUFF(RIGHT('000000000' + TRIM(NAME_Curr_Vw.BUSINESS_TAX_CODE), 9), 3, 0, '-')
			ELSE ''
		END AS TIN__c,
		CASE WHEN NAME_Curr_Vw.NAME_FORMAT_CODE = 'I'
			THEN STUFF(STUFF(RIGHT('000000000' + CONVERT(varchar(11), NAME_Curr_Vw.SOC_SEC_NUMBER), 9), 4, 0, '-'), 7, 0, '-')
			ELSE ''
		END AS Social_Security_Number__c,
		NAME_Curr_Vw.TAX_STATUS AS Tax_Status__c,
		NAME_Curr_Vw.TAX_WITHHOLDING_FLAG AS Tax_Witholding_Option__c
	FROM [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw]
	JOIN MinNameIDs 
		ON [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw].NAME_ID = MinNameIDs.NAME_ID
	JOIN [EDW_DataLake].[lifepro_v].[AGNT_Curr_Vw] agnt
		ON MinNameIDs.COMPANY_CODE = agnt.COMPANY_CODE
		AND MinNameIDs.AGENT_NUMBER = agnt.AGENT_NUMBER
	LEFT JOIN EmailAddressIds 
		ON [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw].NAME_ID = EmailAddressIds.NAME_ID
	LEFT JOIN [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw] emailAddr 
		ON emailAddr.ADDRESS_ID = EmailAddressIds.EMAIL_ADDRESS_ID
	LEFT JOIN [EDW_DataLake].[lifepro_v].[AEXP_10_Curr_Vw] regions
		ON MinNameIDs.COMPANY_CODE = regions.COMPANY_CODE
		AND MinNameIDs.AGENT_NUMBER = regions.AGENT_NUMBER
	LEFT JOIN [EDW_DataLake].[lifepro_v].[AEXP_03_Curr_Vw] suitability
		ON MinNameIDs.COMPANY_CODE = suitability.COMPANY_CODE
		AND MinNameIDs.AGENT_NUMBER = suitability.AGENT_NUMBER
	LEFT JOIN [EDW_Outbound].[salesforce].[AgentYearlyPremiumTotals] premium
		ON MinNameIDs.COMPANY_CODE = premium.CompanyCode
		AND MinNameIDs.AGENT_NUMBER = premium.AgentNumber
	LEFT JOIN [EDW_Outbound].[salesforce].[PhoneNumber] phone
		ON [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw].NAME_ID = phone.NameID

END
GO

/****** Object:  StoredProcedure [salesforce].[usp_insert_Account_Address_Sub_Account_Initial]    Script Date: 5/17/2022 2:04:49 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO







-- =============================================
-- Author:           Jason Rippel
-- Create date: 06/22/2021
-- Description:      load the account address sub account from the existing account tables
-- =============================================
-- Last Run Date : 
-- Last Run Exec : 
-- Last Run Stat : 
-- =============================================
-- Maintenance 
-- =============================================
-- CX-1245     06/22/2021 Jason Rippel 
-- New Stored Procedure
-- =============================================

CREATE   PROCEDURE [salesforce].[usp_insert_Account_Address_Sub_Account_Initial]
AS
BEGIN
		SET NOCOUNT ON;

		DECLARE @RecordTypeID varchar(20) = (SELECT [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE NAME = 'Sub-Account Address' AND SOBJECTTYPE = 'Account_Address__c')

		truncate table salesforce.account_address_sub_account

		DECLARE @Now datetime
		set @Now = GETDATE()

		insert into salesforce.account_address_sub_account (RecordTypeId												          
												           ,Address_External_Id__c
												           ,Address__c
												           ,Type__c
												           ,Policy_External_Id__c
												           ,Policy__c
												           ,Address_Code__c
												           ,Recurring_From_Month__c
												           ,Recurring_From_Day__c
												           ,Recurring_To_Month__c
												           ,Recurring_To_Day__c
												           ,Phone__c
												           ,Fax__c
														   ,Sub_Account__c
														   ,Sub_Account_Name_Id__c
												           ,LifePro_Last_Modified_DateTime__c
												           ,Effective_Date__c
												           )
		SELECT 
			@RecordTypeID AS RecordTypeId
			, [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw].ADDRESS_ID as 'Address_External_Id__c'
			, [EDW_Outbound].[salesforce].[LOOKUP_ADDRESS__C].ID as 'Address__c'
			, [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw].ADDRESS_TYPE as 'Type__c'
			, [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw].POLICY_NUMBER AS 'Policy_External_Id__c'
			, NULL AS 'Policy__c'
			, [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw].ADDRESS_CODE as 'Address_Code__c'
			, [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw].RECURRING_START_MONTH as 'Recurring_From_Month__c'
			, [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw].RECURRING_START_DAY as 'Recurring_From_Day__c'
			, [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw].RECURRING_STOP_MONTH as 'Recurring_To_Month__c'
			, [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw].RECURRING_STOP_DAY as 'Recurring_To_Day__c'
			, [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw].PHONE_NUMBER as 'Phone__c'
			, [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw].FAX_TELE_NUMBER as 'Fax__c'
			, [EDW_Outbound].[salesforce].[LOOKUP_SUB_ACCOUNT__C].ID as 'Sub_Account__c'
			, [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw].NAME_ID as 'Sub_Account_Name_Id__c'
			, @Now as 'LifePro_Last_Modified_DateTime__c'
			, [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw].EFFECTIVE_DATE as 'Effective_Date__c'
		FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw]
		JOIN [EDW_Outbound].[salesforce].[LOOKUP_ACCOUNT] ON [EDW_Outbound].[salesforce].[LOOKUP_ACCOUNT].LIFEPRO_ID__C = [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw].NAME_ID
		JOIN [EDW_Outbound].[salesforce].[LOOKUP_ADDRESS__C] ON LOOKUP_ADDRESS__C.EXTERNAL_ID__C = [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw].ADDRESS_ID
		JOIN [EDW_Outbound].[salesforce].[LOOKUP_SUB_ACCOUNT__C] ON LOOKUP_SUB_ACCOUNT__C.NAME_ID__C = [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw].NAME_ID
		JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] ON [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw].NAME_ID = [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw].NAME_ID
		order by Address__c, Sub_Account__c

END
GO

/****** Object:  StoredProcedure [salesforce].[usp_insert_Account_Address_Initial]    Script Date: 5/17/2022 2:04:49 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:           Darin Baarda
-- Create date: 05/20/2021
-- Description:      load the account address from the exist account tables
-- =============================================
-- Last Run Date : 05/22/2021
-- Last Run Exec : exec salesforce.usp_insert_Account_Address_Initial select count(1) From salesforce.account_address
-- Last Run Stat : 22 secs, 5,471,839 records
-- =============================================
-- Maintenance 
-- =============================================
-- CX-1042     05/20/2021 Darin Baarda 
-- New Stored Procedure
-- =============================================

CREATE PROCEDURE [salesforce].[usp_insert_Account_Address_Initial]
AS
BEGIN
		SET NOCOUNT ON;

		DECLARE @RecordTypeID varchar(20) = (SELECT [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE NAME = 'Account Address' AND SOBJECTTYPE = 'Account_Address__c')

		truncate table salesforce.account_address

		DECLARE @Now datetime
		set @Now = GETDATE()

		insert into salesforce.account_address (RecordTypeId
												,Account_Name_Id__c
												,Account__c
												,Address_External_Id__c
												,Address__c
												,Type__c
												,Policy_External_Id__c
												,Policy__c
												,Address_Code__c
												,Recurring_From_Month__c
												,Recurring_From_Day__c
												,Recurring_To_Month__c
												,Recurring_To_Day__c
												,Phone__c
												,Fax__c
												,LifePro_Last_Modified_DateTime__c
												,Effective_Date__c
												)
		SELECT 
			@RecordTypeID AS RecordTypeId
			,[EDW_DataLake].[lifepro_v].[NALK_Curr_Vw].NAME_ID as 'Account_Name_Id__c'
			, [EDW_Outbound].[salesforce].[LOOKUP_ACCOUNT].ID as 'Account__c'
			, [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw].ADDRESS_ID as 'Address_External_Id__c'
			, [EDW_Outbound].[salesforce].[LOOKUP_ADDRESS__C].ID as 'Address__c'
			, [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw].ADDRESS_TYPE as 'Type__c'
			, [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw].POLICY_NUMBER AS 'Policy_External_Id__c'
			, NULL AS 'Policy__c'
			, [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw].ADDRESS_CODE as 'Address_Code__c'
			, [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw].RECURRING_START_MONTH as 'Recurring_From_Month__c'
			, [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw].RECURRING_START_DAY as 'Recurring_From_Day__c'
			, [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw].RECURRING_STOP_MONTH as 'Recurring_To_Month__c'
			, [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw].RECURRING_STOP_DAY as 'Recurring_To_Day__c'
			, [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw].PHONE_NUMBER as 'Phone__c'
			, [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw].FAX_TELE_NUMBER as 'Fax__c'
			, @Now as 'LifePro_Last_Modified_DateTime__c'
			, [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw].EFFECTIVE_DATE as 'Effective_Date__c'
		FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw]
		JOIN [EDW_Outbound].[salesforce].[LOOKUP_ACCOUNT] ON [EDW_Outbound].[salesforce].[LOOKUP_ACCOUNT].LIFEPRO_ID__C = [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw].NAME_ID
		JOIN [EDW_Outbound].[salesforce].[LOOKUP_ADDRESS__C] ON LOOKUP_ADDRESS__C.EXTERNAL_ID__C = NALK_Curr_Vw.ADDRESS_ID
		order by Address__c, Account__c

END
GO

/****** Object:  StoredProcedure [salesforce].[usp_Get_IDs_Contact]    Script Date: 5/17/2022 2:04:49 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE        PROCEDURE  [salesforce].[usp_Get_IDs_Contact]
	  @SalesforceID NVARCHAR(20),
	 @SalesforceDt NVARCHAR(30),
	 @SSN NVARCHAR(11)
AS
BEGIN;
/* ===================================================================================

  Author: 			Anastasia Vogelaar
  CreationDate: 	2022-01-11
  Version: 			1.0.0
  Description: 		This stored procedure will return business keys for Advisor_Contact Object
					for a given Salesforce ID
					It should be initiated by Salesforce Platform Event when a change is 
					made in an Advisor_Contact object by end-users
					Log steps to Process_Log table
  Exception:		Since SSN is a mandatory field when creating contact, if a new record is inserted,
					the mapping table could be updated directly.  No "Insert" response from 
					Service Bus is required

 -- Change Log: 		
  Modified By:		
  Modified Date:		
  Version:			
  Description:		

-- =================================================================================== */


SET NOCOUNT ON;
DECLARE @ROWS						INT;
DECLARE @LOGID_START				INT;		--Used for the first log id
DECLARE	@LOGID						INT;		--Used for intermediate log ids

BEGIN TRY
--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Contact:Platform Event SF_ID: ' + COALESCE(@SalesforceID,''));
SELECT @LOGID_START = @@IDENTITY;
/*START: Create new mapping if new record is inserted in Salesforce, update version id if the record has been updated*/
IF (1=1)
	BEGIN;
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Contact:Merge mapping');
	SELECT @LOGID = @@IDENTITY;
	IF EXISTS (SELECT 1 FROM [salesforce].[mapping_Contact] WHERE [SALESFORCE_ID] = @SalesforceID)
		BEGIN;
		UPDATE	[salesforce].[mapping_Contact]
		SET		SALESFORCE_DT	= @SalesforceDt
				, MODIFIED_DT	= CURRENT_TIMESTAMP
		WHERE	[SALESFORCE_ID] = @SalesforceID;
		SELECT @ROWS = @@ROWCOUNT;
		END;
	ELSE
		BEGIN;
		INSERT [salesforce].[mapping_Contact]
			([CREATED_DT]
			, [SALESFORCE_ID]
			, [NAMERECORD_SSN]
			, [SALESFORCE_DT])
		VALUES 
			(CURRENT_TIMESTAMP
			, @SalesforceID
			, REPLACE(@SSN,'-','')
			, @SalesforceDt);
		SELECT @ROWS = @@ROWCOUNT;
		END;
	
		--Logging
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
	END;

/*END: Create new mapping */
/*START: Retrieve business keys for the Service Bus payload*/
IF (1=1)
	BEGIN;
  INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Contact:Retrieve Keys');
	SELECT @LOGID = @@IDENTITY;
	SELECT  [ID]							AS [EXTERNALID]
		, [SALESFORCE_ID]
		, [SALESFORCE_DT]
		, [ADDRESS_EMAILADDRESSID]
		, [AGENTEXPANSION03_AGENTNUMBER]
		, [AGENTEXPANSION03_COMPANYCODE]
		, [AGENTEXPANSION03_SEQUENCE]
		, [AGENTEXPANSION10_AGENTNUMBER]
		, [AGENTEXPANSION10_COMPANYCODE]
		, [AGENTEXPANSION10_SEQUENCE]
		, [AGENTRECORD_AGENTNUMBER]
		, [AGENTRECORD_COMPANY_CODE]
		, [EXTENSIONRECORDAGTT_AGENTNUMBER]
		, [EXTENSIONRECORDAGTT_FILEEXTENSION]
		, [EXTENSIONRECORDAGTT_SUBTYPERECORD]
		, [EXTENSIONRECORDAGTT_VERSIONID]
		, [EXTENSIONRECORDNADR_FILEEXTENSION]
		, [EXTENSIONRECORDNADR_NAMEID]
		, [EXTENSIONRECORDNADR_SUBTYPERECORD]
		, [NAMELINK_ADDRESSCODE]
		, [NAMELINK_ADDRESSID]
		, [NAMELINK_COMPANYCODE]
		, [NAMELINK_EFFETIVEDATE]
		, [NAMELINK_NAMEID]
		, [NAMELINK_POLICYNUMBER]
		, [NAMERECORD_NAMEID]
		, [NAMERECORD_SSN]
	FROM	[salesforce].[mapping_Contact]
	WHERE	[SALESFORCE_ID] = @SalesforceID;
  SELECT @ROWS	= @@ROWCOUNT;
	--Logging
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
	END;
/*END: Retrieve business keys*/
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;   

END TRY
BEGIN CATCH

DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();

INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Contact:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;

RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;

GO

/****** Object:  StoredProcedure [salesforce].[usp_Get_IDs_Account]    Script Date: 5/17/2022 2:04:49 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE        PROCEDURE  [salesforce].[usp_Get_IDs_Account] 
	@SalesforceID NVARCHAR(20),
	@SalesforceDt NVARCHAR(30)--,
	--@SalesforceActionType NVARCHAR(30) NULL
AS
BEGIN;
/* ===================================================================================

  Author: 			Anastasia Vogelaar
  CreationDate: 	2021-10-19
  Version: 			0.1.0
  Description: 		This stored procedure will return business keys for Account Object
					for a given Salesforce ID
					It should be initiated by Salesforce Platform Event when a change is 
					made in an Account object by end-users
					Log steps to Process_Log table

 -- Change Log: 		
  Modified By:		Anastasia Vogelaar
  Modified Date:	2021-11-11	
  Version:			0.1.1
  Description:		Added SalesforceDt to compare version IDs during the bulk load

  Modified By:		Anastasia Vogelaar
  Modified Date:	2022-03-29
  Version:			0.2.0
  Description:		Added all lifepro IDs and matched naming to CX-4485
-- =================================================================================== */


SET NOCOUNT ON;
DECLARE @ROWS						INT;
DECLARE @LOGID_START				INT;		--Used for the first log id
DECLARE	@LOGID						INT;		--Used for intermediate log ids

BEGIN TRY
--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account:Platform Event SF_ID: ' + COALESCE(@SalesforceID,''));
SELECT @LOGID_START = @@IDENTITY;
/*START: Create new mapping if new record is inserted in Salesforce, update version id if the record has been updated*/
IF (1=1)
	BEGIN;
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account:Merge mapping');
	SELECT @LOGID = @@IDENTITY;
	IF EXISTS (SELECT 1 FROM [salesforce].[mapping_Account] WHERE [SALESFORCE_ID] = @SalesforceID)
		BEGIN;
		UPDATE	[salesforce].[mapping_Account]
		SET		[SALESFORCE_DT]			= @SalesforceDt
				--, [SALESFORCE_ACTION]	= @SalesforceActionType
				, [MODIFIED_DT]			= CURRENT_TIMESTAMP
		WHERE	[SALESFORCE_ID] = @SalesforceID;
		SELECT @ROWS = @@ROWCOUNT;
		END;
	ELSE
		BEGIN;
		INSERT [salesforce].[mapping_Account]
			([CREATED_DT]
			, [SALESFORCE_ID]
			, [SALESFORCE_DT]
			--, [SALESFORCE_ACTION]
			)
		VALUES 
			(CURRENT_TIMESTAMP
			, @SalesforceID
			, @SalesforceDt
			--, @SalesforceActionType
			);
		SELECT @ROWS = @@ROWCOUNT;
		END;
	
		--Logging
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
	END;
/*END: Create new mapping */
/*START: Retrieve business keys for the Service Bus payload*/
IF (1=1)
	BEGIN;
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account:Retrieve Keys');
	SELECT @LOGID = @@IDENTITY;
	SELECT [ID]				AS INTERNAL_ID
		,[SALESFORCE_ID]	AS EXTERNAL_ID
		,[SALESFORCE_DT]	AS VERSION_ID
		,[SALESFORCE_ACTION]
		,[NAMERECORD_NAMEID]
		,[EXTENSIONRECORDNADR_FILEEXTENSION]
		,[EXTENSIONRECORDNADR_SUBTYPERECORD]
		,[EXTENSIONRECORDNADR_NAMEID]
		,[AGENTRECORD_COMPANYCODE]
		,[AGENTRECORD_AGENTNUMBER]
		,[AGENTEXPANSION03_COMPANYCODE]
		,[AGENTEXPANSION03_AGENTNUMBER]
		,[AGENTEXPANSION03_SEQUENCE]
		,[AGENTEXPANSION10_COMPANYCODE]
		,[AGENTEXPANSION10_AGENTNUMBER]
		,[AGENTEXPANSION10_SEQUENCE]
		,[NAMERECORD_SSN]
		,[ADDR_EMAIL_ADDRESSID]
		,[NALK_EMAIL_ADDRESSID]
		,[NALK_EMAIL_EFFECTIVEDATE]
		,[NALK_EMAIL_ADDRESSCODE]
		,[NALK_EMAIL_COMPANYCODE]
		,[NALK_EMAIL_POLICYNUMBER]
		,[NALK_PHONE_NAMEID]
		,[NALK_PHONE_ADDRESSID]
		,[NALK_PHONE_EFFECTIVEDATE]
		,[NALK_PHONE_ADDRESSCODE]
		,[NALK_PHONE_COMPANYCODE]
		,[NALK_PHONE_POLICYNUMBER]
		,[HIER_COMPANYCODE]
		,[HIER_AGENTNUMBER]
		,[HIER_MARKETINGCODE]
		,[HIER_AGENTLEVEL]
		,[HIER_STOPDT]
	FROM	[salesforce].[mapping_Account]
	WHERE	[SALESFORCE_ID] = @SalesforceID;
	SELECT @ROWS	= @@ROWCOUNT;
	--Logging
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
	END;
/*END: Retrieve business keys*/
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;   

END TRY
BEGIN CATCH

DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();

INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;

RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;

GO

/****** Object:  StoredProcedure [salesforce].[usp_Delete_Insurance_Policy_Participant]    Script Date: 5/17/2022 2:04:49 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE     PROCEDURE  [salesforce].[usp_Delete_Insurance_Policy_Participant]
 	
AS
BEGIN;
-- =============================================

 -- Author: 			Anastasai Vogelaar
 -- CreationDate: 		2022-02-28
 -- Version: 			0.1.0
 -- Description: 		Deletes flagged records from the staging table
 -- Change Log: 		
 -- =============================================

SET NOCOUNT ON;

BEGIN TRY
DECLARE	@rows BIGINT = 1;
WHILE @rows>0
	BEGIN;
	DELETE TOP (100000) [EDW_Outbound].[salesforce].[Insurance_Policy_Participant] WHERE [Delete_Flag]=1;
	SET @ROWS = @@ROWCOUNT;
	END;

END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();


RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Insert_Sub_Account_Initial]    Script Date: 5/17/2022 2:04:50 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		Chris Waggoner
-- Create date: 05/19/2021
-- Description:	Insert data from EDW_DataLake into EDW_Outbound for Sub_Account 
-- =============================================
CREATE        PROCEDURE [salesforce].[usp_Insert_Sub_Account_Initial] 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

DECLARE @Account_PersonAccount_RecordTypeID varchar(20) = (SELECT [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE NAME = 'Person Account' AND SOBJECTTYPE = 'Account')
DECLARE @Account_Institution_RecordTypeID varchar(20) = (SELECT [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE NAME = 'Institution' AND SOBJECTTYPE = 'Account')

    -- Insert statements for procedure here
	TRUNCATE TABLE [EDW_Outbound].[salesforce].[Sub_Account];

	;WITH MinNameIDs AS
		(
			select	Parent_Account_Name_Id__c,  
					Name_Id__c, 
					BUSINESS_NAME,
					NAME_FORMAT_CODE,
					First_Name__c, 
					Last_Name__c, 
					Middle_Name__c, 
					Is_Deceased__c, 
					Social_Security_Number__c, 
					Gender__c, 
					Date_of_Birth__c, 
					Tax_Status__c, 
					Tax_Witholding_Option__c
	from (
			SELECT	MIN(NAME_ID) OVER(PARTITION BY NAME_Curr_Vw.NAME_FORMAT_CODE, NAME_Curr_Vw.SOC_SEC_NUMBER) AS Parent_Account_Name_Id__c,
					NAME_ID AS Name_Id__c,
					NAME_FORMAT_CODE,
					BUSINESS_NAME,
					INDIVIDUAL_FIRST AS First_Name__c,
					INDIVIDUAL_LAST AS Last_Name__c,
					INDIVIDUAL_MIDDLE AS Middle_Name__c,
					IIF(DECEASED_FLAG = 'Y', 1, 0) AS Is_Deceased__c, 
					STUFF(STUFF(RIGHT('000000000' + CONVERT(varchar(11), NAME_Curr_Vw.SOC_SEC_NUMBER), 9), 4, 0, '-'), 7, 0, '-') AS Social_Security_Number__c,
					SEX_CODE AS Gender__c,
					NAME_Curr_Vw.DATE_OF_BIRTH AS Date_of_Birth__c,
					NAME_Curr_Vw.TAX_STATUS AS Tax_Status__c,
					NAME_Curr_Vw.TAX_WITHHOLDING_FLAG AS Tax_Witholding_Option__c 
			FROM [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw]) as a 
			where a.Parent_Account_Name_Id__c <> Name_Id__c
	  )

	INSERT INTO EDW_Outbound.salesforce.Sub_Account (Parent_Account__c,
													 Parent_Account_Name_Id__c, 
													 Name_Id__c, 
													 [Name],
													 First_Name__c, 
													 Last_Name__c, 
													 Middle_Name__c, 
													 Account_Phone__c,
													 Email__c, 
													 Is_Deceased__c, 
													 Client_Passcode__c, 
													 Paperless_Annual_Statement__c, 
													 Paperless_11_Month_Summary__c, 
													 Social_Security_Number__c, 
													 Gender__c,
													 Date_of_Birth__c, 
													 Tax_Status__c, 
													 Tax_Witholding_Option__c)
	select	LOOKUP_ACCOUNT.ID,
			MinNameIDs.Parent_Account_Name_Id__c,  
			MinNameIDs.Name_Id__c, 
			IIF(NAME_FORMAT_CODE = 'I', TRIM(MinNameIDs.First_Name__c) + IIF(LEN(TRIM(MinNameIDs.Middle_Name__c)) > 0, ' ', '') + TRIM(MinNameIDs.Middle_Name__c) + IIF(LEN(TRIM(MinNameIDs.Last_Name__c)) > 0, ' ', '') + TRIM(MinNameIDs.Last_Name__c), MinNameIDs.BUSINESS_NAME),
			MinNameIDs.First_Name__c, 
			MinNameIDs.Last_Name__c, 
			MinNameIDs.Middle_Name__c, 
			phone.PhoneNumber,
			ISNULL(EmailAddresses.Email, '') as Email__c, 		
			MinNameIDs.Is_Deceased__c, 
			ISNULL(AddressExtensionMaxDateMaxTimeByNameID.Client_Passcode__c, '') AS Client_Passcode__c, 
			ISNULL(AddressExtensionMaxDateMaxTimeByNameID.Paperless_Annual_Statement__c, 0) AS Paperless_Annual_Statement__c, 
			ISNULL(AddressExtensionMaxDateMaxTimeByNameID.Paperless_11_Month_Summary__c, 0) AS Paperless_11_Month_Summary__c,
			MinNameIDs.Social_Security_Number__c, 
			MinNameIDs.Gender__c, 
			MinNameIDs.Date_of_Birth__c, 
			MinNameIDs.Tax_Status__c, 
			MinNameIDs.Tax_Witholding_Option__c
	from MinNameIDs
	--join [EDW_Outbound].[salesforce].[LOOKUP_ACCOUNT] on LOOKUP_ACCOUNT.LIFEPRO_ID__C = MinNameIDs.Parent_Account_Name_Id__c and LOOKUP_ACCOUNT.RECORDTYPEID IN (@Account_PersonAccount_RecordTypeID, @Account_Institution_RecordTypeID)
	join [EDW_Outbound].[salesforce].[LOOKUP_ACCOUNT] on LOOKUP_ACCOUNT.LIFEPRO_ID__C = MinNameIDs.Parent_Account_Name_Id__c and ((LOOKUP_ACCOUNT.RECORDTYPEID = @Account_PersonAccount_RecordTypeID and MinNameIDs.NAME_FORMAT_CODE = 'I') or (LOOKUP_ACCOUNT.RECORDTYPEID = @Account_Institution_RecordTypeID and MinNameIDs.NAME_FORMAT_CODE = 'B'))
	--left join (   
	--			--Max phone number for the name id
	--			select max(PHONE_NUMBER) phone, NAME_ID
	--			FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw]
	--			group by name_id
	--		  ) 
	--		  AS PhoneNumbers ON PhoneNumbers.NAME_ID = MinNameIDs.Name_Id__c
	left join (    
				--Name ID and Email Address
				SELECT 	EmailAddressIds.NAME_ID,
				ISNULL(TRIM(emailAddr.ADDR_LINE_1), '') + ISNULL(TRIM(emailAddr.ADDR_LINE_2), '') + ISNULL(TRIM(emailAddr.ADDR_LINE_3), '') AS Email
				FROM (
						--MAX EMAIL ADDRESS ID BY NAME ID
						SELECT  nalk.NAME_ID, MAX (nalk.ADDRESS_ID) AS EMAIL_ADDRESS_ID
						FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] nalk					
						WHERE ADDRESS_TYPE = 'E'
						GROUP BY NAME_ID
					 ) 
					as EmailAddressIds 
					LEFT JOIN [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw] emailAddr ON emailAddr.ADDRESS_ID = EmailAddressIds.EMAIL_ADDRESS_ID
			  ) 
			  AS EmailAddresses on EmailAddresses.NAME_ID = MinNameIDs.Name_Id__c
	LEFT JOIN
	(
		--Address Extension with only the Max Date and Time by NAME_ID
		Select NAME_ID, TRIM(NADR_PASSWORD) + TRIM(NADR_PASSWORD2) AS Client_Passcode__c, IIF(PPRLESS_ANN_STMT = 'Y', 1, 0) AS Paperless_Annual_Statement__c, IIF(PPRLESS_11_MONTH = 'Y', 1, 0) AS Paperless_11_Month_Summary__c from 
			(	
				--Address Extension with row number partitioned by Name_ID and sorted by Date and Time
				select NAME_ID, NADR_PASSWORD, NADR_PASSWORD2, PPRLESS_ANN_STMT, PPRLESS_11_MONTH, 
				row_number() over (partition by NAME_ID order by [DATE] DESC, [TIME] DESC) as row_num
				from [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Curr_Vw]
			) as AddressExtensionWithRowNumber
		where row_num = 1
	) as AddressExtensionMaxDateMaxTimeByNameID ON AddressExtensionMaxDateMaxTimeByNameID.NAME_ID = MinNameIDs.Name_Id__c
	LEFT JOIN [EDW_Outbound].[salesforce].[PhoneNumber] phone
		ON MinNameIDs.Name_Id__c = phone.NameID

END
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Account_Address]    Script Date: 5/17/2022 2:04:50 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



create   PROCEDURE  [salesforce].[usp_Truncate_Account_Address]
 	
AS
BEGIN;
-- =============================================

 -- Author: 			Anastasia Vogelaar
 -- CreationDate: 		2021-08-10
 -- Version: 			0.1.0
 -- Description: 		Truncate Account_Address synct table - 
 --						this stored proc is to be called upon successful 
 --						sync of the staging table with Salesforce dest list
 -- Change Log: 		
 -- =============================================

SET NOCOUNT ON;

BEGIN TRY

TRUNCATE TABLE [EDW_Outbound].[salesforce].[Account_Address];

END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();


RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Account_Address_Sub_Account]    Script Date: 5/17/2022 2:04:50 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE    PROCEDURE  [salesforce].[usp_Truncate_Account_Address_Sub_Account]
 	
AS
BEGIN;
-- =============================================

 -- Author: 			Jason Rippel
 -- CreationDate: 		2021-08-19
 -- Version: 			0.1.0
 -- Description: 		Truncate Account_Address_Sub_Account sync table - 
 --						this stored proc is to be called upon successful 
 --						sync of the staging table with Salesforce dest list
 -- Change Log: 		
 -- =============================================

SET NOCOUNT ON;

BEGIN TRY

truncate table [EDW_Outbound].[salesforce].[Account_Address_Sub_Account];

END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();


RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Account_BrokerDealer]    Script Date: 5/17/2022 2:04:51 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE     PROCEDURE  [salesforce].[usp_Truncate_Account_BrokerDealer]
 	
AS
BEGIN;
/* ===================================================================================

  Author: 			Anastasia Vogelaar
  Creation Date: 	12/18/2021
  Version: 			0.2.0
  Description: 	    Truncate Account_BrokerDealer synct table - 
 					this stored proc is to be called upon successful 
 					sync of the staging table with salesforce dest list	
  Exceptions: 		
	
 -- Change Log: 		
  Modified By:		
  Modified Date:		
  Version:			
  Description:		

-- =================================================================================== 
*/


SET NOCOUNT ON;
DECLARE @ROWS						INT;		--Used for logging row counts
DECLARE @LOGID_START				INT;		--Used for the first log id
DECLARE	@LOGID						INT;		--Used for intermediate log ids

BEGIN TRY
--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'TruncateAccount_BrokerDealer:Start/End Indicator');
SELECT @LOGID_START = @@IDENTITY;
/*START: Flag records rejected by Salesforce*/
IF (1=1)
	BEGIN;
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'TruncateAccount_BrokerDealer:Flag Salesforce Rejections');
	SELECT @LOGID = @@IDENTITY;
	;WITH FAILS 
		AS
		(SELECT [Reject_Flag]
			, [Reject_Dt]
			, [Reject_Reason]
		FROM  [salesforce].[Account_BrokerDealer] 
		WHERE	COALESCE([Reject_Flag],0)=0
			AND EXISTS(SELECT 1 FROM [salesforce].[mapping_Account] AS MAPPING WHERE MAPPING.[ID] = [salesforce].[Account_BrokerDealer].[LifePro_ID__c] AND MAPPING.[SALESFORCE_ID] IS NULL)
		)
	UPDATE FAILS SET 
		[Reject_Flag] = 2
		, [Reject_Dt] = CURRENT_TIMESTAMP
		, [FAILS].[Reject_Reason] = 'Rejected by Salesforce';

	SELECT @ROWS = @@ROWCOUNT;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;
	END;
/*END: Flag records rejected by Salesforce*/
/*START: Move rejected rows to reject table*/
IF (1=1)
	BEGIN;
  IF EXISTS(SELECT 1 FROM [salesforce].[Account_BrokerDealer] WHERE COALESCE([Reject_Flag],0)<>0)
    BEGIN;
    INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'TruncateAccount_BrokerDealer:Log Rejections');
    SELECT @LOGID = @@IDENTITY;
    INSERT [salesforce].[reject_Account_BrokerDealer]
      ([Name]
		,[Phone]
		,[OwnerId]
		,[RecordTypeId]
		,[LifePro_Last_Modified_DateTime__c]
		,[X2017_Activity_Premium__c]
		,[X2017_Effective_Premium__c]
		,[X2018_Activity_Premium__c]
		,[X2018_Effective_Premium__c]
		,[X2019_Activity_Premium__c]
		,[X2019_Effective_Premium__c]
		,[Agent_Number__c]
		,[Company_Code__c]
		,[Email__c]
		,[LifePro_ID__c]
		,[Region__c]
		,[Status__c]
		,[Status_Date__c]
		,[Suitability__c]
		,[TIN__c]
		,[Social_Security_Number__c]
		,[Tax_Status__c]
		,[Tax_Witholding_Option__c]
		,[Created_dt]
		,[Modified_dt]
		,[LifePro_NameID]
		,[Reject_Flag]
		,[Reject_Dt]
		,[Reject_Reason]) --destination columns
    SELECT [Name]
		,[Phone]
		,[OwnerId]
		,[RecordTypeId]
		,[LifePro_Last_Modified_DateTime__c]
		,[X2017_Activity_Premium__c]
		,[X2017_Effective_Premium__c]
		,[X2018_Activity_Premium__c]
		,[X2018_Effective_Premium__c]
		,[X2019_Activity_Premium__c]
		,[X2019_Effective_Premium__c]
		,[Agent_Number__c]
		,[Company_Code__c]
		,[Email__c]
		,[LifePro_ID__c]
		,[Region__c]
		,[Status__c]
		,[Status_Date__c]
		,[Suitability__c]
		,[TIN__c]
		,[Social_Security_Number__c]
		,[Tax_Status__c]
		,[Tax_Witholding_Option__c]
		,[Created_dt]
		,[Modified_dt]
		,[LifePro_NameID]
		,[Reject_Flag]
		,[Reject_Dt]
		,[Reject_Reason]
          --source columns
    FROM [salesforce].[Account_BrokerDealer] 
    WHERE COALESCE([Reject_Flag],0)<>0;
    SELECT @ROWS = @@ROWCOUNT;
    UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;
    END;
	END;
/*END: Move rejected rows to reject table*/
/*START: Truncate staging*/
IF (1=1)
	BEGIN;
  SELECT @ROWS = SUM(st.row_count) FROM    sys.dm_db_partition_stats st WHERE object_name(object_id) = 'Account_BrokerDealer' AND OBJECT_SCHEMA_NAME(OBJECT_ID) = 'salesforce' AND (index_id < 2);
  TRUNCATE TABLE [EDW_Outbound].[salesforce].[Account_BrokerDealer];
  UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID_START;
  END;
/*END: Truncate staging*/
END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();

--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account_BrokerDealer:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;

RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;

  

GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Policy_Document]    Script Date: 5/17/2022 2:04:51 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:          Darin Baarda
-- Create date:		08/10/2021
-- Description:     truncate the policy documents
-- =============================================
-- Last Run Date : 08/10/2021
-- Last Run Exec : exec salesforce.usp_Truncate_Policy_Document 
-- Last Run Stat : 
-- =============================================
-- Maintenance 
-- =============================================
-- CX-311     08/10/2021 Darin Baarda 
-- New Stored Procedure
-- =============================================

CREATE PROCEDURE [salesforce].[usp_Truncate_Policy_Document]


AS
BEGIN
SET NOCOUNT ON;

	BEGIN TRY


		/* code starts here for the procedure */

		TRUNCATE TABLE [EDW_Outbound].[salesforce].[Policy_Document]

		/* code ends here for the procedure */

	END TRY
	BEGIN CATCH
           
	DECLARE @ERROR_MSG          NVARCHAR(2000);
	DECLARE @ERROR_SEVERITY     INT;
	DECLARE @ERROR_STATE        INT;
 
	SET @ERROR_MSG              = ERROR_MESSAGE();
	SET @ERROR_SEVERITY         = ERROR_SEVERITY();
	SET @ERROR_STATE            = ERROR_STATE();


	RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

	END CATCH;

END
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Policy]    Script Date: 5/17/2022 2:04:51 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE   PROCEDURE  [salesforce].[usp_Truncate_Policy]
 	
AS
BEGIN;
-- =============================================

 -- Author: 			Steve Tangeman
 -- CreationDate: 		2021-08-23
 -- Version: 			0.1.0
 -- Description: 		Truncate Policy sync table - 
 --						this stored proc is to be called upon successful 
 --						sync of the staging table with Salesforce dest list
 -- Change Log: 		
 -- =============================================

SET NOCOUNT ON;

BEGIN TRY

TRUNCATE TABLE [EDW_Outbound].[salesforce].[Policy];

END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();


RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Insurance_Policy_Transaction]    Script Date: 5/17/2022 2:04:51 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE   PROCEDURE  [salesforce].[usp_Truncate_Insurance_Policy_Transaction]
 	
AS
BEGIN;
-- =============================================

 -- Author: 			Jason Rippel
 -- CreationDate: 		2021-07-29
 -- Version: 			0.1.0
 -- Description: 		Truncate Insurance_Policy_Transaction sync table - 
 --						this stored proc is to be called upon successful 
 --						sync of the staging table with Salesforce dest list
 -- Change Log: 		
 -- =============================================

SET NOCOUNT ON;

BEGIN TRY

TRUNCATE TABLE [EDW_Outbound].[salesforce].[Insurance_Policy_Transaction];

END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();


RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Insurance_Policy_Participant]    Script Date: 5/17/2022 2:04:51 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE   PROCEDURE  [salesforce].[usp_Truncate_Insurance_Policy_Participant]
 	
AS
BEGIN;
-- =============================================

 -- Author: 			Steve Tangeman
 -- CreationDate: 		2021-07-28
 -- Version: 			0.1.0
 -- Description: 		Truncate Insurance_Policy_Participant sync table - 
 --						this stored proc is to be called upon successful 
 --						sync of the staging table with Salesforce dest list
 -- Change Log: 		
 -- =============================================

SET NOCOUNT ON;

BEGIN TRY

TRUNCATE TABLE [EDW_Outbound].[salesforce].[Insurance_Policy_Participant];

END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();


RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Insurance_Policy_Authorization]    Script Date: 5/17/2022 2:04:52 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE   PROCEDURE  [salesforce].[usp_Truncate_Insurance_Policy_Authorization]
 	
AS
BEGIN;
-- =============================================

 -- Author: 			Jason Rippel
 -- CreationDate: 		2021-08-04
 -- Version: 			0.1.0
 -- Description: 		Truncate Insurance_Policy_Authorization sync table - 
 --						this stored proc is to be called upon successful 
 --						sync of the staging table with Salesforce dest list
 -- Change Log: 		
 -- =============================================

SET NOCOUNT ON;

BEGIN TRY

TRUNCATE TABLE [EDW_Outbound].[salesforce].[Insurance_Policy_Authorization];

END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();


RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Allocoation]    Script Date: 5/17/2022 2:04:52 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



create   PROCEDURE  [salesforce].[usp_Truncate_Allocoation]
 	
AS
BEGIN;
-- =============================================

 -- Author: 			Anastasia Vogelaar
 -- CreationDate: 		2021-10-12
 -- Version: 			0.1.0
 -- Description: 		Truncate Allocation sync table - 
 --						this stored proc is to be called upon successful 
 --						sync of the staging table with Salesforce dest list
 -- Change Log: 		
 -- =============================================

SET NOCOUNT ON;

BEGIN TRY

TRUNCATE TABLE [EDW_Outbound].[salesforce].[Allocation];

END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();


RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Allocation]    Script Date: 5/17/2022 2:04:52 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



create   PROCEDURE  [salesforce].[usp_Truncate_Allocation]
 	
AS
BEGIN;
-- =============================================

 -- Author: 			Anastasia Vogelaar
 -- CreationDate: 		2021-10-12
 -- Version: 			0.1.0
 -- Description: 		Truncate Allocation sync table - 
 --						this stored proc is to be called upon successful 
 --						sync of the staging table with Salesforce dest list
 -- Change Log: 		
 -- =============================================

SET NOCOUNT ON;

BEGIN TRY

TRUNCATE TABLE [EDW_Outbound].[salesforce].[Allocation];

END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();


RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Producer]    Script Date: 5/17/2022 2:04:52 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE    PROCEDURE  [salesforce].[usp_Truncate_Producer]
 	
AS
BEGIN;
-- =============================================

 -- Author: 			Anastasia Vogelaar
 -- CreationDate: 		2021-07-20
 -- Version: 			0.1.0
 -- Description: 		Truncate Producer synct table - 
 --						this stored proc is to be called upon successful 
 --						sync of the staging table with Salesforce dest list
 -- Change Log: 		
 -- =============================================

SET NOCOUNT ON;

BEGIN TRY

TRUNCATE TABLE [EDW_Outbound].[salesforce].[Producer];

END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();


RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Allcoation]    Script Date: 5/17/2022 2:04:52 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



create   PROCEDURE  [salesforce].[usp_Truncate_Allcoation]
 	
AS
BEGIN;
-- =============================================

 -- Author: 			Anastasia Vogelaar
 -- CreationDate: 		2021-10-12
 -- Version: 			0.1.0
 -- Description: 		Truncate Allocation sync table - 
 --						this stored proc is to be called upon successful 
 --						sync of the staging table with Salesforce dest list
 -- Change Log: 		
 -- =============================================

SET NOCOUNT ON;

BEGIN TRY

TRUNCATE TABLE [EDW_Outbound].[salesforce].[Allocation];

END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();


RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Advisor_Contact]    Script Date: 5/17/2022 2:04:53 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE     PROCEDURE  [salesforce].[usp_Truncate_Advisor_Contact]
 	
AS
BEGIN;
/* ===================================================================================

  Author: 			Anastasia Vogelaar
  Creation Date: 	2022-01-11
  Version: 			2.0.0
  Description: 	    Truncate Advisor_Contact synct table - 
 					this stored proc is to be called upon successful 
 					sync of the staging table with  dest list	
  Exceptions: 		
	
 -- Change Log: 		
  Modified By:		
  Modified Date:		
  Version:			
  Description:		

-- =================================================================================== 
*/


SET NOCOUNT ON;
DECLARE @ROWS						INT;		--Used for logging row counts
DECLARE @LOGID_START				INT;		--Used for the first log id
DECLARE	@LOGID						INT;		--Used for intermediate log ids

BEGIN TRY
--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'TruncateAdvisor_Contact:Start/End Indicator');
SELECT @LOGID_START = @@IDENTITY;
/*START: Flag records rejected by Salesforce*/
IF (1=1)
	BEGIN;
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'TruncateAdvisor_Contact:Flag Salesforce Rejections');
	SELECT @LOGID = @@IDENTITY;
	;WITH FAILS 
		AS
		(SELECT [Reject_Flag]
			, [Reject_Dt]
			, [Reject_Reason]
		FROM  [salesforce].[Advisor_Contact] 
		WHERE	COALESCE([Reject_Flag],0)=0
			AND EXISTS(SELECT 1 FROM [salesforce].[mapping_Contact] AS MAPPING WHERE MAPPING.[ID] = [salesforce].[Advisor_Contact].[LifePro_ID__c] AND MAPPING.[SALESFORCE_ID] IS NULL)
		)
	UPDATE FAILS SET 
		[Reject_Flag] = 2
		, [Reject_Dt] = CURRENT_TIMESTAMP
		, [FAILS].[Reject_Reason] = 'Rejected by Salesforce';

	SELECT @ROWS = @@ROWCOUNT;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;
	END;
/*END: Flag records rejected by Salesforce*/
/*START: Move rejected rows to reject table*/
IF (1=1)
	BEGIN;
  IF EXISTS(SELECT 1 FROM [salesforce].[Advisor_Contact] WHERE COALESCE([Reject_Flag],0)<>0)
    BEGIN;
    INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'TruncateAdvisor_Contact:Log Rejections');
    SELECT @LOGID = @@IDENTITY;
    INSERT [salesforce].[reject_Advisor_Contact]
      ( [AccountID]
		, [BirthDate]
		, [BusinessPhone]
		, [DoNotCall]
		, [Email]
		, [HasOptedOutOfEmail]
		, [HasOptedOutOfFax]
		, [OwnerID]
		, [FirstName]
		, [LastName]
		, [MailingAddress]
		, [MailingCity]
		, [MailingCountry]
		, [MailingState]
		, [MailingStreet]
		, [MailingPostalCode]
		, [MiddleName]
		, [OtherPhone]
		, [OtherAddress]
		, [OtherCity]
		, [OtherCountry]
		, [OtherState]
		, [OtherStreet]
		, [OtherPostalCode]
		, [RecordType]
		, [Salutation]
		, [Suffix]
		, [LifePro_Last_Modified_DateTime__c]
		, [DLRS_2020_Fall_Conference_Premium__c]
		, [DLRS_2021_Fall_Conference_Premium__c]
		, [All_Time_Premium__c]
		, [AML_Training__c]
		, [Total_Production__c]
		, [DLRS_August_Premium_Total__c]
		, [Company_Code__c]
		, [Contact_Record_Type__c]
		, [First_App_Date__c]
		, [Gender__c]
		, [Last_App_Date__c]
		, [Last_Status_Date__c]
		, [Last_Terminated_Date__c]
		, [LifePro_ID__c]
		, [LO_Agent__c]
		, [Name_Format__c]
		, [Preferred_Name__c]
		, [Region__c]
		, [SSN__c]
		, [State__c]
		, [Suitability__c]
		, [Terminated_Amount__c]
		, [YTD_Activity_Amount__c]
		, [YTD_Apps_Received__c]
		, [YTD_Effective_Amount__c]
		, [DLRS_YTD_FIA_Premium__c]
		, [YTD_Issue_Amount__c]
		, [Parent_Name_Id__c]
		, [Name_Id__c]
		, [NPN__c]
		, [CRD__c]
		, [Created_dt]
		, [Modified_dt]
		, [Reject_Flag]
		, [Reject_Dt]
		, [Reject_Reason]) --destination columns
    SELECT 
          [AccountID]
		, [BirthDate]
		, [BusinessPhone]
		, [DoNotCall]
		, [Email]
		, [HasOptedOutOfEmail]
		, [HasOptedOutOfFax]
		, [OwnerID]
		, [FirstName]
		, [LastName]
		, [MailingAddress]
		, [MailingCity]
		, [MailingCountry]
		, [MailingState]
		, [MailingStreet]
		, [MailingPostalCode]
		, [MiddleName]
		, [OtherPhone]
		, [OtherAddress]
		, [OtherCity]
		, [OtherCountry]
		, [OtherState]
		, [OtherStreet]
		, [OtherPostalCode]
		, [RecordType]
		, [Salutation]
		, [Suffix]
		, [LifePro_Last_Modified_DateTime__c]
		, [DLRS_2020_Fall_Conference_Premium__c]
		, [DLRS_2021_Fall_Conference_Premium__c]
		, [All_Time_Premium__c]
		, [AML_Training__c]
		, [Total_Production__c]
		, [DLRS_August_Premium_Total__c]
		, [Company_Code__c]
		, [Contact_Record_Type__c]
		, [First_App_Date__c]
		, [Gender__c]
		, [Last_App_Date__c]
		, [Last_Status_Date__c]
		, [Last_Terminated_Date__c]
		, [LifePro_ID__c]
		, [LO_Agent__c]
		, [Name_Format__c]
		, [Preferred_Name__c]
		, [Region__c]
		, [SSN__c]
		, [State__c]
		, [Suitability__c]
		, [Terminated_Amount__c]
		, [YTD_Activity_Amount__c]
		, [YTD_Apps_Received__c]
		, [YTD_Effective_Amount__c]
		, [DLRS_YTD_FIA_Premium__c]
		, [YTD_Issue_Amount__c]
		, [Parent_Name_Id__c]
		, [Name_Id__c]
		, [NPN__c]
		, [CRD__c]
		, [Created_dt]
		, [Modified_dt]
		, [Reject_Flag]
		, [Reject_Dt]
		, [Reject_Reason]
    FROM [salesforce].[Advisor_Contact] 
    WHERE COALESCE([Reject_Flag],0)<>0;
    SELECT @ROWS = @@ROWCOUNT;
    UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;
    END;
	END;
/*END: Move rejected rows to reject table*/
/*START: Truncate staging*/
IF (1=1)
	BEGIN;
  SELECT @ROWS = SUM(st.row_count) FROM    sys.dm_db_partition_stats st WHERE object_name(object_id) = 'Advisor_Contact' AND OBJECT_SCHEMA_NAME(OBJECT_ID) = '' AND (index_id < 2);
  TRUNCATE TABLE [EDW_Outbound].[salesforce].[Advisor_Contact];
  UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID_START;
  END;
/*END: Truncate staging*/
END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();

--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Advisor_Contact:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;

RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;

  

GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Address]    Script Date: 5/17/2022 2:04:53 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:          Darin Baarda
-- Create date:		08/12/2021
-- Description:     truncate the address table
-- =============================================
-- Last Run Date : 08/12/2021
-- Last Run Exec : exec salesforce.usp_Truncate_Address 
-- Last Run Stat : 
-- =============================================
-- Maintenance 
-- =============================================
-- CX-2481     08/12/2021 Darin Baarda 
-- New Stored Procedure
-- =============================================

CREATE PROCEDURE [salesforce].[usp_Truncate_Address]


AS
BEGIN
SET NOCOUNT ON;

	BEGIN TRY


		/* code starts here for the procedure */

		TRUNCATE TABLE [EDW_Outbound].[salesforce].[Address]

		/* code ends here for the procedure */

	END TRY
	BEGIN CATCH
           
	DECLARE @ERROR_MSG          NVARCHAR(2000);
	DECLARE @ERROR_SEVERITY     INT;
	DECLARE @ERROR_STATE        INT;
 
	SET @ERROR_MSG              = ERROR_MESSAGE();
	SET @ERROR_SEVERITY         = ERROR_SEVERITY();
	SET @ERROR_STATE            = ERROR_STATE();


	RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

	END CATCH;

END
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Account_Wholesaler]    Script Date: 5/17/2022 2:04:53 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE     PROCEDURE  [salesforce].[usp_Truncate_Account_Wholesaler]
 	
AS
BEGIN;
/* ===================================================================================

  Author: 			Anastasia Vogelaar
  Creation Date: 	12/18/2021
  Version: 			0.2.0
  Description: 	    Truncate Account_Wholesaler synct table - 
 					this stored proc is to be called upon successful 
 					sync of the staging table with salesforce dest list	
  Exceptions: 		
	
 -- Change Log: 		
  Modified By:		
  Modified Date:		
  Version:			
  Description:		

-- =================================================================================== 
*/


SET NOCOUNT ON;
DECLARE @ROWS						INT;		--Used for logging row counts
DECLARE @LOGID_START				INT;		--Used for the first log id
DECLARE	@LOGID						INT;		--Used for intermediate log ids

BEGIN TRY
--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'TruncateAccount_Wholesaler:Start/End Indicator');
SELECT @LOGID_START = @@IDENTITY;
/*START: Flag records rejected by Salesforce*/
IF (1=1)
	BEGIN;
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'TruncateAccount_Wholesaler:Flag Salesforce Rejections');
	SELECT @LOGID = @@IDENTITY;
	;WITH FAILS 
		AS
		(SELECT [Reject_Flag]
			, [Reject_Dt]
			, [Reject_Reason]
		FROM  [salesforce].[Account_Wholesaler] 
		WHERE	COALESCE([Reject_Flag],0)=0
			AND EXISTS(SELECT 1 FROM [salesforce].[mapping_Account] AS MAPPING WHERE MAPPING.[ID] = [salesforce].[Account_Wholesaler].[LifePro_ID__c] AND MAPPING.[SALESFORCE_ID] IS NULL)
		)
	UPDATE FAILS SET 
		[Reject_Flag] = 2
		, [Reject_Dt] = CURRENT_TIMESTAMP
		, [FAILS].[Reject_Reason] = 'Rejected by Salesforce';

	SELECT @ROWS = @@ROWCOUNT;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;
	END;
/*END: Flag records rejected by Salesforce*/
/*START: Move rejected rows to reject table*/
IF (1=1)
	BEGIN;
  IF EXISTS(SELECT 1 FROM [salesforce].[Account_Wholesaler] WHERE COALESCE([Reject_Flag],0)<>0)
    BEGIN;
    INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'TruncateAccount_Wholesaler:Log Rejections');
    SELECT @LOGID = @@IDENTITY;
    INSERT [salesforce].[reject_Account_Wholesaler]
      ([Name]
		,[Phone]
		,[OwnerId]
		,[RecordTypeId]
		,[LifePro_Last_Modified_DateTime__c]
		,[X2017_Activity_Premium__c]
		,[X2017_Effective_Premium__c]
		,[X2018_Activity_Premium__c]
		,[X2018_Effective_Premium__c]
		,[X2019_Activity_Premium__c]
		,[X2019_Effective_Premium__c]
		,[Agent_Number__c]
		,[Company_Code__c]
		,[Contract_Date__c]
		,[Email__c]
		,[LifePro_ID__c]
		,[Region__c]
		,[Status__c]
		,[Status_Date__c]
		,[Suitability__c]
		,[TIN__c]
		,[Social_Security_Number__c]
		,[Tax_Status__c]
		,[Tax_Witholding_Option__c]
		,[Created_dt]
		,[Modified_dt]
		,[LifePro_NameID]
		,[Reject_Flag]
		,[Reject_Dt]
		,[Reject_Reason]) --destination columns
    SELECT 
         [Name]
		,[Phone]
		,[OwnerId]
		,[RecordTypeId]
		,[LifePro_Last_Modified_DateTime__c]
		,[X2017_Activity_Premium__c]
		,[X2017_Effective_Premium__c]
		,[X2018_Activity_Premium__c]
		,[X2018_Effective_Premium__c]
		,[X2019_Activity_Premium__c]
		,[X2019_Effective_Premium__c]
		,[Agent_Number__c]
		,[Company_Code__c]
		,[Contract_Date__c]
		,[Email__c]
		,[LifePro_ID__c]
		,[Region__c]
		,[Status__c]
		,[Status_Date__c]
		,[Suitability__c]
		,[TIN__c]
		,[Social_Security_Number__c]
		,[Tax_Status__c]
		,[Tax_Witholding_Option__c]
		,[Created_dt]
		,[Modified_dt]
		,[LifePro_NameID]
		,[Reject_Flag]
		,[Reject_Dt]
		,[Reject_Reason] --source columns
    FROM [salesforce].[Account_Wholesaler] 
    WHERE COALESCE([Reject_Flag],0)<>0;
    SELECT @ROWS = @@ROWCOUNT;
    UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;
    END;
	END;
/*END: Move rejected rows to reject table*/
/*START: Truncate staging*/
IF (1=1)
	BEGIN;
  SELECT @ROWS = SUM(st.row_count) FROM    sys.dm_db_partition_stats st WHERE object_name(object_id) = 'Account_Wholesaler' AND OBJECT_SCHEMA_NAME(OBJECT_ID) = 'salesforce' AND (index_id < 2);
  TRUNCATE TABLE [EDW_Outbound].[salesforce].[Account_Wholesaler];
  UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID_START;
  END;
/*END: Truncate staging*/
END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();

--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account_Wholesaler:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;

RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;

  

GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Account_Person]    Script Date: 5/17/2022 2:04:53 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE   PROCEDURE  [salesforce].[usp_Truncate_Account_Person]
 	
AS
BEGIN;
-- =============================================

 -- Author: 			Anastasia Vogelaar
 -- CreationDate: 		2021-06-24
 -- Version: 			0.1.0
 -- Description: 		Truncate Account_Person synct table - 
 --						this stored proc is to be called upon successful 
 --						sync of the staging table with Salesforce dest list
 -- Change Log: 
 -- Author: 			Anastasia Vogelaar
 -- CreationDate: 		2021-10-28
 -- Version: 			0.2.0
 -- Description: 		Added rejection mechanism and logging

 -- Author: 			Anastasia Vogelaar
 -- CreationDate: 		2022-04-10
 -- Version: 			0.2.1
 -- Description: 		Added new columns delete flag and salesforceid
 -- =============================================

SET NOCOUNT ON;
DECLARE @ROWS						INT;		--Used for logging row counts
DECLARE @LOGID_START				INT;		--Used for the first log id
DECLARE	@LOGID						INT;		--Used for intermediate log ids

BEGIN TRY
--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'TruncateAccountPerson:Stat/End Indicator');
SELECT @LOGID_START = @@IDENTITY;

/*START: Flag records rejected by Salesforce*/
IF (1=1)
	BEGIN;
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'TruncateAccountPerson:Flag Salesforce Rejections');
	SELECT @LOGID = @@IDENTITY;
	;WITH FAILS 
		AS
		(SELECT [Reject_Flag]
			, [Reject_Dt]
			, [Reject_Reason]
		FROM  [salesforce].[Account_Person] 
		WHERE	COALESCE([Reject_Flag],0)=0
			AND EXISTS(SELECT 1 FROM [salesforce].[mapping_Account] AS MAPPING WHERE MAPPING.[ID] = [salesforce].[Account_Person].[LifePro_ID__c] AND MAPPING.[SALESFORCE_ID] IS NULL)
		)
	UPDATE FAILS SET 
		[Reject_Flag] = 2
		, [Reject_Dt] = CURRENT_TIMESTAMP
		, [FAILS].[Reject_Reason] = 'Rejected by Salesforce';

	SELECT @ROWS = @@ROWCOUNT;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;
	END;
/*END: Flag records rejected by Salesforce*/
/*START: Move rejected rows to reject table*/
IF (1=1)
	BEGIN;
	IF EXISTS(SELECT 1 FROM [salesforce].[Account_Person] WHERE COALESCE([Reject_Flag],0)<>0)
		BEGIN;
		INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'TruncateAccountPerson:Log Rejections');
		SELECT @LOGID = @@IDENTITY;
		INSERT [salesforce].[reject_Account_Person]
			([LifePro_ID__c]
			, [LifePro_Last_Modified_DateTime__c]
			, [Created_dt]
			, [Modified_dt]
			, [FirstName]
			, [LastName]
			, [MiddleName]
			, [Phone]
			, [OwnerId]
			, [RecordTypeId]
			, [PersonEmail]
			, [Is_Deceased__c]
			, [Client_Passcode__c]
			, [Paperless_Annual_Statement__c]
			, [Paperless_11_Month_Summary__c]
			, [Social_Security_Number__c]
			, [Gender__c]
			, [Date_of_Birth__c]
			, [Tax_Status__c]
			, [Tax_Witholding_Option__c]
			, [LifePro_NameID]
			, [Reject_Flag]
			, [Reject_Dt]
			, [Reject_Reason]
			, [Delete_flag]
			, [Salesforce_ID])
		SELECT [LifePro_ID__c]
			, [LifePro_Last_Modified_DateTime__c]
			, [Created_dt]
			, [Modified_dt]
			, [FirstName]
			, [LastName]
			, [MiddleName]
			, [Phone]
			, [OwnerId]
			, [RecordTypeId]
			, [PersonEmail]
			, [Is_Deceased__c]
			, [Client_Passcode__c]
			, [Paperless_Annual_Statement__c]
			, [Paperless_11_Month_Summary__c]
			, [Social_Security_Number__c]
			, [Gender__c]
			, [Date_of_Birth__c]
			, [Tax_Status__c]
			, [Tax_Witholding_Option__c]
			, [LifePro_NameID]
			, [Reject_Flag]
			, [Reject_Dt]
			, [Reject_Reason]
			, [Delete_flag]
			, [Salesforce_ID]
		FROM [salesforce].[Account_Person] 
		WHERE COALESCE([Reject_Flag],0)<>0;
		SELECT @ROWS = @@ROWCOUNT;
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;
		END;
	END;
/*END: Move rejected rows to reject table*/
/*START: Truncate staging*/
IF (1=1)
	BEGIN;
	SELECT @ROWS = SUM(st.row_count) FROM    sys.dm_db_partition_stats st WHERE object_name(object_id) = 'Account_Person' AND OBJECT_SCHEMA_NAME(OBJECT_ID) = 'salesforce' AND (index_id < 2);
	TRUNCATE TABLE [EDW_Outbound].[salesforce].[Account_Person];
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID_START;
	END;
/*END: Truncate staging*/
END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();


RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Account_Institution]    Script Date: 5/17/2022 2:04:54 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE     PROCEDURE  [salesforce].[usp_Truncate_Account_Institution]
 	
AS
BEGIN;
/* ===================================================================================

  Author: 			Anastasia Vogelaar
  Creation Date: 	12/18/2021
  Version: 			0.2.0
  Description: 	    Truncate Account_Institution synct table - 
 					this stored proc is to be called upon successful 
 					sync of the staging table with salesforce dest list	
  Exceptions: 		
	
 -- Change Log: 		
  Modified By:		Anastasia Vogelaar
  Modified Date:	04/01/2022	
  Version:			0.2.1
  Description:		Added Delete flag and Salesforce ID

-- =================================================================================== 
*/


SET NOCOUNT ON;
DECLARE @ROWS						INT;		--Used for logging row counts
DECLARE @LOGID_START				INT;		--Used for the first log id
DECLARE	@LOGID						INT;		--Used for intermediate log ids

BEGIN TRY
--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'TruncateAccount_Institution:Start/End Indicator');
SELECT @LOGID_START = @@IDENTITY;
/*START: Flag records rejected by Salesforce*/
IF (1=1)
	BEGIN;
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'TruncateAccount_Institution:Flag Salesforce Rejections');
	SELECT @LOGID = @@IDENTITY;
	;WITH FAILS 
		AS
		(SELECT [Reject_Flag]
			, [Reject_Dt]
			, [Reject_Reason]
		FROM  [salesforce].[Account_Institution] 
		WHERE	COALESCE([Reject_Flag],0)=0
			AND EXISTS(SELECT 1 FROM [salesforce].[mapping_Account] AS MAPPING WHERE MAPPING.[ID] = [salesforce].[Account_Institution].[LifePro_ID__c] AND MAPPING.[SALESFORCE_ID] IS NULL)
		)
	UPDATE FAILS SET 
		[Reject_Flag] = 2
		, [Reject_Dt] = CURRENT_TIMESTAMP
		, [FAILS].[Reject_Reason] = 'Rejected by Salesforce';

	SELECT @ROWS = @@ROWCOUNT;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;
	END;
/*END: Flag records rejected by Salesforce*/
/*START: Move rejected rows to reject table*/
IF (1=1)
	BEGIN;
  IF EXISTS(SELECT 1 FROM [salesforce].[Account_Institution] WHERE COALESCE([Reject_Flag],0)<>0)
    BEGIN;
    INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'TruncateAccount_Institution:Log Rejections');
    SELECT @LOGID = @@IDENTITY;
    INSERT [salesforce].[reject_Account_Institution]
      ([Name]
		,[Phone]
		,[OwnerId]
		,[RecordTypeId]
		,[LifePro_Last_Modified_DateTime__c]
		,[Email__c]
		,[LifePro_ID__c]
		,[TIN__c]
		,[Client_Passcode__c]
		,[Paperless_Annual_Statement__c]
		,[Paperless_11_Month_Summary__c]
		,[Tax_Status__c]
		,[Tax_Witholding_Option__c]
		,[Created_dt]
		,[Modified_dt]
		,[LifePro_NameID]
		,[Reject_Flag]
		,[Reject_Dt]
		,[Reject_Reason]
		, [Delete_flag]
		, [Salesforce_ID]) --destination columns
    SELECT [Name]
		,[Phone]
		,[OwnerId]
		,[RecordTypeId]
		,[LifePro_Last_Modified_DateTime__c]
		,[Email__c]
		,[LifePro_ID__c]
		,[TIN__c]
		,[Client_Passcode__c]
		,[Paperless_Annual_Statement__c]
		,[Paperless_11_Month_Summary__c]
		,[Tax_Status__c]
		,[Tax_Witholding_Option__c]
		,[Created_dt]
		,[Modified_dt]
		,[LifePro_NameID]
		,[Reject_Flag]
		,[Reject_Dt]
		,[Reject_Reason]
		, [Delete_flag]
		, [Salesforce_ID]
          --source columns
    FROM [salesforce].[Account_Institution] 
    WHERE COALESCE([Reject_Flag],0)<>0;
    SELECT @ROWS = @@ROWCOUNT;
    UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;
    END;
	END;
/*END: Move rejected rows to reject table*/
/*START: Truncate staging*/
IF (1=1)
	BEGIN;
  SELECT @ROWS = SUM(st.row_count) FROM    sys.dm_db_partition_stats st WHERE object_name(object_id) = 'Account_Institution' AND OBJECT_SCHEMA_NAME(OBJECT_ID) = 'salesforce' AND (index_id < 2);
  TRUNCATE TABLE [EDW_Outbound].[salesforce].[Account_Institution];
  UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID_START;
  END;
/*END: Truncate staging*/
END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();

--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'Account_Institution:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;

RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;

  

GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Sub_Account]    Script Date: 5/17/2022 2:04:54 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--ALTER TABLE [salesforce].[Sub_Account] ADD [Reject_Flag] SMALLINT NULL;
--ALTER TABLE [salesforce].[Sub_Account] ADD [Reject_Dt] DATETIME2 NULL
--ALTER TABLE [salesforce].[Sub_Account] ADD [Reject_Reason] NVARCHAR(100) NULL;
--ALTER TABLE [salesforce].[Sub_Account] ADD [Delete_Flag] bit NULL;
--ALTER TABLE [salesforce].[Sub_Account] ADD  CONSTRAINT [df_SubAccount_DeleteFlag]  DEFAULT ((0)) FOR [DELETE_FLAG]
--ALTER TABLE [salesforce].[Sub_Account] ADD  CONSTRAINT [df_SubAccount_RejectFlag]  DEFAULT ((0)) FOR [Reject_FLAG]
--GO




CREATE           PROCEDURE  [salesforce].[usp_Upsert_Sub_Account]

AS
BEGIN;
-- =============================================

 -- Author: 			Chris Waggoner
 -- CreationDate: 		2021-06-29
 -- Version: 			0.1.1
 -- Description: 		Prototype - refresh Sub Account table for synchronization with SalesForce 

 -- Change Log: 		
 -- Modified By:		Steve Tangeman
 -- Modified Date:		8/18/2021
 -- Version:			0.1.2
 -- Description:		Updated to base sub accounts on account SSNs and TINs that are not zero, and limited to person and institution accounts
 
 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		8/31/2021
 -- Version:			0.1.3
 -- Description:		Quick fix - needs to be reviewed for all date columns - added the date of birth check 

 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		9/2/2021
 -- Version:			0.1.4
 -- Description:		Quick fix - There were a few failing email addresses 

 -- Modified By:		Steve Tangeman
 -- Modified Date:		9/3/2021
 -- Version:			0.1.5
 -- Description:		Limited sub accounts to just policy owners

 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		9/7/2021
 -- Version:			0.1.6
 -- Description:		Removed duplicates
 
 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		09/07/2021
 -- Version:			0.1.7
 -- Description:		Replaced Drop Table with Truncate

 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		09/13/2021
 -- Version:			0.1.8
 -- Description:		Changed logic to account for invalid TIC format

 -- Modified By:		Anastasia Vogelaar
 -- Modified Date:		12/17/2021
 -- Version:			0.2.0
 -- Description:		Replaced LOOKUP_Account with the mapping table

 -- Modified By:	    Jason Rippel    
 -- Modified Date:	    3/15/2022
 -- Version:		    0.2.1
 -- Description:	    Updated Email address to Address Code = Business and Address Type = Email and Highest Effective Date

 -- Modified By:	    Anastasia Vogelaar
 -- Modified Date:	    04/07/2022
 -- Version:		    0.2.2
 -- Description:	    Added Phone Number check, removed indexing lookup tables since it's no longer needed,added logging
 --						Replaced merge with insert
 --						Added reject flag

 -- Modified By:	    Jason Rippel
 -- Modified Date:	    04/27/2022
 -- Version:		    0.2.3
 -- Description:	    Updated Join for EmailAddressIds temp table to the correct work.tmp_Sub_Account_EmailAddressIds_Nalk table

 -- Full reload:
--DECLARE @SETTING_NAME_NAME			NVARCHAR(50) = 'SYNC_SUB_ACCOUNT_NAME_CURR_VW';
--DECLARE @SETTING_NAME_EXTN_NADRNA		NVARCHAR(50) = 'SYNC_SUB_ACCOUNT_EXT_NADRNA_CURR_VW';
--DECLARE @SETTING_NAME_NALK			NVARCHAR(50) = 'SYNC_SUB_ACCOUNT_NALK_CURR_VW';
--DECLARE @SETTING_NAME_ADDR			NVARCHAR(50) = 'SYNC_SUB_ACCOUNT_ADDR_CURR_VW';
--DECLARE @SETTING_NAME_PHONE			NVARCHAR(50) = 'SYNC_SUB_ACCOUNT_PHONE';
--DECLARE @SETTING_MODULE				NVARCHAR(50) = 'SF_SYNC';
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_NAME AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_EXTN_NADRNA AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_NALK AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '0' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_ADDR AND SETTING_MODULE = @SETTING_MODULE;
--UPDATE SETTINGS SET SETTING_VALUE = '1/1/1753' FROM [EDW_Audit].[dbo].[Delta_Settings] AS SETTINGS WHERE SETTING_NAME= @SETTING_NAME_PHONE AND SETTING_MODULE = @SETTING_MODULE;
-- =============================================

SET NOCOUNT ON;
DECLARE @SETTING_NAME_NAME			NVARCHAR(50) = 'SYNC_SUB_ACCOUNT_NAME_CURR_VW';
DECLARE @SETTING_NAME_EXTN_NADRNA	NVARCHAR(50) = 'SYNC_SUB_ACCOUNT_EXT_NADRNA_CURR_VW';
DECLARE @SETTING_NAME_NALK			NVARCHAR(50) = 'SYNC_SUB_ACCOUNT_NALK_CURR_VW';
DECLARE	@SETTING_NAME_ADDR			NVARCHAR(50) = 'SYNC_SUB_ACCOUNT_ADDR_CURR_VW';
DECLARE @SETTING_NAME_PHONE			NVARCHAR(50) = 'SYNC_SUB_ACCOUNT_PHONE';
DECLARE @SETTING_MODULE				NVARCHAR(50) = 'SF_SYNC';
DECLARE @START_VAL					INT;
DECLARE @START_VAL_ADDR				INT;
DECLARE @START_VAL_PHONE			DATETIME2;
DECLARE @END_VAL_PHONE				DATETIME2;
DECLARE @END_VAL_NAME				INT;
DECLARE @END_VAL_NADRNA				INT;
DECLARE @END_VAL_NALK				INT;
DECLARE @END_VAL_ADDR				INT;
DECLARE @Account_PersonAccount_RecordTypeID varchar(20)
DECLARE @Account_Institution_RecordTypeID varchar(20)
DECLARE @ROWS						INT;		--Used for logging row counts
DECLARE @LOGID_START				INT;		--Used for the first log id
DECLARE	@LOGID						INT;		--Used for intermediate log ids
BEGIN TRY

IF NOT EXISTS(SELECT 1 FROM EDW_Audit.[dbo].[Delta_Settings] WHERE SETTING_NAME = @SETTING_NAME_PHONE AND SETTING_MODULE = @SETTING_MODULE)
	BEGIN;
	INSERT EDW_Audit.[dbo].[Delta_Settings] (Setting_Value, Setting_Module, Setting_Name) VALUES ('1/1/1753', @SETTING_MODULE, @SETTING_NAME_PHONE);
	END;

--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'SubAccount:Start/End Indicator');
SELECT @LOGID_START = @@IDENTITY;

SELECT @Account_PersonAccount_RecordTypeID	= (SELECT [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE NAME = 'Person Account' AND SOBJECTTYPE = 'Account')
SELECT @Account_Institution_RecordTypeID	= (SELECT [ID] FROM [EDW_Outbound].[salesforce].[LOOKUP_RECORDTYPE] WHERE NAME = 'Institution' AND SOBJECTTYPE = 'Account')
SELECT @START_VAL_PHONE	= CAST([SETTING_VALUE] AS DATETIME2) FROM EDW_Audit.[dbo].[Delta_Settings] WHERE [Setting_Name]= @SETTING_NAME_PHONE AND [Setting_Module]= @SETTING_MODULE;
SELECT @END_VAL_PHONE	= MAX(COALESCE([MODIFIED_DT], [CREATED_DT],'1/1/1753')) FROM [salesforce].[PhoneNumber];
/* START: Create temporary tables.*/
IF (1=1)
	BEGIN;
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'SubAccount:Create temp tables');
	SELECT @LOGID = @@IDENTITY;
	--Name Ids - this table will contain all changed business keys for all dependencies
	IF OBJECT_ID (N'work.tmp_Sub_Account_Bus_Keys', N'U') IS NOT NULL
		BEGIN;
		TRUNCATE TABLE [work].[tmp_Sub_Account_Bus_Keys];
		END;
	ELSE
		BEGIN;
		CREATE	TABLE [work].[tmp_Sub_Account_Bus_Keys]
			([Name_ID]					INT NOT NULL PRIMARY KEY CLUSTERED);
		END;

	IF OBJECT_ID (N'work.tmp_Sub_Account_EmailAddressIds_NALK', N'U') IS NOT NULL
	    BEGIN;
		   TRUNCATE TABLE [work].[tmp_Sub_Account_EmailAddressIds_NALK];
	    END;
    ELSE
	    BEGIN;
		   CREATE TABLE [work].[tmp_Sub_Account_EmailAddressIds_NALK]
		    ( NAME_ID int NOT NULL PRIMARY KEY CLUSTERED
		    , ADDRESS_ID int NULL
		    , EFFECTIVE_DATE datetime2(7) NULL
		    , EMAIL nvarchar(105) NULL);
        END;
	IF OBJECT_ID('work.stage_sf_Subaccount_name_id')  IS NULL 
		BEGIN;
		CREATE TABLE [work].[stage_sf_Subaccount_name_id](
			[SubAccount_Name_ID] [int] NOT NULL,
			[ParentAccount_Name_ID] [INT] NOT NULL,
		PRIMARY KEY CLUSTERED ( [SubAccount_Name_ID] ASC) ON [PRIMARY]);
		END;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE Row_ID = @LOGID;
	END;
/* END: Create temporary tables.*/

/* START: Refresh name IDs for specific Relate Code and Name Format Code.*/
IF (1=1)
	BEGIN;
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'SubAccount:Refresh bus keys');
	SELECT @LOGID = @@IDENTITY;
	--Refresh NameIDs
	
	--This statement will insert new NAME_IDs from the source subselect to target table
	--Popualte the temp table
	;WITH AccountParents AS
	(
		SELECT [NAMERECORD_NAMEID], [NAMERECORD_SSN] AS SSN, 
			CASE [RECORDTYPEID] WHEN @Account_PersonAccount_RecordTypeID THEN 'I' ELSE  'B' END AS NameFormat
		--FROM [EDW_Outbound].[salesforce].[LOOKUP_ACCOUNT]
		FROM [salesforce].[mapping_Account]
		WHERE [NAMERECORD_SSN]<>'000000000'
			AND TRIM([NAMERECORD_SSN]) <>'0'
			AND [NAMERECORD_SSN] IS NOT NULL
			AND [NAMERECORD_NAMEID] IS NOT NULL
			AND [RECORDTYPEID] IN ( @Account_PersonAccount_RecordTypeID, @Account_Institution_RecordTypeID)
		
	),
	SubAccountNameIDs AS
	(
		SELECT DISTINCT NAME_CURR.NAME_ID, NAME_CURR.[BUSINESS_TAX_CODE], NAME_CURR.NAME_FORMAT_CODE
		FROM [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] NAME_CURR
		JOIN AccountParents
			ON COALESCE(AccountParents.SSN,'') = COALESCE(NAME_CURR.[BUSINESS_TAX_CODE],'')
		INNER JOIN [EDW_DataLake].[lifepro_v].[RELA_Curr_Vw] AS RELA_CURR
			ON RELA_CURR.NAME_ID = NAME_CURR.NAME_ID
		WHERE NOT EXISTS(SELECT 1 FROM accountparents ap WHERE ap.[NAMERECORD_NAMEID] =  NAME_CURR.NAME_ID )
			AND RELA_CURR.RELATE_CODE IN ('PO', 'O1')
	)
	, DEDUP AS 
		(SELECT ROW_NUMBER() OVER (PARTITION BY SubAccountNameIDs.NAME_ID ORDER BY AccountParents.[NAMERECORD_NAMEID] DESC) AS RN
				, AccountParents.[NAMERECORD_NAMEID] AS PARENTACCOUNT_NAME_ID,
				SubAccountNameIDs.NAME_ID AS SUBACCOUNT_NAME_ID
		   FROM AccountParents
		   JOIN SubAccountNameIDs
				ON AccountParents.SSN = SubAccountNameIDs.[BUSINESS_TAX_CODE]
				AND AccountParents.NameFormat = SubAccountNameIDs.NAME_FORMAT_CODE)
	INSERT [work].[stage_sf_Subaccount_name_id] 
		([SubAccount_Name_ID]
		, [ParentAccount_Name_ID])
	SELECT DEDUP.SUBACCOUNT_NAME_ID
		, DEDUP.PARENTACCOUNT_NAME_ID
	FROM DEDUP
	WHERE RN = 1 
	AND		NOT EXISTS (SELECT 1 FROM [work].[stage_sf_Subaccount_name_id]  AS DEST WHERE DEST.[SubAccount_Name_ID] = DEDUP.SUBACCOUNT_NAME_ID);
	
	SELECT @ROWS = @@ROWCOUNT;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;
		
	END;
/* END: Refresh name IDs for specific Relate Code and Name Format Code.*/

/* START: Populate temporary tables.*/
IF (1=1)
	BEGIN;
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'SubAccount:Identify changed records');
	SELECT @LOGID = @@IDENTITY;
	--Pick all new or changed Name Ids from NAME_Curr_Vw
	SELECT @START_VAL	= CAST(SETTING_VALUE AS INT) FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_NAME AND Setting_Module = @SETTING_MODULE;
	SELECT @END_VAL_NAME	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw];
	
	IF @START_VAL < @END_VAL_NAME
		BEGIN;
		INSERT [work].[tmp_Sub_Account_Bus_Keys]
			([Name_ID])
		SELECT 
			DISTINCT NAME_CURR.[NAME_ID]								AS [Name_ID]
		FROM	 [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw]	AS NAME_CURR
		WHERE	EXISTS(SELECT 1 FROM [work].[stage_sf_Subaccount_name_id] AS SUBACCOUNT_NAME_ID WHERE SUBACCOUNT_NAME_ID.SubAccount_Name_ID = NAME_CURR.NAME_ID)	-- Only Name IDs in scope
			AND NAME_CURR.Row_ID > @START_VAL																							-- Only changed records
			AND NAME_CURR.Row_ID <= @END_VAL_NAME;
		END;
	--Pick all records that had a phone number change
	IF @START_VAL_PHONE < @END_VAL_PHONE
		BEGIN;
		INSERT [work].[tmp_Sub_Account_Bus_Keys]
			([Name_ID])
		SELECT 
			SRC.[NameID]
		FROM [salesforce].[PhoneNumber] AS SRC
		WHERE	COALESCE(SRC.[MODIFIED_DT], SRC.[CREATED_DT])>@START_VAL_PHONE
			AND COALESCE(SRC.[MODIFIED_DT], SRC.[CREATED_DT]) <= @END_VAL_PHONE
			AND NOT EXISTS (SELECT 1 FROM [work].[tmp_Sub_Account_Bus_Keys] AS DEST WHERE DEST.[Name_ID] = SRC.[NameID]);
		END;
	--Pick all new or changed Name Ids from EXTN_NADRNA_Curr_Vw
	SELECT @START_VAL		= CAST(SETTING_VALUE as INT)	FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_EXTN_NADRNA AND Setting_Module = @SETTING_MODULE;
	SELECT @END_VAL_NADRNA	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Curr_Vw];
	IF @START_VAL < @END_VAL_NADRNA
		BEGIN;
		WITH LAST_NANDRA (RN, NAME_ID, ROW_ID)
			AS
			(SELECT ROW_NUMBER() OVER (PARTITION BY SRC.NAME_ID ORDER BY SRC.[DATE] DESC, SRC.[TIME] DESC)	AS RN --THIS WILL GIVE US ORDER OF THE DATE AND TIME RECORD FOR EACH NAME_ID
				, SRC.NAME_ID
				, SRC.ROW_ID
			FROM [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Curr_Vw] AS SRC
			WHERE EXISTS (SELECT 1 FROM [work].[stage_sf_Subaccount_name_id] AS SUBACCOUNT_NAME_ID WHERE SUBACCOUNT_NAME_ID.SubAccount_Name_ID = SRC.NAME_ID) --Only records in scope
			)
		INSERT	 [work].[tmp_Sub_Account_Bus_Keys]
				([Name_ID])
		SELECT  DISTINCT LAST_NANDRA.NAME_ID
		FROM LAST_NANDRA
		WHERE	RN = 1											--Only last available record for last Name ID
			AND NOT EXISTS(SELECT 1 FROM  [work].[tmp_Sub_Account_Bus_Keys] AS DEST WHERE DEST.[Name_id] = LAST_NANDRA.[Name_ID])	--Exclude name IDs that are already in the table
			AND (LAST_NANDRA.[Row_ID] > @START_VAL
				AND LAST_NANDRA.[Row_ID] <=@END_VAL_NADRNA)		--Only changed or new records
		END;
	--Pick all new or changed Email addresses
	SELECT @START_VAL		= CAST(SETTING_VALUE as INT)	FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_NALK AND Setting_Module = @SETTING_MODULE;
	SELECT @START_VAL_ADDR	= CAST(SETTING_VALUE as INT)	FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE Setting_Name = @SETTING_NAME_ADDR AND Setting_Module = @SETTING_MODULE;
	SELECT @END_VAL_NALK	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw];
	SELECT @END_VAL_ADDR	= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw];
	
	IF @START_VAL<@END_VAL_NALK
		BEGIN;
		INSERT	[work].[tmp_Sub_Account_Bus_Keys]
				([Name_ID])
		SELECT	DISTINCT NALK.[Name_id]
		FROM	[EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] AS NALK 
				LEFT OUTER JOIN [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw] AS ADDR ON
					ADDR.[ADDRESS_ID] = NALK.ADDRESS_ID
		WHERE	NALK.[Address_type] = 'E'
				AND NOT EXISTS(SELECT 1 FROM [work].[tmp_Sub_Account_Bus_Keys] AS DEST WHERE DEST.[NAME_ID] = NALK.[NAME_ID])
				AND EXISTS(SELECT 1 FROM [work].[stage_sf_Subaccount_name_id] AS SUBACCOUNT_NAME_ID WHERE SUBACCOUNT_NAME_ID.SubAccount_Name_ID = NALK.NAME_ID)
				AND 
					((NALK.[Row_id] > @START_VAL
					AND NALK.[Row_id] <=@END_VAL_NALK)
					OR
					(ADDR.[Row_id] > @START_VAL_ADDR
					AND ADDR.[Row_ID] <= @END_VAL_ADDR))
		GROUP BY NALK.[Name_id];
		
		END;
	SELECT @ROWS = SUM(st.row_count) FROM    sys.dm_db_partition_stats st WHERE  object_name(object_id) = 'tmp_Sub_Account_Bus_Keys'  AND OBJECT_SCHEMA_NAME(OBJECT_ID) = 'work' 	AND (index_id < 2);
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;

	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'SubAccount:Identify changed emails');
	SELECT @LOGID = @@IDENTITY;
    WITH EmailList AS
	(SELECT ROW_NUMBER() OVER (PARTITION BY NALK.NAME_ID ORDER BY COALESCE(NALK.EFFECTIVE_DATE, '1/1/1753') DESC) AS RN
		, NALK.NAME_ID
		, NALK.ADDRESS_ID
		, NALK.EFFECTIVE_DATE
		, LEFT(RTRIM(ADDR.ADDR_LINE_1) + RTRIM(ADDR.ADDR_LINE_2) + RTRIM(ADDR.ADDR_LINE_3) + ';', CHARINDEX(';', RTRIM(ADDR.ADDR_LINE_1) + RTRIM(ADDR.ADDR_LINE_2) + RTRIM(ADDR.ADDR_LINE_3) + ';') - 1) AS EMAIL
    FROM [EDW_DataLake].[lifepro_v].[NALK_Curr_Vw] NALK 
    INNER JOIN [EDW_DataLake].[lifepro_v].[ADDR_Curr_Vw] AS ADDR ON 
              NALK.ADDRESS_ID = ADDR.ADDRESS_ID 
    WHERE ADDRESS_TYPE = 'E'
	)
	INSERT INTO [work].[tmp_Sub_Account_EmailAddressIds_NALK]
		   ( NAME_ID
		   , ADDRESS_ID
		   , EFFECTIVE_DATE
		   , EMAIL)

    SELECT  NAME_ID
		  , ADDRESS_ID	 
		  , EFFECTIVE_DATE				
		  , EMAIL	
    FROM EmailList
    WHERE RN = 1;
	SELECT @ROWS = @@ROWCOUNT;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;
	END;
/* END: Populate temporary tables.*/

/* START: Populate staging table.*/
IF (1=1)
	BEGIN;
	--If previous execution was successful, this table will be empty.
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'SubAccount:Update staging');
	SELECT @LOGID = @@IDENTITY;
	UPDATE	DEST
	SET Parent_Account__c = LOOKUP_ACCOUNT.[SALESFORCE_ID],
		Parent_Account_Name_Id__c = WORK_STAGE_SUBACCOUNT.ParentAccount_Name_ID,
		Name_Id__c =  NAME_VW.Name_ID,
		[LifePro_Last_Modified_DateTime__c]    = NAME_VW.DXTimestamp,
		[Name] = IIF(NAME_VW.NAME_FORMAT_CODE = 'I', TRIM(NAME_VW.INDIVIDUAL_FIRST) + IIF(LEN(TRIM(NAME_VW.INDIVIDUAL_MIDDLE)) > 0, ' ', '') + TRIM(NAME_VW.INDIVIDUAL_MIDDLE) + IIF(LEN(TRIM(NAME_VW.INDIVIDUAL_LAST)) > 0, ' ', '') + TRIM(NAME_VW.INDIVIDUAL_LAST), NAME_VW.BUSINESS_NAME),
		First_Name__c = NAME_VW.INDIVIDUAL_FIRST,
		Last_Name__c = NAME_VW.INDIVIDUAL_LAST,
		Middle_Name__c =  NAME_VW.INDIVIDUAL_MIDDLE,
		Account_Phone__c = phone.PhoneNumber,
		--Email__c = ISNULL(EmailAddresses.Email, ''),
		Email__c = EmailAddresses.Email,
		Is_Deceased__c = IIF(NAME_VW.DECEASED_FLAG = 'Y', 1, 0),
		Client_Passcode__c = ISNULL(AddressExtensionMaxDateMaxTimeByNameID.Client_Passcode__c, ''),
		Paperless_Annual_Statement__c = ISNULL(AddressExtensionMaxDateMaxTimeByNameID.Paperless_Annual_Statement__c, 0),
		Paperless_11_Month_Summary__c =  ISNULL(AddressExtensionMaxDateMaxTimeByNameID.Paperless_11_Month_Summary__c, 0),
		Social_Security_Number__c = STUFF(STUFF(RIGHT('000000000' + CONVERT(varchar(11), NAME_VW.SOC_SEC_NUMBER), 9), 4, 0, '-'), 7, 0, '-'),
		Gender__c = NAME_VW.SEX_CODE,
		Date_of_Birth__c = NAME_VW.DATE_OF_BIRTH,
		Tax_Status__c = NAME_VW.TAX_STATUS,
		Tax_Witholding_Option__c = NAME_VW.TAX_WITHHOLDING_FLAG,
		[Modified_dt] = CURRENT_TIMESTAMP,
		LifePro_NameID = NAME_VW.Name_ID
	FROM	EDW_Outbound.salesforce.Sub_Account as DEST
			JOIN [work].[tmp_Sub_Account_Bus_Keys] AS TMP ON DEST.LifePro_NameID = TMP.Name_ID
			INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NAME_VW ON
				NAME_VW.[Name_ID] = TMP.[Name_ID]
			INNER JOIN [work].[stage_sf_Subaccount_name_id] WORK_STAGE_SUBACCOUNT ON 
				WORK_STAGE_SUBACCOUNT.SubAccount_Name_ID = TMP.Name_ID
			join [salesforce].[mapping_Account] AS LOOKUP_ACCOUNT ON 
				LOOKUP_ACCOUNT.[NAMERECORD_NAMEID] = WORK_STAGE_SUBACCOUNT.ParentAccount_Name_ID 
				AND (
					(LOOKUP_ACCOUNT.RECORDTYPEID = @Account_PersonAccount_RecordTypeID and NAME_VW.NAME_FORMAT_CODE = 'I') 
					OR (LOOKUP_ACCOUNT.RECORDTYPEID = @Account_Institution_RecordTypeID and NAME_VW.NAME_FORMAT_CODE = 'B')
					)
			LEFT JOIN [EDW_Outbound].[work].[tmp_Sub_Account_EmailAddressIds_NALK] EmailAddresses ON
				EmailAddresses.NAME_ID = TMP.[Name_ID]
			LEFT JOIN
				(
				--Address Extension with only the Max Date and Time by NAME_ID
				Select NAME_ID, TRIM(NADR_PASSWORD) + TRIM(NADR_PASSWORD2) AS Client_Passcode__c, IIF(PPRLESS_ANN_STMT = 'Y', 1, 0) AS Paperless_Annual_Statement__c, IIF(PPRLESS_11_MONTH = 'Y', 1, 0) AS Paperless_11_Month_Summary__c from 
					(	
						--Address Extension with row number partitioned by Name_ID and sorted by Date and Time
						select NAME_ID, NADR_PASSWORD, NADR_PASSWORD2, PPRLESS_ANN_STMT, PPRLESS_11_MONTH, 
						row_number() over (partition by NAME_ID order by [DATE] DESC, [TIME] DESC) as row_num
						from [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Curr_Vw]
					) as AddressExtensionWithRowNumber
				where row_num = 1
			) as AddressExtensionMaxDateMaxTimeByNameID ON AddressExtensionMaxDateMaxTimeByNameID.NAME_ID = TMP.[Name_ID]
			LEFT JOIN [EDW_Outbound].[salesforce].[PhoneNumber] phone
				ON TMP.Name_ID = phone.NameID;
	SELECT @ROWS = @@ROWCOUNT;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;
		
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'SubAccount:Insert staging');
	SELECT @LOGID = @@IDENTITY;
	--Insert all delta records into the staging table	
	INSERT INTO EDW_Outbound.salesforce.Sub_Account 
		(Parent_Account__c,
		Parent_Account_Name_Id__c, 
		Name_Id__c, 
		[LifePro_Last_Modified_DateTime__c],
		[Name],
		First_Name__c, 
		Last_Name__c, 
		Middle_Name__c, 
		Account_Phone__c,
		Email__c, 
		Is_Deceased__c, 
		Client_Passcode__c, 
		Paperless_Annual_Statement__c, 
		Paperless_11_Month_Summary__c, 
		Social_Security_Number__c, 
		Gender__c,
		Date_of_Birth__c, 
		Tax_Status__c, 
		Tax_Witholding_Option__c,
		Created_dt,
		LifePro_NameID)
	SELECT	
		LOOKUP_ACCOUNT.[SALESFORCE_ID],
		WORK_STAGE_SUBACCOUNT.ParentAccount_Name_ID AS Parent_Account_Name_Id__c,  
		NAME_VW.Name_ID AS Name_Id__c, 
		NAME_VW.DXTimestamp AS LifePro_Last_Modified_DateTime__c,
		IIF(NAME_VW.NAME_FORMAT_CODE = 'I', TRIM(NAME_VW.INDIVIDUAL_FIRST) + IIF(LEN(TRIM(NAME_VW.INDIVIDUAL_MIDDLE)) > 0, ' ', '') + TRIM(NAME_VW.INDIVIDUAL_MIDDLE) + IIF(LEN(TRIM(NAME_VW.INDIVIDUAL_LAST)) > 0, ' ', '') + TRIM(NAME_VW.INDIVIDUAL_LAST), NAME_VW.BUSINESS_NAME),
		NAME_VW.INDIVIDUAL_FIRST AS First_Name__c, 
		NAME_VW.INDIVIDUAL_LAST AS Last_Name__c, 
		NAME_VW.INDIVIDUAL_MIDDLE AS Middle_Name__c, 
		phone.PhoneNumber,
		--ISNULL(EmailAddresses.Email, '') AS Email__c,
		EmailAddresses.Email AS Email__c,
		IIF(NAME_VW.DECEASED_FLAG = 'Y', 1, 0) AS Is_Deceased__c,
		ISNULL(AddressExtensionMaxDateMaxTimeByNameID.Client_Passcode__c, '') AS Client_Passcode__c, 
		ISNULL(AddressExtensionMaxDateMaxTimeByNameID.Paperless_Annual_Statement__c, 0) AS Paperless_Annual_Statement__c, 
		ISNULL(AddressExtensionMaxDateMaxTimeByNameID.Paperless_11_Month_Summary__c, 0) AS Paperless_11_Month_Summary__c,
		STUFF(STUFF(RIGHT('000000000' + CONVERT(VARCHAR(11), NAME_VW.SOC_SEC_NUMBER), 9), 4, 0, '-'), 7, 0, '-') AS Social_Security_Number__c,
		NAME_VW.SEX_CODE AS Gender__c, 
		NAME_VW.DATE_OF_BIRTH AS Date_of_Birth__c, 
		NAME_VW.TAX_STATUS AS Tax_Status__c, 
		NAME_VW.TAX_WITHHOLDING_FLAG AS Tax_Witholding_Option__c,
		[Created_dt] = CURRENT_TIMESTAMP,
		NAME_VW.Name_ID AS LifePro_NameID
	FROM	[work].[tmp_Sub_Account_Bus_Keys] AS TMP 
			INNER JOIN [EDW_DataLake].[lifepro_v].[NAME_Curr_Vw] AS NAME_VW ON
				NAME_VW.[Name_ID] = TMP.[Name_ID] 
			INNER JOIN [work].[stage_sf_Subaccount_name_id] WORK_STAGE_SUBACCOUNT ON WORK_STAGE_SUBACCOUNT.SubAccount_Name_ID = TMP.Name_ID
			JOIN [salesforce].[mapping_Account] AS [LOOKUP_ACCOUNT] ON 
				LOOKUP_ACCOUNT.[NAMERECORD_NAMEID] = WORK_STAGE_SUBACCOUNT.ParentAccount_Name_ID 
				AND ((LOOKUP_ACCOUNT.RECORDTYPEID = @Account_PersonAccount_RecordTypeID 
				AND NAME_VW.NAME_FORMAT_CODE = 'I') 
				OR 
				(LOOKUP_ACCOUNT.RECORDTYPEID = @Account_Institution_RecordTypeID 
				AND NAME_VW.NAME_FORMAT_CODE = 'B'))
			LEFT JOIN [EDW_Outbound].[work].[tmp_Sub_Account_EmailAddressIds_NALK] EmailAddresses 
			       ON EmailAddresses.NAME_ID = TMP.[Name_ID]
			LEFT JOIN
			(
				--Address Extension with only the Max Date and Time by NAME_ID
				SELECT NAME_ID, TRIM(NADR_PASSWORD) + TRIM(NADR_PASSWORD2) AS Client_Passcode__c, IIF(PPRLESS_ANN_STMT = 'Y', 1, 0) AS Paperless_Annual_Statement__c, IIF(PPRLESS_11_MONTH = 'Y', 1, 0) AS Paperless_11_Month_Summary__c FROM 
					(	
						--Address Extension with row number partitioned by Name_ID and sorted by Date and Time
						SELECT NAME_ID, NADR_PASSWORD, NADR_PASSWORD2, PPRLESS_ANN_STMT, PPRLESS_11_MONTH, 
						ROW_NUMBER() OVER (PARTITION BY NAME_ID ORDER BY [DATE] DESC, [TIME] DESC) AS row_num
						FROM [EDW_DataLake].[lifepro_v].[EXTN_NADRNA_Curr_Vw]
					) AS AddressExtensionWithRowNumber
				WHERE row_num = 1
			) AS AddressExtensionMaxDateMaxTimeByNameID ON AddressExtensionMaxDateMaxTimeByNameID.NAME_ID = TMP.[Name_ID]
			LEFT JOIN [EDW_Outbound].[salesforce].[PhoneNumber] phone
				ON TMP.Name_ID = phone.NameID
		WHERE	NOT EXISTS(SELECT 1 FROM [salesforce].[Sub_Account] AS DEST WHERE DEST.[Name_Id__c] = TMP.[Name_ID]);
		SELECT @ROWS = @@ROWCOUNT;
		UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;
	END;
/* END: Populate staging table.*/
/* START: Update delta settings.*/
IF (1=1)
	BEGIN;
	UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_NAME AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_NAME AND Setting_Module = @SETTING_MODULE;
	UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_NADRNA AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_EXTN_NADRNA AND Setting_Module = @SETTING_MODULE;
	UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_NALK AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_NALK AND Setting_Module = @SETTING_MODULE;
	UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_ADDR AS NVARCHAR(20)) WHERE Setting_Name = @SETTING_NAME_ADDR AND Setting_Module = @SETTING_MODULE;
	UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value = CAST(@END_VAL_PHONE AS NVARCHAR(100)) WHERE Setting_Name = @SETTING_NAME_PHONE AND Setting_Module = @SETTING_MODULE;
	END;

/*START: Check for invalid dates - AVO 8/31*/
IF (1=1)
	BEGIN;
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'SubAccount:Fix invalid birth dates');
	SELECT @LOGID = @@IDENTITY;
	;WITH INVAID_DATES AS
		(SELECT Date_of_Birth__c
			, [Reject_Flag]
			, [Reject_Dt]
			, [Reject_Reason]
		FROM	EDW_Outbound.salesforce.Sub_Account
		WHERE	Date_of_Birth__c > '12/31/4000'
			OR Date_of_Birth__c < '1/1/1753')
	UPDATE INVAID_DATES
	SET	Date_of_Birth__c	= NULL
		, [Reject_Flag]		= 1
		, [Reject_Dt]		= CURRENT_TIMESTAMP
		, [Reject_Reason]	= 'Invalid birth date';
	SELECT @ROWS = @@ROWCOUNT;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;
	END;
/*END: Check for invalid dates*/
/*START: Check for invalid emails - AVO 8/31*/
IF (1=1)
	BEGIN;
	INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'SubAccount:Fix invalid emails');
	SELECT @LOGID = @@IDENTITY;
	 ;WITH INVALID_EMAILS AS
		(SELECT [Email__c] 
			, [Reject_Flag]
			, [Reject_Dt]
			, [Reject_Reason]
		FROM	[salesforce].[Sub_Account]
		WHERE	[Email__c] = '' 
			OR [Email__c] LIKE '% %' 
            OR [Email__c] LIKE ('%["(),:;<>\]%') 
            OR SUBSTRING([Email__c] ,CHARINDEX('@',[Email__c]),LEN([Email__c])) LIKE ('%[!#$%&*+/=?^`_{|]%') 
            OR (LEFT([Email__c],1) LIKE ('[-_.+]') OR RIGHT([Email__c],1) LIKE ('[-_.+]'))                                                                               
			OR ([Email__c] LIKE '%[%' OR [Email__c] LIKE '%]%') 
            OR [Email__c] LIKE '%@%@%' 
            OR [Email__c] NOT LIKE '_%@_%._%' 
			OR [Email__c] LIKE '%..%'
			OR [Email__c] LIKE '%-.%'
			OR [Email__c] LIKE '%.@%' 
			OR [Email__c] LIKE '%@.%' 
			OR [Email__c] LIKE '%@%.-%' 
			OR [Email__c] LIKE '%@%-.%' 
			OR [Email__c] LIKE '%@-%' 
			OR CHARINDEX(CHAR(39),[Email__c] )=1
			OR CHARINDEX(' ',LTRIM(RTRIM([Email__c]))) > 0)
	UPDATE INVALID_EMAILS SET [Email__c] = NULL
		, [Reject_Flag]		= 1
		, [Reject_Dt]		= CURRENT_TIMESTAMP
		, [Reject_Reason]	= 'Invalid email format';
	SELECT @ROWS = @@ROWCOUNT;
	UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP, [Row_Count] = @ROWS WHERE Row_ID = @LOGID;
	END;
 /*END: Check for invalid emails*/

UPDATE [EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE Row_ID = @LOGID_START;   
END TRY
BEGIN CATCH
           
DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();

--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'SubAccount:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;

RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;
GO

/****** Object:  StoredProcedure [salesforce].[usp_Truncate_Agent_Tax_Document]    Script Date: 5/17/2022 2:04:54 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:          Darin Baarda
-- Create date:		08/12/2021
-- Description:     truncate the policy documents
-- =============================================
-- Last Run Date : 08/12/2021
-- Last Run Exec : exec salesforce.usp_Truncate_Agent_Tax_Document 
-- Last Run Stat : 
-- =============================================
-- Maintenance 
-- =============================================
-- CX-2483     08/10/2021 Darin Baarda 
-- New Stored Procedure
-- =============================================

CREATE PROCEDURE [salesforce].[usp_Truncate_Agent_Tax_Document]


AS
BEGIN
SET NOCOUNT ON;

	BEGIN TRY


		/* code starts here for the procedure */

		TRUNCATE TABLE [EDW_Outbound].[salesforce].[Agent_Tax_Document]

		/* code ends here for the procedure */

	END TRY
	BEGIN CATCH
           
	DECLARE @ERROR_MSG          NVARCHAR(2000);
	DECLARE @ERROR_SEVERITY     INT;
	DECLARE @ERROR_STATE        INT;
 
	SET @ERROR_MSG              = ERROR_MESSAGE();
	SET @ERROR_SEVERITY         = ERROR_SEVERITY();
	SET @ERROR_STATE            = ERROR_STATE();


	RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

	END CATCH;

END
GO

/****** Object:  StoredProcedure [salesforce].[usp_Upsert_Upline_Detail]    Script Date: 5/17/2022 2:04:54 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE     PROCEDURE  [salesforce].[usp_Upsert_Upline_Detail]
/*
select object_name(process_id),*, DATEDIFF(MINUTE, start_dt, stop_dt) from edw_audit..process_log 
WHERE object_name(process_id) ='usp_Upsert_Upline_Detail'
AND start_dt >=CAST(CURRENT_TIMESTAMP AS DATE);
*/ 	
AS
BEGIN;
/* ===================================================================================

  Author: 			Anastasia Vogelaar
  Creation Date: 	05/05/2022
  Version: 			0.1.0
  Description: 	    Upsert deltas into Upline_Detail synct table	
					Bus Key: COMPANY_CODE - AGENT_NUMBER - MARKETING_CODE - AGENT_LEVEL - STOP_DATE
  Exceptions: 		Product Type Commissions - replace empty string with 'N'
	
 -- Change Log: 		
  Modified By:		
  Modified Date:		
  Version:			
  Description:	
  --Enter reset code here for full refreshes	
  UPDATE EDW_AUDIT.DBO.DELTA_SETTINGS SET SETTING_VALUE = 0 WHERE SETTING_NAME IN ('SYNC_UPLINEDETAIL_HIER', 'SYNC_UPLINEDETAIL_HIERHN') AND SETTING_MODULE = 'SF_SYNC';

-- =================================================================================== 
*/

SET NOCOUNT ON;
BEGIN TRY

DECLARE @SETTING_HIER			NVARCHAR(50)	= 'SYNC_UPLINEDETAIL_HIER';
DECLARE @SETTING_HIERHN			NVARCHAR(50)	= 'SYNC_UPLINEDETAIL_HIERHN';
DECLARE @SETTING_MODULE			NVARCHAR(50)	= 'SF_SYNC';
DECLARE @STARTVAL_HIER			BIGINT;
DECLARE @ENDVAL_HIER			BIGINT;
DECLARE @STARTVAL_HIERHN		BIGINT;
DECLARE @ENDVAL_HIERHN			BIGINT;
DECLARE @ROWS					INT;		--Used for logging row counts
DECLARE @LOGID_START			INT;		--Used for the first log id
DECLARE	@LOGID					INT;		--Used for intermediate log ids

--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'UplineDetail:Stat/End Indicator');
SELECT @LOGID_START = @@IDENTITY;
--Make sure the settings exist
IF NOT EXISTS(SELECT 1 FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE [Setting_Name] = @SETTING_HIER AND [Setting_Module]=@SETTING_MODULE)
	BEGIN;
	INSERT [EDW_Audit].[dbo].[Delta_Settings] ([Setting_Name], [Setting_Module], [Setting_Value]) VALUES (@SETTING_HIER, @SETTING_MODULE,'0');
	END;
IF NOT EXISTS(SELECT 1 FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE [Setting_Name] = @SETTING_HIERHN AND [Setting_Module]=@SETTING_MODULE)
	BEGIN;
	INSERT [EDW_Audit].[dbo].[Delta_Settings] ([Setting_Name], [Setting_Module], [Setting_Value]) VALUES (@SETTING_HIERHN, @SETTING_MODULE,'0');
	END;

--Do not do anything if there are pending records from Salesforce
IF NOT EXISTS(SELECT 1 FROM [salesforce].[mapping_Upline_Detail] WHERE [HIER_AGENTNUMBER] IS NULL)
	BEGIN;
	--Retrieve delta variables
	SELECT @STARTVAL_HIER = [Setting_Value] FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE [Setting_Name] = @SETTING_HIER AND [Setting_Module] = @SETTING_MODULE;
	SELECT @STARTVAL_HIERHN = [Setting_Value] FROM [EDW_Audit].[dbo].[Delta_Settings] WHERE [Setting_Name] = @SETTING_HIERHN AND [Setting_Module] = @SETTING_MODULE;
	SELECT @ENDVAL_HIER= MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[HIER_BusKey_Vw];
	SELECT @ENDVAL_HIERHN = MAX([Row_ID]) FROM [EDW_DataLake].[lifepro_v].[EXTN_HIERHN_Vw];

	IF @STARTVAL_HIER<@ENDVAL_HIER OR @STARTVAL_HIERHN<@ENDVAL_HIERHN
		BEGIN;
		/* START: Create temporary tables.*/
		IF (1=1)
			BEGIN;
			--Broker Dealer data
			DROP TABLE IF EXISTS [work].[tmp_UplineDetail_BD];
			CREATE	TABLE [work].[tmp_UplineDetail_BD]
				( [Agent_Number] VARCHAR(12) NOT NULL
				, [Company_Code] VARCHAR(2) NOT NULL
				, [Stop_Dt] DATE NULL
				, [Start_Dt] DATE NOT NULL
				, [BD_Agent_Percent__c] DECIMAL(5,2) NULL
				, [BD_Commission_Level__c] VARCHAR(2) NULL
				, [BD_NMO_Percent__c] DECIMAL(5,2) null
				, [BD_Product_Type_Commissions__c] VARCHAR(1) NOT NULL
				, [BD_Upline_Percent__c] DECIMAL(10,2) NULL
				, [Broker_Dealer_Agent_Number__c] VARCHAR(12) NULL
				, [EXTNHN_BENEFITSEQ] SMALLINT NULL
				, [EXTNHN_FILEEXTN] VARCHAR(4) NULL
				, [EXTNHN_SUBTYPERECORD] VARCHAR(2) NULL
				, [EXTNHN_DATE] INT NULL
				, [EXTNHN_TIME] INT NULL
				, [EXTNHN_CODERID] VARCHAR(4) NULL
				, [EXTNHN_SEQUENCE] SMALLINT NULL
				, [EXTNHN_VERSIONID] BIGINT NOT NULL);
			CREATE UNIQUE NONCLUSTERED INDEX UQ_tmpUplineDetailBD_AgentNumberCompanyCodeStopDt ON [work].[tmp_UplineDetail_BD] ([Agent_Number], [Company_Code], [Stop_Dt], [Start_Dt]);
			END;
		/* END: Create temporary tables.*/

		/* START: Populate temporary tables.*/
		IF (1=1)
			BEGIN;
			INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'UplineDetail:Unpivot BD records - changed extension');
			SELECT @LOGID = @@IDENTITY;

			--Two separate insert statements, since "OR" introduces performance degradation
			INSERT [work].[tmp_UplineDetail_BD]
				([Agent_Number]
				, [Company_Code]
				, [Stop_Dt]
				, [Start_Dt]
				, [BD_Agent_Percent__c]
				, [BD_Commission_Level__c]
				, [BD_NMO_Percent__c]
				, [BD_Product_Type_Commissions__c]
				, [BD_Upline_Percent__c]
				, [Broker_Dealer_Agent_Number__c]
				, [EXTNHN_BENEFITSEQ]
				, [EXTNHN_FILEEXTN]
				, [EXTNHN_SUBTYPERECORD]
				, [EXTNHN_DATE]
				, [EXTNHN_TIME]
				, [EXTNHN_CODERID]
				, [EXTNHN_SEQUENCE]
				, [EXTNHN_VERSIONID])
			SELECT
				TRIM(EXTN.[POLICY_NUMBER])
				, EXTN.[COMPANY_CODE]
				, CAST(UNPIV.STOP_DATE AS DATE)
				, CAST(UNPIV.[START_DATE] AS DATE)
				, UNPIV.[AGENT_PERCENT]
				, UNPIV.[COMMISSION_LEVEL]
				, UNPIV.[NMO_PERCENT]
				, CASE UNPIV.[PRODUCT_TYPE_COMMISSION] WHEN '' THEN 'N' ELSE UNPIV.[PRODUCT_TYPE_COMMISSION] END
				, UNPIV.[UPLINE_PERCENT]
				, TRIM(UNPIV.[BD_AGENT_NUMBER])
				, EXTN.[BENEFIT_SEQ]
				, EXTN.[FILE_EXTENTION]
				, EXTN.[SUB_TYPE_RECORD]
				, EXTN.[DATE]
				, EXTN.[TIME]
				, EXTN.[CODER_ID]
				, EXTN.[SEQUENCE]
				, 0 --version id column does not exist as of 5/5/2022
			FROM	[EDW_DataLake].[lifepro_v].[EXTN_HIERHN_Curr_Vw] AS EXTN
			CROSS APPLY (VALUES	([BROKER_STOP_DATE_1],[BROKER_START_DATE_1],[BROKER_PERCENT_1], [BROKER_COMM_LEVEL_1], [BROKER_PERCENT_N_1], [BD_PRODUCT_TYPE_1], [UPLINE_BD_PERCENT_1], [BROKER_DEALER_1] )
								, ([BROKER_STOP_DATE_2],[BROKER_START_DATE_2], [BROKER_PERCENT_2], [BROKER_COMM_LEVEL_2], [BROKER_PERCENT_N_2], [BD_PRODUCT_TYPE_2], [UPLINE_BD_PERCENT_2], [BROKER_DEALER_2])
								, ([BROKER_STOP_DATE_3],[BROKER_START_DATE_3],[BROKER_PERCENT_3], [BROKER_COMM_LEVEL_3], [BROKER_PERCENT_N_3], [BD_PRODUCT_TYPE_3], [UPLINE_BD_PERCENT_3], [BROKER_DEALER_3])
								, ([BROKER_STOP_DATE_4],[BROKER_START_DATE_4],[BROKER_PERCENT_4], [BROKER_COMM_LEVEL_4], [BROKER_PERCENT_N_4], [BD_PRODUCT_TYPE_4], [UPLINE_BD_PERCENT_4], [BROKER_DEALER_4])
								, ([BROKER_STOP_DATE_5],[BROKER_START_DATE_5],[BROKER_PERCENT_5], [BROKER_COMM_LEVEL_5], [BROKER_PERCENT_N_5], [BD_PRODUCT_TYPE_5], [UPLINE_BD_PERCENT_5], [BROKER_DEALER_5])
								, ([BROKER_STOP_DATE_6],[BROKER_START_DATE_6],[BROKER_PERCENT_6], [BROKER_COMM_LEVEL_6], [BROKER_PERCENT_N_6], [BD_PRODUCT_TYPE_6], [UPLINE_BD_PERCENT_6], [BROKER_DEALER_6])
								, ([BROKER_STOP_DATE_7],[BROKER_START_DATE_7],[BROKER_PERCENT_7], [BROKER_COMM_LEVEL_7], [BROKER_PERCENT_N_7], [BD_PRODUCT_TYPE_7], [UPLINE_BD_PERCENT_7], [BROKER_DEALER_7])
								, ([BROKER_STOP_DATE_8],[BROKER_START_DATE_8],[BROKER_PERCENT_8], [BROKER_COMM_LEVEL_8], [BROKER_PERCENT_N_8], [BD_PRODUCT_TYPE_8], [UPLINE_BD_PERCENT_8], [BROKER_DEALER_8])
								, ([BROKER_STOP_DATE_9],[BROKER_START_DATE_9],[BROKER_PERCENT_9], [BROKER_COMM_LEVEL_9], [BROKER_PERCENT_N_9], [BD_PRODUCT_TYPE_9], [UPLINE_BD_PERCENT_9], [BROKER_DEALER_9])
								, ([BROKER_STOP_DATE_10],[BROKER_START_DATE_10],[BROKER_PERCENT_10], [BROKER_COMM_LEVEL_10], [BROKER_PERCENT_N_10], [BD_PRODUCT_TYPE_10], [UPLINE_BD_PERCENT_10], [BROKER_DEALER_10])
								, ([BROKER_STOP_DATE_11],[BROKER_START_DATE_11],[BROKER_PERCENT_11], [BROKER_COMM_LEVEL_11], [BROKER_PERCENT_N_11], [BD_PRODUCT_TYPE_11], [UPLINE_BD_PERCENT_11], [BROKER_DEALER_10])
								, ([BROKER_STOP_DATE_12],[BROKER_START_DATE_12],[BROKER_PERCENT_12], [BROKER_COMM_LEVEL_12], [BROKER_PERCENT_N_12], [BD_PRODUCT_TYPE_12], [UPLINE_BD_PERCENT_12], [BROKER_DEALER_12])
						) UNPIV ([STOP_DATE],[START_DATE],[AGENT_PERCENT], [COMMISSION_LEVEL], [NMO_PERCENT] , [PRODUCT_TYPE_COMMISSION], [UPLINE_PERCENT], [BD_AGENT_NUMBER])
			WHERE UNPIV.[START_DATE] IS NOT NULL
				AND (
					(EXTN.Row_ID > @STARTVAL_HIERHN
					AND EXTN.Row_ID <= @ENDval_hierhn)
					)
			GROUP BY  TRIM(EXTN.[POLICY_NUMBER] )
				, EXTN.[COMPANY_CODE]
				, UNPIV.STOP_DATE
				, UNPIV.[START_DATE]
				, UNPIV.[AGENT_PERCENT]
				, UNPIV.[COMMISSION_LEVEL]
				, UNPIV.[NMO_PERCENT]
				, UNPIV.[PRODUCT_TYPE_COMMISSION]
				, UNPIV.[UPLINE_PERCENT]
				, UNPIV.[BD_AGENT_NUMBER]
				, EXTN.[BENEFIT_SEQ]
				, EXTN.[FILE_EXTENTION]
				, EXTN.[SUB_TYPE_RECORD]
				, EXTN.[DATE]
				, EXTN.[TIME]
				, EXTN.[CODER_ID]
				, EXTN.[SEQUENCE];
			SELECT @ROWS = @@ROWCOUNT;
			UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
			INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'UplineDetail:Unpivot BD records - changed hierarchy');
			SELECT @LOGID = @@IDENTITY;

			INSERT [work].[tmp_UplineDetail_BD]
				([Agent_Number]
				, [Company_Code]
				, [Stop_Dt]
				, [Start_Dt]
				, [BD_Agent_Percent__c]
				, [BD_Commission_Level__c]
				, [BD_NMO_Percent__c]
				, [BD_Product_Type_Commissions__c]
				, [BD_Upline_Percent__c]
				, [Broker_Dealer_Agent_Number__c]
				, [EXTNHN_BENEFITSEQ]
				, [EXTNHN_FILEEXTN]
				, [EXTNHN_SUBTYPERECORD]
				, [EXTNHN_DATE]
				, [EXTNHN_TIME]
				, [EXTNHN_CODERID]
				, [EXTNHN_SEQUENCE]
				, [EXTNHN_VERSIONID])
			SELECT
				TRIM(EXTN.[POLICY_NUMBER])
				, EXTN.[COMPANY_CODE]
				, CAST(UNPIV.STOP_DATE AS DATE)
				, CAST(UNPIV.[START_DATE] AS DATE)
				, UNPIV.[AGENT_PERCENT]
				, UNPIV.[COMMISSION_LEVEL]
				, UNPIV.[NMO_PERCENT]
				, CASE UNPIV.[PRODUCT_TYPE_COMMISSION] WHEN '' THEN 'N' ELSE UNPIV.[PRODUCT_TYPE_COMMISSION] END
				, UNPIV.[UPLINE_PERCENT]
				, TRIM(UNPIV.[BD_AGENT_NUMBER])
				, EXTN.[BENEFIT_SEQ]
				, EXTN.[FILE_EXTENTION]
				, EXTN.[SUB_TYPE_RECORD]
				, EXTN.[DATE]
				, EXTN.[TIME]
				, EXTN.[CODER_ID]
				, EXTN.[SEQUENCE]
				, 0 --version id column does not exist as of 5/5/2022
			FROM	[EDW_DataLake].[lifepro_v].[EXTN_HIERHN_Curr_Vw] AS EXTN
			CROSS APPLY (VALUES	([BROKER_STOP_DATE_1],[BROKER_START_DATE_1],[BROKER_PERCENT_1], [BROKER_COMM_LEVEL_1], [BROKER_PERCENT_N_1], [BD_PRODUCT_TYPE_1], [UPLINE_BD_PERCENT_1], [BROKER_DEALER_1] )
								, ([BROKER_STOP_DATE_2],[BROKER_START_DATE_2], [BROKER_PERCENT_2], [BROKER_COMM_LEVEL_2], [BROKER_PERCENT_N_2], [BD_PRODUCT_TYPE_2], [UPLINE_BD_PERCENT_2], [BROKER_DEALER_2])
								, ([BROKER_STOP_DATE_3],[BROKER_START_DATE_3],[BROKER_PERCENT_3], [BROKER_COMM_LEVEL_3], [BROKER_PERCENT_N_3], [BD_PRODUCT_TYPE_3], [UPLINE_BD_PERCENT_3], [BROKER_DEALER_3])
								, ([BROKER_STOP_DATE_4],[BROKER_START_DATE_4],[BROKER_PERCENT_4], [BROKER_COMM_LEVEL_4], [BROKER_PERCENT_N_4], [BD_PRODUCT_TYPE_4], [UPLINE_BD_PERCENT_4], [BROKER_DEALER_4])
								, ([BROKER_STOP_DATE_5],[BROKER_START_DATE_5],[BROKER_PERCENT_5], [BROKER_COMM_LEVEL_5], [BROKER_PERCENT_N_5], [BD_PRODUCT_TYPE_5], [UPLINE_BD_PERCENT_5], [BROKER_DEALER_5])
								, ([BROKER_STOP_DATE_6],[BROKER_START_DATE_6],[BROKER_PERCENT_6], [BROKER_COMM_LEVEL_6], [BROKER_PERCENT_N_6], [BD_PRODUCT_TYPE_6], [UPLINE_BD_PERCENT_6], [BROKER_DEALER_6])
								, ([BROKER_STOP_DATE_7],[BROKER_START_DATE_7],[BROKER_PERCENT_7], [BROKER_COMM_LEVEL_7], [BROKER_PERCENT_N_7], [BD_PRODUCT_TYPE_7], [UPLINE_BD_PERCENT_7], [BROKER_DEALER_7])
								, ([BROKER_STOP_DATE_8],[BROKER_START_DATE_8],[BROKER_PERCENT_8], [BROKER_COMM_LEVEL_8], [BROKER_PERCENT_N_8], [BD_PRODUCT_TYPE_8], [UPLINE_BD_PERCENT_8], [BROKER_DEALER_8])
								, ([BROKER_STOP_DATE_9],[BROKER_START_DATE_9],[BROKER_PERCENT_9], [BROKER_COMM_LEVEL_9], [BROKER_PERCENT_N_9], [BD_PRODUCT_TYPE_9], [UPLINE_BD_PERCENT_9], [BROKER_DEALER_9])
								, ([BROKER_STOP_DATE_10],[BROKER_START_DATE_10],[BROKER_PERCENT_10], [BROKER_COMM_LEVEL_10], [BROKER_PERCENT_N_10], [BD_PRODUCT_TYPE_10], [UPLINE_BD_PERCENT_10], [BROKER_DEALER_10])
								, ([BROKER_STOP_DATE_11],[BROKER_START_DATE_11],[BROKER_PERCENT_11], [BROKER_COMM_LEVEL_11], [BROKER_PERCENT_N_11], [BD_PRODUCT_TYPE_11], [UPLINE_BD_PERCENT_11], [BROKER_DEALER_10])
								, ([BROKER_STOP_DATE_12],[BROKER_START_DATE_12],[BROKER_PERCENT_12], [BROKER_COMM_LEVEL_12], [BROKER_PERCENT_N_12], [BD_PRODUCT_TYPE_12], [UPLINE_BD_PERCENT_12], [BROKER_DEALER_12])
						) UNPIV ([STOP_DATE],[START_DATE],[AGENT_PERCENT], [COMMISSION_LEVEL], [NMO_PERCENT] , [PRODUCT_TYPE_COMMISSION], [UPLINE_PERCENT], [BD_AGENT_NUMBER])
			WHERE UNPIV.[START_DATE] IS NOT NULL
				AND EXISTS(SELECT 1 FROM [EDW_DataLake].[lifepro_v].[HIER_Buskey_VW] AS HIER 
							WHERE HIER.[AGENT_NUMBER] = EXTN.[POLICY_NUMBER]
								AND HIER.[COMPANY_CODE] = EXTN.[COMPANY_CODE]
								AND COALESCE(HIER.[STOP_DATE],'12/31/9999') = COALESCE(UNPIV.[STOP_DATE],'12/31/9999')
								AND HIER.[START_DATE]= UNPIV.[START_DATE]
								AND UNPIV.[START_DATE] IS NOT NULL
								AND HIER.[Row_ID] > @STARTVAL_HIER AND HIER.[Row_id] <= @ENDVAL_HIER)
				AND NOT EXISTS (SELECT 1 FROM 	[work].[tmp_UplineDetail_BD] AS dest 
							WHERE dest.[Agent_Number]=TRIM(EXTN.POLICY_NUMBER)
								AND dest.Company_Code = extn.[Company_Code]
								AND dest.[Stop_Dt] = unpiv.STOP_DATE
								AND DEST.Start_Dt = UNPIV.[Start_DAtE])
			GROUP BY  TRIM(EXTN.[POLICY_NUMBER] )
				, EXTN.[COMPANY_CODE]
				, UNPIV.STOP_DATE
				, UNPIV.[START_DATE]
				, UNPIV.[AGENT_PERCENT]
				, UNPIV.[COMMISSION_LEVEL]
				, UNPIV.[NMO_PERCENT]
				, UNPIV.[PRODUCT_TYPE_COMMISSION]
				, UNPIV.[UPLINE_PERCENT]
				, UNPIV.[BD_AGENT_NUMBER]
				, EXTN.[BENEFIT_SEQ]
				, EXTN.[FILE_EXTENTION]
				, EXTN.[SUB_TYPE_RECORD]
				, EXTN.[DATE]
				, EXTN.[TIME]
				, EXTN.[CODER_ID]
				, EXTN.[SEQUENCE];
			SELECT @ROWS = @@ROWCOUNT;
			UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
			END;
		/* END: Populate temporary tables.*/

		/* START: Refresh mapping table*/
		IF (1=1)
			BEGIN;
			INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'UplineDetail:Update matching keys');
			SELECT @LOGID = @@IDENTITY;
			--Update existing records
			UPDATE DEST
			SET	[MODIFIED_DT]				= CURRENT_TIMESTAMP
				, [DELETE_FLAG]				= CASE WHEN HIER.[DXType] = 'D' THEN 1 ELSE 0 END
				, [HIER_STOPDT]				= HIER.[STOP_DATE]
				, [HIER_VERSIONID]			= COALESCE(HIER.[VERSION_ID],0)
				, [EXTNHN_POLICYNUM]		= BD.[Agent_Number]
				, [EXTNHN_BENEFITSEQ]		= BD.[EXTNHN_BENEFITSEQ]
				, [EXTNHN_FILEEXTN]			= BD.[EXTNHN_FILEEXTN]
				, [EXTNHN_SUBTYPERECORD]	= BD.[EXTNHN_SUBTYPERECORD]
				, [EXTNHN_DATE]				= BD.[EXTNHN_DATE]
				, [EXTNHN_TIME]				= BD.[EXTNHN_TIME]
				, [EXTNHN_CODERID]			= BD.[EXTNHN_CODERID]
				, [EXTNHN_SEQUENCE]			= BD.[EXTNHN_SEQUENCE]
				, [EXTNHN_VERSIONID]		= COALESCE(BD.[EXTNHN_VERSIONID],0)
			FROM [salesforce].[mapping_Upline_Detail] AS DEST 
				INNER JOIN [EDW_DataLake].[lifepro_v].[HIER_BusKey_vw] AS HIER ON
					HIER.[COMPANY_CODE]			= DEST.[HIER_COMPANYCODE]
					AND HIER.[AGENT_NUMBER]		= DEST.[HIER_AGENTNUMBER]
					AND HIER.[MARKETING_CODE]	= DEST.[HIER_MARKETINGCODE]
					AND HIER.[AGENT_LEVEL]		= DEST.[HIER_AGENTLEVEL]
					AND HIER.[START_DATE]		= DEST.[HIER_STARTDT]
					AND COALESCE(HIER.[STOP_DATE],'12/31/9999') = COALESCE(DEST.[HIER_STOPDT],'12/31/9999')
				LEFT OUTER JOIN [work].[tmp_UplineDetail_BD] AS BD ON
					BD.[Agent_Number] = DEST.[HIER_AGENTNUMBER]
					AND BD.[Company_Code] = DEST.[HIER_COMPANYCODE]
					AND COALESCE(HIER.[STOP_DATE],'12/31/9999') = COALESCE(BD.[Stop_Dt],'12/31/9999')
					AND HIER.[START_DATE] = BD.[Start_Dt]
			WHERE HIER.[ROW_ID] > @STARTVAL_HIER
				AND HIER.[row_id] <= @ENDVAL_HIER;
			SELECT @ROWS = @@ROWCOUNT;
			UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
			
			INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'UplineDetail:Update changed keys');
			SELECT @LOGID = @@IDENTITY;
			--Update records that had stop date change
			;WITH CHANGEDKEYS AS
				(SELECT  DEST.ID
					, CASE WHEN HIER.[DXType] = 'D' THEN 1 ELSE 0 END AS DELETE_FLAG
					, HIER.[STOP_DATE]
					, COALESCE(HIER.[VERSION_ID],0) AS HIER_VERSIONID
					, BD.[Agent_Number]
					, BD.[EXTNHN_BENEFITSEQ]
					, BD.[EXTNHN_FILEEXTN]
					, BD.[EXTNHN_SUBTYPERECORD]
					, BD.[EXTNHN_DATE]
					, BD.[EXTNHN_TIME]
					, BD.[EXTNHN_CODERID]
					, BD.[EXTNHN_SEQUENCE]
					, COALESCE(BD.[EXTNHN_VERSIONID],0) AS EXTNHN_VERSIONID
				FROM [salesforce].[mapping_Upline_Detail] AS DEST 
				INNER JOIN [EDW_DataLake].[lifepro_v].[HIER_BusKey_vw] AS HIER ON
					HIER.[COMPANY_CODE]			= DEST.[HIER_COMPANYCODE]
					AND HIER.[AGENT_NUMBER]		= DEST.[HIER_AGENTNUMBER]
					AND HIER.[MARKETING_CODE]	= DEST.[HIER_MARKETINGCODE]
					AND HIER.[AGENT_LEVEL]		= DEST.[HIER_AGENTLEVEL]
					AND HIER.[START_DATE]		= DEST.[HIER_STARTDT]
					AND HIER.[STOP_DATE] IS NOT NULL 
					AND DEST.[HIER_STOPDT] IS NULL
				LEFT OUTER JOIN [work].[tmp_UplineDetail_BD] AS BD ON
					BD.[Agent_Number] = DEST.[HIER_AGENTNUMBER]
					AND BD.[Company_Code] = DEST.[HIER_COMPANYCODE]
					AND COALESCE(HIER.[STOP_DATE],'12/31/9999') = COALESCE(BD.[Stop_Dt],'12/31/9999')
					AND HIER.[START_DATE] = BD.[Start_Dt]
				WHERE NOT EXISTS(SELECT 1 FROM [salesforce].[mapping_Upline_Detail] AS MPG WHERE 
								HIER.[COMPANY_CODE]			= mpg.[HIER_COMPANYCODE]
								AND HIER.[AGENT_NUMBER]		= mpg.[HIER_AGENTNUMBER]
								AND HIER.[MARKETING_CODE]	= mpg.[HIER_MARKETINGCODE]
								AND HIER.[AGENT_LEVEL]		= mpg.[HIER_AGENTLEVEL]
								AND HIER.[START_DATE]		= mpg.[HIER_STARTDT]
								AND COALESCE(HIER.[STOP_DATE],'12/31/9999') = COALESCE(mpg.[HIER_STOPDT],'12/31/9999')
								)
					AND HIER.[ROW_ID] > @STARTVAL_HIER
					AND HIER.[row_id] <= @ENDVAL_HIER
				)
			UPDATE MAPPING
			SET		[MODIFIED_DT]				= CURRENT_TIMESTAMP
					, [DELETE_FLAG]				= CHANGEDKEYS.[DELETE_FLAG]
					, [HIER_STOPDT]				= CHANGEDKEYS.[STOP_DATE]
					, [HIER_VERSIONID]			= CHANGEDKEYS.HIER_VERSIONID
					, [EXTNHN_POLICYNUM]		= CHANGEDKEYS.Agent_Number
					, [EXTNHN_BENEFITSEQ]		= CHANGEDKEYS.[EXTNHN_BENEFITSEQ]
					, [EXTNHN_FILEEXTN]			= CHANGEDKEYS.[EXTNHN_FILEEXTN]
					, [EXTNHN_SUBTYPERECORD]	= CHANGEDKEYS.EXTNHN_SUBTYPERECORD
					, [EXTNHN_DATE]				= CHANGEDKEYS.EXTNHN_DATE
					, [EXTNHN_TIME]				= CHANGEDKEYS.[EXTNHN_TIME]
					, [EXTNHN_CODERID]			= CHANGEDKEYS.[EXTNHN_CODERID]
					, [EXTNHN_SEQUENCE]			= CHANGEDKEYS.[EXTNHN_SEQUENCE]
					, [EXTNHN_VERSIONID]		= CHANGEDKEYS.EXTNHN_VERSIONID
			FROM [salesforce].[mapping_Upline_Detail] AS MAPPING
				INNER JOIN CHANGEDKEYS ON 
					CHANGEDKEYS.[id] = MAPPING.ID;
			SELECT @ROWS = @@ROWCOUNT;
			UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
			INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'UplineDetail:Insert Mappings');
			SELECT @LOGID = @@IDENTITY;
			INSERT [salesforce].[mapping_Upline_Detail]
				([CREATED_DT]
				, [DELETE_FLAG]
				, [HIER_COMPANYCODE]
				, [HIER_AGENTNUMBER]
				, [HIER_MARKETINGCODE]
				, [HIER_AGENTLEVEL]
				, [HIER_STOPDT]
				, [HIER_STARTDT]
				, [HIER_VERSIONID]
				, [EXTNHN_POLICYNUM]
				, [EXTNHN_BENEFITSEQ]
				, [EXTNHN_FILEEXTN]
				, [EXTNHN_SUBTYPERECORD]
				, [EXTNHN_DATE]
				, [EXTNHN_TIME]
				, [EXTNHN_CODERID]
				, [EXTNHN_SEQUENCE]
				, [EXTNHN_VERSIONID])
			SELECT CURRENT_TIMESTAMP
				, CASE WHEN HIER.[DXType] = 'D' THEN 1 ELSE 0 END
				, HIER.[COMPANY_CODE]
				, TRIM(HIER.[AGENT_NUMBER])
				, HIER.[MARKETING_CODE]
				, HIER.[AGENT_LEVEL]
				, HIER.[STOP_DATE]
				, HIER.[START_DATE]
				, COALESCE(HIER.[VERSION_ID],0)
				, BD.[Agent_Number]
				, BD.[EXTNHN_BENEFITSEQ]
				, BD.[EXTNHN_FILEEXTN]
				, BD.[EXTNHN_SUBTYPERECORD]
				, BD.[EXTNHN_DATE]
				, BD.[EXTNHN_TIME]
				, BD.[EXTNHN_CODERID]
				, BD.[EXTNHN_SEQUENCE]
				, COALESCE(BD.[EXTNHN_VERSIONID],0)
			FROM [EDW_DataLake].[lifepro_v].[HIER_BusKey_vw] AS HIER
				LEFT OUTER JOIN [work].[tmp_UplineDetail_BD] AS BD ON
					BD.[Agent_Number] = TRIM(HIER.[AGENT_NUMBER])
					AND BD.[Company_Code] = HIER.[COMPANY_CODE]
					AND COALESCE(HIER.[STOP_DATE],'12/31/9999') = COALESCE(BD.[Stop_Dt],'12/31/9999')
					AND BD.[Start_Dt] = HIER.[START_DATE]
			WHERE NOT EXISTS(SELECT 1 FROM [salesforce].[mapping_Upline_Detail] AS DEST WHERE 
							HIER.[COMPANY_CODE]			= DEST.[HIER_COMPANYCODE]
						AND HIER.[AGENT_NUMBER]		= DEST.[HIER_AGENTNUMBER]
						AND HIER.[MARKETING_CODE]	= DEST.[HIER_MARKETINGCODE]
						AND HIER.[AGENT_LEVEL]		= DEST.[HIER_AGENTLEVEL]
						AND HIER.[START_DATE]		= DEST.[HIER_STARTDT]
						AND COALESCE(HIER.[STOP_DATE],'12/31/9999') = COALESCE(DEST.[HIER_STOPDT],'12/31/9999'))
					AND HIER.[ROW_ID] > @STARTVAL_HIER
					AND HIER.[row_id] <= @ENDVAL_HIER;
			SELECT @ROWS = @@ROWCOUNT;
			UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
			END; 
		/* END: Refresh mapping table*/

		/* START: Populate staging table.*/
		IF (1=1)
			BEGIN;
			INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'UplineDetail:Update staging');
			SELECT @LOGID = @@IDENTITY;
			UPDATE DEST
			SET	[Version_Id__c]							= MPG.[VERSION_ID]
				, [Delete_Flag]							= MPG.[DELETE_FLAG]
				, [Modified_Dt]							= CURRENT_TIMESTAMP
				, [Agent_Level__c]						= MPG.[HIER_AGENTLEVEL]
				, [BD_Agent_Percent__c]					= BD.[BD_Agent_Percent__c]
				, [Agent_Number__c]						= AGNT.[ID]
				, [BD_Commission_Level__c]				= BD.[BD_Commission_Level__c]
				, [BD_NMO_Percent__c]					= BD.[BD_NMO_Percent__c]
				, [BD_Product_Type_Commissions__c]		= COALESCE(BD.[BD_Product_Type_Commissions__c],'N')
				, [Region__c]							= HIER.[REGION_CODE]
				, [Start_Date__c]						= CAST(HIER.[START_DATE] AS DATE)
				, [Stop_Date__c]						= CAST(HIER.[STOP_DATE] AS DATE)
				, [BD_Upline_Percent__c]				= BD.[BD_Upline_Percent__c]
				, [Upline__c]							= UPLINE.[ID]
				, [Signing_Agent__c]					= SA.[ID]
				, [Upline_Level__c]						= HIER.[HIERARCHY_AGENT_LEVEL]
				, [Company_Code__c]						= MPG.[HIER_COMPANYCODE]
				, [Broker_Dealer_Agent_Number__c]		= BDAGNT.[ID]
			FROM [salesforce].[Upline_Detail] AS DEST 
				INNER JOIN [salesforce].[mapping_Upline_Detail] AS MPG ON
					MPG.[ID] = DEST.[External_Id__c]
				INNER JOIN [EDW_DataLake].[lifepro_v].[HIER_BusKey_vw] AS HIER ON
					HIER.[COMPANY_CODE]			= MPG.[HIER_COMPANYCODE]
					AND HIER.[AGENT_NUMBER]		= MPG.[HIER_AGENTNUMBER]
					AND HIER.[MARKETING_CODE]	= MPG.[HIER_MARKETINGCODE]
					AND HIER.[AGENT_LEVEL]		= MPG.[HIER_AGENTLEVEL]
					AND HIER.[START_DATE]		= MPG.[HIER_STARTDT]
					AND COALESCE(HIER.[STOP_DATE],'12/31/9999') = COALESCE(MPG.[HIER_STOPDT],'12/31/9999')
				INNER JOIN [salesforce].[LOOKUP_PRODUCER] AS AGNT ON
					AGNT.[NAME] = MPG.[HIER_AGENTNUMBER]
					AND AGNT.[COMPANY_CODE__C] = MPG.[HIER_COMPANYCODE]
				LEFT OUTER JOIN [work].[tmp_UplineDetail_BD] AS BD ON
					BD.[Agent_Number] = TRIM(HIER.[AGENT_NUMBER])
					AND BD.[Company_Code] = HIER.[COMPANY_CODE]
					AND COALESCE(HIER.[STOP_DATE],'12/31/9999') = COALESCE(BD.[Stop_Dt],'12/31/9999')
					AND BD.[Start_Dt] = HIER.[START_DATE]
				LEFT OUTER JOIN [salesforce].[LOOKUP_PRODUCER] AS UPLINE ON
					UPLINE.[NAME] = HIER.[HIERARCHY_AGENT]
					AND UPLINE.[COMPANY_CODE__C] = HIER.[COMPANY_CODE]
				LEFT OUTER JOIN [salesforce].[LOOKUP_PRODUCER] AS SA ON
					SA.[NAME] = HIER.[SA_AGENT]
					AND SA.[COMPANY_CODE__C] = HIER.[COMPANY_CODE]
				LEFT OUTER JOIN [salesforce].[LOOKUP_PRODUCER] AS BDAGNT ON
					BDAGNT.[NAME] = BD.[Broker_Dealer_Agent_Number__c]
					AND BDAGNT.[COMPANY_CODE__C] = BD.[Company_Code]
			WHERE (MPG.[VERSION_ID]>=[SALESFORCE_DT] 
				OR [SALESFORCE_DT] IS NULL)
				AND HIER.[ROW_ID]> @STARTVAL_HIER
				AND HIER.[ROW_ID]<=@ENDVAL_HIER;
			SELECT @ROWS = @@ROWCOUNT;
			UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;

			INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'UplineDetail:Insert staging');
			SELECT @LOGID = @@IDENTITY;
			--Insert all delta records into the staging table	
			INSERT [salesforce].[Upline_Detail]
				([External_Id__c]
				, [Version_Id__c]
				, [Salesforce_Id]
				, [Delete_Flag]
				, [Created_Dt]
				, [Agent_Level__c]
				, [BD_Agent_Percent__c]
				, [Agent_Number__c]
				, [BD_Commission_Level__c]
				, [BD_NMO_Percent__c]
				, [BD_Product_Type_Commissions__c]
				, [Region__c]
				, [Start_Date__c]
				, [Stop_Date__c]
				, [BD_Upline_Percent__c]
				, [Upline__c]
				, [Signing_Agent__c]
				, [Upline_Level__c]
				, [Company_Code__c]
				, [Broker_Dealer_Agent_Number__c]
				)
			SELECT MPG.[ID] 
				, [Version_Id__c]							= MPG.[VERSION_ID]
				, [Salesforce_id]						= MPG.[SALESFORCE_ID]
				, [Delete_Flag]							= MPG.[DELETE_FLAG]
				, [CREATED_Dt]							= CURRENT_TIMESTAMP
				, [Agent_Level__c]						= MPG.[HIER_AGENTLEVEL]
				, [BD_Agent_Percent__c]					= BD.[BD_Agent_Percent__c]
				, [Agent_Number__c]						= AGNT.[ID]
				, [BD_Commission_Level__c]				= BD.[BD_Commission_Level__c]
				, [BD_NMO_Percent__c]					= BD.[BD_NMO_Percent__c]
				, [BD_Product_Type_Commissions__c]		= COALESCE(BD.[BD_Product_Type_Commissions__c],'N')
				, [Region__c]							= HIER.[REGION_CODE]
				, [Start_Date__c]						= CAST(HIER.[START_DATE] AS DATE)
				, [Stop_Date__c]						= CAST([STOP_DATE] AS DATE)
				, [BD_Upline_Percent__c]				= BD.[BD_Upline_Percent__c]
				, [Upline__c]							= UPLINE.[ID]
				, [Signing_Agent__c]					= SA.[ID]
				, [Upline_Level__c]						= HIER.[HIERARCHY_AGENT_LEVEL]
				, [Company_Code__c]						= MPG.[HIER_COMPANYCODE]
				, [Broker_Dealer_Agent_Number__c]		= BDAGNT.[ID]
			FROM [salesforce].[mapping_Upline_Detail] AS MPG 
				INNER JOIN [EDW_DataLake].[lifepro_v].[HIER_BusKey_vw] AS HIER ON
					HIER.[COMPANY_CODE]			= MPG.[HIER_COMPANYCODE]
					AND HIER.[AGENT_NUMBER]		= MPG.[HIER_AGENTNUMBER]
					AND HIER.[MARKETING_CODE]	= MPG.[HIER_MARKETINGCODE]
					AND HIER.[AGENT_LEVEL]		= MPG.[HIER_AGENTLEVEL]
					AND HIER.[START_DATE]		= MPG.[HIER_STARTDT]
					AND COALESCE(HIER.[STOP_DATE],'12/31/9999') = COALESCE(MPG.[HIER_STOPDT],'12/31/9999')
				INNER JOIN [salesforce].[LOOKUP_PRODUCER] AS AGNT ON
					AGNT.[NAME] = MPG.[HIER_AGENTNUMBER]
					AND AGNT.[COMPANY_CODE__C] = MPG.[HIER_COMPANYCODE]
				LEFT OUTER JOIN [work].[tmp_UplineDetail_BD] AS BD ON
					BD.[Agent_Number] = TRIM(HIER.[AGENT_NUMBER])
					AND BD.[Company_Code] = HIER.[COMPANY_CODE]
					AND COALESCE(HIER.[STOP_DATE],'12/31/9999') = COALESCE(BD.[Stop_Dt],'12/31/9999')
					AND BD.[Start_Dt] = HIER.[START_DATE]
				LEFT OUTER JOIN [salesforce].[LOOKUP_PRODUCER] AS UPLINE ON
					UPLINE.[NAME] = HIER.[HIERARCHY_AGENT]
					AND UPLINE.[COMPANY_CODE__C] = HIER.[COMPANY_CODE]
				LEFT OUTER JOIN [salesforce].[LOOKUP_PRODUCER] AS SA ON
					SA.[NAME] = HIER.[SA_AGENT]
					AND SA.[COMPANY_CODE__C] = HIER.[COMPANY_CODE]
				LEFT OUTER JOIN [salesforce].[LOOKUP_PRODUCER] AS BDAGNT ON
					BDAGNT.[NAME] = BD.[Broker_Dealer_Agent_Number__c]
					AND BDAGNT.[COMPANY_CODE__C] = BD.[Company_Code]
			WHERE (MPG.[VERSION_ID]>=[SALESFORCE_DT] 
					OR MPG.[SALESFORCE_DT] IS NULL)
				AND NOT EXISTS (SELECT 1 FROM [salesforce].[Upline_Detail] AS DEST WHERE DEST.[EXTERNAL_ID__C] = MPG.[ID])
				AND HIER.[ROW_ID]> @STARTVAL_HIER
				AND HIER.[ROW_ID]<=@ENDVAL_HIER;
			
			SELECT @ROWS = @@ROWCOUNT;
			UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
			END; 
		/* END: Populate staging table.*/
		/* START: Add error handling */
		IF (1=1)
			BEGIN;
			INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'UplineDetail:Reject invalid records');
			SELECT @LOGID = @@IDENTITY;
			;WITH INVALID_DATES AS
				(SELECT [Reject_Flag]
					, [Reject_Dt]
					, [Reject_Reason]
				FROM [salesforce].[Upline_Detail]
				WHERE	[Start_Date__c]> '12/31/4000' 
					OR	[Start_Date__c] < '1/1/1700'
					OR	([Stop_date__c] IS NOT NULL AND [Stop_Date__c] > '12/31/4000' )
					OR	([Stop_date__c] IS NOT NULL AND [Stop_Date__c] < '1/1/1700')
				)
			UPDATE INVALID_DATES
			SET [Reject_Flag] = 2
				, [Reject_Dt] = CURRENT_TIMESTAMP	
				, [Reject_Reason] = 'Invalid start or stop date.'

			SELECT @ROWS = @@ROWCOUNT;
			UPDATE [EDW_Audit].[dbo].[Process_Log] SET Stop_Dt= CURRENT_TIMESTAMP, Row_Count= @ROWS WHERE Row_ID = @LOGID;
			END;
		/* END: Add error handling  */
		/* START: Update delta settings.*/
		IF (1=1)
			BEGIN;
			UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value =@ENDVAL_HIER  WHERE Setting_Name = @SETTING_HIER  AND Setting_Module = @SETTING_MODULE;
			UPDATE [EDW_Audit].[dbo].[Delta_Settings] SET Setting_Value =@ENDVAL_HIERHN  WHERE Setting_Name = @SETTING_HIERHN  AND Setting_Module = @SETTING_MODULE;
			END;
		/* END: Update delta settings.*/
		END;
	END;
--Logging
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;   
END TRY
BEGIN CATCH

DECLARE @ERROR_MSG          NVARCHAR(2000);
DECLARE @ERROR_SEVERITY     INT;
DECLARE @ERROR_STATE        INT;
 
SET @ERROR_MSG              = ERROR_MESSAGE();
SET @ERROR_SEVERITY         = ERROR_SEVERITY();
SET @ERROR_STATE            = ERROR_STATE();
--Logging
INSERT [EDW_Audit].[dbo].[Process_Log] (Process_ID, Start_Dt, Stop_Dt, Step_Description) VALUES (@@PROCID, CURRENT_TIMESTAMP,NULL,'UplineDetail:Err ' + LEFT(COALESCE(@ERROR_MSG,''),1450));
UPDATE	[EDW_Audit].[dbo].[Process_Log] SET [Stop_Dt] = CURRENT_TIMESTAMP WHERE [Row_ID] = @LOGID_START;

RAISERROR(@ERROR_MSG, @ERROR_SEVERITY, @ERROR_STATE);

END CATCH;

END;

  

GO

